/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 23:46:49 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.StringReader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7140673679279583
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      AllFilter allFilter0 = new AllFilter();
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[4] = (-1.5076560575578393);
      doubleArray1[4] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (-1.5076560575578393);
      doubleArray2[3] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 0;
      double[] doubleArray4 = new double[6];
      doubleArray1[4] = (-1.5076560575578393);
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray0[2];
      double[] doubleArray5 = new double[18];
      doubleArray5[1] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (double) 0;
      doubleArray0[5] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@<=5zOSeyO{HH)?:JB";
      Filter.runFilter(discretize0, stringArray0);
      doubleArray1[4] = 0.0;
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      
      discretize0.getCutPoints(0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.44358964168773
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      Instances instances0 = new Instances("-uQum>", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        instances0.lastInstance();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0627299875428027
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("{;;rykte=Z43X=b");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      arrayList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate.isEqual((Object) "@attribute");
      Predicate<Object> predicate6 = predicate5.or(predicate0);
      Predicate<Object> predicate7 = predicate3.negate();
      predicate5.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate8.or(predicate3);
      predicate8.or(predicate4);
      predicate9.negate();
      Predicate.isEqual((Object) predicate5);
      predicate7.negate();
      DenseInstance denseInstance0 = new DenseInstance(1);
      SystemInUtil.addInputLine("$/X3>p#)TW");
      discretize0.output();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      discretize0.input(denseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.381818103817425
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9850475791079365
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("-uum>", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      discretize0.findNumBins(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "A4dFSPL^f");
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.negate();
      predicate1.or(predicate3);
      predicate1.negate();
      Predicate.isEqual((Object) "-uum>");
      predicate2.negate();
      Attribute attribute1 = new Attribute("@end", 2);
      discretize1.batchFinished();
      // Undeclared exception!
      try { 
        discretize1.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4085629911702506
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(".tq~.<T|y2$i");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("-Euum>", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = (-2067947214);
      intArray0[2] = (-2034458190);
      intArray0[3] = 3;
      intArray0[4] = 0;
      intArray0[5] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-901.0), intArray0, 12);
      discretize0.input(binarySparseInstance0);
      discretize0.convertInstance(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "integer";
      stringArray0[1] = "relational";
      stringArray0[2] = ".tq~.<T|y2$i";
      stringArray0[3] = "-Euum>";
      stringArray0[4] = "integer";
      stringArray0[5] = ".tq~.<T|y2$i";
      stringArray0[6] = ".arff";
      stringArray0[7] = "numeric";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4904032277870636
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      arrayList0.add(attribute0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("cK4");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("Zx;9Xua#+o}<5BTk;<", arrayList0, 4);
      discretize0.setInputFormat(instances0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      Discretize discretize1 = new Discretize();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-2004318069);
      intArray0[3] = 1;
      intArray0[4] = 3;
      intArray0[5] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 1);
      DenseInstance denseInstance0 = new DenseInstance(5);
      denseInstance0.mergeInstance(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.03597300828691
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("-uum>", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.findNumBins(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter.makeCopy(discretize0);
      Discretize discretize1 = new Discretize();
      Predicate.isEqual((Object) discretize1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Discretize discretize2 = new Discretize();
      Discretize discretize3 = new Discretize("Make resulting attributes binary.");
      Range range0 = discretize3.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for range
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.061052348775956
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("@end", arrayList0, 1);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      discretize0.batchFinished();
      arrayList0.iterator();
      discretize0.findNumBins(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate.isEqual((Object) "@attribute");
      Predicate<Object> predicate6 = predicate2.negate();
      predicate5.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate8 = predicate7.or(predicate3);
      Predicate<Object> predicate9 = predicate7.or(predicate4);
      predicate9.negate();
      predicate8.negate();
      predicate1.and(predicate9);
      Predicate.isEqual((Object) predicate4);
      predicate6.negate();
      Attribute attribute1 = new Attribute("D+}hI_eNKyZyHNB", 21);
      Discretize discretize2 = new Discretize();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize1.calculateCutPoints();
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.428715181307695
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      String string0 = "-uum>";
      Instances instances0 = new Instances("-uum>", arrayList0, 1);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'bao\"Q,}:kA6+V_]Fmp' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.075216733079383
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("-uum>", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "date";
      stringArray0[1] = ".arff";
      stringArray0[2] = "relational";
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Discretize discretize1 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.091939703917201
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(".tq~.<T|y2$i");
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("_/AO9LQ|~#Y^w", arrayList1, 1348);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-0.1), (int[]) null, 496);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0113826939202277
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("-uum>", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "date";
      Filter.runFilter(discretize0, stringArray0);
      String string0 = discretize0.getBinRangesString(0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("All", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6145235356985044
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = "bao\"Q,}:kA6+V_]Fmp";
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("-uum>", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 350;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      discretize0.setAttributeIndicesArray(intArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.134958470979149
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("X%5|^4.oG(");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("-uum>", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[4];
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      discretize1.input(sparseInstance0);
      stringArray0[1] = "relational";
      stringArray0[2] = "integer";
      stringArray0[3] = "string";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      System.setCurrentTimeMillis(1);
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, (-1));
      discretize1.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.971558425985957
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("{;;rykte=Z43X=b");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      arrayList0.iterator();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1932735280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1932735280
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1110597876860653
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      arrayList0.iterator();
      discretize0.findNumBins(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter.makeCopy(discretize0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate.isEqual((Object) "@attribute");
      Predicate<Object> predicate6 = predicate2.negate();
      predicate5.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate8 = predicate7.or(predicate3);
      predicate7.or(predicate4);
      predicate8.negate();
      Predicate.isEqual((Object) predicate4);
      predicate6.negate();
      DenseInstance denseInstance0 = new DenseInstance(70);
      discretize0.input(denseInstance0);
      boolean boolean0 = discretize0.batchFinished();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(boolean0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.000546651566574
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Attribute attribute1 = new Attribute("_");
      arrayList0.add(attribute1);
      Discretize discretize1 = new Discretize();
      Instances instances0 = new Instances("string", arrayList0, 2);
      discretize1.setInputFormat(instances0);
      discretize1.batchFinished();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Discretize discretize2 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualFrequencyBinning(1016);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1016
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0687328541069125
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("-uum>", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      Discretize discretize1 = new Discretize();
      Filter.makeCopy(discretize1);
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize0, stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("real");
      Instances instances0 = new Instances("-<um>", arrayList0, 1);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at real
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) "9ZSxv4`*4GEgR");
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = predicate4.and(predicate2);
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      predicate5.negate();
      Predicate<Object> predicate9 = predicate1.and(predicate0);
      Predicate<Object> predicate10 = predicate9.negate();
      Object object1 = new Object();
      Predicate<Object> predicate11 = Predicate.isEqual(object1);
      predicate1.or(predicate5);
      Predicate<Object> predicate12 = predicate4.and(predicate7);
      predicate2.test(object0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Predicate.isEqual((Object) predicate8);
      predicate11.test(object1);
      predicate4.or(predicate0);
      predicate2.or(predicate3);
      predicate8.or(predicate10);
      predicate12.negate();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      predicate14.negate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9ZSxv4`*4GEgR");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.710283334414665
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(4);
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      discretize0.attributeIndicesTipText();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      AllFilter allFilter0 = new AllFilter();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 12;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 12;
      doubleArray2[1] = (double) 12;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 12;
      doubleArray3[1] = (double) 12;
      doubleArray3[2] = (-4130.61278);
      doubleArray3[3] = (-2174.4881104150595);
      doubleArray3[4] = (double) 12;
      doubleArray3[5] = (double) 12;
      doubleArray3[6] = (double) 12;
      doubleArray3[7] = (double) 12;
      doubleArray3[8] = (double) 12;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(89);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 89
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.toString();
      discretize0.setUseEqualFrequency(true);
      discretize0.getBinRangesString(648);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      int[] intArray0 = new int[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      intArray0[0] = 648;
      intArray0[1] = 648;
      intArray0[2] = 648;
      intArray0[3] = 648;
      intArray0[4] = 648;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.makeBinaryTipText();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 648;
      discretize0.getBins();
      discretize0.invertSelectionTipText();
      SystemInUtil.addInputLine("Unable to create repository cache directory (");
      discretize0.getUseEqualFrequency();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(648);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3069395169874642
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Discretize discretize0 = new Discretize("9ZSxv4`*4GEgR");
      boolean boolean0 = true;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "9ZSxv4`*4GEgR";
      discretize0.setFindNumBins(true);
      stringArray0[1] = "9ZSxv4`*4GEgR";
      stringArray0[2] = "9ZSxv4`*4GEgR";
      discretize0.setOptions(stringArray0);
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      discretize0.attributeIndicesTipText();
      int int0 = 515;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = false;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attribute attribute0 = new Attribute("", "");
      Attribute attribute1 = new Attribute("integer");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute1.addStringValue(attribute0, (-895));
      arrayList0.add(attribute1);
      arrayList0.add(attribute0);
      Attribute attribute2 = attribute1.copy("@attribute");
      arrayList0.add(attribute1);
      Attribute attribute3 = new Attribute("numeric");
      attribute2.addStringValue(attribute3, 2);
      attribute2.value(1);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals(4, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("-uum>", arrayList0, 1);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      discretize0.m_UseBinNumbers = true;
      discretize0.getUseBinNumbers();
      discretize0.getRevision();
      System.setCurrentTimeMillis((-1029L));
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1965);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(0);
      discretize0.setFindNumBins(true);
      discretize0.setFindNumBins(true);
      discretize0.getBins();
      discretize0.getBins();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize(".");
      double[][] doubleArray0 = new double[0][2];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(3336);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3336
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(0);
      discretize0.setFindNumBins(true);
      discretize0.setUseBinNumbers(false);
      discretize0.getBins();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setOutputFormat();
      assertTrue(discretize0.getFindNumBins());
      assertEquals(0, discretize0.getBins());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SparseInstance sparseInstance0 = new SparseInstance(3194);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(86);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      discretize0.getUseEqualFrequency();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance1 = new SparseInstance(0.0, doubleArray0, intArray0, 86);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        binarySparseInstance0.insertAttributeAt(3194);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't insert attribute: index out of range
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("\tInvert matching sense of column indexes.");
      SystemInUtil.addInputLine("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n8{wwr(:U}pyZmUR3;f]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tUse equal-frequency instead of equal-width discretization.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-399.856796);
      doubleArray1[2] = 271.6005763948036;
      doubleArray1[3] = 5.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1273.6206381405889;
      doubleArray2[1] = (-399.856796);
      doubleArray2[2] = 271.6005763948036;
      doubleArray2[3] = 271.6005763948036;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 271.6005763948036;
      doubleArray2[7] = 5.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 271.6005763948036;
      doubleArray3[1] = 5.5;
      doubleArray3[2] = 1273.6206381405889;
      doubleArray3[3] = (-399.856796);
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = (-399.856796);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-399.856796);
      doubleArray5[1] = 1273.6206381405889;
      doubleArray5[2] = (-399.856796);
      doubleArray5[3] = 5.5;
      doubleArray5[4] = (-399.856796);
      doubleArray5[5] = 5.5;
      doubleArray5[6] = 271.6005763948036;
      doubleArray5[7] = 1273.6206381405889;
      doubleArray5[8] = 271.6005763948036;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-399.856796);
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      Discretize discretize0 = new Discretize();
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "KV#Q\u0000bp'.2OTTg-";
      stringArray0[2] = "KV#Q\u0000bp'.2OTTg-";
      stringArray0[3] = "KV#Q\u0000bp'.2OTTg-";
      stringArray0[4] = "B9A";
      stringArray0[5] = "X`DGDb@/g%L=$LT";
      stringArray0[6] = "B9A";
      stringArray0[7] = "B9A";
      stringArray0[8] = "KV#Q\u0000bp'.2OTTg-";
      Filter.runFilter(filter0, stringArray0);
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.setDesiredWeightOfInstancesPerInterval(1.0);
      discretize0.getCutPoints((-2));
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.714011200211496
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
      
      Discretize discretize1 = new Discretize("first-last");
      Discretize discretize2 = new Discretize("first-last");
      boolean boolean0 = discretize2.getFindNumBins();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.520845112745859
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("\tInvert matching sense of column indexes.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n8{wwr(:U}pyZmUR3;f]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize("VO;6 Ek");
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1860.71821652692);
      doubleArray2[4] = (-2382.9915652);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-2382.9915652);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-1860.71821652692);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 2.0;
      doubleArray5[2] = 2.0;
      doubleArray5[3] = (-2382.9915652);
      doubleArray5[4] = 2.0;
      doubleArray5[5] = (-1.0);
      doubleArray5[6] = (-1.0);
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-2382.9915652);
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = 0.0;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getInvertSelection();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1370466234504795
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][2];
      SystemInUtil.addInputLine(".");
      SystemInUtil.addInputLine(".");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.m_CutPoints = doubleArray0;
      Discretize discretize1 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      discretize1.setOptions(stringArray0);
      assertFalse(discretize1.getFindNumBins());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      assertEquals(6, stringArray0.length);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseEqualFrequency());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize("-");
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      String[] stringArray0 = new String[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      stringArray0[0] = "-";
      stringArray0[1] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      int int0 = 1293;
      Filter.makeCopies(discretize0, 1293);
      stringArray0[2] = "-";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine(".");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd'T'HE:mm:ss");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("A4dFSPL^f");
      discretize0.m_NumBins = (-2100799218);
      int int0 = discretize0.getBins();
      assertEquals((-2100799218), int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("\tInvert matching sense of column indexes.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n8{wwr(:U}pyZmUR3;f]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2457);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8221303550794707
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("\tInvert matching sense of column indexes.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n8{wwr(:U}pyZmUR3;f]");
      Discretize discretize0 = new Discretize("15N6\"sQ}3G?:?1ek");
      String[] stringArray0 = new String[7];
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      intArray0[1] = 2102;
      discretize0.setAttributeIndicesArray(intArray0);
      stringArray0[0] = "15N6\"sQ}3G?:?1ek";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "\tInvert matching sense of column indexes.";
      stringArray0[2] = "";
      stringArray0[3] = "\tInvert matching sense of column indexes.";
      stringArray0[4] = "n8{wwr(:U}pyZmUR3;f]";
      discretize0.m_FindNumBins = true;
      stringArray0[5] = "\tInvert matching sense of column indexes.";
      stringArray0[6] = "n8{wwr(:U}pyZmUR3;f]";
      Filter.runFilter(discretize0, stringArray0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Discretize discretize0 = new Discretize(".");
      SystemInUtil.addInputLine(".");
      SystemInUtil.addInputLine(".");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setOutputFormat();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SystemInUtil.addInputLine((String) null);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][2];
      SystemInUtil.addInputLine(".");
      SystemInUtil.addInputLine(".");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize("relational");
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis(31L);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("bao\"Q,}:kA6+V_]Fmp");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("-<um>", arrayList0, 1);
      discretize0.getUseBinNumbers();
      // Undeclared exception!
      try { 
        instances0.lastInstance();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      discretize0.getMakeBinary();
      int int0 = 1742;
      SparseInstance sparseInstance0 = new SparseInstance((-2396.98111), doubleArray0, intArray0, 1742);
      SparseInstance sparseInstance1 = new SparseInstance(1742);
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[6];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1862.42);
      doubleArray0[1] = (-2594.1257125725774);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Discretize.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Discretize discretize0 = new Discretize();
      SystemInUtil.addInputLine(".");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2237));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)62;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemInUtil.addInputLine("8k@Kfc:l\"Q");
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = multiFilter0.getFilter((byte)0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".";
      stringArray0[1] = null;
      Filter.runFilter(filter0, stringArray0);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string1 = ".";
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.8137426719174017
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SystemInUtil.addInputLine("nnaLi$`5: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "38$");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "import weka.core.FastVector;\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "nnaLi$`5: ";
      stringArray0[1] = "38$";
      stringArray0[2] = "B";
      stringArray0[3] = null;
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      discretize0.listOptions();
      String[] stringArray1 = new String[9];
      stringArray1[0] = null;
      stringArray1[1] = "import weka.core.FastVector;\n";
      stringArray1[2] = "-V";
      stringArray1[3] = "nnaLi$`5: ";
      stringArray1[4] = null;
      stringArray1[5] = "import weka.core.FastVector;\n";
      stringArray1[6] = "38$";
      stringArray1[7] = "]";
      stringArray1[8] = "B";
      try { 
        discretize0.setOptions(stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(0);
      discretize0.setFindNumBins(true);
      assertTrue(discretize0.getFindNumBins());
      assertEquals(0, discretize0.getBins());
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.dataset();
      boolean boolean0 = discretize0.m_MakeBinary;
      SparseInstance sparseInstance1 = new SparseInstance(50);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Discretize discretize1 = new Discretize("l StQ*4nyz*");
      assertFalse(discretize1.getMakeBinary());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getCapabilities();
      discretize0.m_NumBins = 1575;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      SparseInstance sparseInstance0 = new SparseInstance(79);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      int int0 = 105;
      double double0 = (-1.7976931348623157E308);
      int[] intArray0 = new int[1];
      intArray0[0] = 105;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.7976931348623157E308), intArray0, 50);
      // Undeclared exception!
      try { 
        binarySparseInstance0.insertAttributeAt(1759);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't insert attribute: index out of range
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("\tInvert matching sense of column indexes.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n8{wwr(:U}pyZmUR3;f]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tUse equal-frequency instead of equal-width discretization.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6.922795675090054, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("real");
      arrayList0.add(attribute0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "real");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SystemInUtil.addInputLine("oQQtQLsP)>_&w");
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(false);
      assertFalse(discretize0.getMakeBinary());
      
      SystemInUtil.addInputLine("relational");
      SystemInUtil.addInputLine("date");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "integer");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@attribute");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "NUMERIC_ATTRIBUTES");
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate4.and(predicate3);
      Predicate<Object> predicate6 = predicate5.and(predicate1);
      predicate6.or(predicate1);
      Predicate.isEqual(object0);
      Discretize discretize0 = new Discretize(".");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "NUMERIC_ATTRIBUTES";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      stringArray0[3] = "NUMERIC_ATTRIBUTES";
      stringArray0[4] = ".";
      stringArray0[5] = "NUMERIC_ATTRIBUTES";
      stringArray0[6] = "NUMERIC_ATTRIBUTES";
      stringArray0[7] = "NUMERIC_ATTRIBUTES";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getBinRangesString((-1789569704));
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties4);
      Properties properties6 = new Properties();
      Properties properties7 = new Properties();
      Properties properties8 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties1);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) null);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate6 = predicate5.and(predicate3);
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate1.and(predicate0);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate13 = predicate3.negate();
      predicate5.negate();
      Predicate.isEqual((Object) predicate13);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate13);
      Predicate<Object> predicate15 = predicate12.negate();
      predicate9.negate();
      Predicate<Object> predicate16 = predicate14.or(predicate15);
      predicate6.and(predicate2);
      Predicate<Object> predicate17 = predicate16.and(predicate13);
      predicate6.and(predicate4);
      predicate17.and(predicate10);
      Object object1 = new Object();
      predicate8.test(predicate11);
      predicate15.or(predicate0);
      predicate8.test(object1);
      predicate6.or(predicate9);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize(".");
      discretize0.setAttributeIndices(")");
      double[][] doubleArray0 = new double[0][2];
      SystemInUtil.addInputLine(".");
      SystemInUtil.addInputLine(".");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setAttributeIndices(".");
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("\tSpecifies the desired weight of instances per bin for\n\tequal-frequenc binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)");
      arrayList0.add(attribute0);
      Properties properties0 = new Properties();
      Object object0 = new Object();
      attribute0.value((-1017));
      Attribute.typeToString(attribute0);
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.replaceAll(unaryOperator0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      properties0.store((Writer) mockPrintWriter0, "@attribute");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList0.add((Attribute) null);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getAttributeIndices();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("first-last", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("[DefaultPackageManager] No package repository set!!");
      discretize0.getBins();
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getAttributeIndices();
      discretize0.setBins(10);
      AllFilter allFilter0 = new AllFilter();
      String string0 = "E.RQ8\"/;35./%K3u!o";
      StringReader stringReader0 = new StringReader("7[x!K");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[7[x!K], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("Ieal");
      arrayList0.add(attribute0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties3);
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties6);
      Locale locale0 = new Locale("", "@end");
      Locale locale1 = Locale.KOREA;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Discretize discretize0 = new Discretize("fN)r|{VCxM");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(6, stringArray0.length);
  }
}
