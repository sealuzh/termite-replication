/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 23:30:15 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.util.ArrayList;
import java.util.Properties;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.trees.LMT;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckGOE;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.Tokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8131128255504185
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-114);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("\tThe tokenizing algorihtm (classname plus parameters) to use.\n\t(default: ");
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities1 = stringKernel0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      stringKernel0.getOptions();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Instances instances1 = new Instances(instances0);
      Instances instances2 = testInstances1.generate("");
      naiveBayesMultinomialText0.buildClassifier(instances2);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getOptions();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-114);
      intArray0[1] = (int) (byte) (-114);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2822.7), intArray0, (-2));
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      Random.setNextRandom((-1));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.218736967976606
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("ps9\"S`j*]N*#v");
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      LMT lMT0 = new LMT();
      instances0.toArray();
      MockRandom mockRandom0 = new MockRandom(1069L);
      instances0.randomize(mockRandom0);
      capabilities0.disableAllClasses();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      naiveBayesMultinomialText0.m_norm = 2.0;
      capabilities0.getClassCapabilities();
      TestInstances testInstances3 = new TestInstances();
      Instances instances1 = new Instances(instances0, (-1));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      capabilities1.enableAllClasses();
      intArray0[1] = (-1);
      double[] doubleArray0 = new double[4];
      testInstances1.setNumInstances((-1));
      doubleArray0[0] = (double) (-2);
      testInstances2.setNumDate((-1));
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      testInstances2.setRelation(" ");
      Random.setNextRandom((-1492));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9581417463438018
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_normalize = true;
      MockFile.createTempFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1");
      MockFile mockFile0 = new MockFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1");
      mockFile0.setReadable(true, true);
      File file1 = mockFile0.getAbsoluteFile();
      file0.deleteOnExit();
      file1.toURI();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      File file2 = MockFile.createTempFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1", file0);
      file1.toURL();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      naiveBayesMultinomialText0.setStopwords(file2);
      Instance instance0 = null;
      naiveBayesMultinomialText0.debugTipText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile1 = new MockFile("MoJ2}?\"nUa?e1}1");
      try { 
        naiveBayesMultinomialText0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0310406470852627
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.debugTipText();
      File file0 = MockFile.createTempFile("If set to true, classifier may output additional info to the console.", "If set to true, classifier may output additional info to the console.");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.m_minWordP = (-1.0);
      naiveBayesMultinomialText0.m_lnorm = 4.94E-321;
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      int int0 = 1833;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1833);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.013990035752833
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setLNorm(1.0);
      naiveBayesMultinomialText0.setLNorm(94.6732);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.m_useStopList = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "c!AtlT";
      MockFile mockFile0 = new MockFile("c!AtlT", "c!AtlT");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.toString();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4335808842743676
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      MockFile.createTempFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1");
      MockFile mockFile0 = new MockFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1");
      file0.setReadable(false, true);
      File file1 = mockFile0.getAbsoluteFile();
      file0.deleteOnExit();
      file1.toURI();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      File file2 = MockFile.createTempFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1", file0);
      file1.toURL();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      naiveBayesMultinomialText0.setStopwords(file2);
      naiveBayesMultinomialText0.debugTipText();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, true);
      MockFile mockFile1 = new MockFile("MoJ2}?\"nUa?e1}1");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Instances instances1 = new Instances(instances0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0055729076947384
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setLNorm(1.0);
      naiveBayesMultinomialText0.setLNorm(94.6732);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.setLNorm(94.6732);
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(";/)fR8(5XP-5");
      Instances instances1 = new Instances(instances0);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.toString();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      capabilities0.disable(capabilities_Capability0);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = 2857;
      intArray0[5] = (-1);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2211.2321201344453), (double[]) null, intArray0, 1994091958);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1974847456957165
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setLNorm(1.0);
      naiveBayesMultinomialText0.setLNorm(94.6732);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.m_useStopList = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      File file1 = MockFile.createTempFile("c!AtlT", "c!AtlT", file0);
      naiveBayesMultinomialText0.setStopwords(file1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.toString();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      capabilities0.setMinimumNumberInstances(3);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      capabilities0.enableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Instances instances1 = new Instances(instances0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      assertEquals(94.6732, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.861378820099868
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_tokenizer = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.m_t = 1014.1936274174684;
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.m_leplace = 12.0;
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      double[] doubleArray0 = new double[2];
      naiveBayesMultinomialText0.listOptions();
      doubleArray0[0] = 1764.588856485202;
      doubleArray0[1] = 4.0;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2567576795645348
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("ps9\"S`j*]N*#v");
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      LMT lMT0 = new LMT();
      instances0.toArray();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      capabilities0.getClassCapabilities();
      testInstances1.generate("@data");
      SGDText sGDText0 = new SGDText();
      sGDText0.setSeed((-2));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      SelectedTag selectedTag0 = wrapperSubsetEval0.getEvaluationMeasure();
      sGDText0.setLossFunction(selectedTag0);
      AbstractClassifier.runClassifier(lMT0, testInstances0.DEFAULT_WORDS);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "-stemmer";
      stringArray0[5] = " ";
      stringArray0[6] = "_p4";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid stemmer specification string
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5876170593402499
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      File file1 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.m_useStopList = true;
      MockFile mockFile0 = new MockFile("-string");
      mockFile0.setReadable(true, true);
      file0.getAbsoluteFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile.createTempFile("c!AtlT", (String) null, file1);
      file1.getCanonicalPath();
      file1.toURL();
      naiveBayesMultinomialText0.setStopwords(file1);
      naiveBayesMultinomialText0.debugTipText();
      MockFile.createTempFile("()RD8b^o~'m}PU-*yW", ",+iN),gY+-z");
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4086193777642175
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("ps9\"S`j*]N*#v");
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      LMT lMT0 = new LMT();
      instances0.toArray();
      capabilities0.disableAllClasses();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances3 = TestInstances.forCapabilities(capabilities1);
      capabilities0.getClassCapabilities();
      testInstances0.clone();
      Instances instances1 = testInstances1.generate("@data");
      Instances instances2 = new Instances(instances1);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.toString();
      int[] intArray0 = new int[7];
      testInstances0.setNoClass(true);
      instances0.iterator();
      intArray0[0] = (-1);
      capabilities1.enableAllClasses();
      intArray0[1] = (-2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      testInstances3.setNumDate((-1));
      doubleArray0[2] = (double) (-2);
      testInstances2.setNumRelationalNominalValues((-1));
      doubleArray0[3] = (double) (-2);
      testInstances3.setRelation(" ");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), intArray0, (-2));
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      Random.setNextRandom((-1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.359344556325823
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("ps9\"S`j*]N*#v");
      testInstances0.getWords();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      LMT lMT0 = new LMT();
      instances0.toArray();
      MockRandom mockRandom0 = new MockRandom(1069L);
      instances0.randomize(mockRandom0);
      capabilities0.disableAllClasses();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Capabilities.forInstances(instances0);
      TestInstances testInstances2 = new TestInstances();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      capabilities1.enableAllClasses();
      intArray0[1] = (-1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      testInstances1.setNumDate((-1));
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      testInstances1.setRelation(" ");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), intArray0, (-2));
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      Random.setNextRandom((-1));
      Random.setNextRandom((-2));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.218770771174388
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      LMT lMT0 = new LMT();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      capabilities0.getClassCapabilities();
      Instances instances1 = testInstances1.generate("@data");
      Instances instances2 = new Instances(instances1);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.toString();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = (-2);
      Random.setNextRandom((-1));
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.10893980259848
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2061.2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(10000);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setLNorm(1.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 94.6732;
      doubleArray0[1] = 94.6732;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.setLNorm(94.6732);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.m_useStopList = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.m_minWordP = 17.0;
      Instance instance0 = null;
      naiveBayesMultinomialText0.periodicPruningTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.371612359584665
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("ps9\"S`j*]N*#v");
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      LMT lMT0 = new LMT();
      instances0.toArray();
      MockRandom mockRandom0 = new MockRandom(1069L);
      instances0.randomize(mockRandom0);
      capabilities0.disableAllClasses();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = new TestInstances();
      TestInstances.forCapabilities(capabilities1);
      capabilities0.getClassCapabilities();
      testInstances0.clone();
      Instances instances1 = testInstances1.generate("@data");
      Instances instances2 = new Instances(instances1);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.toString();
      testInstances0.setNoClass(true);
      naiveBayesMultinomialText0.debugTipText();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      MockFile mockFile0 = new MockFile("@data");
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8069269423253678
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ezt|eK1GLS~A*ni4t}");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = (-4541.78800915512);
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Use word frequencies rather than binary bag of words representation";
      stringArray0[1] = "Ezt|eK1GLS~A*ni4t}";
      stringArray0[2] = "Use word frequencies rather than binary bag of words representation";
      stringArray0[3] = "Use word frequencies rather than binary bag of words representation";
      stringArray0[4] = "If true, ignores all words that are on the stoplist.";
      stringArray0[5] = "Use word frequencies rather than binary bag of words representation";
      stringArray0[6] = "Ezt|eK1GLS~A*ni4t}";
      stringArray0[7] = "If true, ignores all words that are on the stoplist.";
      stringArray0[8] = "Use word frequencies rather than binary bag of words representation";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals((-4541.78800915512), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7600456232981934
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("");
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(4);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.stemmerTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.setOptions((String[]) null);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9662724526900872
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities1 = stringKernel0.getCapabilities();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities2 = inputMappedClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities2);
      capabilities1.or(capabilities0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities3 = principalComponents0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities3.disable(capabilities_Capability0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities2);
      SMO sMO0 = new SMO();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      sMO0.setKernel(stringKernel0);
      sMO0.getCapabilities();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      inputMappedClassifier0.getCapabilities();
      capabilities1.setMinimumNumberInstances(3);
      capabilities1.enableDependency(capabilities_Capability0);
      Instances instances1 = testInstances1.generate((String) null);
      Instances instances2 = new Instances(instances1);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t8.0\nclass2\t5.0\nclass3\t6.0\nclass4\t5.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\nthe\t20.085536923187668\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nThe\t2.718281828459045\t2.718281828459045\t2.718281828459045\t20.085536923187668\t\nover\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nquick\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nlazy\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\njumps\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nbrown\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\ndog\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nfox\t7.38905609893065\t7.38905609893065\t7.38905609893065\t2.718281828459045\t\n", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("pyf2&m6?%$_");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-105);
      byteArray0[1] = (byte)51;
      byteArray0[5] = (byte)75;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("pyf2&m6(?%$_", "pyf2&m6(?%$_");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities0 = principalComponents0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.disable(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      inputMappedClassifier1.getCapabilities();
      Instances instances0 = testInstances0.generate(")");
      Instances instances1 = new Instances(instances0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4086193777642175
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("ps9\"S`j*]N*#v");
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      LMT lMT0 = new LMT();
      instances0.toArray();
      capabilities0.disableAllClasses();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances3 = TestInstances.forCapabilities(capabilities1);
      capabilities0.getClassCapabilities();
      testInstances0.clone();
      Instances instances1 = testInstances1.generate("@data");
      Instances instances2 = new Instances(instances1);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.toString();
      int[] intArray0 = new int[7];
      testInstances0.setNoClass(true);
      intArray0[0] = (-1);
      capabilities1.enableAllClasses();
      intArray0[1] = (-2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      testInstances3.setNumDate((-1));
      doubleArray0[2] = (double) (-2);
      testInstances2.setNumRelationalNominalValues((-1));
      doubleArray0[3] = (double) (-2);
      testInstances3.setRelation(" ");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), intArray0, (-2));
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      Random.setNextRandom((-1));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(false);
      naiveBayesMultinomialText0.m_periodicP = 441;
      sGDText0.setLearningRate(1.0);
      SGDText sGDText1 = new SGDText();
      sGDText1.setDebug(false);
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities1 = randomCommittee0.getCapabilities();
      capabilities0.or(capabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities2 = principalComponents1.getCapabilities();
      capabilities0.disable(capabilities_Capability0);
      TestInstances testInstances1 = new TestInstances();
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getCapabilities();
      capabilities2.disableAllAttributes();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities2.enableDependency(capabilities_Capability1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Instances instances1 = new Instances(instances0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1116439934825424
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[7];
      intArray0[4] = 1889;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2365.108717, intArray0, 820);
      int[] intArray1 = new int[8];
      intArray1[3] = 1889;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstances(1889);
      testInstances0.generate("0Qt");
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("Q<[B]4");
      MockFile mockFile1 = new MockFile("UO");
      mockFile0.toURI();
      mockFile0.renameTo(mockFile1);
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(14, stringArray0.length);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("pyf2&m6?%$_", "pyf2&m6?%$_");
      mockFile0.setExecutable(false, true);
      MockFile mockFile1 = new MockFile("-tokenizer");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Q<[B]4");
      mockFile1.toPath();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Q<[B]4");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "pyf2&m6?%$_");
      MockFile mockFile2 = new MockFile("C]:S;j^mde&\"vmzwH", "");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "-tokenizer");
      MockFile mockFile3 = new MockFile(mockFile0, "");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "r;vUkEjMv";
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = "";
      stringArray0[3] = "-tokenizer";
      stringArray0[4] = "pyf2&m6?%$_";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-stemmer <spec>", arrayList0, 82);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStemmer();
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockFile mockFile0 = new MockFile((File) null, "NaiveBayesMultinomialText: No model built yet.\n");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      assertFalse(file0.isAbsolute());
      
      String string2 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string2);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3258954466488375
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2061.2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      int[] intArray0 = new int[7];
      intArray0[0] = 10000;
      intArray0[1] = 10000;
      intArray0[2] = 10000;
      intArray0[3] = 10000;
      intArray0[4] = 10000;
      intArray0[5] = 10000;
      intArray0[6] = 10000;
      SparseInstance sparseInstance0 = new SparseInstance(10000, doubleArray0, intArray0, 10000);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(1.3, intArray0, 2162);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance6.deleteAttributeAt(9);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(2232);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((Instance) binarySparseInstance6);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(12, stringArray0.length);
      
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertFalse(boolean0);
      
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance1, false);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.185851463196929
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("pyf2&m6?%$_");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-105);
      byteArray0[1] = (byte)51;
      byteArray0[5] = (byte)75;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("pyf2&m6(?%$_", "pyf2&m6(?%$_");
      mockFile0.setExecutable(false, true);
      MockFile mockFile1 = new MockFile("-tokenizer");
      mockFile1.getCanonicalPath();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "/home/ubuntu/termite/projects/107_weka/-tokenizer");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("pyf2&m6?%$_/pyf2&m6?%$_");
      mockFile1.toPath();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("Q<[B]4");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "-tokenizer");
      MockFile mockFile2 = new MockFile(";C]:](^de&\"l9zwH", "MEBVtnf]1qzMf_");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "-tokenizer");
      MockFile mockFile3 = new MockFile(mockFile0, "pyf2&m6(?%$_");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "r;vkEjMv";
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = "-tokenizer";
      stringArray0[3] = "-tokenizer";
      stringArray0[4] = "pyf2&m6(?%$_";
      stringArray0[5] = "pyf2&m6(?%$_";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0279017942068247
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = 1394.4626835664458;
      naiveBayesMultinomialText0.setLNorm(1.0E-8);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.m_norm = (-2343.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "The tokenizing algorithm to use on the strings.";
      stringArray0[2] = "+v1ik2j^`";
      stringArray0[3] = "The tokenizing algorithm to use on the strings.";
      stringArray0[4] = "The tokenizing algorithm to use on the strings.";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "The tokenizing algorithm to use on the strings.";
      stringArray0[7] = "weka/core/Capabilities.props";
      stringArray0[8] = "NaiveBayesMultinomialText: No model built yet.\n";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getStemmer();
      assertEquals((-2343.0), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6511351440615436
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      SGDText sGDText0 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = (double) 0;
      M5Rules m5Rules0 = new M5Rules();
      byte[] byteArray0 = new byte[9];
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte) (-75);
      SGDText sGDText1 = new SGDText();
      naiveBayesMultinomialText0.getOptions();
      assertEquals(0.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2061.2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      int[] intArray0 = new int[7];
      intArray0[5] = 10000;
      intArray0[1] = 10000;
      intArray0[2] = 10000;
      intArray0[3] = 10000;
      intArray0[4] = 1889;
      intArray0[5] = 10000;
      intArray0[6] = 10000;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2365.108717, intArray0, 820);
      int[] intArray1 = new int[8];
      intArray1[0] = 10000;
      intArray1[1] = 10000;
      intArray1[2] = 10000;
      intArray1[3] = 1889;
      intArray1[4] = 10000;
      intArray1[5] = 10000;
      intArray1[6] = 1889;
      intArray1[7] = (-1914);
      SparseInstance sparseInstance0 = new SparseInstance(2365.108717, doubleArray0, intArray1, 10000);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";^_[M1GaF%:X3%", ";^_[M1GaF%:X3%");
      mockFile0.setExecutable(false, false);
      mockFile0.createNewFile();
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile("-tokenizer");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFile1.toPath();
      File file0 = MockFile.createTempFile("w>k6+%Z--Z]", "-tokenizer");
      mockFile1.getAbsolutePath();
      MockFile mockFile2 = new MockFile("(&IXH0&\"x9|=qbo_");
      mockFile0.getAbsolutePath();
      mockFile1.setWritable(true);
      MockFile mockFile3 = new MockFile("/home/ubuntu/termite/projects/107_weka/-tokenizer", "=Z#S+@is68,&0%");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile1.renameTo(file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getLowercaseTokens();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.185851463196929
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("pyf2&m6?%$_");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-105);
      byteArray0[1] = (byte)51;
      byteArray0[5] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockFile mockFile0 = new MockFile("pyf2&m6(?%$_", "pyf2&m6(?%$_");
      mockFile0.setExecutable(false, true);
      MockFile mockFile1 = new MockFile("-tokenizer");
      mockFile1.getCanonicalPath();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      URI uRI0 = mockFile1.toURI();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("pyf2&m6?%$_/pyf2&m6?%$_");
      mockFile1.toPath();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "-tokenizer");
      MockFile mockFile2 = new MockFile(uRI0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-tokenizer");
      MockFile mockFile3 = new MockFile(mockFile0, "pyf2&m6(?%$_");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Cannot handle unknown attribute type '";
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = "-tokenizer";
      stringArray0[3] = "-tokenizer";
      stringArray0[4] = "pyf2&m6(?%$_";
      stringArray0[5] = "pyf2&m6(?%$_";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2061.2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(10000);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, "", protectedProperties0);
      attribute0.copy("");
      CheckGOE checkGOE0 = new CheckGOE();
      attribute0.equals(checkGOE0);
      CheckGOE checkGOE1 = new CheckGOE();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      protectedProperties2.remove((Object) attribute0, (Object) checkGOE0);
      attribute0.setWeight(517.296652992);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "real";
      stringArray0[1] = "integer";
      stringArray0[2] = "";
      stringArray0[3] = "integer";
      stringArray0[4] = "@end";
      stringArray0[5] = "relational";
      stringArray0[6] = "org.tartarus.snowball.ext";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("j36D3y=", "j36D3y=");
      mockFile0.getCanonicalFile();
      mockFile0.setWritable(false);
      mockFile0.setExecutable(false, true);
      MockFile mockFile1 = new MockFile("-tokenizer");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Q<[B]4");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "w>k6+%Z--Z]");
      MockFile.createTempFile("(&IXH0&\"x9bo_", "(&IXH0&\"x9bo_");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1086.51);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1522.45695691598);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-1953.1);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ")");
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.globalInfo();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2061.2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      int[] intArray0 = new int[7];
      intArray0[0] = 10000;
      intArray0[1] = 10000;
      intArray0[1] = 10000;
      naiveBayesMultinomialText0.setNorm(10000);
      intArray0[3] = (-3347);
      intArray0[4] = 10000;
      intArray0[5] = 10000;
      intArray0[6] = 1889;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(10000, intArray0, 1889);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(10000);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.495444839100807
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      MockFile.createTempFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1");
      File file1 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      file0.setReadable(false, true);
      file1.delete();
      File file2 = file1.getAbsoluteFile();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      File file3 = MockFile.createTempFile("c!AtlT", "c!AtlT", file0);
      file3.getCanonicalPath();
      file2.toURL();
      naiveBayesMultinomialText0.setStopwords(file3);
      naiveBayesMultinomialText0.debugTipText();
      MockFile.createTempFile("\n#attributes=", "If set to true, classifier may output additional info to the console.");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/home/ubuntu/termite/projects/107_weka/c!AtlT1c!AtlT";
      stringArray0[1] = "MoJ2}?\"nUa?e1}1";
      stringArray0[2] = "If set to true, classifier may output additional info to the console.";
      stringArray0[3] = "c!AtlT";
      stringArray0[4] = "\n#attributes=";
      stringArray0[5] = "c!AtlT";
      stringArray0[6] = "c!AtlT";
      stringArray0[7] = "/home/ubuntu/termite/projects/107_weka/c!AtlT1c!AtlT";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.495444839100807
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      MockFile.createTempFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1");
      File file1 = naiveBayesMultinomialText0.getStopwords();
      file0.setReadable(false, true);
      File file2 = file1.getAbsoluteFile();
      file0.deleteOnExit();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      File file3 = MockFile.createTempFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1", file0);
      file2.toURL();
      naiveBayesMultinomialText0.setStopwords(file3);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}\"8U!Fj9`&");
      MockFile mockFile0 = new MockFile(file1, "");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9i.c*PV";
      stringArray0[1] = "";
      stringArray0[2] = "`";
      stringArray0[3] = "MoJ2}?\"nUa?e1}1";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setLNorm(3.0);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      System.setCurrentTimeMillis(0L);
      naiveBayesMultinomialText0.listOptions();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.631353359565896
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("-tokenizer");
      SnowballStemmer snowballStemmer1 = new SnowballStemmer("4.B3'BMg{RDOF?");
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      SGDText sGDText0 = new SGDText();
      sGDText0.setSeed(173);
      snowballStemmer1.getOptions();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)29;
      sGDText0.setSeed((byte) (-3));
      sGDText0.setSeed((byte) (-85));
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The file containing the stopwords (if this is a directory then the default ones are used).";
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = "org.tartarus.snowball";
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 3443.7;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("f%\"8-%Q=7Iy");
      naiveBayesMultinomialText0.getUseWordFrequencies();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      assertEquals(0L, file0.getTotalSpace());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords((File) null);
      boolean boolean0 = false;
      naiveBayesMultinomialText0.setMinWordFrequency(10.0);
      boolean boolean1 = naiveBayesMultinomialText0.m_normalize;
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[5];
      principalComponents0.setTransformBackToOriginal(false);
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 10.0;
      doubleArray0[2] = 10.0;
      doubleArray0[4] = 5.0;
      naiveBayesMultinomialText0.periodicPruningTipText();
      SparseInstance sparseInstance0 = new SparseInstance(5.0, doubleArray0);
      try { 
        principalComponents0.convertInstance(sparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      sGDText0.setLearningRate(0.0);
      File file0 = sGDText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2061.2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      int[] intArray0 = new int[7];
      intArray0[5] = 10000;
      intArray0[1] = 10000;
      intArray0[2] = 10000;
      intArray0[3] = 10000;
      intArray0[4] = 1889;
      intArray0[5] = 10000;
      intArray0[6] = 10000;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2365.108717, intArray0, 820);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      binarySparseInstance0.deleteAttributeAt(10000);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(820);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3144783360039938
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2061.2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      int[] intArray0 = new int[7];
      intArray0[5] = 10000;
      intArray0[1] = 10000;
      intArray0[2] = 10000;
      intArray0[3] = 10000;
      intArray0[4] = 1889;
      intArray0[5] = 10000;
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      intArray0[6] = 10000;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2365.108717, intArray0, 820);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      binarySparseInstance0.deleteAttributeAt(10000);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(820);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((Instance) binarySparseInstance3);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      LMT lMT0 = new LMT();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      instances0.toArray();
      capabilities0.toSource("M", (-1));
      TestInstances.forCapabilities(capabilities1);
      testInstances2.generate("");
      Random.setNextRandom(115);
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.108872986584512
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2061.2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      int[] intArray0 = new int[7];
      intArray0[0] = 10000;
      intArray0[1] = 10000;
      intArray0[2] = 10000;
      intArray0[3] = 10000;
      intArray0[4] = 10000;
      intArray0[5] = 10000;
      intArray0[6] = 10000;
      SparseInstance sparseInstance0 = new SparseInstance(10000, doubleArray0, intArray0, 10000);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(1.3, intArray0, 2162);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance6.deleteAttributeAt(9);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(2232);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((Instance) binarySparseInstance6);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertFalse(boolean0);
      
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      MockFile mockFile0 = new MockFile("j36D3y=");
      mockFile0.setExecutable(false, true);
      MockFile mockFile1 = new MockFile("-tokenizer");
      mockFile1.toPath();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "j36D3y=");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-394.56981997051), (int[]) null, 820);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(820);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.727829997593668
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm((-311.29711839));
      naiveBayesMultinomialText0.setPeriodicPruning(68);
      naiveBayesMultinomialText0.getNorm();
      String[] stringArray0 = new String[0];
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom(19);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "[%`_kpuZcf";
      stringArray1[1] = "";
      stringArray1[2] = "B}DoMKP";
      stringArray1[3] = "";
      stringArray1[4] = "all attributes\n";
      stringArray1[5] = "-norm";
      stringArray1[6] = "";
      stringArray1[7] = "YsY";
      stringArray1[8] = "-lnorm <num>";
      naiveBayesMultinomialText0.setOptions(stringArray1);
      assertEquals(68, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.194996186179526
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("many");
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      LMT lMT0 = new LMT();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      capabilities1.getClassCapabilities();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, (-2));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.setOptions(testInstances2.DEFAULT_WORDS);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[6];
      intArray0[0] = 1547;
      intArray0[1] = (-817);
      intArray0[2] = 849;
      intArray0[4] = 34;
      intArray0[5] = 1658;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(312.0, intArray0, (-918));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance2);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7849620783010631
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      MockFile.createTempFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1");
      MockFile mockFile0 = new MockFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1");
      file0.setReadable(false, true);
      File file1 = mockFile0.getAbsoluteFile();
      file0.deleteOnExit();
      file1.toURI();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      File file2 = MockFile.createTempFile("MoJ2}?\"nUa?e1}1", "MoJ2}?\"nUa?e1}1", file0);
      file1.toURL();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      naiveBayesMultinomialText0.setStopwords(file2);
      naiveBayesMultinomialText0.debugTipText();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, true);
      MockFile mockFile1 = new MockFile("MoJ2}?\"nUa?e1}1");
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2061.2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance1.deleteAttributeAt((-1));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.put(protectedProperties0, "");
      protectedProperties0.forEach(biConsumer0);
      binarySparseInstance2.toStringMaxDecimalDigits(2987);
      Attribute attribute0 = new Attribute("", protectedProperties0);
      binarySparseInstance0.setMissing(attribute0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-2685.06231), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, double0, 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      naiveBayesMultinomialText0.m_minWordP = 0.0;
      naiveBayesMultinomialText0.m_periodicP = 0;
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_minWordP = 3.0;
      boolean boolean0 = naiveBayesMultinomialText0.getLowercaseTokens();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.3716100238072846
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      sGDText0.setOutputProbsForSVM(true);
      sGDText0.setLearningRate(441);
      SGDText sGDText1 = new SGDText();
      sGDText0.setDebug(true);
      sGDText0.setSeed(10);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      SelectedTag selectedTag0 = wrapperSubsetEval0.getEvaluationMeasure();
      sGDText0.setLossFunction(selectedTag0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "-stemmer";
      stringArray0[2] = "-stemmer";
      stringArray0[3] = "";
      stringArray0[4] = "W";
      stringArray0[5] = "";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }
}
