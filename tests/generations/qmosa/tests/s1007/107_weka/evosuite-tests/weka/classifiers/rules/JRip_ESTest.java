/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 01:22:31 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.SearchAlgorithm;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0647549344121345
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 66;
      costSensitiveClassifier0.setCostMatrix(costMatrix1);
      intArray0[4] = 1;
      intArray0[4] = 2;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(".cost", arrayList0, 1449);
      Attribute attribute0 = new Attribute(".cost");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, 2);
      instances0.add((Instance) binarySparseInstance0);
      costSensitiveClassifier0.getCapabilities();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (-1212.9833178487952);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip jRip1 = new JRip();
      attribute0.copy("weka/core/Capabilities.props");
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 3, 139.825655);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet0.measureMDLScore();
      jRip0.setUsePruning(false);
      BayesNet bayesNet2 = new BayesNet();
      bayesNet2.measureBayesScore();
      jRip0.getOptions();
      BayesNet bayesNet3 = new BayesNet();
      bayesNet0.measureDivergence();
      // Undeclared exception!
      try { 
        bayesNet3.getProbability(1, (-2782), (-2146253002));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties2.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      protectedProperties1.keys();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      protectedProperties3.keys();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties3);
      Attribute attribute0 = new Attribute("N", (List<String>) null, protectedProperties2);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties10);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties13);
      Attribute attribute1 = new Attribute("date", (List<String>) null, protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("kX14c", arrayList0, 1);
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle string attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      costSensitiveClassifier0.setCostMatrix((CostMatrix) null);
      intArray0[3] = 2;
      Attribute attribute0 = new Attribute(".cost");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = 1.0;
      jRip_NumericAntd0.covers(binarySparseInstance0);
      IBk iBk0 = new IBk(1876);
      assertEquals("Gets the distance weighting method used.", iBk0.distanceWeightingTipText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.921015278026703
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "HBC)P5");
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "");
      FileSystemHandling.createFolder(evoSuiteFile2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("j!ialB#Mh@6!", arrayList0, 57);
      Attribute attribute0 = new Attribute("@data");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2);
      jRip_RipperRule0.grow(instances0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 68.0, (-2643.84157));
      jRip_NumericAntd0.value = 2344.343113;
      jRip_RipperRule0.toString(attribute0);
      assertEquals(2.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_NumericAntd0.toString();
      jRip0.getTechnicalInformation();
      jRip0.getCheckErrorRate();
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getRevision();
      jRip0.setMinNo(0L);
      jRip0.setFolds(2738);
      jRip0.getMinNo();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1738));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      costSensitiveClassifier0.setClassifier(jRip0);
      intArray0[1] = 66;
      costSensitiveClassifier0.setCostMatrix(costMatrix1);
      intArray0[2] = 1;
      intArray0[3] = 1;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(".cost", arrayList0, 1437);
      Attribute attribute0 = new Attribute("7@V");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 1);
      binarySparseInstance0.setMissing(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 1, (-358.6029507355659));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "d_$k- '";
      stringArray0[0] = "d_$k- '";
      stringArray0[1] = "-S";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -S option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-P";
      stringArray0[1] = "gZ?h[$Jm";
      stringArray0[2] = "FMkW23<U1";
      stringArray0[3] = "";
      stringArray0[4] = "P\"s$6AOm1O";
      stringArray0[5] = "";
      stringArray0[6] = ";-+;A('Oq=Vf,";
      stringArray0[7] = "\nRuleset so far: ";
      stringArray0[8] = "wish";
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[4];
      jRip0.setDebug(true);
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)56;
      byteArray0[1] = (byte)13;
      byteArray0[3] = (byte)0;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "-S");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      jRip0.getDebug();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "y|");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H,-u");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H,-u");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)0);
      Attribute attribute0 = new Attribute("]<", "]<");
      attribute0.equalsMsg(evoSuiteFile0);
      binarySparseInstance0.isMissing(attribute0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("y|", (byte)13);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(jRip0.getDebug());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)17;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      byte[] byteArray1 = new byte[4];
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "");
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("j!ialB#Mh@6!", arrayList0, 57);
      Attribute attribute0 = new Attribute("@data");
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip1 = new JRip();
      try { 
        jRip1.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(Integer.MIN_VALUE);
      jRip0.getOptimizations();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.GERMANY;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale locale1 = Locale.FRENCH;
      locale1.getDisplayScript(locale0);
      locale0.getDisplayScript(locale1);
      Locale locale2 = Locale.ENGLISH;
      Locale locale3 = Locale.TAIWAN;
      Locale locale4 = new Locale("1BKl-dgODgMd,jx");
      locale0.getDisplayVariant();
      Locale locale5 = Locale.KOREA;
      locale3.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale6 = Locale.GERMANY;
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList4, 1808);
      Attribute attribute0 = new Attribute(":(CAM`9U>XX");
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1808, intArray0, 285);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 2657.02218, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[4];
      intArray0[0] = 8;
      intArray0[1] = 68;
      Locale locale0 = Locale.forLanguageTag("-Q weka.classifiers.bayes.net.search.SearchAlgorithm");
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale1 = Locale.ENGLISH;
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("eY>", linkedList0, 0);
      attribute0.toString();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      jRip_NumericAntd0.covers(sparseInstance0);
      StringReader stringReader0 = new StringReader("f)kRsr]");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 8);
      Instances instances0 = null;
      try {
        instances0 = new Instances(bufferedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[f)kRsr]], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties1.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      protectedProperties3.keys();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties6);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("j!ialB#Mh@6!", arrayList0, 57);
      Attribute attribute0 = new Attribute("vZ|}kx|pL%");
      arrayList0.add(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-4921.62));
      jRip_RipperRule0.grow(instances0);
      jRip_RipperRule0.prune(instances0, false);
      try { 
        jRip0.rulesetForOneClass(2, instances0, 4340.03, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[8];
      intArray0[0] = 227;
      intArray0[1] = 21;
      intArray0[2] = 227;
      intArray0[0] = 227;
      intArray0[4] = (-292);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      IBk iBk0 = decisionTable1.m_ibk;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      BayesNet bayesNet1 = new BayesNet();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 21;
      bayesNet1.measureEntropyScore();
      doubleArray0[3] = (double) 2;
      decisionTable1.m_decisionFeatures = intArray0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 2363.8196;
      intArray0[2] = 227;
      doubleArray0[3] = (double) 5;
      doubleArray0[8] = (double) 227;
      decisionTable0.m_classPriors = doubleArray0;
      BayesNet bayesNet2 = new BayesNet();
      bayesNet2.graph();
      bayesNet1.setBIFFile("K\"?W3`");
      Instances instances1 = bayesNet0.m_Instances;
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("<!--No model built yet-->", "K\"?W3`");
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttrValue();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[4];
      intArray0[0] = 8;
      intArray0[2] = 8;
      DecisionTable decisionTable0 = new DecisionTable();
      Properties properties0 = new Properties();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(")1[l.kz`$-Uh", (List<String>) null, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("4\\YNM%79 H~", protectedProperties3);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, (-878.948), (-870.650887));
      assertEquals(1, instancesArray0.length);
      
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      double double0 = jRip_NominalAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.284895754901243
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-1L));
      jRip0.seedTipText();
      jRip0.minNoTipText();
      System.setCurrentTimeMillis(1301L);
      jRip0.setFolds((-2525));
      jRip0.getFolds();
      jRip0.getOptions();
      double double0 = jRip0.getMinNo();
      assertEquals((-2525), jRip0.getFolds());
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("gC", arrayList0, 10);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      boolean boolean0 = jRip0.getUsePruning();
      assertTrue(boolean0);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "");
      FileSystemHandling.createFolder(evoSuiteFile2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList0, 1305);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (-936.741940774299);
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H,l");
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = 227;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      intArray0[2] = 255;
      intArray0[3] = 455;
      intArray0[3] = 0;
      intArray0[6] = (-10);
      intArray0[7] = (-3397);
      double[] doubleArray0 = new double[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A Practical Approach to Feature Selection");
      doubleArray0[0] = (double) 255;
      doubleArray0[1] = (double) 227;
      doubleArray0[2] = (double) (-10);
      BayesNet bayesNet0 = new BayesNet();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(227);
      Attribute attribute0 = new Attribute("za.ASJfUGa$#", "]<");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      jRip_NominalAntd0.value = (double) 4;
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.355825830420688
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      decisionTable1.m_classPriorCounts = null;
      intArray0[4] = 3;
      intArray0[2] = 3;
      intArray0[0] = 1;
      intArray0[5] = 1;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ative", arrayList0, 1);
      Attribute attribute0 = new Attribute("w^z?*xjm1r+,c^z");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(25);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances1 = new Instances("relational", arrayList0, 4);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable0.m_useIBk = false;
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      decisionTable1.m_classPriorCounts = null;
      intArray0[7] = 3;
      intArray0[2] = 3;
      intArray0[0] = 1;
      intArray0[5] = 1;
      decisionTable0.setUseIBk(true);
      intArray0[6] = 1;
      intArray0[7] = 3;
      intArray0[8] = 1;
      IBk iBk0 = new IBk(3);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(0.75);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties(properties1);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("All rows must have the same length.", 756);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      Object object0 = new Object();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Attribute attribute1 = new Attribute("S2u4", protectedProperties0);
      attribute1.getRevision();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-322.49), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      DenseInstance denseInstance0 = new DenseInstance(2);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7490906203903507
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties0.forEach(biConsumer0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties(protectedProperties3);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      protectedProperties3.keys();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties13);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties2);
      Attribute attribute1 = new Attribute((String) null, (List<String>) null, protectedProperties16);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2046);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 2231.121046378709, 4.94E-321);
      assertEquals(1, instancesArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-267.08);
      doubleArray0[2] = 0.5;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (-2345.94181);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 2133.187;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(0.5, doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8872385926133712
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Hashtable<Instance, Object> hashtable0 = new Hashtable<Instance, Object>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties1.forEach(biConsumer0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Attribute attribute0 = new Attribute("&1[lHkz`$-Uh", (List<String>) null, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      Attribute attribute1 = new Attribute("@attribute", protectedProperties4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 2, 4);
      assertEquals(1, instancesArray0.length);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("&1[lHkz`$-Uh <= NaN", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip1 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      int[] intArray0 = new int[9];
      intArray0[1] = 4;
      intArray0[2] = 1948;
      intArray0[3] = 6;
      intArray0[4] = 4;
      Properties properties0 = new Properties();
      properties0.put(locale_FilteringMode0, jRip0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, 2352);
      jRip_NumericAntd1.splitData(instances0, 1, 345.84726094);
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.806754853779283
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      int int0 = 210;
      jRip0.setFolds(210);
      jRip0.getOptions();
      int int1 = (-1);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      try { 
        jRip0.rulesetForOneClass(210, (Instances) null, 64.0, 210);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.GERMANY;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale locale1 = Locale.FRENCH;
      locale1.getDisplayScript(locale0);
      locale0.getDisplayScript(locale1);
      Locale locale2 = Locale.TAIWAN;
      Locale locale3 = Locale.TAIWAN;
      Locale locale4 = new Locale("1Kl-dgODgMd,jx");
      locale0.getDisplayVariant();
      Locale locale5 = Locale.KOREA;
      locale4.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale6 = Locale.GERMANY;
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList3, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list0, locale_FilteringMode2);
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list0, locale_FilteringMode0);
      ArrayList<String> arrayList4 = new ArrayList<String>();
      locale3.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      Locale locale7 = Locale.KOREA;
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.023478385754783
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = new String[2];
      jRip0.enumerateMeasures();
      stringArray0[0] = "OD>eO:;[4";
      stringArray0[1] = "#u3Xiw}Ce2amdt_u&{";
      jRip0.setOptions(stringArray0);
      jRip0.getOptimizations();
      jRip0.getFolds();
      jRip0.getRevision();
      jRip0.setFolds(2);
      Attribute attribute0 = new Attribute("vUCPV0q[%K)(", 2);
      attribute0.enumerateValues();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      jRip_NominalAntd0.getAccuRate();
      jRip_NominalAntd0.toString();
      jRip0.getOptimizations();
      JRip.main(stringArray0);
      jRip_NominalAntd0.getAccuRate();
      jRip0.getOptions();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      jRip_NominalAntd0.covers(denseInstance0);
      jRip0.enumerateMeasures();
      assertEquals(2, jRip0.getFolds());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, true);
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      FileSystemHandling.createFolder(evoSuiteFile2);
      byte[] byteArray1 = new byte[4];
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.appendLineToFile(evoSuiteFile3, "H,-u");
      FileSystemHandling.appendStringToFile(evoSuiteFile3, "HBC)P5");
      FileSystemHandling.createFolder(evoSuiteFile3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "myself");
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "H,-u");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(146);
      Attribute attribute0 = new Attribute("H,-u", "y|");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byte byte0 = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "-S");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H,l");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y|");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "cy9";
      stringArray0[1] = "UC4L,doFO0s]";
      stringArray0[2] = "-S";
      stringArray0[3] = "y|";
      stringArray0[4] = "H,l";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"y|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      int[] intArray0 = new int[5];
      intArray0[0] = (-199);
      intArray0[1] = (-2277);
      intArray0[2] = 2846;
      intArray0[3] = 80;
      intArray0[4] = 10;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 597);
      binarySparseInstance0.dataset();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      Instances instances1 = bayesNet2.m_Instances;
      Attribute attribute0 = new Attribute("*t#Y", (List<String>) null);
      binarySparseInstance0.isMissing(attribute0);
      jRip0.setOptions(stringArray0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(11, stringArray0.length);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties2.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      protectedProperties3.keys();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      properties0.put(protectedProperties5, protectedProperties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties5);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties3);
      protectedProperties11.elements();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties6);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties8);
      SystemInUtil.addInputLine("");
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties5);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties2.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      protectedProperties1.keys();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      protectedProperties3.keys();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties9);
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", (List<String>) null, protectedProperties12);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("S'%>0|P]vN9gU}", arrayList0, 241);
      jRip_RipperRule0.prune(instances0, false);
      try { 
        jRip0.rulesetForOneClass(1, instances0, 2, (-11.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties1.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Properties properties1 = new Properties(protectedProperties4);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      protectedProperties4.keys();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties15);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties3);
      Attribute attribute1 = new Attribute((String) null, (List<String>) null, protectedProperties18);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2046);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 2231.121046378709, 4.94E-321);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1, instancesArray0.length);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      String string0 = jRip0.minNoTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals("The minimum total weight of the instances in a rule.", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.3448446247581223
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      jRip0.optimizationsTipText();
      double[] doubleArray0 = new double[8];
      Utils.log2 = (-2178.0);
      doubleArray0[0] = 0.0;
      jRip0.getFolds();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", (-3015));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-36);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertFalse(jRip0.getDebug());
      assertEquals("8118", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@end";
      stringArray0[1] = "The number of optimization runs.";
      stringArray0[2] = "The number of optimization runs.";
      stringArray0[3] = "string";
      stringArray0[4] = "7/A=>Ws{)=xTXK";
      stringArray0[5] = "8118";
      stringArray0[6] = "8118";
      stringArray0[7] = "date";
      jRip0.setOptions(stringArray0);
      double double0 = jRip_NominalAntd0.getMaxInfoGain();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList0, 32);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.maxInfoGain = (double) 0;
      jRip_NominalAntd0.getRevision();
      Random.setNextRandom(32);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale locale1 = Locale.FRENCH;
      locale1.getDisplayCountry();
      locale1.getDisplayScript(locale0);
      locale0.getDisplayScript(locale1);
      Locale locale2 = Locale.TAIWAN;
      Locale locale3 = Locale.TAIWAN;
      Locale locale4 = new Locale("1Bl-dgODgMd,jx");
      Locale.getISOCountries();
      locale0.getDisplayVariant();
      Locale locale5 = new Locale("", "", "");
      locale3.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale6 = Locale.GERMANY;
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList4, 1808);
      Attribute attribute0 = new Attribute(":(1ICAM`9U>XX");
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1808, intArray0, 285);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) linkedList0, locale_FilteringMode0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      Locale.setDefault(locale4);
      jRip_NumericAntd0.splitData(instances0, 2, (-1.0));
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "");
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("j!ialB#Mh@6!", arrayList0, 57);
      Attribute attribute0 = new Attribute("@data");
      arrayList0.add(attribute0);
      System.setCurrentTimeMillis(1L);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("@data = ", string0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[1] = 3;
      DecisionTable decisionTable2 = new DecisionTable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Hashtable<Instance, Object> hashtable0 = new Hashtable<Instance, Object>();
      decisionTable1.m_entries = hashtable0;
      Instances instances0 = new Instances("^`OXO`HJXOD)h]12rc", arrayList0, 3);
      Attribute attribute0 = new Attribute("@data");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 5, 4);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)17;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      byte[] byteArray1 = new byte[4];
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "");
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("j!ialB#Mh@6!", arrayList0, 57);
      Attribute attribute0 = new Attribute("@data");
      arrayList0.add(attribute0);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 4, 85.66292760891);
      jRip_NumericAntd0.getRevision();
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties1.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Properties properties1 = new Properties(protectedProperties4);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties15);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties2);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties3);
      Attribute attribute1 = new Attribute((String) null, (List<String>) null, protectedProperties18);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2046);
      jRip0.listOptions();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Not enough training instances with class labels (required: ");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      JRip jRip1 = new JRip();
      jRip1.setFolds(1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ClassOrder classOrder0 = new ClassOrder();
      Filter.makeCopy(classOrder0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1497453141519918
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = new String[2];
      jRip0.enumerateMeasures();
      stringArray0[0] = "OD>eO:;[4";
      stringArray0[1] = "#u3Xiw}Ce2amdt_u&{";
      jRip0.setOptions(stringArray0);
      jRip0.getOptimizations();
      jRip0.getFolds();
      jRip0.getRevision();
      jRip0.setFolds(2);
      Attribute attribute0 = new Attribute("vUCPV0q[%K)(", 2);
      jRip0.getCapabilities();
      attribute0.enumerateValues();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      jRip_NominalAntd0.getAccuRate();
      jRip_NominalAntd0.toString();
      jRip0.getOptimizations();
      jRip0.setDebug(true);
      JRip.main(stringArray0);
      jRip_RipperRule0.setConsequent((-3790.974965));
      jRip_NominalAntd0.getAccuRate();
      jRip0.getOptions();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties1.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Properties properties1 = new Properties(protectedProperties4);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      protectedProperties4.keys();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties15);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties3);
      Attribute attribute1 = new Attribute((String) null, (List<String>) null, protectedProperties18);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2046);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 2231.121046378709, 4.94E-321);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1, instancesArray0.length);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      String string0 = jRip0.seedTipText();
      assertFalse(jRip0.getDebug());
      assertEquals("The seed used for randomizing the data.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[4];
      intArray0[0] = 8;
      intArray0[1] = 68;
      intArray0[2] = 8;
      intArray0[3] = 68;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(8, intArray0, (-14));
      IBk iBk0 = new IBk();
      try { 
        jRip0.rulesetForOneClass(8, (Instances) null, 680.19729643, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = "The number of optimization runs.";
      // Undeclared exception!
      try { 
        jRip0.getMeasure("The number of optimization runs.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of optimization runs. not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getDebug();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties(properties1);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("S2u4", protectedProperties0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1656);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-322.49), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("lowercase", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttr();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getUsePruning();
      int int0 = 0;
      Attribute attribute0 = new Attribute("", "", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccuRate();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-932));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[8];
      intArray0[0] = 227;
      intArray0[1] = 21;
      intArray0[2] = 255;
      intArray0[3] = 455;
      intArray0[4] = (-260);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-3397);
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string0);
      
      jRip_RipperRule0.size();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      double double0 = jRip_RipperRule0.getConsequent();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      decisionTable1.setDisplayRules(false);
      intArray0[4] = 3;
      intArray0[2] = 3;
      intArray0[0] = 2;
      intArray0[5] = 1;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ative", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip_RipperRule0.getRevision();
      principalComponents0.getRevision();
      decisionTable0.m_evaluator = (ASEvaluation) principalComponents0;
      jRip_RipperRule0.setConsequent(5);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "HBC)P5");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)113;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "HBC)P5");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "implementation.  However, we didn't consider memory consumption ");
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "c[oQ{Ou");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList0, 11);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "u^5");
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.size();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      bayesNet1.getOptions();
      bayesNet1.setSearchAlgorithm(searchAlgorithm0);
      BayesNet bayesNet2 = new BayesNet();
      bayesNet0.setSearchAlgorithm(searchAlgorithm0);
      bayesNet0.getOptions();
      BayesNet bayesNet3 = new BayesNet();
      bayesNet3.measureReversedArcs();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.hasAntds();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      // Undeclared exception!
      try { 
        bayesNet3.getProbability(592, 592, 794);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.GERMANY;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale locale1 = Locale.TAIWAN;
      Locale locale2 = Locale.TAIWAN;
      locale2.getDisplayVariant();
      Locale locale3 = Locale.KOREA;
      locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList1, locale_FilteringMode1);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList3, locale_FilteringMode2);
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      decisionTable1.setDisplayRules(true);
      decisionTable1.m_classPriorCounts = null;
      intArray0[4] = 3;
      intArray0[2] = 3;
      intArray0[0] = 2;
      intArray0[2] = 1;
      Attribute attribute0 = new Attribute("w^z?*xjm1r+,c^z");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(25);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setMinNo(5.0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      AbstractClassifier.makeCopies(decisionTable1, 3);
      jRip_RipperRule0.covers(binarySparseInstance0);
      decisionTable0.m_evaluator = (ASEvaluation) principalComponents0;
      jRip_RipperRule0.setConsequent(5);
      IBk iBk0 = new IBk(4);
      assertEquals(0, iBk0.getWindowSize());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale locale1 = Locale.ENGLISH;
      Locale locale2 = Locale.TAIWAN;
      locale0.getDisplayVariant();
      Locale locale3 = Locale.CHINA;
      locale3.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) linkedList1);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute("Should never happen!", list0, 5386);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("date");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // date not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.882110387485166
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties1.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Properties properties1 = new Properties(protectedProperties4);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      protectedProperties4.keys();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties15);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties3);
      Attribute attribute1 = new Attribute((String) null, (List<String>) null, protectedProperties18);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2046);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 2231.121046378709, 4.94E-321);
      assertEquals(1, instancesArray0.length);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      jRip0.globalInfo();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2194.8690281699;
      SparseInstance sparseInstance0 = new SparseInstance(2194.8690281699, doubleArray0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      searchAlgorithm0.getOptions();
      bayesNet1.setSearchAlgorithm(searchAlgorithm0);
      jRip0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BayesNet bayesNet2 = new BayesNet();
      bayesNet0.setSearchAlgorithm(searchAlgorithm0);
      bayesNet0.getOptions();
      BayesNet bayesNet3 = new BayesNet();
      bayesNet3.measureReversedArcs();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      // Undeclared exception!
      try { 
        bayesNet3.getProbability(592, 592, 794);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)17;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      byte[] byteArray1 = new byte[4];
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HBC)P5");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HBC)P5");
      jRip0.setUsePruning(true);
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "");
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("j!ialB#Mh@6!", arrayList0, 57);
      Attribute attribute0 = new Attribute("@data");
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      Instance instance0 = BallNode.calcCentroidPivot((int) (byte)40, 1, intArray0, instances0);
      instances0.add(instance0);
      arrayList0.add(attribute0);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.CHINA;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale locale1 = Locale.FRENCH;
      locale1.getDisplayScript(locale0);
      locale0.getDisplayScript(locale1);
      Locale locale2 = Locale.TAIWAN;
      Locale locale3 = Locale.TAIWAN;
      Locale locale4 = new Locale("1BKl-dgODgMd,jx");
      locale0.getDisplayVariant();
      Locale locale5 = Locale.KOREA;
      locale3.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale6 = Locale.GERMANY;
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(":(CAM`9U>XX");
      int[] intArray0 = new int[0];
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      jRip0.getSeed();
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 2657.02218;
      DenseInstance denseInstance0 = new DenseInstance(4, doubleArray0);
      try { 
        coverTree0.nearestNeighbour(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[9];
      intArray0[0] = 78;
      intArray0[1] = (-317);
      intArray0[2] = 65;
      intArray0[3] = 2400;
      intArray0[4] = (-1414);
      intArray0[5] = (-4861);
      intArray0[6] = (-1);
      intArray0[7] = 3;
      intArray0[8] = (-654);
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 2400);
      Instances instances0 = null;
      try {
        instances0 = new Instances(bufferedReader1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // premature end of file, read Token[EOF], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.KOREA;
      locale1.getDisplayScript(locale0);
      locale0.getDisplayScript(locale1);
      Locale locale2 = Locale.ITALIAN;
      Locale locale3 = Locale.TAIWAN;
      Locale locale4 = new Locale("_CU8HO7S[[!Y");
      Locale locale5 = new Locale("-U <number of weighting method>");
      locale4.getDisplayVariant();
      Locale locale6 = Locale.TRADITIONAL_CHINESE;
      locale6.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale7 = Locale.KOREA;
      Locale locale8 = Locale.JAPANESE;
      locale8.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.forLanguageTag("1Kl-dgODgMd,jx");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("", linkedList3, 2344);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable0.m_useIBk = false;
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      decisionTable1.m_classPriorCounts = null;
      intArray0[4] = 3;
      intArray0[2] = 3;
      intArray0[3] = 4;
      intArray0[0] = 1;
      intArray0[5] = 1;
      decisionTable0.setUseIBk(true);
      intArray0[6] = 1;
      intArray0[7] = 3;
      intArray0[8] = 1;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayList0.retainAll(arrayList1);
      Instances instances0 = new Instances("", arrayList0, 3);
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8911601612408218
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties1.forEach(biConsumer0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Properties properties1 = new Properties(protectedProperties4);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      protectedProperties4.keys();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties15);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties3);
      Attribute attribute1 = new Attribute((String) null, (List<String>) null, protectedProperties18);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      Instances instances0 = new Instances("integer", arrayList0, 2046);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 2231.121046378709, 4.94E-321);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(1, instancesArray0.length);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale locale1 = Locale.JAPAN;
      Locale locale2 = Locale.TAIWAN;
      locale0.getDisplayVariant();
      Locale locale3 = Locale.KOREA;
      locale3.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("Should never happen!", list0, 2551);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList3.sort(comparator0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("Should never happen! <= NaN", string0);
      
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = jRip0.usePruningTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Whether pruning is performed.", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      RuleStats ruleStats0 = new RuleStats();
      String string0 = jRip0.debugTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether debug information is output to the console.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "regression ";
      stringArray0[1] = ">@}+6[JJ";
      stringArray0[2] = "(";
      stringArray0[3] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 2827);
      String[] stringArray1 = jRip0.getOptions();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(11, stringArray1.length);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Hashtable<Instance, Object> hashtable0 = new Hashtable<Instance, Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^`OXO`HJXOD)h]12rc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kj4=");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      assertFalse(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }
}
