/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 00:17:24 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.646659008126127
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("l");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "l";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "l";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("pand");
      lovinsStemmer0.stemString("Thepathematical Reviewsnum`e3.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("l");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("QpjH6?RZ");
      assertEquals("qpjh6?rz", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.77344404822194
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("umpt");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("WKfD}NE");
      lovinsStemmer0.stemString("OT)9qzmgR0");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer3.stemString("umpt");
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.globalInfo();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6260553158766378
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("n<%ull");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray0[2] = "Lz,xm{PKIk>ye<rP}q~";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer2.stemString("Indices from sort (ints): ");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string1 = lovinsStemmer5.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6287899417787428
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("^wbcG]NymNKlVI}Bo");
      lovinsStemmer2.toString();
      String string2 = lovinsStemmer2.stemString("olv");
      assertEquals("olut", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.615672462667606
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("CaBC?lP,/VM_^EA");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.stemString("editor");
      lovinsStemmer0.stem("her");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString(")RqX?X'B");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer3.globalInfo();
      lovinsStemmer2.stemString("ation");
      lovinsStemmer2.stemString("PTW8]?W=)Z^Dbgbj;F:");
      lovinsStemmer1.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6838281454170598
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ening");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("ening");
      lovinsStemmer0.stemString("(l(5rBq4` ");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer3.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.stem("ening");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("ening");
      lovinsStemmer5.stem("`\"1!l_z#xP");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer4.stem("ening");
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer6.stemString("Can't add object to itself!");
      lovinsStemmer6.toString();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer8.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6790637650052014
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("1&[b>ihvad}eTs)g");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "1&[b>ihvad}eTs)g";
      stringArray0[2] = "8034";
      stringArray0[3] = "1&[b>ihvad}eTs)g";
      stringArray0[4] = "1&[b>ihvad}ets)g";
      stringArray0[5] = "p$NVXRAd/D{";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("edRo$vPcX!H");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("1&[b>ihvad}eTs)g");
      assertEquals("1&[b>ihvas}es)g", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("BOOKLET");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6464908333678103
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("entiat");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ix");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ex");
      lovinsStemmer0.stem("ix");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("entiat");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString(" ");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("iev");
      assertEquals("ief", string2);
      
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("A work that is printed and bound, but without a named publisher or sponsoring institution.");
      lovinsStemmer0.stemString("ief");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.getTechnicalInformation();
      String string4 = lovinsStemmer0.stemString("ief");
      assertEquals("ief", string4);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6831334695793152
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("QWr!r;nP2mgG;U.");
      String string0 = lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("Quote parse error.");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("`vh3Re~,XA5O]5");
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6404569280748742
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("xe(AI:vf^CWXXVS");
      String string0 = lovinsStemmer0.stemString("less");
      assertEquals("les", string0);
      
      lovinsStemmer0.stem("less");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "xe(AI:vf^CWXXVS";
      stringArray0[1] = "xe(AI:vf^CWXXVS";
      stringArray0[2] = "xe(ai:vf^cwxxv";
      stringArray0[4] = "xe(ai:vf^cwxxv";
      lovinsStemmer0.stemString("ciddex");
      lovinsStemmer0.stem("entations");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("Nw>J]O=OvV4AO{MM@>");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("xe(AI:vf^CWXXVS");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("atingly");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stem("entations");
      assertEquals("ent", string1);
      
      String string2 = lovinsStemmer1.stemString("nw>j]o=ovv4ao{mm@>");
      assertEquals("nw>j]o=ovv4a{mm@>", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.getTechnicalInformation();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.stemString("K");
      String string4 = lovinsStemmer1.stem("ciddic");
      assertEquals("cis", string4);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6471955709280375
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("DK^E");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "tn?%(VRTte6";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("can't construct a path to file relative to user dir.ix");
      assertEquals("can't construc a path to fil rel to user dir.ix", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer0.stem("tn?%(VRTte6");
      lovinsStemmer0.stemString("L");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Yv:");
      lovinsStemmer0.stemString("%kzWXq435E1qr(0]");
      String string3 = lovinsStemmer0.stem("tn?%(VRTte6");
      assertEquals("tn?%(vrtte6", string3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.615349133633666
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("D");
      lovinsStemmer0.stem("\n\n");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.stemString("V@.;3NQFDfqSL-zkW");
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("d");
      String string2 = lovinsStemmer0.stemString("Fatal error.");
      assertEquals("fat error.", string2);
      
      lovinsStemmer0.stemString("0<xS");
      lovinsStemmer0.stem("wek.cor.stemmer.lovinsstemmer");
      String string3 = lovinsStemmer0.stemString("ides");
      assertEquals("id", string3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8030870446867682
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("]O9)!6ed?");
      lovinsStemmer4.globalInfo();
      String string0 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.stemString("rvpptlud");
      lovinsStemmer1.stemString("H");
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer1.stemString("yz");
      assertEquals("yz", string1);
      
      String string2 = lovinsStemmer1.stemString("IcRr#c7,RS:'d~(=3MR");
      assertEquals("icr#c7,rs:'d~(=3mr", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.665828079889005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.";
      stringArray0[2] = "The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.";
      stringArray0[3] = "The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.";
      stringArray0[4] = "The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.";
      stringArray0[5] = "The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.";
      stringArray0[6] = "The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.";
      stringArray0[7] = "The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.";
      stringArray0[8] = "The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("inism");
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stemString("et");
      lovinsStemmer0.stemString("String should not finish with ");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6482237557843569
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("bMu>+");
      lovinsStemmer3.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.stemString("bmu>+");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'~FtjEsLD1Q6";
      stringArray0[1] = "Lz,xm{PKIk>ye<rP}q~";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "bMu>+";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "bMu>+";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.stemString("otide");
      String string0 = lovinsStemmer1.stemString("iers");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6537205130627055
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("U[ttd3tH<");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("oides");
      lovinsStemmer0.stem("oid");
      lovinsStemmer0.stemString("entation");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[3];
      String string1 = lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      assertEquals("a docum hav an author and titl, but not form publ.", string1);
      
      stringArray0[1] = "entation";
      stringArray0[1] = "";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("oid");
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer1.stem("[,gma3Kb1+y{");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("&");
      lovinsStemmer2.toString();
      lovinsStemmer1.stem("ent");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("n>M$D\"-N;2eT0bB");
      String string3 = lovinsStemmer2.stemString("5SA5mf,-FhTW");
      assertEquals("5sa5mf,-fhtw", string3);
      
      String string4 = lovinsStemmer1.stem("n>M$D\"-N;2eT0bB");
      assertEquals("n>m$d\"-n;2et0b", string4);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6456583367644764
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("&(7rz#d\"7<K,\"(>nNVj");
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer1.stemString("rpt");
      assertEquals("rb", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.602662363456243
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("/y9.{42-i{-qYPcP");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("/y9.{42-i{-qypcp");
      lovinsStemmer0.stem("/y9.{42-i{-qYPcP");
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.stem("'5Z?|tf/,L");
      lovinsStemmer0.stemString("\ntoString():\n");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("acies");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "howpublished";
      stringArray0[1] = "'5z?|tf/,l";
      stringArray0[2] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("8034");
      String string3 = lovinsStemmer1.stemString("aci");
      assertEquals("ac", string3);
      
      String string4 = lovinsStemmer1.stem("jengljdlid");
      assertEquals("jengljdlis", string4);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7889515035944294
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("-h");
      assertEquals("-h", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-h";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem("inlux");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("inend");
      assertEquals("inens", string1);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("lid");
      assertEquals("lis", string3);
      
      String string4 = lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string4);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.695965424540747
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("bex");
      lovinsStemmer0.stem("bex");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\n";
      stringArray0[1] = "bic";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("YLTs`z&;4jF%e");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("icist");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("erisend");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("8034");
      lovinsStemmer2.toString();
      lovinsStemmer2.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6150893655969472
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("/y9.{42-i{-qYPcP");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("g;KG^/0Z8{");
      String string2 = lovinsStemmer1.stem("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      assertTrue(string2.equals((Object)string1));
      
      lovinsStemmer1.toString();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.stemString("8034");
      assertEquals("8034", string3);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.stem("erisend");
      lovinsStemmer0.toString();
      lovinsStemmer2.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      String string4 = lovinsStemmer1.getRevision();
      assertTrue(string4.equals((Object)string3));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6261019861835884
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("ert");
      lovinsStemmer5.globalInfo();
      lovinsStemmer5.globalInfo();
      lovinsStemmer4.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer7.stemString("edituad");
      lovinsStemmer1.globalInfo();
      lovinsStemmer5.globalInfo();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6563140511802756
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("%PfUm`*IclO6Ej");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("%pfum`*iclo6ej");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.stemString("\tDisplays this help.");
      lovinsStemmer5.stemString("e%[j7v");
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5819173480451507
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      lovinsStemmer0.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer1.stemString("ermisyz");
      assertEquals("ermisys", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("by");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5918841631509277
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("/y9.{42-i{-qYPcP");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      String[] stringArray0 = new String[8];
      stringArray0[6] = "freund, y. and mason, l.";
      stringArray0[2] = "-l";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "/y9.{42-i{-qypcp";
      stringArray0[5] = "8034";
      stringArray0[6] = "freund, y. and mason, l.";
      stringArray0[7] = "freund, y. and mason, l.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString(">~_rziG*");
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("2ROKO");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("1L?QaEj]nL]?Vf");
      assertEquals("1l?qaej]nl]?vf", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6436073015154757
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("xe(Afvf^C@WXXVS");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "xe(Afvf^C@WXXVS";
      stringArray0[1] = "xe(Afvf^C@WXXVS";
      stringArray0[2] = "xe(afvf^c@wxxv";
      stringArray0[4] = "xe(afvf^c@wxxv";
      stringArray0[3] = "xe(Afvf^C@WXXVS";
      stringArray0[6] = "xe(afvf^c@wxxv";
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("BOOKTITLE");
      String string0 = lovinsStemmer1.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.769720564878424
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("QMz1T=4j5Rd$");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "null";
      stringArray0[1] = "QMz1T=4j5Rd$";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string0 = lovinsStemmer5.stemString("her");
      lovinsStemmer4.stemString("P-BllusnN~x=p2L");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer8.toString();
      String string1 = lovinsStemmer6.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7913796807242757
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "WKfD}NE";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("]O9)!6ed?");
      lovinsStemmer1.stemString("]o9)!6ed?");
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main((String[]) null);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[1] = "a\"{h<6 _!&G.QC \"q?M";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[3] = "]o9)!6ed?";
      lovinsStemmer2.toString();
      stringArray1[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("WKfD}NE");
      assertEquals("wkfd}ne", string1);
      
      lovinsStemmer2.stemString("]o9)!6ed?");
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer0.stemString("pand");
      assertEquals("pans", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6676499347174734
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer3.stemString("]O9)!6ed?");
      assertEquals("]o9)!6ed?", string0);
      
      lovinsStemmer3.stemString("H");
      lovinsStemmer3.globalInfo();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer1.stemString("rvpptlud");
      assertEquals("rvpptlus", string1);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.stemString("rvpptlus");
      String string2 = lovinsStemmer4.stemString("ens");
      assertEquals("en", string2);
      
      lovinsStemmer4.globalInfo();
      lovinsStemmer4.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6275921047168906
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer3.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("learnyzix");
      lovinsStemmer3.toString();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer1.stemString("learnyzlud");
      assertEquals("learnyzlus", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6880237389147008
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "WKfD}NE";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("]O9)!6ed?");
      String string0 = lovinsStemmer1.stemString("]o9)!6ed?");
      assertEquals("]o9)!6ed?", string0);
      
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer1.stemString("editor");
      assertEquals("edit", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      lovinsStemmer3.globalInfo();
      String string2 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7920327689899156
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string0 = lovinsStemmer4.stemString("]O9)!6ed?");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#%6>Y1#C%OXZI.Tt";
      stringArray0[1] = "qywonduad";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "qywondex";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[7] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("qywonsert");
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer4.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6262046865905067
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("DK^E");
      assertEquals("dk^e", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      String string3 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string3);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6276827147497492
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("AcrrNp.#_@q{");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AcrrNp.#_@q{";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer2.stemString("serlux");
      assertEquals("serluc", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7464723934747377
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "yz";
      stringArray0[1] = "tn?%(vrtte6ert";
      stringArray0[2] = "Z)*Kb=D\"T|9Uz";
      stringArray0[3] = " L/Z";
      stringArray0[4] = "C4.5: Programs for Machine Learning";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\ntoBibTex():\n");
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.587084350767443
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("a>r");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("CONTENTS");
      LovinsStemmer.main((String[]) null);
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6974774353426705
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8034";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("booktitle");
      assertEquals("booktitl", string1);
      
      lovinsStemmer0.stemString("8034");
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string3 = lovinsStemmer1.stemString("istr");
      assertEquals("ister", string3);
      
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("i1Dk3WP}FkPNrc");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("8+2/aj");
      String string4 = lovinsStemmer1.stemString("3_c`kP{z)");
      assertEquals("3_c`kp{z)", string4);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7044180490214664
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("Lz,xm{PKIk>ye<rP}q~");
      lovinsStemmer3.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer2.stemString("lz,xm{pkik>ye<rp}q~");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lx5 2";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.stemString("!@oy<-I9.M[0a}`T");
      lovinsStemmer4.stemString("acy");
      String string1 = lovinsStemmer4.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6455685276864425
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.stemString("ond");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Lz,xm{PKIk>ye<rP}q~";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.stemString("'~FtjEsLD1Q6");
      lovinsStemmer5.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7778286170382918
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("bex");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\n";
      stringArray0[1] = "bic";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("\n");
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("uN#^Gw8,ild=1pp");
      String[] stringArray1 = new String[1];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("uN#^Gw8,ild=1pp");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\n");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.627546121091615
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("weka.core.Option");
      assertEquals("wek.cor.opt", string1);
      
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer1.stemString("pex");
      assertEquals("pic", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.666177282465268
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("xe(AI:vf^CWXXVS");
      assertEquals("xe(ai:vf^cwxxv", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("vad");
      assertEquals("vas", string1);
      
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6292298519853066
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string0 = lovinsStemmer3.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      String string1 = lovinsStemmer4.stemString("9xvex");
      assertEquals("9xvec", string1);
      
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.toString();
      String string2 = lovinsStemmer7.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.237787922915528
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("erid");
      assertEquals("eris", string0);
      
      String string1 = lovinsStemmer0.stem("tRe@oC-'");
      assertEquals("tre@oc-'", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7697500109472384
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "HOe_%dI`";
      stringArray0[1] = "#3yic,mQ<>I6U%S";
      stringArray0[2] = ".vn";
      stringArray0[3] = "a-qpa4yt c(l";
      stringArray0[5] = "key";
      stringArray0[6] = "INBOOK";
      stringArray0[7] = "}6";
      stringArray0[8] = "CHAPTER";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("a-qpa4yt c(l");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6470346808504979
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("&(7rz#d\"7<K,\"(>nNVj");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("lingucid");
      assertEquals("lingucis", string1);
      
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = "\"^hi\\u/eFs1!+-pv";
      lovinsStemmer1.stemString(string2);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string3 = lovinsStemmer5.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6276827147497492
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer3.stemString("lingurud");
      assertEquals("lingurus", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("^\"c]]|E&.![8");
      assertEquals("^\"c]]|e&.![8", string1);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6460378062894745
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("ant");
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Lz,xm{PKIk>ye<rP}q~";
      stringArray0[1] = "ant";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.stemString("'~FtjEsLD1Q6");
      lovinsStemmer6.stemString("end");
      String string1 = lovinsStemmer6.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6916206524194464
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("C=7lT#$`%~`9'B6i");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "qa>bH1Ka9@|]d/4:MQ*";
      stringArray0[1] = "C=7lT#$`%~`9'B6i";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "C=7lT#$`%~`9'B6i";
      stringArray0[4] = "et";
      stringArray0[5] = "C=7lT#$`%~`9'B6i";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "C=7lT#$`%~`9'B6i";
      stringArray0[8] = "C=7lT#$`%~`9'B6i";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("year");
      lovinsStemmer0.stemString("ond");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.toString();
      lovinsStemmer2.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5995918766382715
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("Normalized again (doubles): ");
      lovinsStemmer0.stemString("<--PePoMAr[K}~UbW");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("bookbex");
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6789907340545036
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("DK^E");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("Array-Dimensions of 'new String[3][4][]': ");
      String[] stringArray0 = new String[3];
      lovinsStemmer1.globalInfo();
      stringArray0[0] = "2E1b,~dd!PCe<$@!Wx.";
      stringArray0[1] = "oidal";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.657130167149187
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("DKE");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("en");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("The Library of Congress Call Number. I've also seen this as lib-congress.");
      assertEquals("th libr of congres cal number. i'v als seen th as lib-congres.", string1);
      
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      String string3 = lovinsStemmer0.stemString(">");
      assertEquals(">", string3);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5617338426108942
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("entation");
      assertEquals("ent", string0);
      
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string2);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5765400484533925
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("");
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.659481255111515
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ive");
      assertEquals("iv", string0);
      
      lovinsStemmer0.stem("f,U;A*{3<a$d@");
      lovinsStemmer0.stem(";rxOF$/py");
      String string1 = lovinsStemmer0.stemString("f,U;A*{3<a$d@");
      assertEquals("f,u;a*{3<a$d@", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "f,u;a*{3<a$d@";
      stringArray0[1] = "f,u;a*{3<a$d@";
      stringArray0[2] = ";rxOF$/py";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("lud");
      lovinsStemmer0.stemString(";rxOF$/py");
      lovinsStemmer0.stem("WH^|ks?<k?eF.uvOc");
      lovinsStemmer0.stemString("5.7 < 5.70001 ? ");
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("ax");
      assertEquals("ax", string3);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString(";rxOF$/py");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string4 = lovinsStemmer1.stem("end");
      assertEquals("ens", string4);
      
      String string5 = lovinsStemmer0.stem("Yl-GX:_wa:Bz`H1 I");
      assertEquals("yl-gx:_wa:bz`h1 ", string5);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6060779652203268
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4602108450555429
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4821607500136036
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Max index (ints): ");
      assertEquals("mac indic (int): ", string0);
  }
}
