/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 01:21:27 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import org.apache.derby.catalog.UUID;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.cache.CacheManager;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.access.Qualifier;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.GenerationClauseNode;
import org.apache.derby.impl.sql.conn.CachedStatement;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.BaseActivation;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.sql.execute.GenericScanQualifier;
import org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics;
import org.apache.derby.impl.store.access.heap.HeapRowLocation;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.engine.ConnectionInfo;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "deleteexecutesetstring(long,str)";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("deleteexecutesetstring(long,str)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"long\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Boolean.valueOf("\"TGp)(\"|_");
      SQLUtil.removeComments("\"TGp)(\"|_");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      jdbcClob jdbcClob0 = new jdbcClob(" or ");
      jdbcClob jdbcClob1 = new jdbcClob(" or ");
      jdbcClob1.getCharacterStream();
      StringReader stringReader0 = new StringReader(" or ");
      stringReader0.markSupported();
      stringReader0.reset();
      jdbcClob1.getAsciiStream();
      stringReader0.reset();
      stringReader0.reset();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("p+ZQACZj");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" or ", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(3, "(3oJ.FS");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("V0IJ=^W,v*6m`! d", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("V0IJ=^W,v*6m`! d : (3OJ.FS(1)", defaultDBTable0, 3, "V0IJ=^W,v*6m`! d : (3OJ.FS(1)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3OJ.FS(1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "exec";
      SQLUtil.isDML("exec");
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6954391918721161
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(2027);
      StringBuffer stringBuffer1 = new StringBuffer(2027);
      Boolean boolean0 = new Boolean("CiD");
      String string0 = SQLUtil.normalize("L^e`!A6", false);
      assertEquals("L ^ e ` ! A6", string0);
      
      String string1 = SQLUtil.renderValue(stringBuffer1);
      assertEquals("", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Boolean boolean0 = new Boolean("0.qAT[^Xu&]");
      TableContainer tableContainer0 = new TableContainer("880Jm2\"7N");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType.getInstance(2358, "n");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType0 = DBDataType.getInstance(2358, "0.qAT[^Xu&]");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("upper", defaultDBTable0, 2358, " NULL");
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("update, upper, upper, update, update, update, update, upper, upper");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'update, upper, upper, update, update, update, update, upper, upper' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.whitespaceChars(34, (-2913));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.nval = (double) (-2913);
      streamTokenizer0.eolIsSignificant(true);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 2913", string0);
      
      String[] stringArray0 = new String[3];
      streamTokenizer0.slashStarComments(false);
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "NbA$eVf)T";
      String string1 = SQLUtil.join("NbA$eVf)T", "- 2913", stringArray0, "NbA$eVf)T", ";,\"", stringArray0);
      assertEquals("NbA$eVf)T join NbA$eVf)T as ;,\" on - 2913.null = ;,\".null and - 2913.null = ;,\".null and - 2913.NbA$eVf)T = ;,\".NbA$eVf)T", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.7627925747848114
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[18];
      stringArray0[0] = "drop index";
      stringArray0[1] = "a;&YrVWv[pd>";
      stringArray0[2] = "select";
      stringArray0[3] = "select";
      stringArray0[4] = "org.h2.com";
      stringArray0[6] = "drop index";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop index", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("AxbzIy");
      dBPrimaryKeyConstraint0.setDoc((String) null);
      dBPrimaryKeyConstraint0.setName("alter tableexecuteupiat");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.h2.com", false, dBPrimaryKeyConstraint0);
      Boolean boolean1 = new Boolean(false);
      dBPrimaryKeyConstraint0.addColumnName("org.databene.commons.file.FileSuffixFilter");
      dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.databene.commons.file.FileSuffixFilter", defaultDBTable0, 6993, "drop index");
      SQLUtil.normalize("RI/!6xQo", false);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.436463203826685
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      TableContainer tableContainer0 = new TableContainer("", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, 2027, "");
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      System.setCurrentTimeMillis(2027);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("E#'K^hY");
      String string0 = "Sxkw^v@C3L";
      SQLUtil.isDML("Sxkw^v@C3L");
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("alter tablee");
      stringReader1.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      SQLUtil.isProcedureCall("org.apache.derby.impl.store.raw.data.PurgeOperation");
      SQLUtil.mutatesStructure("");
      DBSchema dBSchema0 = new DBSchema("dro[ ta3le");
      mockPrintWriter0.checkError();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8362387245525418
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isQuery("SELECT");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter tableupiate)", 23);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBDataType.getInstance(1499, "Uz()W73)k");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      dataDictionaryImpl0.createRoleClosureIterator((TransactionController) null, "}", true);
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl1.dataDescriptorGenerator;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isProcedureCall("derby.version.maint");
      Boolean boolean0 = new Boolean(false);
      SQLUtil.isDDL("DBhF>uy=1R|");
      SQLUtil.isProcedureCall("alter table");
      // Undeclared exception!
      SQLUtil.mutatesStructure("K/*<");
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      Integer integer0 = new Integer(485);
      DBDataType dBDataType0 = DBDataType.getInstance(361, "");
      Integer integer1 = new Integer(485);
      TableContainer tableContainer0 = new TableContainer("getRow", dBSchema0);
      tableContainer0.getTable("p#nX:Ba~");
      DBDataType dBDataType1 = DBDataType.getInstance(1620, "getRow");
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger("xxyA,", integer2);
      Integer.remainderUnsigned(361, 485);
      Integer integer3 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.im", (DBTable) null, dBDataType1, integer0);
      defaultDBColumn0.setFractionDigits(integer1);
      defaultDBColumn0.setDefaultValue((String) null);
      defaultDBColumn0.setName("call");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBCatalog dBCatalog0 = new DBCatalog("org.apache.derby.im");
      dBCatalog0.getTable("org.apache.derby.impl.st", false);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      System.setCurrentTimeMillis(361);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.533955093384807
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("create lateMialized view");
      tableContainer0.getTable("renameexec");
      DBDataType dBDataType0 = DBDataType.getInstance(65, "");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = new Integer(65);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create lateMialized view", (DBTable) null, dBDataType0, integer2, integer0);
      defaultDBColumn0.setName(" join ");
      SQLUtil.mutatesDataOrStructure("calldrop tableh<p3e8evbweepx[g");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter session";
      stringArray0[1] = null;
      stringArray0[2] = "|h_,6i+.ew?t9r";
      stringArray0[3] = " join ";
      stringArray0[4] = "alter session";
      SQLUtil.renderColumnListWithTableName("1QLm GiVbi/Pg^q!g", stringArray0);
      Integer integer3 = RawTransaction.ABORT;
      Integer.getInteger("generateAlternativeSeed", integer3);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "1QLm GiVbi/Pg^q!g.alter session, 1QLm GiVbi/Pg^q!g.null, 1QLm GiVbi/Pg^q!g.|h_,6i+.ew?t9r, 1QLm GiVbi/Pg^q!g. join , 1QLm GiVbi/Pg^q!g.alter session");
      stringBuilder0.append((float) (-110496755));
      stringBuilder0.append(false);
      SQLUtil.mutatesDataOrStructure("alter session");
      SQLUtil.isProcedureCall("create lateMialized view");
      SQLUtil.addOptionalCondition("update>(x", stringBuilder0);
      assertEquals("1QLm GiVbi/Pg^q!g.alter session, 1QLm GiVbi/Pg^q!g.null, 1QLm GiVbi/Pg^q!g.|h_,6i+.ew?t9r, 1QLm GiVbi/Pg^q!g. join , 1QLm GiVbi/Pg^q!g.alter session-1.10496752E8false or update>(x", stringBuilder0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"TGp)(\"|_";
      stringArray0[1] = "into";
      stringArray0[2] = "org.firebirdsql.gds.impl.jni.ParameterBufferBase";
      stringArray0[4] = "\"TGp)(\"|_";
      stringArray0[5] = " SELECTIVIYY ";
      stringArray0[6] = "23>Mj]|p|Gzx@";
      Integer.max((-878), (-878));
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("E{.8R,", integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" SELECTIVIYY ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "drnop index";
      stringArray0[1] = "drnop index";
      stringArray0[2] = "selet";
      Character.valueOf('S');
      Character.highSurrogate(65);
      Character.lowSurrogate((-2217));
      DBTable dBTable0 = null;
      DBDataType dBDataType0 = DBDataType.getInstance(436, ",f/:3-BvmI'X&J");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drnop index", (DBTable) null, dBDataType0, integer0, integer1);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      defaultDBColumn0.equals((Object) null);
      defaultDBColumn0.toString();
      // Undeclared exception!
      try { 
        DBDataType.jdbcTypeFor("drnop index : ,F/:3-BVMI'X&J(0,1)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      Integer integer0 = RawTransaction.ABORT;
      SQLUtil.normalize("--", false);
      Integer integer1 = RawTransaction.COMMIT;
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      HeapRowLocation heapRowLocation0 = new HeapRowLocation();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 5, "gd[");
      defaultDBColumn0.setDefaultValue("select");
      defaultDBColumn0.setName("@_-!>)K6937;/<");
      defaultDBColumn0.setVersionColumn(false);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("c013800d-00fb-2648-07ec-000000134f30", defaultDBTable0, 2276, "create tabled");
      defaultDBColumn1.isEquivalent(defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      Character.valueOf('^');
      Character.highSurrogate((-2217));
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("@_-!>)K6937;/<", integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(1533, ">v|lm4,*cI[3!(");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("The empty string is not a valid path", defaultDBTable0, dBDataType0, integer2, (Integer) null);
      SQLUtil.renderColumn(dBColumnArray0[2]);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertFalse(simpleResultSet0.wasNull());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tabled,7hrsd&go},ijfS");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create tabled,7hrsd&go},ijfS", defaultDBTable1, (-74), "create tabled,7hrsd&go},ijfS");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      defaultDBColumn0.getNotNullConstraint();
      LinkedList<DBColumn> linkedList1 = new LinkedList<DBColumn>();
      linkedList1.add((DBColumn) defaultDBColumn0);
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "create tabled,7hrsd&go},ijfS";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, (String) null, true, stringArray0);
      dBUniqueConstraint0.setDoc("op_rollback_retaining ");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      dBUniqueIndex0.setOwner(defaultDBTable1);
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList1);
      assertEquals("create tabled,7hrsd&go},ijfS", string0);
      
      DBDataType.getInstance((-1426), "m,");
      String string1 = defaultDBColumn0.toString();
      assertEquals("create tabled,7hrsd&go},ijfS : CREATE TABLED,7HRSD&GO},IJFS", string1);
      
      SQLUtil.removeComments("op_rollback_retaining ");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("op_rollback_retaining ", defaultDBTable0, (-74), "Me<C~ZvSnATx9");
      dBColumnArray0[6] = (DBColumn) defaultDBColumn1;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("create tabled,7hrsd&go},ijfS, create tabled,7hrsd&go},ijfS, create tabled,7hrsd&go},ijfS, create tabled,7hrsd&go},ijfS, create tabled,7hrsd&go},ijfS, create tabled,7hrsd&go},ijfS, op_rollback_retaining ", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      boolean boolean0 = false;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "setString(long,str)";
      stringArray0[1] = "AxfzIy";
      stringArray0[2] = "}kb8[hob+edn9?aesh";
      stringArray0[3] = "}kb8[hob+edn9?aesh";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "setString(long,str)", false, stringArray0);
      ArrayList<DBCheckConstraint> arrayList0 = new ArrayList<DBCheckConstraint>();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("}kb8[hob+edn9?aesh", false, defaultDBTable0, stringArray0);
      dBNonUniqueIndex0.toString();
      dBNonUniqueIndex0.setName("}kb8[hob+edn9?aesh");
      dBNonUniqueIndex0.setOwner(defaultDBTable0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      dBPrimaryKeyConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CONSTRANT ", false, dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.addColumnName("AxfzIy");
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      Random.setNextRandom(312);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("yj8aT!Oi.NdtO L{v", defaultDBTable0, 312, "setString(long,str)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"long\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8022392163073206
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0.qAT[^Xu&]";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0.qAT[^Xu&]");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, defaultDBTable0, "kH");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("rename)t~{w</_", stringBuilder0);
      String[] stringArray1 = new String[0];
      SQLUtil.renderColumnListWithTableName((String) null, stringArray1);
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?{o", true, stringArray1);
      DBDataType dBDataType0 = DBDataType.getInstance(8, "execregisteroutparameter");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?{o", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("rename)t~{w</_CONSTRAINT ?{o ", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec1);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("?{o, ?{o", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0285116880585354
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tabled,7hrsd&go},ijfS");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create tabled,7hrsd&go},ijfS", defaultDBTable0, (-74), "}'QKYcFu$ 3!)XVj5");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.poll();
      linkedList0.add((DBColumn) defaultDBColumn0);
      defaultDBColumn0.getNotNullConstraint();
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      System.setCurrentTimeMillis((-74));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">(X");
      SQLUtil.isDML(">(X");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create tabled,7hrsd&go},ijfS";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select into", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      StringReader stringReader0 = new StringReader("e)R]bpPfA");
      stringReader0.close();
      SQLUtil.isProcedureCall("create tabled,7hrsd&go},ijfS");
      SQLUtil.mutatesStructure("dro[ ta3le");
      DBSchema dBSchema0 = new DBSchema("alter materialized viewalter materialized view");
      mockPrintWriter0.checkError();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.isQuery("\"k[9Z");
      SQLUtil.mutatesDataOrStructure("create tabled,7hrsd&go},ijfS, create tabled,7hrsd&go},ijfS");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = null;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = null;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("n-t?28,<;)-jnE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'n-t?28,<;)-jnE' not found in table 'create tabled,7hrsd&go},ijfS'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6640520518256288
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "\"TGp)(\"|_";
      stringArray0[0] = "\"TGp)(\"|_";
      stringArray0[1] = "\"TGp)(\"|_";
      stringArray0[2] = "\"TGp)(\"|_";
      stringArray0[4] = "\"TGp)(\"|_";
      stringArray0[5] = " SELECTIVIYY ";
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean("calldro[ ta3le");
      SQLUtil.normalize("]}Zxy/Y*E_C", true);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("\"TGp)(\"|_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: \"TGp)(\"|_
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "e]1";
      String string1 = "#:h[3\\&_*=";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter index32;+81@", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("e]1", (String[]) null, "#:h[3&_*=", "e]1", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3241711660450233
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("IS NOT NULL");
      assertNull(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Vf[Gf@V4DVJa6L>H,x");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isDDL("registerOutParameter");
      SQLUtil.isDDL("+G");
      SQLUtil.isProcedureCall("update@qev:wtv");
      SQLUtil.isDDL("org.databene.commons.converter.FormatHolder");
      PipedReader pipedReader0 = new PipedReader();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDataDescriptorGenerator();
      SQLUtil.isDDL("update@qev:wtv");
      boolean boolean1 = SQLUtil.isProcedureCall("+G");
      SQLUtil.isDML("org.h2.message.DbException");
      SQLUtil.isDDL("+G");
      SQLUtil.isProcedureCall("SESSION_STATE");
      SQLUtil.mutatesStructure("OEYC");
      boolean boolean2 = SQLUtil.isDML("update@qev:wtv");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0761873793232555
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m<Djh[*)Cr$>");
      DBDataType dBDataType0 = DBDataType.getInstance(339, " name = ");
      DBDataType dBDataType1 = DBDataType.getInstance(339, "create tablecreate latemialized view");
      dBDataType0.isAlpha();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("m<Djh[*)Cr$>", defaultDBTable0, dBDataType0, integer1);
      dBDataType1.isAlpha();
      DBDataType.getInstance(434, " nam: =N");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("H<P3E8EvbwEEpx[G", defaultDBTable0, dBDataType1);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDataDescriptorGenerator();
      SQLUtil.isDML(" nam: =N");
      SQLUtil.isProcedureCall("execupdate");
      DBSchema dBSchema0 = new DBSchema("create tablecreate latemialized view");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%PGg?>vk");
      mockPrintWriter0.checkError();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("m<Djh[*)Cr$>", defaultDBTable0.getName());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "XyL{Gx)_";
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("XyL{Gx)_", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("sortNeeded: ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sortNeeded: ", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("sortNeeded: .sortNeeded: ", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("sortNeeded: ", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4046433530470055
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tabled,7hrsd&go},ijfS");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create tabled,7hrsd&go},ijfS", defaultDBTable0, (-74), "}'QKYcFu$ 3!)XVj5");
      DBDataType dBDataType0 = DBDataType.getInstance((-74), "create tablecreate tabled,7hrsd&go},ijfs, create tabled,7hrsd&go},ijfs");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create tabled,7hrsd&go},ijfS", defaultDBTable0, dBDataType0);
      defaultDBTable0.equals(defaultDBColumn1);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.poll();
      linkedList0.add((DBColumn) defaultDBColumn0);
      defaultDBColumn0.getNotNullConstraint();
      linkedList0.add((DBColumn) defaultDBColumn0);
      defaultDBColumn0.equals("}'QKYcFu$ 3!)XVj5");
      SQLUtil.normalize("create tabled,7hrsd&go},ijfS", true);
      System.setCurrentTimeMillis((-74));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">(X");
      SQLUtil.isDML(">(X");
      StringReader stringReader0 = new StringReader("e)R]bpPfA");
      stringReader0.close();
      defaultDBColumn0.setName("e)R]bpPfA");
      SQLUtil.isProcedureCall("create tabled,7hrsd&go},ijfS");
      SQLUtil.mutatesStructure("dro[ ta3le");
      DBSchema dBSchema0 = new DBSchema("alter materialized viewalter materialized view");
      SQLUtil.isDDL("create tablecreate tabled,7hrsd&go},ijfs, create tabled,7hrsd&go},ijfs");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.isQuery("create tabled,7hrsd&go},ijfS");
      SQLUtil.mutatesDataOrStructure("create tabled, 7hr  sd & go }, ijfS");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = null;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("n-t?28,<;)-jnE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'n-t?28,<;)-jnE' not found in table 'create tabled,7hrsd&go},ijfS'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[18];
      stringArray0[2] = "AxbzIy";
      stringArray0[3] = "AxbzIy";
      stringArray0[4] = "org.h2.com";
      stringArray0[6] = "org.h2.com";
      String string0 = SQLUtil.normalize("\"ShPVFm-", false);
      assertEquals("\"ShPVFm-\"", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6905685741684042
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "Ppnto";
      stringArray0[2] = "org.firebirdsql.gds.impl.jni.ParameterBufferBase";
      stringArray0[4] = stringArray0[0];
      stringArray0[5] = " SELECTIVIYY ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@_-!>)K6937;/<", defaultDBTable0, 5, "@_-!>)K6937;/<");
      defaultDBColumn0.setDefaultValue(stringArray0[4]);
      defaultDBColumn0.setName("drop materialized v`ewncull");
      SQLUtil.isProcedureCall("org.firebirdsql.gds.impl.jni.ParameterBufferBase");
      SQLUtil.mutatesStructure("create materialized viewa;5yevwv[pd>");
      DBSchema dBSchema0 = new DBSchema("org.firebirdsql.gds.impl.jni.ParameterBufferBase");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      mockPrintWriter0.checkError();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.isQuery("left");
      SQLUtil.mutatesDataOrStructure("@_-!>)K6937;/<");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.723296143691395
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XSDAA.S", defaultDBTable0, (-1910), "XSDAA.S");
      linkedList0.add((DBColumn) defaultDBColumn0);
      defaultDBColumn0.getNotNullConstraint();
      linkedList0.add((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V\"RN5z";
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      stringArray0[1] = "XSDAA.S";
      stringArray0[2] = "XSDAA.S";
      stringArray0[3] = "%-GIJU&";
      stringArray0[4] = "L9x[57|eti(Pg W:8'";
      stringArray0[5] = "L9x[57|eti(Pg W:8'";
      stringArray0[6] = "org.apache.derby.impl.sql.compile.ExpressionClassBuilder";
      stringArray0[7] = "L9x[57|eti(Pg W:8'";
      stringArray0[8] = "L9x[57|eti(Pg W:8'";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "V\"RN5z", true, stringArray0);
      dBUniqueConstraint0.setDoc("m,");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("L9x[57|eti(Pg W:8'", true, dBUniqueConstraint0);
      dBUniqueIndex0.setOwner(defaultDBTable0);
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      DBDataType.getInstance(1431655765, "create unique index");
      defaultDBColumn0.toString();
      SQLUtil.typeAndName((DBObject) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("PROVIDERID", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jfp`pCD^u}Y3%", defaultDBTable0, (DBDataType) null, (Integer) null);
      defaultDBColumn0.setDoc((String) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0.qAT[^Xu&]";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0.qAT[^Xu&]");
      String string0 = "{Nw";
      TableContainer tableContainer0 = new TableContainer("0.qAT[^Xu&]", defaultDBTable0);
      TableContainer tableContainer1 = new TableContainer((String) null, tableContainer0);
      tableContainer1.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("0.qAT[^Xu&]", (DBSchema) null);
      boolean boolean0 = true;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("8", true, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      Integer integer0 = RawTransaction.ABORT;
      tableContainer1.toString();
      StringBuilder stringBuilder0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      stringBuilder1.reverse();
      StringBuffer stringBuffer0 = new StringBuffer(2058);
      SQLUtil.addOptionalCondition("ServiceBoot", stringBuilder0);
      assertEquals("ServiceBoot", stringBuilder0.toString());
      
      DBSchema dBSchema0 = new DBSchema("ServiceBoot");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SESSION_STATE", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "SESSION_STATE";
      stringArray0[1] = "ServiceBoot";
      stringArray0[2] = "SESSION_STATE";
      stringArray0[3] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "3F2'@AOAb", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (SESSION_STATE, ServiceBoot, SESSION_STATE, )", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[10];
      Integer integer0 = RawTransaction.COMMIT;
      Integer.toUnsignedString(1010);
      Integer.toUnsignedLong(1010);
      Integer.compareUnsigned(1010, 3);
      Integer integer1 = RawTransaction.ABORT;
      Boolean boolean0 = Boolean.FALSE;
      String string0 = SQLUtil.join(stringArray0[0], "Rd_c", stringArray0, "1010", "1010", stringArray0);
      assertEquals("1010 as 1010 on Rd_c.null = 1010.null and Rd_c.null = 1010.null and Rd_c.null = 1010.null and Rd_c.null = 1010.null and Rd_c.null = 1010.null and Rd_c.null = 1010.null and Rd_c.null = 1010.null and Rd_c.null = 1010.null and Rd_c.null = 1010.null and Rd_c.null = 1010.null", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2243459334381526
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0.qAT[^Xu&]");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, defaultDBTable0, "rename");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("rename)t~{w</_", stringBuilder0);
      assertEquals("rename)t~{w</_", stringBuilder0.toString());
      
      String[] stringArray1 = new String[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.renderColumnNames(stringArray1);
      SQLUtil.typeAndName(dBCheckConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.constraintName(dBCheckConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "create materialized viewinsertcreate materialized viewupdate)", false, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "`~zQl;%Ek0f<|";
      DBSchema dBSchema0 = new DBSchema("`~zQl;%Ek0f<|");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`~zQl;%Ek0f<|", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`~zQl;%Ek0f<|";
      stringArray0[1] = "`~zQl;%Ek0f<|";
      stringArray0[2] = "`~zQl;%Ek0f<|";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("`~zQl;%Ek0f<|", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CONSTRAINT `~zQl;%Ek0f<| ");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(404, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 404
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      String[] stringArray0 = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "calld,7hrsd&go},ijfp", false, (String[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "O#q6J{?'|tiAn";
      SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3643764676852554
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tabled,7hrsd&go},ijfS");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create tabled,7hrsd&go},ijfS", defaultDBTable0, (-74), "}'QKYcFu$ 3!)XVj5");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      defaultDBColumn0.getNotNullConstraint();
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      DBSchema dBSchema0 = new DBSchema(">(X");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = " or ";
      stringArray0[2] = "create table ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "0.qAT[^Xu&]";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.remainderUnsigned(335544323, 335544323);
      Integer.min(335544323, 333);
      Integer integer1 = RawTransaction.COMMIT;
      String string0 = Integer.toUnsignedString(1010);
      Integer.toUnsignedLong(1183);
      Integer.compareUnsigned(0, (-2307));
      Integer integer2 = RawTransaction.ABORT;
      String string1 = SQLUtil.normalize("", false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4464761951733767
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ceate tabled,7hrsd&go},ij");
      DBSchema dBSchema0 = new DBSchema(">X");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NCLOB");
      boolean boolean0 = SQLUtil.isDML(">X");
      StringReader stringReader0 = new StringReader("nUuD? pXYawcsI4");
      stringReader0.close();
      boolean boolean1 = SQLUtil.isProcedureCall("alter materialized view`q#.t*|fl3pr");
      Boolean boolean2 = SQLUtil.mutatesStructure("nUuD? pXYawcsI4");
      assertTrue(boolean2.equals((Object)boolean1));
      
      DBSchema dBSchema1 = new DBSchema("nUuD? pXYawcsI4");
      mockPrintWriter0.checkError();
      NameSpec nameSpec0 = NameSpec.NEVER;
      Locale locale0 = new Locale("ceate tabled,7hrsd&go},ij", "nUuD? pXYawcsI4");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "ceate tabled,7hrsd&go},ij";
      objectArray0[1] = (Object) ")";
      objectArray0[2] = (Object) "TRUE";
      objectArray0[3] = (Object) "drop materialized view";
      objectArray0[4] = (Object) "e)R]bpPfA";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) nameSpec0;
      objectArray0[7] = (Object) boolean2;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, ")", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      boolean boolean3 = SQLUtil.isQuery("80000020-00d0-fd77-3ed8-000a0a0b1900");
      assertFalse(boolean3);
      
      Boolean boolean4 = SQLUtil.mutatesDataOrStructure("alter materialized view`q#.t*|fl3pr");
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.620408609367757
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "G";
      String string0 = "PROJECTION";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "..");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("execute", 125);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringArray0[1] = "PROJECTION";
      stringArray0[2] = "execute";
      stringArray0[3] = "WU{a{| ts}I";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      TableContainer tableContainer0 = new TableContainer("_}y=32)!n%e')bV!");
      tableContainer0.getTable("PROJECTION");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", (DBTable) null, (DBDataType) null, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9496928612711248
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create materialized view");
      mockPrintWriter0.println();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "cK'{)";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) defaultDBTable0;
      objectArray0[3] = (Object) "cK'{)";
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "cK'{)";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "aNDeDC>^{@A>/";
      stringArray0[1] = "cK'{)";
      stringArray0[2] = "aNDeDC>^{@A>/";
      stringArray0[3] = "cK'{)";
      stringArray0[4] = " writing: ";
      stringArray0[6] = "cK'{)";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.typeAndName(defaultDBTable0);
      Object[] objectArray1 = new Object[6];
      objectArray1[1] = (Object) "aNDeDC>^{@A>/";
      objectArray1[3] = (Object) "aNDeDC>^{@A>/";
      objectArray1[4] = (Object) mockPrintWriter0;
      objectArray1[5] = (Object) "aNDeDC>^{@A>/";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(2027);
      StringBuffer stringBuffer1 = new StringBuffer(2027);
      Boolean.valueOf("jsk`Mm@@no`1@");
      // Undeclared exception!
      try { 
        SQLUtil.join("alter index", "}#0vuQQ*9[ ", (String[]) null, "calldrop tableh<p3e8evb", ":DgRR9?/HTS'G>", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      String string0 = "wwT)ji*]^";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("executeupiate", true, defaultDBTable0, stringArray0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      defaultDBTable2.addIndex(dBNonUniqueIndex0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"TGp)(\"|_";
      stringArray0[1] = "\"TGp)(\"|_";
      stringArray0[2] = "\"TGp)(\"|_";
      stringArray0[4] = "\"TGp)(\"|_";
      Integer.min(3823, (-1717986916));
      Integer integer0 = new Integer(3823);
      Integer.min((-287), (-3));
      Integer.toUnsignedString((-102566748));
      Integer.min((-2029752792), 39);
      Integer integer1 = new Integer((-1132369468));
      Integer integer2 = new Integer((-2029752792));
      Integer.getInteger("\"TGp)(\"|_", integer2);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cur-< {";
      stringArray0[1] = "update";
      stringArray0[2] = "|AM";
      stringArray0[3] = "k___";
      stringArray0[4] = "QEqFU";
      stringArray0[5] = "alter indexcreate materialized viewa;5yevwv[pd>";
      stringArray0[6] = "call";
      stringArray0[7] = "8PU~2-Q";
      String string0 = SQLUtil.normalize("8PU~2-Q", false);
      assertEquals("8PU ~ 2 - Q", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockFile mockFile0 = new MockFile("a;&YrVWv[pd>", "drop index");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      mockFile0.getCanonicalFile();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop index";
      stringArray0[2] = "a;&YrVWv[pd>";
      stringArray0[3] = "CROSS JOIN";
      stringArray0[4] = "a;&YrVWv[pd>";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("uVDDt/;26", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT uVDDt/;26 FOREIGN KEY (drop index, , a;&YrVWv[pd>, CROSS JOIN, a;&YrVWv[pd>, ) REFERENCES null(drop index, , a;&YrVWv[pd>, CROSS JOIN, a;&YrVWv[pd>, )", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "0.qAT[^Xu&]";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.remainderUnsigned(335544323, 335544323);
      Integer.compare((-1988), (-231535573));
      Integer.min(335544323, 333);
      Integer.getInteger("fixed", 1010);
      Integer.toUnsignedString(1010);
      Integer.toUnsignedLong(1183);
      Integer.compareUnsigned(0, (-2307));
      Integer.max(3924, 3924);
      Integer.getInteger((String) null, integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Boolean.valueOf("LOHASH+JOIN");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "0.qAT[^Xu&]";
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = "fixed";
      stringArray1[4] = "9dG@4+C{";
      // Undeclared exception!
      try { 
        SQLUtil.join("/0X\"0.NvKAkaB", "42Z26", stringArray0, (String) null, "9dG@4+C{", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[QZ}DIT>MwGol;");
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("nVJn:oQx*LSYpx{", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4993646124305886
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 5, "gd[");
      defaultDBColumn0.setOwner(defaultDBTable0);
      defaultDBColumn0.setDefaultValue("select");
      defaultDBColumn0.setName("@_-!>)K6937;/<");
      defaultDBColumn0.setVersionColumn(false);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("c013800d-00fb-2648-07ec-000000134f30", defaultDBTable0, 2276, "create tabled");
      defaultDBColumn1.isEquivalent(defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      defaultDBColumn1.setVersionColumn(false);
      Character character0 = Character.valueOf('^');
      defaultDBColumn0.equals(character0);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Character character1 = Character.valueOf('');
      SQLUtil.renderValue(character1);
      StringBuilder stringBuilder0 = new StringBuilder(2276);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2276, (long) 2276);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2276
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      SQLUtil.normalize("updateRef(String,Ref)", false);
      HeapRowLocation heapRowLocation0 = new HeapRowLocation();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      genericLanguageConnectionFactory0.getStatementCache();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory1 = new GenericLanguageConnectionFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory2 = new GenericLanguageConnectionFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory3 = new GenericLanguageConnectionFactory();
      genericLanguageConnectionFactory2.getStatementCache();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory4 = new GenericLanguageConnectionFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory5 = new GenericLanguageConnectionFactory();
      genericLanguageConnectionFactory4.getStatementCache();
      CachedStatement cachedStatement0 = new CachedStatement();
      GenerationClauseNode generationClauseNode0 = new GenerationClauseNode();
      generationClauseNode0.toString();
      generationClauseNode0.getAuxiliaryProviderList();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory6 = new GenericLanguageConnectionFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory7 = new GenericLanguageConnectionFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory8 = new GenericLanguageConnectionFactory();
      CacheManager cacheManager0 = genericLanguageConnectionFactory8.getStatementCache();
      assertNull(cacheManager0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      stringBuilder0.reverse();
      StringBuffer stringBuffer0 = new StringBuffer(2058);
      String string0 = SQLUtil.normalize("]}Zxy/Y*E_C", false);
      assertEquals("] } Zxy / Y * E_C", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = new Boolean(" 1n");
      SQLUtil.normalize("$%:*lbmcE1h?~/aO`", true);
      HeapRowLocation heapRowLocation0 = new HeapRowLocation();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      constantActionActivation0.getTargetVTI();
      ConstantActionActivation constantActionActivation2 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation3 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation4 = new ConstantActionActivation();
      constantActionActivation4.setMaxRows((-2514));
      constantActionActivation1.getDynamicResults();
      System.setCurrentTimeMillis((-2514));
      constantActionActivation0.getDynamicResults();
      UUID uUID0 = constantActionActivation0.getObjectID();
      assertNull(uUID0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean("[o5r?W;Sh");
      Boolean boolean2 = SQLUtil.mutatesStructure("call@qe:tv");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      jdbcClob jdbcClob0 = new jdbcClob(" or ");
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7707356420353721
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[18];
      stringArray0[0] = "drop index";
      stringArray0[1] = "a;&YrVWv[pd>";
      stringArray0[2] = "select";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("AxfzIy", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      dBForeignKeyConstraint0.setDoc("G&mcBc=9`ZTqkzskzej");
      defaultDBTable0.countProviders();
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint0.equals(dBForeignKeyConstraint1);
      FKChangeRule fKChangeRule1 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule1);
      DBForeignKeyConstraint dBForeignKeyConstraint2 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      String string0 = dBForeignKeyConstraint2.toString();
      assertEquals("CONSTRAINT AxfzIy FOREIGN KEY (drop index, a;&YrVWv[pd>, select, , , , , , , , , , , , , , , ) REFERENCES null(drop index, a;&YrVWv[pd>, select, , , , , , , , , , , , , , , )", string0);
      
      dBForeignKeyConstraint2.columnReferencedBy("select");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint2, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint1, nameSpec1);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0647549344121345
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "create materialized view";
      stringArray0[1] = "create materialized view";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "jaasApplicationName";
      String string1 = "GZc'Yq?:;j4F!y$drH";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "GZc'Yq?:;j4F!y$drH", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("Rpr3n1", stringBuilder1);
      int int0 = (-1619963498);
      // Undeclared exception!
      try { 
        stringBuilder2.deleteCharAt((-1619963498));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1619963498
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "iq0AV:tU}WT&";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("iq0AV:tU}WT&");
      int int0 = (-2049);
      String string1 = "|>(p`msh'";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("iq0AV:tU}WT&", defaultDBTable0, (-2049), "|>(p`msh'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: |>(p`msh'
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(65);
      Integer integer1 = Integer.getInteger(" on ", integer0);
      Integer integer2 = new Integer(65);
      Integer.toUnsignedString(561);
      Integer.getInteger(" on ", 1198);
      Integer.divideUnsigned(65, 561);
      Integer.min(7, (-1717986916));
      Integer integer3 = new Integer(65);
      Integer.min((-298), (-298));
      Integer.toUnsignedString(1051);
      Integer.min(65, 1051);
      Integer integer4 = new Integer(1183);
      Integer integer5 = new Integer(65);
      Integer.getInteger(",D9ZWt$.", integer1);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getObjectID();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("alte", false);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean("[o5r?W;Sh");
      StringBuffer stringBuffer0 = new StringBuffer(2027);
      StringBuffer stringBuffer1 = new StringBuffer(34);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("[o5r?W;Sh", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rcev>;4FVsAb");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "xEx2\"mdAwI74c!STNR";
      stringArray0[1] = "rcev>;4FVsAb";
      stringArray0[2] = "rcev>;4FVsAb";
      stringArray0[3] = "rcev>;4FVsAb";
      stringArray0[4] = "rcev>;4FVsAb";
      stringArray0[5] = "rcev>;4FVsAb";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "org.h2.command.ddl.CreateSchema";
      stringArray1[1] = "rcev>;4FVsAb";
      stringArray1[2] = "xEx2\"mdAwI74c!STNR";
      stringArray1[3] = "rcev>;4FVsAb";
      stringArray1[4] = "xEx2\"mdAwI74c!STNR";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("rcev>;4FVsAb", stringArray0, "SEARCHABLE", "org.h2.command.ddl.CreateSchema", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.7645387392242404
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("3z");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "3z";
      stringArray0[2] = "3z";
      stringArray0[3] = "3z";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, 3z, 3z, 3z, , )", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("3z");
      SQLUtil.isQuery("lockMode:");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("update)");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string1 = SQLUtil.substituteMarkers("g4{(El[zw-i-(%Aq8Vn", "select intoon update", "select intoon update");
      assertEquals("g4{(El[zw-i-(%Aq8Vn", string1);
      
      SQLUtil.isProcedureCall("inner");
      boolean boolean2 = SQLUtil.isDDL("N5-G5_hb3SthXc8|5");
      assertFalse(boolean2);
      
      String string2 = SQLUtil.join("inner", "3z", stringArray0, "select intoon update", "select intoon update", stringArray0);
      assertEquals("select intoon update as select intoon update on 3z.null = select intoon update.null and 3z.3z = select intoon update.3z and 3z.3z = select intoon update.3z and 3z.3z = select intoon update.3z and 3z.null = select intoon update.null and 3z.null = select intoon update.null", string2);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1374535592459263
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("nVJn:oQx*LSYpx{");
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) "nVJn:oQx*LSYpx{";
      objectArray0[2] = (Object) "nVJn:oQx*LSYpx{";
      objectArray0[3] = (Object) "|>(p`msh'";
      mockPrintWriter0.format("nVJn:oQx*LSYpx{", objectArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nVJn:oQx*LSYpx{";
      stringArray0[1] = "nVJn:oQx*LSYpx{";
      stringArray0[2] = "nVJn:oQx*LSYpx{";
      stringArray0[3] = "|>(p`msh'";
      stringArray0[4] = "|>(p`msh'";
      stringArray0[5] = "nVJn:oQx*LSYpx{";
      stringArray0[6] = "nVJn:oQx*LSYpx{";
      stringArray0[7] = "nVJn:oQx*LSYpx{";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("gzX");
      SQLUtil.addRequiredCondition("gzX", stringBuilder0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'A';
      stringBuilder0.reverse();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      RealDistinctScanStatistics realDistinctScanStatistics0 = new RealDistinctScanStatistics(4022, 18, 333, 0L, (-1710L), (-159L), 2509L, 3708, "ciarLen/th", "ciarLen/th", true, 'A', (int[]) null, " NcULL", "gzX", formatableProperties0, " NcULL", "gzX", "\"tgp)(\"|_", "(^CT,InE7GeG|", (-1528.7043801166892), 18);
      realDistinctScanStatistics0.nextQualifiers = "ciarLen/th";
      realDistinctScanStatistics0.inspectOverall = 1L;
      FormatableProperties formatableProperties1 = realDistinctScanStatistics0.scanProperties;
      ConnectionInfo connectionInfo0 = null;
      try {
        connectionInfo0 = new ConnectionInfo("(^CT,InE7GeG|", formatableProperties1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value \"(^CT,InE7GeG|\" for parameter \"url\" [90008-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ceate tabled,7hrsd&go},ijf");
      System.setCurrentTimeMillis(0L);
      DBSchema dBSchema0 = new DBSchema(">(X");
      String[] stringArray0 = new String[1];
      MockFile mockFile0 = new MockFile("constraint");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CROSS JOIN", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.setDoc("constraint");
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint1, nameSpec0);
      assertEquals("CONSTRAINT \"CROSS JOIN\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = stringArray0[0];
      Boolean.valueOf("selet");
      String string0 = SQLUtil.normalize("create tablecreate tabled,7hrsd&go},ijfs, create tabled,7hrsd&go},ijfs", false);
      assertEquals("create tablecreate tabled, 7hr  sd & go }, ijfs, create tabled, 7hr  sd & go }, ijfs", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create materialized view", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Boolean boolean0 = new Boolean("select");
      Boolean.getBoolean("select");
      Boolean boolean1 = new Boolean("select");
      String string0 = SQLUtil.normalize("e0UTa]P]vlS@'GYJ", false);
      assertEquals("e0UTa ] P ] vlS @ 'GYJ'", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = new Object();
      Object object1 = new Object();
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      String string0 = SQLUtil.renderValue("1LHfq]");
      assertEquals("'1LHfq]'", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "QEqFU";
      Object object0 = new Object();
      objectArray0[2] = (Object) "Cur-< {";
      objectArray0[3] = (Object) "}kb8[hob+edn9?aesh";
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "XBM0V.S";
      stringArray0[1] = "XBM0V.S";
      stringArray0[2] = "XBM0V.S";
      stringArray0[3] = "XBM0V.S";
      stringArray0[4] = "XBM0V.S";
      stringArray0[5] = "XBM0V.S";
      stringArray0[7] = "XBM0V.S";
      MockFile mockFile0 = new MockFile("a;&YrVWv[pd>", ")3}g^$Zp");
      mockFile0.setReadOnly();
      MockFile.createTempFile("XBM0V.S", "a;&YrVWv[pd>", (File) mockFile0);
      mockFile0.mkdir();
      mockFile0.getCanonicalFile();
      FileUtil.canonicalFile((File) mockFile0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.whitespaceChars(34, 34);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.eolIsSignificant(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer2);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.addRequiredCondition("", stringBuilder0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'A';
      stringBuilder0.reverse();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create tablegn|4-?4cav{cx_{";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'A';
      objectArray0[2] = (Object) "create tablegn|4-?4cav{cx_{";
      objectArray0[3] = (Object) " SELECTIVITY ";
      objectArray0[4] = (Object) "";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) " SELECTIVITY ";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      Random.setNextRandom(1494);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "QEqFU";
      Object object0 = new Object();
      objectArray0[2] = (Object) "Cur-< {";
      objectArray0[3] = (Object) "}kb8[hob+edn9?aesh";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.3822194921698756
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O#q6J{?'|tiAn", defaultDBTable0, 68, "");
      defaultDBColumn0.getNotNullConstraint();
      dBPrimaryKeyConstraint0.equals((Object) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("m9w8w^##BM", (String[]) null, "alter materialized vieworg.apache.derby.impl.store.raw.data.setreservedspaceoperation", "unique constraint ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.5669499167988556
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(485);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("execdro[ ta3le", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Integer integer1 = RawTransaction.ABORT;
      DBDataType.getInstance(361, "");
      Integer integer2 = new Integer(485);
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("getRow");
      assertNull(boolean0);
      
      Integer integer5 = RawTransaction.ABORT;
      String string0 = SQLUtil.substituteMarkers("", "CLOB", integer5);
      assertEquals("", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "[iZsv#,rM+oKPPY FSg";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[iZsv#,rM+oKPPY FSg");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      int int0 = 1;
      StringBuilder stringBuilder0 = new StringBuilder(1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      MockFile mockFile0 = new MockFile((String) null, "[iZsv#,rM+oKPPY FSg");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      stringBuilder0.append(127.0F);
      stringBuilder0.reverse();
      stringBuilder0.appendCodePoint(2058);
      StringBuffer stringBuffer0 = new StringBuffer(2058);
      SQLUtil.addOptionalCondition("ServiceBoot", stringBuilder0);
      assertEquals("0.721\u080A or ServiceBoot", stringBuilder0.toString());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "select0h>5 ~tt7ajp9glx");
      int int0 = 2058;
      stringBuilder0.reverse();
      Boolean boolean0 = new Boolean("time exceeded");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean1 = new Boolean(false);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("$fHS=");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "5IVUe#yI[fz){", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("update", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("$fHS=", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$fHS=", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "update";
      stringArray0[1] = "update";
      stringArray0[2] = "$fHS=";
      stringArray0[3] = "";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable1, (DBDataType) null, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.016496301416993
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("UNIQUE ()", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT \"UNIQUE ()\" FOREIGN KEY () REFERENCES null()", string1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(65);
      Integer.getInteger(" on ", integer0);
      Integer integer1 = new Integer(65);
      Integer integer2 = new Integer(65);
      String string0 = Integer.toUnsignedString(1051);
      Integer integer3 = new Integer(1183);
      GenericScanQualifier genericScanQualifier0 = new GenericScanQualifier();
      Qualifier[][] qualifierArray0 = new Qualifier[3][3];
      Qualifier[] qualifierArray1 = new Qualifier[3];
      qualifierArray1[0] = (Qualifier) genericScanQualifier0;
      qualifierArray1[1] = (Qualifier) genericScanQualifier0;
      qualifierArray1[2] = (Qualifier) genericScanQualifier0;
      qualifierArray0[0] = qualifierArray1;
      Qualifier[] qualifierArray2 = new Qualifier[0];
      qualifierArray0[1] = qualifierArray2;
      Qualifier[] qualifierArray3 = new Qualifier[1];
      qualifierArray3[0] = (Qualifier) genericScanQualifier0;
      qualifierArray0[2] = qualifierArray3;
      BaseActivation.reinitializeQualifiers(qualifierArray0);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getDynamicResults();
      constantActionActivation0.getObjectID();
      String string1 = SQLUtil.renderValue(qualifierArray1[2]);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.isDDL("org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(65);
      Integer integer1 = Integer.getInteger(" on ", integer0);
      Integer integer2 = new Integer(65);
      Integer.compare(65, 17);
      Integer.toUnsignedString(65);
      Integer.getInteger("crea");
      Integer.getInteger(" on ", 1198);
      Integer.divideUnsigned(65, 65);
      Integer.min(7, (-1717986916));
      Integer integer3 = new Integer(65);
      Integer.min(7, 7);
      Integer.toUnsignedString(1051);
      Integer.min(65, 1051);
      Integer integer4 = new Integer(1183);
      Integer integer5 = new Integer(65);
      Integer.getInteger("65", integer1);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter tablejxecuteupiate");
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.2933852235912173
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "setString(long,str)";
      stringArray0[1] = "AxfzIy";
      stringArray0[2] = "}kb8[hob+edn9?aesh";
      stringArray0[3] = "}kb8[hob+edn9?aesh";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "setString(long,str)", false, stringArray0);
      ArrayList<DBCheckConstraint> arrayList0 = new ArrayList<DBCheckConstraint>();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("}kb8[hob+edn9?aesh", true, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      dBPrimaryKeyConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CONSTRANT ", false, dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.addColumnName("AxfzIy");
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) dBPrimaryKeyConstraint0;
      objectArray0[1] = (Object) "CONSTRANT ";
      objectArray0[2] = (Object) "setString(long,str)";
      objectArray0[3] = (Object) "CONSTRAINT setString(long,str) PRIMARY KEY (setString(long,str), AxfzIy, }kb8[hob+edn9?aesh, }kb8[hob+edn9?aesh)";
      objectArray0[4] = (Object) arrayList0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) dBPrimaryKeyConstraint0;
      objectArray0[7] = (Object) arrayList0;
      objectArray0[8] = (Object) "}kb8[hob+edn9?aesh";
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("setString(long,str) = CONSTRAINT setString(long,str) PRIMARY KEY (setString(long,str), AxfzIy, }kb8[hob+edn9?aesh, }kb8[hob+edn9?aesh) AND AxfzIy = 'CONSTRANT ' AND }kb8[hob+edn9?aesh = 'setString(long,str)' AND }kb8[hob+edn9?aesh = 'CONSTRAINT setString(long,str) PRIMARY KEY (setString(long,str), AxfzIy, }kb8[hob+edn9?aesh, }kb8[hob+edn9?aesh)'", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(65);
      Integer.getInteger(" on ", integer0);
      Integer integer1 = new Integer(65);
      Integer.toUnsignedString(561);
      Integer.getInteger("crea");
      Integer.getInteger(" on ", 1198);
      Integer.divideUnsigned(65, 561);
      Integer.min(7, (-1717986916));
      Integer integer2 = new Integer(65);
      Integer.min((-298), (-298));
      Integer.toUnsignedString(1051);
      Integer.min(65, 1051);
      Integer integer3 = new Integer(1183);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter index");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter index");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~rK3|75^Jmv,i'2C");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = new Integer(485);
      DBDataType.getInstance(485, "");
      Integer integer1 = new Integer(485);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)88;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      DBDataType.getInstance(1620, "MqH[6Hhdl^ly");
      Integer integer2 = new Integer((byte)113);
      Integer.sum(34, (byte) (-55));
      Integer.getInteger("", integer2);
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Boolean.valueOf("u$;.`");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "|7", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLUtil.substituteMarkers("FjKC)bU. ##", "FjKC)bU. ##", "FjKC)bU. ##");
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("Jtw~2>m J*::", "update", object0);
      assertEquals("Jtw~2>m J*::", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.4543147528693494
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "0.qAT[^Xu&]";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.remainderUnsigned(335544323, 335544323);
      Integer integer1 = RawTransaction.COMMIT;
      Integer.toUnsignedString(1010);
      Integer.toUnsignedLong(335544323);
      Integer.compareUnsigned(0, (-2307));
      Integer integer2 = RawTransaction.ABORT;
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getResultSetHoldability();
      constantActionActivation0.setMaxRows(0);
      constantActionActivation0.getIndexScanController();
      constantActionActivation0.getDynamicResults();
      System.setCurrentTimeMillis(1L);
      constantActionActivation0.getDynamicResults();
      constantActionActivation0.getObjectID();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE 0.qAT[^Xu&] = '0.qAT[^Xu&]' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "XBM0V.S";
      stringArray0[1] = "XBM0V.S";
      stringArray0[2] = "XBM0V.S";
      stringArray0[3] = "XBM0V.S";
      stringArray0[4] = "XBM0V.S";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("XBM0V.S", stringArray0, "XBM0V.S", "XBM0V.S", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "w8;n..Yf6Bd.~";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "w8;n..Yf6Bd.~";
      stringArray1[1] = "w8;n..Yf6Bd.~";
      String string0 = SQLUtil.leftJoin("w8;n..Yf6Bd.~", stringArray0, "w8;n..Yf6Bd.~", "w8;n..Yf6Bd.~", stringArray1);
      assertEquals("left join w8;n..Yf6Bd.~ as w8;n..Yf6Bd.~ on w8;n..Yf6Bd.~.w8;n..Yf6Bd.~ = w8;n..Yf6Bd.~.w8;n..Yf6Bd.~", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      char[] charArray0 = new char[3];
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NCLOB";
      stringArray0[1] = "select into";
      stringArray0[3] = "NCLOB";
      stringArray0[4] = "select into";
      // Undeclared exception!
      try { 
        SQLUtil.join("select into", "NCLOB", stringArray0, "NCLOB", "NCLOB", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "COUNT ";
      stringArray0[1] = "COUNT ";
      stringArray0[2] = "COUNT ";
      stringArray0[3] = "COUNT ";
      stringArray0[4] = "COUNT ";
      stringArray0[5] = "COUNT ";
      String string0 = SQLUtil.leftJoin("COUNT ", stringArray0, (String) null, "FIELD_LENGTH", stringArray0);
      assertEquals("left join null as FIELD_LENGTH on COUNT .COUNT  = FIELD_LENGTH.COUNT  and COUNT .COUNT  = FIELD_LENGTH.COUNT  and COUNT .COUNT  = FIELD_LENGTH.COUNT  and COUNT .COUNT  = FIELD_LENGTH.COUNT  and COUNT .COUNT  = FIELD_LENGTH.COUNT  and COUNT .COUNT  = FIELD_LENGTH.COUNT ", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1724), "yn4W''8@");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, (Integer) null);
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DBCatalog dBCatalog0 = new DBCatalog("org.apache.derby.catalog.types.BaseTypeIdImpl");
      dBCatalog0.getTable("org.apache.derby.catalog.types.BaseTypeIdImpl", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.catalog.types.BaseTypeIdImpl", (DBTable) null, 23, "org.apache.derby.catalog.types.BaseTypeIdImpl");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.apache.derby.catalog.types.BaseTypeIdImpl");
      dBCatalog0.setOwner((CompositeDBObject<?>) null);
      StringBuilder stringBuilder1 = stringBuilder0.insert(2, (CharSequence) "org.apache.derby.catalog.types.BaseTypeIdImpl", 2, 2);
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 2);
      StringBuilder stringBuilder3 = stringBuilder2.append((-585));
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder3);
      assertEquals("org.apache.derby.catalog.types.BaseTypeIdImpl2.0-585ORG.APACHE.DERBY.CATALOG.TYPES.BASETYPEIDIMPL", stringBuilder3.toString());
      assertEquals("org.apache.derby.catalog.types.BaseTypeIdImpl2.0-585ORG.APACHE.DERBY.CATALOG.TYPES.BASETYPEIDIMPL", stringBuilder0.toString());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(65);
      Integer integer1 = Integer.getInteger(" on ", integer0);
      Integer integer2 = new Integer(65);
      Integer.compare(65, 17);
      Integer.toUnsignedString(561);
      Integer.getInteger("crea");
      Integer.getInteger(" on ", 1198);
      Integer.getInteger(" on ", integer1);
      Integer.divideUnsigned(65, 561);
      Integer.min(7, (-1717986916));
      Integer integer3 = new Integer(65);
      Integer.min((-287), (-287));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer4 = RawTransaction.ABORT;
      Integer.getInteger("crea", integer1);
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Integer integer6 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(7, "g|e/l");
      Integer integer7 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XBCXT.S", (DBTable) null, dBDataType0, integer2, integer7);
      SQLUtil.renderColumn(defaultDBColumn0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertFalse(simpleResultSet0.isClosed());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      StringBuffer stringBuffer0 = new StringBuffer(2722);
      StringBuffer stringBuffer1 = new StringBuffer(2722);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "js]p}?*&");
      Boolean boolean0 = new Boolean(true);
      boolean boolean1 = SQLUtil.isDDL("alter index");
      assertTrue(boolean1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "registerOutParameter");
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 4022;
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      SQLUtil.isDDL("CREATE SCHEMA ");
      constantActionActivation0.setMaxRows(4022);
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      constantActionActivation1.setSingleExecution();
      // Undeclared exception!
      try { 
        constantActionActivation1.getMethod("Unknown constraint type: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[10];
      stringArray0[0] = "drnop index";
      stringArray0[1] = "a;&YrVWv[pd>";
      stringArray0[2] = "select";
      stringArray0[1] = "alter indexa;5yevwv[pd>";
      stringArray0[6] = stringArray0[4];
      Boolean boolean1 = new Boolean("alter indexa;5yevwv[pd>");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "RI/!6xQo";
      stringArray1[2] = "RI/!6xQo";
      stringArray1[3] = "alter indexa;5yevwv[pd>";
      stringArray1[4] = "a;&YrVWv[pd>";
      String string0 = SQLUtil.join("alter indexa;5yevwv[pd>", "select", stringArray1, "^zDg\"L", "drnop index", stringArray0);
      assertEquals("alter indexa;5yevwv[pd> join ^zDg\"L as drnop index on select.RI/!6xQo = drnop index.drnop index and select.null = drnop index.alter indexa;5yevwv[pd> and select.RI/!6xQo = drnop index.select and select.alter indexa;5yevwv[pd> = drnop index.null and select.a;&YrVWv[pd> = drnop index.null", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("insertnot", stringArray0, "select intoupiate)", "select intoupiate)", stringArray0);
      assertEquals("select intoupiate) as select intoupiate) on ", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?Fn~cVvYHBq3";
      stringArray0[1] = "updatecalldrop tableh<p3e8evbweepx[g";
      stringArray0[2] = "updatecalldrop tableh<p3e8evbweepx[g";
      stringArray0[3] = "updatecalldrop tableh<p3e8evbweepx[g";
      String string0 = SQLUtil.innerJoin("updatecalldrop tableh<p3e8evbweepx[g", stringArray0, "insert", "updatecalldrop tableh<p3e8evbweepx[g", stringArray0);
      assertEquals("insert as updatecalldrop tableh<p3e8evbweepx[g on updatecalldrop tableh<p3e8evbweepx[g.?Fn~cVvYHBq3 = updatecalldrop tableh<p3e8evbweepx[g.?Fn~cVvYHBq3 and updatecalldrop tableh<p3e8evbweepx[g.updatecalldrop tableh<p3e8evbweepx[g = updatecalldrop tableh<p3e8evbweepx[g.updatecalldrop tableh<p3e8evbweepx[g and updatecalldrop tableh<p3e8evbweepx[g.updatecalldrop tableh<p3e8evbweepx[g = updatecalldrop tableh<p3e8evbweepx[g.updatecalldrop tableh<p3e8evbweepx[g and updatecalldrop tableh<p3e8evbweepx[g.updatecalldrop tableh<p3e8evbweepx[g = updatecalldrop tableh<p3e8evbweepx[g.updatecalldrop tableh<p3e8evbweepx[g", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7707356420353721
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[18];
      stringArray0[0] = "drop index";
      stringArray0[1] = "a;&YrVWv[pd>";
      stringArray0[2] = "select";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("AxfzIy", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      dBForeignKeyConstraint0.setDoc("G&mcBc=9`ZTqkzskzej");
      defaultDBTable0.countProviders();
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint0.equals(dBForeignKeyConstraint1);
      FKChangeRule fKChangeRule1 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule1);
      DBForeignKeyConstraint dBForeignKeyConstraint2 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      String string0 = dBForeignKeyConstraint2.toString();
      assertEquals("CONSTRAINT AxfzIy FOREIGN KEY (drop index, a;&YrVWv[pd>, select, , , , , , , , , , , , , , , ) REFERENCES null(drop index, a;&YrVWv[pd>, select, , , , , , , , , , , , , , , )", string0);
      
      dBForeignKeyConstraint2.columnReferencedBy("select");
      defaultDBTable0.getColumns();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint2, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint1, nameSpec1);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1987207767542218
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "setString(long,str)";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      ArrayList<DBCheckConstraint> arrayList0 = new ConstraintDescriptorList();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("setString(long,str)", true, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setTable(defaultDBTable0);
      String string0 = dBPrimaryKeyConstraint1.toString();
      assertEquals("PRIMARY KEY (setString(long,str), , , )", string0);
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("setString(long,str)", false, dBPrimaryKeyConstraint1);
      dBPrimaryKeyConstraint0.addColumnName("\u0001I\u0207");
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("h%DG,~&", defaultDBTable0, 312, "%WfI96");
      String string1 = SQLUtil.normalize("setString(long,str)", true);
      assertEquals("setString (long, str)", string1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.196664918501384
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Ppnto");
      String[] stringArray1 = new String[3];
      stringArray1[0] = "Ppnto";
      stringArray1[1] = "ya,zLyA<NE7>$%QW";
      stringArray1[2] = "Ppnto";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ya,zLyA<NE7>$%QW", true, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("ya,zLyA<NE7>$%QW", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, " h5P)TqKf.*9I,2` ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      StringBuffer stringBuffer0 = new StringBuffer(490);
      StringBuffer stringBuffer1 = null;
      try {
        stringBuffer1 = new StringBuffer((-2574));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "g1";
      stringArray1[1] = "g1";
      stringArray1[2] = null;
      stringArray1[3] = "g1";
      stringArray1[4] = null;
      stringArray1[5] = "g1";
      stringArray1[6] = "g1";
      stringArray1[7] = "g1";
      stringArray1[8] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "g1", false, stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder("create materialized viewk%o");
      StringBuilder stringBuilder1 = stringBuilder0.append("N)jNuiIz1=4_*");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      assertEquals("create materialized viewk%oN)jNuiIz1=4_*CONSTRAINT g1 ", stringBuilder1.toString());
      assertEquals("create materialized viewk%oN)jNuiIz1=4_*CONSTRAINT g1 ", stringBuilder0.toString());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(65);
      Integer.getInteger(" on ", integer0);
      Integer integer1 = new Integer(65);
      Integer.toUnsignedString(561);
      Integer integer2 = new Integer(65);
      Integer.toUnsignedString(1051);
      Integer.min(65, 1051);
      Integer integer3 = new Integer(1183);
      Integer integer4 = new Integer(65);
      Boolean boolean1 = new Boolean("1051");
      String string0 = SQLUtil.normalize("|XAResource.XA_RDONLY", true);
      assertEquals("| XAResource.XA_RDONLY", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "I1tZ-X";
      stringArray0[1] = "I1tZ-X";
      stringArray0[2] = " or ";
      stringArray0[3] = " or ";
      stringArray0[4] = "I1tZ-X";
      stringArray0[5] = "I1tZ-X";
      jdbcClob jdbcClob0 = new jdbcClob("I1tZ-X");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StringReader stringReader0 = new StringReader(" or ");
      stringReader0.markSupported();
      stringReader0.reset();
      jdbcClob0.getAsciiStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.whitespaceChars(8192, 8192);
      stringReader0.reset();
      reader0.reset();
      streamTokenizer0.eolIsSignificant(true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = '}';
      charArray0[2] = 'h';
      String string0 = SQLUtil.normalize("u G<*)ITF2$Ej7sj9", true);
      assertEquals("u G < *) ITF2 $ Ej7sj9", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "0.qAT[^Xu&]";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "upiate)";
      SQLUtil.mutatesDataOrStructure("upiate)");
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory1 = new GenericLanguageConnectionFactory();
      genericLanguageConnectionFactory0.getStatementCache();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory2 = new GenericLanguageConnectionFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory3 = new GenericLanguageConnectionFactory();
      genericLanguageConnectionFactory3.newCacheable((CacheManager) null);
      genericLanguageConnectionFactory0.getStatementCache();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory4 = new GenericLanguageConnectionFactory();
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "select");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create materialized view", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Boolean boolean0 = new Boolean("select");
      Boolean.getBoolean("select");
      Boolean.logicalAnd(true, true);
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(true, false);
      Boolean.getBoolean("select");
      Boolean.compare(true, true);
      Boolean.logicalOr(true, true);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("callcreate latemialized view", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      Boolean.logicalAnd(false, true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean.valueOf(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.isQuery("registersutParameter");
      System.setCurrentTimeMillis((-1428L));
      System.setCurrentTimeMillis((-1428L));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "&";
      stringArray0[1] = "&";
      stringArray0[2] = "&";
      stringArray0[3] = "PKCOLUMN_NAME";
      stringArray0[4] = "&";
      stringArray0[5] = "&";
      String string0 = SQLUtil.renderColumnListWithTableName("&", stringArray0);
      assertEquals("&.&, &.&, &.&, &.PKCOLUMN_NAME, &.&, &.&", string0);
      
      boolean boolean0 = SQLUtil.isQuery("&");
      assertFalse(boolean0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "&.&, &.&, &.&, &.PKCOLUMN_NAME, &.&, &.&";
      stringArray1[1] = "&.&, &.&, &.&, &.PKCOLUMN_NAME, &.&, &.&";
      stringArray1[2] = "&";
      stringArray1[3] = "&.&, &.&, &.&, &.PKCOLUMN_NAME, &.&, &.&";
      stringArray1[4] = "&";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(&, &, &, PKCOLUMN_NAME, &, &)", string1);
  }
}
