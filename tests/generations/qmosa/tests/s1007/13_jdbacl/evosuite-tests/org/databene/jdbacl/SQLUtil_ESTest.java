/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 14:30:09 GMT 2020
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.derby.catalog.UUID;
import org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.sql.compile.NodeFactory;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.store.access.Qualifier;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.RowLocation;
import org.apache.derby.impl.services.reflect.ReflectClassesJava2;
import org.apache.derby.impl.services.reflect.ReflectGeneratedClass;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.NodeFactoryImpl;
import org.apache.derby.impl.sql.compile.QueryTreeNode;
import org.apache.derby.impl.sql.compile.TableName;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.sql.execute.GenericScanQualifier;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.access.btree.BTreeForwardScan;
import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
import org.apache.derby.impl.store.access.heap.Heap;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbc.JdbcConnection;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.hsqldb.rowio.RowOutputTextQuoted;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(90105, "ZyM1HhG");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.divideUnsigned(34, 797);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ZyM1HhG", (DBTable) null, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("ZyM1HhG", (DBTable) null, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("ZyM1HhG");
      StringBuilder stringBuilder2 = new StringBuilder("%");
      defaultDBColumn0.toString();
      Integer integer1 = RawTransaction.COMMIT;
      defaultDBColumn0.setFractionDigits(integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      defaultDBColumn0.isUnique();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-1);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FormatableProperties formatableProperties0 = new FormatableProperties();
      JdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new JdbcConnection("ZyM1HhG : ZYM1HHG(2)", formatableProperties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value \"ZyM1HhG : ZYM1HHG(2)\" for parameter \"url\" [90008-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = ">/_@,(\"R";
      stringArray0[3] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , >/_@,(\"R, )", string0);
      
      String string1 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = new Boolean("trGuncate");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bNjFksmbKbS";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "WqWHn|(sp:GBY@8E[", true, stringArray0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[1], true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("bNjFksmbKbS", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBUniqueIndex0.isIdentical(defaultDBTable0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create materialized viewkkcr;-%eh", true, dBTable0, stringArray0, dBTable0, stringArray0);
      dBPrimaryKeyConstraint0.setName("bNjFksmbKbS");
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("WqWHn|(sp:GBY@8E[", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex1.toString();
      dBForeignKeyConstraint0.isIdentical(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.typeAndName(dBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile(" data: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("unique constraint", dBUniqueConstraint0.getObjectType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(90105, "kKCREh");
      Integer integer0 = new Integer(90105);
      Integer.divideUnsigned((-3), 47);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter session", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setDoc("+@gZ/.'*vyl");
      defaultDBColumn0.setDefaultValue((String) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      defaultDBColumn0.isEquivalent(defaultDBColumn0);
      StringBuilder stringBuilder1 = new StringBuilder("6!`d\"xIY,f9S");
      defaultDBColumn0.toString();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("KKCREH(90105)", stringBuilder0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[15];
      stringArray0[0] = ":>5H&4!a!A~D=[M(";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, 387, "GpJY*K2&J~");
      Integer integer0 = new Integer(387);
      DBDataType dBDataType0 = DBDataType.getInstance(2469, "T`");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(":>5H&4!a!A~D=[M(", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.push(defaultDBColumn1);
      LinkedList<DBColumn> linkedList1 = new LinkedList<DBColumn>();
      linkedList1.clone();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      Object object0 = new Object();
      defaultDBTable0.getPrimaryKeyConstraint();
      linkedList1.removeFirstOccurrence(defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals(":>5H&4!a!A~D=[M(", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0361987848192837
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer1 = new Integer(4029);
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      File file0 = FileUtil.canonicalFile("'");
      MockFile mockFile0 = new MockFile(file0, "'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "VUAe";
      Object object0 = new Object();
      objectArray0[2] = (Object) mockFile0;
      mockPrintWriter0.printf("VUAe", objectArray0);
      mockPrintWriter0.append('B');
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'";
      stringArray0[1] = "VUAe";
      stringArray0[2] = "VUAe";
      stringArray0[3] = "VUAe";
      stringArray0[4] = "insertalter materslized viw<vbe@>|n}t?u";
      stringArray0[5] = "'";
      stringArray0[6] = "rename";
      stringArray0[7] = "'";
      stringArray0[8] = "'";
      SQLUtil.renderColumnListWithTableName("'", stringArray0);
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("xw,'", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.mutatesStructure("ille");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Object object0 = new Object();
      columnDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.64622455382987
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "^0~:#u?eTzA";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.derby.iapi.types.SQLVarchar";
      stringArray0[5] = "";
      SQLUtil.renderColumnListWithTableName("EventHandle: internal id = ", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DBSequence dBSequence0 = new DBSequence(stringArray0[6], "", "drop materialized view*/");
      Object object0 = new Object();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^0~:#u?eTzA", dBSchema0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance(208, "^0~:#u?eTzA");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create materialized view", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.isQuery("select");
      System.setCurrentTimeMillis((-1080L));
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(325);
      SQLUtil.addRequiredCondition("&", stringBuilder0);
      String string0 = "selectk1 into";
      SQLUtil.isQuery("selectk1 into");
      DBCatalog dBCatalog0 = new DBCatalog();
      Boolean boolean0 = new Boolean("drop materialized viewalter materslized viw<vbe@>|n}t?u");
      DBCatalog dBCatalog1 = new DBCatalog();
      Boolean boolean1 = new Boolean(false);
      String string1 = "`T?(";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLUtil.mutatesStructure("nlter indexewhc");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(253);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(" NOT");
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7782333057997077
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Boolean boolean0 = new Boolean("truncate");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean.logicalOr(false, false);
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      VersionNumber versionNumber1 = new VersionNumber(linkedList0);
      Boolean.logicalOr(true, true);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(rowOutputBinary0);
      mockPrintWriter1.print("B[");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " lv4UNnS79y`=OqP";
      mockPrintWriter1.println(true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("el", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter1);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT el FOREIGN KEY ( lv4UNnS79y`=OqP) REFERENCES null( lv4UNnS79y`=OqP)", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1682824501765625
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F[Lh7R$sS";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.join("inner", "$.Mx}6&O2<T`@Zb]", stringArray0, "deletealter materislized viww<vbeh>|n,}t?u", "inner", stringArray0);
      assertEquals("deletealter materislized viww<vbeh>|n,}t?u as inner on $.Mx}6&O2<T`@Zb].F[Lh7R$sS = inner.F[Lh7R$sS", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("F[Lh7R$sS = 'F[Lh7R$sS'", string1);
      
      DBSchema dBSchema0 = new DBSchema((String) null);
      dBSchema0.toString();
      String string2 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null", string2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Boolean boolean0 = new Boolean("truncate");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(90, "truncate");
      dBDataType0.isNumber();
      Integer.min(238, 491);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop tab", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Integer.remainderUnsigned((-1970818458), 4);
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(", name.hashCode()=", (DBTable) null, dBDataType0, integer1, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.slashSlashComments(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.lowerCaseMode(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer3);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "lruncate";
      boolean boolean0 = false;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "Di;{uui0R}>}$Q5a\">", "lruncate");
      int int0 = 1095;
      StringBuilder stringBuilder0 = new StringBuilder(1095);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      stringBuilder1.append((Object) "Di;{uui0R}>}$Q5a\">");
      // Undeclared exception!
      try { 
        stringBuilder0.replace(1095, 1095, "Di;{uui0R}>}$Q5a\">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8772995655520197
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("truncate");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "select";
      String string0 = SQLUtil.normalize("truncate", false);
      assertEquals("truncate", string0);
      
      boolean boolean1 = SQLUtil.isQuery("select");
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.removeComments("truncate");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(": k ] fc", false, (String) null, "insert");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK insert", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.7595473914748635
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[15];
      stringArray0[0] = ":>5H&4!a!A~D=[M(";
      stringArray0[1] = "Oz]yN 6MBfRST\"v";
      DBDataType.getInstance(61, "alter ma");
      DBDataType dBDataType0 = DBDataType.getInstance(61, "--");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Oz]yN 6MBfRST\"v", defaultDBTable0, dBDataType0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      dynamicByteArrayOutputStream0.write(985);
      dynamicByteArrayOutputStream0.close();
      dynamicByteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.close();
      mockPrintWriter0.print(1659.3314882);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLUtil.normalize("executefyg^ji5[nh*|r'$oea", false);
      Object object0 = new Object();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      assertEquals(46, jdbcDataSource0.getTraceId());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.484457535817486
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "bRjFksmDKbS", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      stringArray0[0] = "Oz]yN 6MBfRST\"v";
      stringArray0[1] = "bRjFksmDKbS";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Oz]yN 6MBfRST\"v", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter indexinner", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBUniqueIndex0.isIdentical(dBPrimaryKeyConstraint0);
      File file0 = MockFile.createTempFile("truncateselect", "alter indexinner");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append('4');
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      assertNull(dBTable0.getName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "bRjFksDKbS", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      stringArray0[0] = ":>5H&4!a!A~D=[M(";
      stringArray0[1] = "Oz]yN 6MBfRST\"v";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Oz]yN 6MBfRST\"v", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter indexinner", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop tab.", true, defaultDBTable0, stringArray0, dBTable0, stringArray0);
      String string0 = SQLUtil.substituteMarkers("", "bRjFksDKbS", "Oz]yN 6MBfRST\"v");
      assertEquals("", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean boolean0 = new Boolean("truncate");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      DBDataType dBDataType0 = DBDataType.getInstance(186, "delete");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer(186);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer1);
      dBDataType0.isNumber();
      defaultDBColumn0.setDefaultValue("truncate");
      defaultDBTable0.setName("create materialized view");
      defaultDBColumn0.getNotNullConstraint();
      Integer.min((-1730878509), (-1381));
      Integer.remainderUnsigned(413, (-3));
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6434177197931799
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "HASHJOIN";
      boolean boolean0 = true;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "HASHJOIN";
      String string1 = "truncatealter materialized viww<vbeh>|.n,}t?u";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "truncatealter materialized viww<vbeh>|.n,}t?u", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("PRIMARY KEY (HASHJOIN, , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"HASHJOIN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0608569471580214
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "kKCR;-%Eh";
      stringArray0[4] = "kKCR;-%Eh";
      stringArray0[2] = "Blob position should be >= 1";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Blob position should be >= 1");
      stringArray0[3] = "Blob position should be >= 1";
      stringArray0[4] = "Blob position should be >= 1";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("vMZ7.yh.!(P;j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: vMZ7.yh.!(P;j
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "bRjFksDKbS", true, stringArray0);
      stringArray0[0] = ":>5H&4!a!A~D=[M(";
      stringArray0[1] = "5x]q/a";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "5x]q/a", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("create tabletruncate", stringBuilder0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec1);
      StringBuilder stringBuilder3 = stringBuilder2.insert(1, (CharSequence) "alter indexinner");
      char[] charArray0 = new char[0];
      int int0 = 2147483645;
      // Undeclared exception!
      try { 
        stringBuilder3.insert((-12), charArray0, 2147483645, (-12));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -12
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[15];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "bRjFksDKbS", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      dBUniqueConstraint0.setDoc("alter ma");
      stringArray0[0] = ":>5H&4!a!A~D=[M(";
      stringArray0[1] = "Oz]yN 6MBfRST\"v";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("call");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(":>5H&4!a!A~D=[M(", false, dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      defaultDBTable0.getUniqueConstraint("Q,J v");
      String string0 = SQLUtil.constraintName(dBUniqueConstraint1);
      assertEquals("", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "GdepbY$|Gm^r6K'x'");
      String string0 = "derby.storage.fileSyncTransactionLog";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "derby.storage.fileSyncTransactionLog");
      String[] stringArray0 = null;
      SQLUtil.renderColumnNames((String[]) null);
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6459168300174678
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[14];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "bRjFksDKbS", true, stringArray0);
      dBUniqueConstraint0.setName("CREATE SCHEMA IF NOT EXISTS ");
      dBUniqueConstraint0.setDoc("Oz]yN 6MBfRST\"v");
      dBUniqueConstraint0.setTable(defaultDBTable0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      stringArray0[0] = ":>5H&4!a!A~D=[M(";
      stringArray0[1] = ":>5H&4!a!A~D=[M(";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Oz]yN 6MBfRST\"v", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc(":>5H&4!a!A~D=[M(");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter indexinner", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBPrimaryKeyConstraint0.toString();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("dro tab.", true, defaultDBTable0, stringArray0, dBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.isIdentical(dBUniqueIndex0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputTextQuoted rowOutputTextQuoted0 = new RowOutputTextQuoted("dro tab.", "alter tablealter materslized viw<vbe@>|n}t?u", ":>5H&4!a!A~D=[M(", false, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputTextQuoted0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer((-121074598));
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = new Integer((-121074598));
      Integer.divideUnsigned((-121074598), (-121074598));
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger("call", integer2);
      Integer.max(452, 1);
      Integer.getInteger("lelect", (-121074598));
      Integer.toUnsignedLong((-3842));
      Integer.remainderUnsigned(8, 1);
      Integer.max(8, (-1383));
      Integer.toUnsignedString((-220598991));
      Integer.getInteger("lelect");
      Integer.sum((-201669614), 355);
      String string0 = SQLUtil.normalize("/N_Pg*`%A6X=oDSa!", false);
      assertEquals("/ N  _P  g * ` % A6X = oDSa !", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6094379124341003
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean.logicalOr(false, false);
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      VersionNumber versionNumber1 = new VersionNumber(linkedList0);
      Boolean.logicalOr(true, true);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      mockPrintWriter0.print(0.5);
      mockPrintWriter0.print("B[");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " lv4UNnS79y`=OqP";
      mockPrintWriter0.println(true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("el", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.setName(" lv4UNnS79y`=OqP");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean boolean0 = new Boolean("trGuncate");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      integerArray0[0] = integer0;
      Integer.getInteger("trGuncate");
      integerArray0[1] = null;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.divideUnsigned((-121074594), (-121074594));
      integerArray0[5] = integer1;
      Integer integer2 = RawTransaction.COMMIT;
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer3;
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      System.setCurrentTimeMillis((-897L));
      String string0 = "=a}Cgt,B,:PQG";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("=a}Cgt,B,:PQG", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "kKCR;-%Eh");
      DBCatalog dBCatalog0 = new DBCatalog("callalter matrlized viw<vbe@>|n}t?u");
      DBSchema dBSchema0 = new DBSchema("kKCR;-%Eh", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("kKCR;-%Eh", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "kKCR;-%Eh";
      stringArray0[1] = "kKCR;-%Eh";
      stringArray0[2] = "s4Q0F&7itQ6d<w-(a\"";
      stringArray0[3] = "s4Q0F&7itQ6d<w-(a\"";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "${3tWq>Y.*5Q5", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (kKCR;-%Eh, kKCR;-%Eh, s4Q0F&7itQ6d<w-(a\", s4Q0F&7itQ6d<w-(a\")", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("derby.__rt.", 546);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-83);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "drop table4imha(b";
      stringArray0[1] = "exhc";
      stringArray0[2] = "exhc";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "exhc";
      objectArray0[1] = object0;
      stringArray0[0] = "exhc";
      objectArray0[3] = (Object) (byte) (-83);
      String string0 = SQLUtil.normalize("8) =j", true);
      assertEquals("8) = j", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec6my7c=ya|oakr@;ie6");
      DBDataType dBDataType0 = DBDataType.getInstance((-2491), "delete");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec6my7c=ya|oakr@;ie6", defaultDBTable0, dBDataType0, integer0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "mwT+FWi|", false, "exec6my7c=ya|oakr@;ie6");
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("exec6my7c=ya|oakr@;ie6 DELETE(0) NOT NULL", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0317671113505356
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean boolean0 = new Boolean("truncate");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", defaultDBTable0, 4548, "alter tabletruncate");
      defaultDBColumn0.setNullable(false);
      DBDataType dBDataType0 = DBDataType.getInstance(1784, "q_J@l");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(", name.hashCode()=", defaultDBTable0, dBDataType0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      defaultDBColumn0.setOwner(defaultDBTable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("truncate", defaultDBTable0.getName());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5941666991180168
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "^0~:#u?eTzA";
      stringArray0[3] = "";
      stringArray0[4] = "^0~:#u?eTzA";
      stringArray0[5] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("EventHandle: internal id = ", stringArray0);
      assertEquals("EventHandle: internal id = ., EventHandle: internal id = .^0~:#u?eTzA, EventHandle: internal id = .null, EventHandle: internal id = ., EventHandle: internal id = .^0~:#u?eTzA, EventHandle: internal id = ., EventHandle: internal id = .null", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DBSequence dBSequence0 = new DBSequence(stringArray0[6], "", "drop materialized view*/");
      Object object0 = new Object();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^0~:#u?eTzA", dBSchema0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance(208, "^0~:#u?eTzA");
      Integer integer0 = new Integer((-195300325));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string1);
      
      System.setCurrentTimeMillis((-195300325));
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter table", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ^0~:#u?eTzA, , , ^0~:#u?eTzA, , ) REFERENCES ^0~:#u?eTzA(, ^0~:#u?eTzA, , , ^0~:#u?eTzA, , )", string2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      String string0 = SQLUtil.normalize("+/:_>G,af", false);
      assertEquals("+ / : _ > G, af", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ".4N,a<x");
      String string0 = SQLUtil.normalize(".4N,a<x", false);
      assertEquals(".4N, a < x", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[4] = "FETCH ALL IN ";
      stringArray0[1] = "truncate";
      stringArray0[2] = "FETCH ALL IN ";
      stringArray0[3] = "J6Xm";
      stringArray0[4] = "truncate";
      stringArray0[5] = "FETCH ALL IN ";
      stringArray0[6] = "J6Xm";
      stringArray0[7] = "/*";
      stringArray0[8] = "SELECT * FROM ";
      SQLUtil.removeComments("SELECT * FROM ");
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7249347863977136
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Zy\u0003G";
      stringArray0[3] = "Zy\u0003G";
      stringArray0[4] = "HL}R}-QP9ct[";
      stringArray0[5] = "HL}R}-QP9ct[";
      SQLUtil.join("Zy\u0003G", "HL}R}-QP9ct[", stringArray0, "Zy\u0003G", stringArray0[2], stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.leftJoin("k!z*e,z{'f@", stringArray0, (String) null, "alter table", stringArray0);
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[14];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "bRjFksDKbS", true, stringArray0);
      dBUniqueConstraint0.setName("CREATE SCHEMA IF NOT EXISTS ");
      dBUniqueConstraint0.setDoc("Oz]yN 6MBfRST\"v");
      dBUniqueConstraint0.setTable(defaultDBTable0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      stringArray0[0] = ":>5H&4!a!A~D=[M(";
      stringArray0[1] = ":>5H&4!a!A~D=[M(";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Oz]yN 6MBfRST\"v", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"CREATE SCHEMA IF NOT EXISTS \" ", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", defaultDBTable0, 816, "SEQUENCE_CATALOG");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec6my7c=ya|oakr@;ie6");
      DBDataType dBDataType0 = DBDataType.getInstance((-2485), "exec6my7c=ya|oakr@;ie6");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec6my7c=ya|oakr@;ie6", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = SQLUtil.isProcedureCall("exec6my7c=ya|oakr@;ie6");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.quoteChar(90105);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.pushBack();
      Boolean boolean0 = SQLUtil.mutatesStructure("execkkcr;-%eh");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean.valueOf("ZyM1HhG");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StringBuilder stringBuilder0 = new StringBuilder("8[e`Q=>iW");
      String string0 = " REFERENCES ";
      TableContainer tableContainer0 = new TableContainer(" REFERENCES ");
      tableContainer0.getTable("D$|pt+BK_P/~{,");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", (DBTable) null, (-526), " REFERENCES ");
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[15];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "bRjFksDKbS", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      stringArray0[0] = ":>5H&4!a!A~D=[M(";
      stringArray0[1] = "Oz]yN 6MBfRST\"v";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Oz]yN 6MBfRST\"v", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("create table ");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter indexinner", false, dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder("8[e`Q=>iW");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      defaultDBTable0.getUniqueConstraint("XSRSB.S");
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Blob position should be >= 1";
      stringArray0[1] = "Blob position should be >= 1";
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      dynamicByteArrayOutputStream1.write(4448);
      dynamicByteArrayOutputStream1.close();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream2 = new DynamicByteArrayOutputStream(515);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream2, true);
      TableContainer tableContainer0 = new TableContainer("Blob position should be >= 1");
      tableContainer0.getTable("Blob position should be >= 1");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[15];
      stringArray0[0] = ":>5H&4!a!A~D=[M(";
      stringArray0[1] = "Oz]yN 6MBfRST\"v";
      DBDataType.getInstance(61, "alter ma");
      DBDataType dBDataType0 = DBDataType.getInstance(61, "--");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Oz]yN 6MBfRST\"v", defaultDBTable0, dBDataType0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      dynamicByteArrayOutputStream0.write(985);
      dynamicByteArrayOutputStream0.close();
      dynamicByteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.close();
      mockPrintWriter0.print(1659.3314882);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[2] = "MXBM0V.S";
      stringArray0[3] = "MXBM0V.S";
      stringArray0[4] = "MXBM0V.S";
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "j(o,P9zD,R\"}kin";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("(, , , , , )", (DBTable) null, 3415, "j(o,P9zD,R\"}kin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: j(o,P9zD,R\"}kin
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)40;
      String string0 = ", name.hashCode()=";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", name.hashCode()=");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(", name.hashCode()=", defaultDBTable0, 1784, ", name.hashCode()=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = stringArray0[2];
      SQLUtil.renderColumnNames(stringArray0);
      int int0 = 676;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(stringArray0[2], (DBTable) null, 676, "(, , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7658243018355742
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop materialized view)");
      Boolean boolean1 = SQLUtil.mutatesStructure("drop materialized view");
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drop materialized view)";
      stringArray0[1] = "drop materialized view)";
      stringArray0[2] = "drop materialized view)";
      stringArray0[3] = "drop materialized view)";
      stringArray0[4] = "drop materialized view";
      SQLUtil.removeComments("drop materialized view");
      boolean boolean2 = SQLUtil.isProcedureCall("org.h2.util.IntArray");
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      Boolean boolean4 = SQLUtil.mutatesDataOrStructure("delete");
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      String string0 = SQLUtil.normalize("org.h2.util.IntArray", true);
      assertEquals("org.h2.util.IntArray", string0);
      
      SQLUtil.isQuery("table ");
      String string1 = SQLUtil.renderValue("table ");
      assertEquals("'table '", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("alter indexinner");
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      Character character0 = Character.valueOf('n');
      SQLUtil.renderValue(character0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "'n'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":grcj=K");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "updatebyoku5byx";
      stringArray0[1] = "XDw1)UpMvx";
      stringArray0[2] = "updatebyoku5byx";
      stringArray0[3] = "XDw1)UpMvx";
      stringArray0[4] = "'n'";
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumns(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'updatebyoku5byx' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer(90105);
      Integer.divideUnsigned((-3), 47);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "callnlter indexewhc");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("6!`d\"xIY,f9S");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "alter session";
      stringArray0[1] = "alter session";
      stringArray0[2] = "6!`d\"xIY,f9S";
      stringArray0[3] = "alter session";
      stringArray0[4] = "alter session";
      stringArray0[5] = "alter session";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("6!`d\"xIY,f9S", stringArray0, "alter session", "callnlter indexewhc", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[0];
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insert");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0866739010750055
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-61);
      SQLUtil.isProcedureCall("cc6/'Pum$L");
      SQLUtil.isQuery("XSLA0.D");
      SQLUtil.mutatesDataOrStructure("org.h2.command.ddl.CreateUserDataType");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cc6/'Pum$L");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cc6/'Pum$L";
      stringArray0[1] = "trunca";
      stringArray0[2] = "fetch first/n";
      stringArray0[3] = "cc6/'Pum$L";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("fetch first/n", (String[]) null, " AND ", "execute", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[15];
      stringArray0[0] = "Blob position should be >= 1";
      boolean boolean1 = SQLUtil.isDML("truncate");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.69240886298655
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "HASHJOIN";
      stringArray0[1] = "truncate";
      stringArray0[2] = "Oz]yN 6MBfRST\"v";
      stringArray0[3] = "HASHJOIN";
      stringArray0[4] = "HASHJOIN";
      stringArray0[5] = "?CyU6T|^baYarpg";
      stringArray0[6] = "truncate";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CONSTRAINT ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("@H", false, dBPrimaryKeyConstraint0);
      defaultDBTable0.countProviders();
      dBPrimaryKeyConstraint0.addColumnName("org.apache.derby.impl.sql.compile.BaseTypeCompiler");
      dBPrimaryKeyConstraint0.addColumnName("@H");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("?CyU6T|^baYarpg", true, defaultDBTable1, "truncate");
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      dBPrimaryKeyConstraint0.equals("CONSTRAINT ");
      dBUniqueIndex0.equals("CONSTRAINT ");
      dBCheckConstraint0.equals("?CyU6T|^baYarpg");
      SQLUtil.addOptionalCondition("HASHJOIN", stringBuilder0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      System.setCurrentTimeMillis(0L);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec2 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec2);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("}fO}", stringBuilder0);
      NameSpec nameSpec3 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec3);
      assertEquals("CONSTRAINT ?CyU6T|^baYarpg CONSTRAINT \"CONSTRAINT \"  or HASHJOIN and }fO}", stringBuilder0.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("helZ]rDjhz");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("pxhc", defaultDBTable0, (-2590), "pxhc");
      defaultDBColumn0.setNullable(false);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setVersionColumn(false);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Random.setNextRandom((-2590));
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = new DataDescriptorGenerator(dataDictionaryImpl0);
      FromBaseTable fromBaseTable0 = new FromBaseTable();
      fromBaseTable0.getTableDescriptor();
      String string0 = "dI";
      boolean boolean0 = false;
      boolean boolean1 = true;
      UUID uUID0 = null;
      String string1 = null;
      ReferencedColumnsDescriptorImpl referencedColumnsDescriptorImpl0 = new ReferencedColumnsDescriptorImpl();
      FromVTI fromVTI0 = new FromVTI();
      NodeFactoryImpl nodeFactoryImpl0 = new NodeFactoryImpl();
      fromVTI0.getContextManager();
      TableName tableName0 = QueryTreeNode.makeTableName((NodeFactory) nodeFactoryImpl0, (ContextManager) null, "P.s", "exec");
      // Undeclared exception!
      try { 
        fromVTI0.getSchemaDescriptor(tableName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("GpJY*K2&J~", (DBTable) null, 387, "drop materialized view");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      DBColumn[] dBColumnArray1 = new DBColumn[4];
      dBColumnArray1[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "XBM0V.S";
      SQLUtil.mutatesDataOrStructure("create unique index");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "XBM0V.S";
      SQLUtil.mutatesDataOrStructure("create unique index");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      assertEquals(9, jdbcDataSource0.getTraceId());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.parseNumbers();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.removeComments(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "&";
      StringBuilder stringBuilder0 = new StringBuilder("&");
      SQLUtil.addRequiredCondition("&", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1533, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1533
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = new Boolean("truncate");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean.logicalOr(false, false);
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      VersionNumber versionNumber1 = new VersionNumber(linkedList0);
      Boolean.logicalOr(true, true);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(rowOutputBinary0);
      mockPrintWriter1.print("B[");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " lv4UNnS79y`=OqP";
      mockPrintWriter1.println(true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("el", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.removeComments("");
      Random.setNextRandom((-1042));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[15];
      stringArray0[0] = ":>5H&4!a!A~D=[M(";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, 387, "GpJY*K2&J~");
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("GPJY*K2&J~", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      linkedList0.add((Object) null);
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-35), "VUAe");
      dBDataType0.isNumber();
      Integer integer1 = new Integer(500);
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer5 = RawTransaction.COMMIT;
      Integer integer6 = RawTransaction.SAVEPOINT_ROLLBACK;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer7 = RawTransaction.COMMIT;
      StringBuffer stringBuffer0 = new StringBuffer(48);
      Character character0 = Character.valueOf('o');
      String string0 = SQLUtil.substituteMarkers("VUAe", "VUAe", character0);
      assertEquals("'o'", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-106);
      byteArray0[4] = (byte)8;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tabletruncate");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(", name.hashCode()=", defaultDBTable0, 1784, "alter tabletruncate");
      defaultDBColumn0.setNullable(false);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      Boolean boolean0 = new Boolean("0");
      String[] stringArray0 = new String[10];
      stringArray0[0] = "alter tabletruncate";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Boolean.valueOf("ZyM1HhG");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("ZyM1HhG", stringArray0);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-572));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      String string0 = "XSAM5.S";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("XSAM5.S", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = new Boolean("trGu-cate");
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      integerArray0[0] = integer0;
      Integer.getInteger("trGu-cate");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.divideUnsigned((-121074594), (-121074594));
      integerArray0[5] = integer1;
      Integer integer2 = RawTransaction.COMMIT;
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      Integer.sum((int) integerArray0[3], 1001);
      Integer.toUnsignedString(2261);
      integerArray0[5] = integer4;
      Integer.compareUnsigned(4, (int) integerArray0[4]);
      Integer.compareUnsigned((int) integerArray0[4], (-3495));
      Integer.sum(1001, 97);
      Integer.toUnsignedLong(57);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'SUBPARTITIONS'";
      stringArray0[1] = "#3w`wnb";
      stringArray0[2] = "'SUBPARTITIONS'";
      Boolean boolean1 = new Boolean(false);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "trGu-cate";
      stringArray1[1] = "2261";
      stringArray1[2] = "'SUBPARTITIONS'";
      stringArray1[3] = "'SUBPARTITIONS'";
      stringArray1[4] = "#3w`wnb";
      stringArray1[5] = "#3w`wnb";
      stringArray1[6] = "#3w`wnb";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("#3w`wnb", stringArray1, "CYEt`e&", "'SUBPARTITIONS'", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3728743096484375
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = stringArray0[2];
      SQLUtil.renderColumnNames(stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SQLUtil.join((String) null, "%", stringArray0, "(, , , , , )", "%", stringArray0);
      SQLUtil.normalize("execi#idqv~tw//v]", false);
      System.setCurrentTimeMillis((-3013L));
      SQLUtil.renderColumnListWithTableName("l-LiNcm", stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = null;
      stringArray1[1] = "(, , , , , )";
      stringArray1[2] = "l-LiNcm.null, l-LiNcm.null, l-LiNcm.null, l-LiNcm.null, l-LiNcm.null, l-LiNcm.null";
      stringArray1[3] = "(, , , , , )";
      stringArray1[4] = "execi # idqv ~ tw / / v ]";
      SQLUtil.renderWhereClause(stringArray1, stringArray0);
      SQLUtil.renderColumnListWithTableName("%", stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Boolean.logicalOr(false, false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      VersionNumber versionNumber1 = new VersionNumber(linkedList0);
      Boolean.logicalOr(true, false);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(rowOutputBinary0);
      mockPrintWriter0.print("pxhc");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      mockPrintWriter1.println(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "B[";
      stringArray0[1] = "el";
      stringArray0[2] = "updatelrunc~ate";
      stringArray0[3] = " lv4UNnS79y`=OqP";
      stringArray0[4] = "el";
      stringArray0[5] = "el";
      stringArray0[4] = "ImPYeU-B]5x</z";
      String[] stringArray1 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("el", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      PrintWriter printWriter0 = mockPrintWriter0.append('M');
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5832584594204768
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter materslized viw<vbe@>|n}t?u";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "*0ZtD%mR*`kw", false, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      dBPrimaryKeyConstraint0.setDoc("*0ZtD%mR*`kw");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter materslized viw<vbe@>|n}t?u", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT *0ZtD%mR*`kw PRIMARY KEY (alter materslized viw<vbe@>|n}t?u)", string0);
      
      String[] stringArray1 = new String[5];
      stringArray1[0] = "zJ~*q@nRhT^";
      stringArray1[1] = "drop index";
      stringArray1[2] = "CONSTRAINT *0ZtD%mR*`kw PRIMARY KEY (alter materslized viw<vbe@>|n}t?u)";
      stringArray1[3] = "--";
      stringArray1[4] = "_Lp";
      String string1 = SQLUtil.join("CONSTRAINT *0ZtD%mR*`kw PRIMARY KEY (alter materslized viw<vbe@>|n}t?u)", "alter materslized viw<vbe@>|n}t?u", stringArray0, "drop index", (String) null, stringArray0);
      assertEquals("CONSTRAINT *0ZtD%mR*`kw PRIMARY KEY (alter materslized viw<vbe@>|n}t?u) join drop index as null on alter materslized viw<vbe@>|n}t?u.alter materslized viw<vbe@>|n}t?u = null.alter materslized viw<vbe@>|n}t?u", string1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      DBDataType.getInstance(1722, "SELECTIVITY(");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      VersionNumber versionNumber1 = new VersionNumber(linkedList0);
      VersionNumber versionNumber2 = VersionNumber.valueOf("alter sessionorg.h2.command.ddl.createuserdatatype");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("/4a~=w~6q", "alter sessionorg.h2.command.ddl.createuserdatatype", versionNumber2);
      defaultDatabase0.getTable("DOMAIN_CATALOG", false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.quoteChar(90105);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.pushBack();
      Integer.compare(11, (-2575));
      Integer.sum(90105, 11);
      Integer.toUnsignedLong((-3051));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      char[] charArray0 = new char[7];
      charArray0[3] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[4] = 'n';
      charArray0[6] = '[';
      System.setCurrentTimeMillis((-1021L));
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      String[] stringArray0 = new String[3];
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      Integer.compareUnsigned(1428, (-4));
      Integer.min(11, (-4));
      Integer.divideUnsigned((-4), (-4));
      Boolean.logicalOr(false, false);
      VersionNumber.valueOf(" NOT");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Boolean boolean0 = new Boolean("trGuncate");
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      integerArray0[0] = integer0;
      Integer.getInteger("trGuncate");
      integerArray0[1] = null;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType0 = DBDataType.getInstance(48, "trGuncate");
      dBDataType0.isNumber();
      Integer integer2 = new Integer(8);
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.COMMIT;
      Integer integer6 = RawTransaction.COMMIT;
      Integer integer7 = RawTransaction.COMMIT;
      Integer.max(8, (-1091));
      DBSchema dBSchema0 = new DBSchema("trGuncate");
      dBSchema0.getTable("trgu");
      Integer.getInteger("trgu");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("trGuncate", (DBTable) null, dBDataType0, integer7, (Integer) null);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("trGuncate TRGUNCATE(0) NULL", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('L');
      stringBuilder0.reverse();
      SQLUtil.addOptionalCondition("delete", stringBuilder0);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      Heap heap0 = new Heap();
      System.setCurrentTimeMillis(674L);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "c013800d-00d7-ddbd-08ce-000a0a411400";
      stringArray0[2] = "c013800d-00d7-ddbd-08ce-000a0a411400";
      stringArray0[3] = "drop indexillegalaccesex.eptio";
      stringArray0[4] = "y.qIrn-)<?YO$&";
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "!!!!!!!!! memo array is null for ";
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "kKCR;-%Eh";
      stringArray0[1] = "kKCR;-%Eh";
      stringArray0[2] = "kKCR;-%Eh";
      stringArray0[3] = "kKCR;-%Eh";
      System.setCurrentTimeMillis(0L);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "bRjFksDKbS", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      System.setCurrentTimeMillis((-3356L));
      String string0 = SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      assertEquals("null.bRjFksDKbS", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[5] = "c013800d-00d7-ddbd-08ce-000a0a411400";
      stringArray0[2] = "c013800d-00d7-ddbd-08ce-000a0a411400";
      stringArray0[3] = "y65qm";
      stringArray0[4] = "y.qIrn-)<?YO$&";
      // Undeclared exception!
      try { 
        SQLUtil.normalize(stringArray0[0], false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean boolean0 = new Boolean("trGuncate");
      Integer[] integerArray0 = new Integer[18];
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      integerArray0[0] = integer0;
      Integer.getInteger("trGuncate");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.divideUnsigned((-121074594), (-121074594));
      integerArray0[5] = integer1;
      Integer integer2 = RawTransaction.COMMIT;
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer3;
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer.sum((int) integerArray0[3], 1001);
      integerArray0[5] = integer4;
      Integer.compareUnsigned((int) integerArray0[4], 1511);
      Integer.sum(1001, 97);
      Integer.toUnsignedLong(57);
      Integer.compareUnsigned(1098, 1);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fZ_/w{!!AbM&#-*5xT]";
      stringArray0[1] = "9cV8T:/BTGthYd";
      stringArray0[2] = "nlter ";
      stringArray0[3] = "drop table";
      stringArray0[4] = "into";
      stringArray0[5] = " NULL";
      stringArray0[6] = "execute";
      stringArray0[7] = "AH3,wA#9V,jfWtJyn";
      stringArray0[8] = "selectStatement";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE fZ_/w{!!AbM&#-*5xT] = 'fZ_/w{!!AbM&#-*5xT]' AND 9cV8T:/BTGthYd = '9cV8T:/BTGthYd' AND nlter  = 'nlter ' AND drop table = 'drop table' AND into = 'into' AND  NULL = ' NULL' AND execute = 'execute' AND AH3,wA#9V,jfWtJyn = 'AH3,wA#9V,jfWtJyn' AND selectStatement = 'selectStatement'", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLUtil.isQuery("select");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "CONSTRAINT ", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean.valueOf("><peb:42i2VK7rtQHR");
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Random.setNextRandom(90107);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "pL,qG,ud#j}'";
      stringArray0[1] = "drop table";
      stringArray0[2] = "m2";
      stringArray0[3] = "alter mater";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder(741);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "UNIQUE ()", (-1460052451), 2208);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -1460052451, end 2208, s.length() 9
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("FETCH FIRST/NEXT");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "g,";
      stringArray0[1] = "E,_&MyB";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "djb`1PU2|o#Ae4m+n.w";
      stringArray0[5] = "FETCH FIRST/NEXT";
      FileSystemHandling.shouldAllThrowIOExceptions();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      assertEquals(0, jdbcDataSource0.getTraceId());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("alter materi^lized view", "alter materi^lized view", "alter materi^lized view");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter materi^lized view";
      stringArray0[2] = "alter materi^lized view";
      stringArray0[3] = "tdNAb Gdu";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("", stringArray0, "tdNAb Gdu", "V*", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean.valueOf("ZyM1HhG");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "lruncate";
      stringArray0[1] = "CREATE DOMAIN ";
      stringArray0[2] = "lruncate";
      stringArray0[3] = "ZyM1HhG";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("CREATE DOMAIN ", "CREATE DOMAIN ", stringArray0, "J=jg0Rp2", "lruncate", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"{&z^ ";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "\"{&z^ ";
      stringArray0[2] = "\"{&z^ ";
      stringArray0[3] = "\"{&z^ ";
      stringArray0[4] = "\"{&z^ ";
      stringArray0[5] = "\"{&z^ ";
      stringArray0[6] = "alter materia";
      stringArray0[7] = "\"{&z^ ";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "alter materia";
      stringArray1[1] = "alter materia";
      stringArray1[2] = "\"{&z^ ";
      stringArray1[3] = "alter materia";
      stringArray1[4] = " REFERENCES ";
      stringArray1[5] = "\"{&z^ ";
      stringArray1[6] = "alter materia";
      stringArray1[7] = "alter materia";
      String string0 = SQLUtil.leftJoin("\"{&z^ ", stringArray0, "\"{&z^ ", "\"{&z^ ", stringArray1);
      assertEquals("left join \"{&z^  as \"{&z^  on \"{&z^ .\"{&z^  = \"{&z^ .alter materia and \"{&z^ .\"{&z^  = \"{&z^ .alter materia and \"{&z^ .\"{&z^  = \"{&z^ .\"{&z^  and \"{&z^ .\"{&z^  = \"{&z^ .alter materia and \"{&z^ .\"{&z^  = \"{&z^ . REFERENCES  and \"{&z^ .\"{&z^  = \"{&z^ .\"{&z^  and \"{&z^ .alter materia = \"{&z^ .alter materia and \"{&z^ .\"{&z^  = \"{&z^ .alter materia", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("alter materialized view", "alter materialized view", "alter materialized view");
      dBSequence0.equals("alter materialized view");
      SQLUtil.typeAndName(dBSequence0);
      String[] stringArray0 = new String[0];
  }

  /**
  //Test case number: 106
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-35), "VUAe");
      dBDataType0.isNumber();
      Integer integer1 = new Integer(500);
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer5 = RawTransaction.COMMIT;
      Integer integer6 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer7 = RawTransaction.COMMIT;
      Integer.max(389, 947);
      Integer.remainderUnsigned(1205, 189);
      Integer.remainderUnsigned((-1880017966), 71);
      Integer integer8 = RawTransaction.LOCK_ESCALATE;
      Integer integer9 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("VUAe", defaultDBTable0, dBDataType0);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      String string0 = defaultDBColumn0.toString();
      assertEquals("VUAe : VUAE", string0);
      
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("VUAE", stringBuilder0.toString());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = new Boolean("trGuncate");
      Integer[] integerArray0 = new Integer[18];
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      integerArray0[0] = integer0;
      Integer.getInteger("trGuncate");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.divideUnsigned((-121074594), (-121074594));
      Integer integer2 = new Integer((-1611004515));
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.COMMIT;
      Integer integer6 = RawTransaction.COMMIT;
      Integer.getInteger("trGuncate", 46);
      Integer integer7 = RawTransaction.COMMIT;
      Integer.max(4029, 253);
      Integer.remainderUnsigned(44, 846);
      Integer.remainderUnsigned((-1225804509), 846);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-623), "hB$>&lGBC//A+LVb");
      Integer.getInteger("vlymsV+<");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("vlymsV+<", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("vlymsV+< HB$>&LGBC//A+LVB NULL", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLUtil.isDDL("lelect");
      StringBuffer stringBuffer0 = new StringBuffer(44);
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 0.0;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.quoteChar(90105);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.parseNumbers();
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      // Undeclared exception!
      try { 
        SQLUtil.join(" on ", "u$@A", (String[]) null, "]#N+1^5Rna( r;QCA", "Bd)trbeYpAU>;.SJBo^", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Random.setNextRandom(10);
      System.setCurrentTimeMillis(10);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter table";
      stringArray0[1] = "alter table";
      stringArray0[2] = "alter table";
      stringArray0[3] = "alter table";
      stringArray0[4] = "alter table";
      stringArray0[5] = "alter table";
      stringArray0[6] = "alter table";
      stringArray0[7] = "alter table";
      String string0 = SQLUtil.innerJoin("alter table", stringArray0, "BLOB", "[ql-oeq^aa", stringArray0);
      assertEquals("BLOB as [ql-oeq^aa on alter table.alter table = [ql-oeq^aa.alter table and alter table.alter table = [ql-oeq^aa.alter table and alter table.alter table = [ql-oeq^aa.alter table and alter table.alter table = [ql-oeq^aa.alter table and alter table.alter table = [ql-oeq^aa.alter table and alter table.alter table = [ql-oeq^aa.alter table and alter table.alter table = [ql-oeq^aa.alter table and alter table.alter table = [ql-oeq^aa.alter table", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "siyv7}*N&^!?dTT";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "siyv7}*N&^!?dTT";
      stringArray0[4] = null;
      stringArray0[5] = "EdP";
      stringArray0[6] = "siyv7}*N&^!?dTT";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "siyv7}*N&^!?dTT", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (siyv7}*N&^!?dTT, , , siyv7}*N&^!?dTT, , EdP, siyv7}*N&^!?dTT)", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "kKCR;-%Eh");
      Boolean boolean0 = new Boolean(false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.9743147528693494
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "c013800d-00d7-ddbd-08ce-000a0a411400";
      stringArray0[2] = "c013800d-00d7-ddbd-08ce-000a0a411400";
      stringArray0[3] = "drop indexillegalaccesex.eptio";
      stringArray0[4] = "y.qIrn-)<?YO$&";
      stringArray0[5] = "h(|";
      stringArray0[6] = "c013800d-00d7-ddbd-08ce-000a0a411400";
      stringArray0[2] = "h(|";
      stringArray0[8] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("alter indexnot");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      SQLUtil.normalize("org.hsqldb.CachedRow", false);
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
  }

  /**
  //Test case number: 117
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "N1Tmu&9%1");
      SQLUtil.normalize("s4Q0F&7itQ6d<w-(a\"", false);
      BTreeController bTreeController0 = new BTreeController();
      BTreeForwardScan bTreeForwardScan0 = new BTreeForwardScan();
      BTreeRowPosition bTreeRowPosition0 = new BTreeRowPosition(bTreeForwardScan0);
      RowLocation rowLocation0 = bTreeRowPosition0.current_lock_row_loc;
      try { 
        bTreeController0.lockRow((RowLocation) null, 0, false, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unimplemented feature.
         //
         verifyException("org.apache.derby.iapi.error.StandardException", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "N1Tmu&9%1";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "N1Tmu&9%1");
      SQLUtil.normalize("s4Q0F&7itQ6d<w-(a\"", false);
      BTreeController bTreeController0 = new BTreeController();
      BTreeForwardScan bTreeForwardScan0 = new BTreeForwardScan();
      BTreeRowPosition bTreeRowPosition0 = new BTreeRowPosition(bTreeForwardScan0);
      RowLocation rowLocation0 = bTreeRowPosition0.current_lock_row_loc;
      boolean boolean0 = false;
      int int0 = 44;
      Qualifier[][] qualifierArray0 = new Qualifier[8][0];
      Qualifier[] qualifierArray1 = new Qualifier[1];
      GenericScanQualifier genericScanQualifier0 = new GenericScanQualifier();
      qualifierArray1[0] = (Qualifier) genericScanQualifier0;
      qualifierArray0[0] = qualifierArray1;
      Qualifier[] qualifierArray2 = new Qualifier[0];
      qualifierArray0[1] = qualifierArray2;
      Qualifier[] qualifierArray3 = new Qualifier[7];
      qualifierArray3[0] = (Qualifier) genericScanQualifier0;
      qualifierArray3[1] = (Qualifier) genericScanQualifier0;
      qualifierArray3[2] = (Qualifier) genericScanQualifier0;
      int int1 = 4014;
      int int2 = 2749;
      ReflectClassesJava2 reflectClassesJava2_0 = new ReflectClassesJava2();
      Class<DefaultDBColumn> class0 = DefaultDBColumn.class;
      Class<Object> class1 = Object.class;
      ReflectGeneratedClass reflectGeneratedClass0 = new ReflectGeneratedClass(reflectClassesJava2_0, class0, class1);
      try { 
        reflectGeneratedClass0.getMethod("Xd");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Method Xd() does not exist in generated class org.databene.jdbacl.model.DefaultDBColumn.
         //
         verifyException("org.apache.derby.iapi.error.StandardException", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean.valueOf("><pb:42i2VK7rtQHR");
      int int0 = (-1030);
      boolean boolean0 = false;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("lruncate", false, "Jd#3;@8", "exec");
      StringBuilder stringBuilder0 = new StringBuilder("Jd#3;@8");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append("#");
      int int1 = 3;
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-544), 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -544
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      char[] charArray0 = new char[7];
      charArray0[3] = 'W';
      charArray0[1] = 'W';
      charArray0[5] = 'W';
      charArray0[4] = 'n';
      charArray0[6] = 'W';
      Boolean boolean0 = SQLUtil.mutatesStructure("exhc");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter matrhize viSw<vbe@>|n}tu");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLUtil.isQuery("lel ct");
      StringBuffer stringBuffer0 = new StringBuffer("lel ct");
      assertEquals("lel ct", stringBuffer0.toString());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(253);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, " NOT");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread0, 509L, 253, timeUnit0);
      String string0 = SQLUtil.substituteMarkers("q7'(3ich", " NOT", scheduledFuture0);
      assertEquals("q7'(3ich", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.2554823251787535
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isDDL("truncate");
      boolean boolean1 = SQLUtil.isDML("getConcurrency");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
