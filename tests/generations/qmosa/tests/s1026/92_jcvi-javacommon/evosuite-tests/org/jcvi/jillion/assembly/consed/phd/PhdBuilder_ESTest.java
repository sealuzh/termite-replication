/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 16:06:23 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.temporal.TemporalAdjuster;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannelGroup;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(352L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 352L, 352L);
      MockDate mockDate0 = new MockDate();
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.from(instant0);
      Instant instant2 = MockInstant.with(instant1, (TemporalAdjuster) instant1);
      Date date0 = Date.from(instant2);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag(";<GgtmrBFM#Aa", ";<GgtmrBFM#Aa", range0, date0, "", "yVdSLSa.h\"!_7(jHK}");
      linkedList0.add((PhdReadTag) defaultPhdReadTag0);
      DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("qz=`#j|E!5&i87/ C", "", range0, mockDate0, "TM'!fe'=ZH) Y2h_U", "qz=`#j|E!5&i87/ C");
      linkedList0.add((PhdReadTag) defaultPhdReadTag1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      linkedList0.removeIf(predicate3);
      DefaultPhd defaultPhd0 = new DefaultPhd("", nucleotideSequence0, qualitySequence0, (PositionSequence) null, (Map<String, String>) null, (List<PhdWholeReadItem>) null, linkedList0);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("a#dbUm]TWx05%j4", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      PhdBuilder phdBuilder0 = new PhdBuilder("S}n*Z[m|}kP(*q", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks(3970, 3970);
      Phd phd0 = phdBuilder1.build();
      assertEquals("S}n*Z[m|}kP(*q", phd0.getId());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("s<5`", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[9];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1058;
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      defaultChannel0.equals(object0);
      Object object1 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel0.equals((Object) null);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel1.equals((Object) null);
      Object object2 = new Object();
      Object object3 = new Object();
      defaultChannel1.equals(object3);
      defaultChannel1.equals("");
      defaultChannel1.equals(defaultChannel0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals(defaultChannel0);
      defaultChannel2.equals(object1);
      defaultChannel2.equals((Object) null);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel0, defaultChannel1, defaultChannel0, defaultChannel0);
      System.setCurrentTimeMillis((short)1058);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(1024, (-843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "-T<5m";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("-T<5m", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "-T<5m";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-T<5m", nucleotideSequence0, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      Range range0 = Range.of((long) (byte) (-1), 1280L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.parseRange("[ 0 .. 1281 ]/RB", range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem1, (-3616L), (long) (byte) (-1));
      Range.parseRange("[ 0 .. 1281 ]/RB", range_CoordinateSystem1);
      range1.endsBefore(range0);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem2);
      String string1 = "[3`Si\\SBU)";
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[3`SiSBU)", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [3`SiSBU) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-8<5m", nucleotideSequence0, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      byte[] byteArray0 = new byte[9];
      short[] shortArray0 = new short[1];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      defaultChannel0.equals(object0);
      Object object1 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel0.equals((Object) null);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      Object object2 = new Object();
      defaultChannel1.equals(object2);
      defaultChannel1.equals((Object) null);
      Object object3 = new Object();
      Object object4 = new Object();
      defaultChannel1.equals(object4);
      defaultChannel1.equals("8");
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals((Object) null);
      defaultChannel2.equals(defaultChannel0);
      defaultChannel1.equals(defaultChannel0);
      defaultChannel2.equals(object1);
      defaultChannel2.equals(object4);
      defaultChannel2.equals((Object) null);
      defaultChannel1.equals("8");
      defaultChannel0.equals("unambiguousBases can not be null");
      defaultChannel2.equals((Object) null);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel0, defaultChannel1, defaultChannel0, defaultChannel0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-T<5m", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      byte[] byteArray0 = new byte[9];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1088;
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      defaultChannel0.equals(object0);
      Object object1 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel0.equals((Object) null);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel1.equals((Object) null);
      Object object2 = new Object();
      Object object3 = new Object();
      defaultChannel1.equals(object3);
      defaultChannel1.equals(object3);
      defaultChannel1.equals("");
      defaultChannel1.equals(defaultChannel0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals(defaultChannel0);
      defaultChannel2.equals(object1);
      defaultChannel2.equals((Object) null);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel0, defaultChannel1, defaultChannel0, defaultChannel0);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup(defaultChannel2, defaultChannel1, defaultChannel1, defaultChannel0);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks((int) (short)1088, (int) (short)1088);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd("[wH", nucleotideSequence0, qualitySequence0, (PositionSequence) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      PhdBuilder phdBuilder0 = new PhdBuilder("S}n*Z[m|}kP(*q", nucleotideSequence0, qualitySequence0);
      Phd phd0 = phdBuilder0.build();
      assertEquals("S}n*Z[m|}kP(*q", phd0.getId());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-8<5m", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[9];
      short[] shortArray0 = new short[1];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      defaultChannel0.equals(object0);
      Object object1 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel0.equals((Object) null);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      Object object2 = new Object();
      defaultChannel1.equals(object2);
      defaultChannel1.equals(object1);
      Object object3 = new Object();
      Object object4 = new Object();
      defaultChannel1.equals(object4);
      defaultChannel1.equals("8");
      defaultChannel1.equals(defaultChannel0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel1.equals((Object) null);
      Object object5 = new Object();
      defaultChannel0.equals("-8<5m");
      defaultChannel2.equals((Object) null);
      defaultChannel0.equals((Object) null);
      Object object6 = new Object();
      defaultChannel1.equals(object6);
      defaultChannel2.equals(object0);
      defaultChannel2.equals(object0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel2, defaultChannel0, defaultChannel0, defaultChannel2);
      defaultChannel1.equals(object6);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-5682), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(86);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3689);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1288));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-3621));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(323);
      integerArray0[4] = integer4;
      linkedList0.toArray(integerArray0);
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("RRQ9", nucleotideSequence0, qualitySequence0, (Map<String, String>) hashMap0, (List<PhdWholeReadItem>) linkedList0);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      PhdBuilder phdBuilder0 = new PhdBuilder("S}n*Z[m|}kP(*q", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      MockDate mockDate0 = new MockDate();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate0.and(predicate2);
      MockInstant.now();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      predicate5.negate();
      predicate5.negate();
      linkedList0.removeIf(predicate5);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, nucleotideSequence0, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "65Neq &H`Bpb(R(";
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("65Neq &H`Bpb(R(", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      PhdBuilder phdBuilder0 = new PhdBuilder("S}n*Z[m|}kP(*q", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(linkedList0);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "-T<5m";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-T<5m", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      phdBuilder0.comments(hashMap0);
      Range range0 = Range.of((long) (byte) (-5), 1276L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.parseRange("[ -4 .. 1277 ]/RB", range_CoordinateSystem0);
      List<Range> list0 = new LinkedList<Range>();
      range0.complementFrom(list0);
      Range range1 = Range.of(range_CoordinateSystem1, (-3616L), (long) (byte) (-5));
      Range.parseRange("[ -4 .. 1277 ]/RB", range_CoordinateSystem1);
      range1.endsBefore(range0);
      List<Range> list1 = range1.complement(range0);
      range0.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("-T<5m", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse -T<5m into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 352L;
      System.setCurrentTimeMillis(352L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      MockDate mockDate0 = new MockDate();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate0.and(predicate2);
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.minusSeconds(instant0, 352L);
      Instant instant2 = MockInstant.with(instant1, (TemporalAdjuster) instant1);
      Date.from(instant2);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate1.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      predicate1.negate();
      predicate5.test("");
      linkedList0.removeIf(predicate5);
      PhdBuilder phdBuilder0 = new PhdBuilder(";<GgtmrBFM#Aa", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis(352L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      MockDate mockDate0 = new MockDate();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.minusSeconds(instant0, 352L);
      Instant instant2 = MockInstant.with(instant1, (TemporalAdjuster) instant1);
      Date.from(instant2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      Predicate<Object> predicate6 = predicate0.or(predicate5);
      Predicate<Object> predicate7 = predicate0.and(predicate3);
      predicate6.or(predicate7);
      linkedList0.removeIf(predicate6);
      PhdBuilder phdBuilder0 = new PhdBuilder(";<GgtmrBFM#Aa", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertNotSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(352L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      MockDate mockDate0 = new MockDate();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate0.and(predicate2);
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.minusSeconds(instant0, 352L);
      Instant instant2 = MockInstant.with(instant1, (TemporalAdjuster) instant1);
      Date.from(instant2);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      linkedList0.removeIf(predicate5);
      PhdBuilder phdBuilder0 = new PhdBuilder(";<GgtmrBFM#Aa", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertFalse(phdBuilder1.equals((Object)phdBuilder0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-T<5m", nucleotideSequence0, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      byte[] byteArray0 = new byte[9];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1088;
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      defaultChannel0.equals(object0);
      Object object1 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel0.equals((Object) null);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel1.equals((Object) null);
      Object object2 = new Object();
      Object object3 = new Object();
      defaultChannel1.equals(object3);
      defaultChannel1.equals("");
      defaultChannel1.equals(defaultChannel0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals(defaultChannel0);
      defaultChannel2.equals(object1);
      defaultChannel2.equals((Object) null);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel0, defaultChannel1, defaultChannel0, defaultChannel0);
      System.setCurrentTimeMillis((short)1088);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-10);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
