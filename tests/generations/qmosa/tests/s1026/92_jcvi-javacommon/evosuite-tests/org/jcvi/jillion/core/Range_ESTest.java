/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 17:19:17 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.890280623596987
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-3164L), 9223372034707292160L);
      Range range1 = Range.of(9223372034707292160L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.complement(range1);
      Range range2 = range0.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.982618667814994
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Long long0 = new Long((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-287L), 994L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.copy();
      Range range1 = Range.of((-9223372036854775808L));
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complement(range0);
      range1.complementFrom(linkedList0);
      Range range2 = range0.asRange();
      List<Range> list2 = range2.complementFrom(list0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertTrue(list2.equals((Object)list1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6256333985256557
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(9223372036854775674L, 9223372036854775674L);
      Range range1 = Range.of(0L, 9223372036854772056L);
      range0.endsBefore(range1);
      Long long0 = new Long(1630L);
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long0);
      range0.intersects(range1);
      Long long1 = new Long(9223372036854775674L);
      Range range2 = Range.of(9223372036854772231L);
      range2.endsBefore(range0);
      range0.isSubRangeOf(range1);
      Long.sum(255L, 9223372036854772231L);
      Object object0 = new Object();
      range0.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775552L, 940L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.0825217236960905
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Long long0 = new Long((-2210L));
      Long.max(2147483647L, 2645L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3422L), 255L);
      range_Builder0.shift(3752L);
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Range range1 = Range.of((-2147483648L));
      Object object0 = new Object();
      Range range2 = Range.of((-2210L), 2147483647L);
      range1.equals(range2);
      range2.endsBefore(range1);
      Range range3 = Range.ofLength(2645L);
      range0.startsBefore(range3);
      range2.equals(range1);
      Range range4 = Range.of((-549L));
      range4.intersection(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.993253021987889
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(3752L);
      Range range1 = Range.ofLength(3752L);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(3752L);
      Range.Builder range_Builder1 = range_Builder0.shift((-2147483648L));
      range_Builder1.copy();
      Range.of((-1270L));
      Long long0 = new Long(2477L);
      Range range2 = Range.of((-1554L));
      Long.sum(3752L, 9223372034707292161L);
      Range range3 = Range.of((-1407L), 235L);
      List<Range> list0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      range3.equals(object2);
      Range range4 = Range.of(9223372036854775552L);
      // Undeclared exception!
      try { 
        range2.intersection(range4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1554 would make range [9223372036854775552 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6990915208854345
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = 134L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-840L), (-840L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.shift(29016L);
      Long.max(29016L, 134L);
      Long long1 = new Long(1018L);
      range1.intersects(range0);
      range1.startsBefore(range0);
      Long.getLong("qq<Wr?V--X!%J97[/", (-840L));
      range0.equals(range1);
      Range.of(1L, 226L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1018L, 226L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.566296127327295
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range1.toString();
      Long long0 = new Long(547L);
      range1.intersects(range0);
      Long.compare((-1L), (-1L));
      Long long1 = new Long((-1134L));
      range1.intersects(range0);
      Long.toUnsignedString(2147483647L);
      Long.sum(255L, 0L);
      range1.equals(range0);
      Range.Comparators.values();
      range0.isSubRangeOf(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.cluster distance can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.294262847846125
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1812L;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 1812L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.41159611780273
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      range0.spliterator();
      long long1 = 2147483647L;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add((Range) null);
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.220338402120078
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(3752L, 3752L);
      Range range1 = Range.ofLength(3752L);
      Range range2 = Range.of(3752L, 3752L);
      Range.Builder range_Builder0 = new Range.Builder(3752L);
      range_Builder0.expandBegin(3752L);
      range_Builder0.shift((-2147483648L));
      Range.Comparators.values();
      Range range3 = Range.of((-2147483648L));
      range2.getBegin();
      Object object0 = new Object();
      range3.equals(object0);
      Long.sum(3752L, 2227L);
      Range.of(536L);
      range2.isSubRangeOf(range0);
      Range range4 = Range.of(3752L, 32767L);
      Range range5 = Range.of((-1L));
      assertFalse(range5.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range6 = Range.of(range_CoordinateSystem0, 3575L, 3575L);
      range6.spliterator();
      Range range7 = Range.of(3752L);
      range7.startsBefore(range1);
      boolean boolean0 = range6.equals(range7);
      assertFalse(boolean0);
      
      boolean boolean1 = range2.equals(range4);
      Range range8 = Range.of(9223372036854775807L, 9223372036854775807L);
      range7.isSubRangeOf(range2);
      Range range9 = Range.ofLength(88L);
      Range range10 = Range.of((-249L));
      Range range11 = range10.intersection(range9);
      assertTrue(range11.isEmpty());
      
      List<Range> list0 = range0.complement(range9);
      assertFalse(range0.isEmpty());
      assertSame(range0, range7);
      assertTrue(list0.contains(range0));
      
      boolean boolean2 = range9.startsBefore(range8);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.7344054250758103
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775674L);
      long long0 = 9223372036854772056L;
      range0.endsBefore(range0);
      Long long1 = new Long(1385L);
      Long long2 = new Long(1778L);
      long long3 = (-1154L);
      Range.of((-1154L));
      range0.intersects(range0);
      Long long4 = new Long(1778L);
      range0.intersects(range0);
      Long.toUnsignedString(2477L);
      range0.isSubRangeOf(range0);
      Object object0 = new Object();
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854772056L, 1630L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.077461218713494
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(2477L, 4294967295L);
      range1.endsBefore(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(2477L);
      Long long2 = new Long((-1529L));
      Range range2 = Range.of(2477L);
      Long.sum((-435L), 9223372036854775552L);
      Range range3 = Range.of(1458L, 2147483647L);
      boolean boolean0 = range2.isSubRangeOf(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      List<Range> list0 = range2.complement(range3);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals((Object) null);
      range3.equals(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object3);
      Range.of((-999L));
      Range range4 = range3.intersection(range2);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      Range.Comparators.values();
      range1.intersects(range2);
      range3.intersects(range2);
      Range range5 = Range.ofLength(9223372036854775552L);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4437332154018914
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 128L);
      range_Builder0.shift(4294967295L);
      Range.Comparators.values();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder2.build();
      assertSame(range1, range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=4.005514016999829
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Long long0 = new Long((-2210L));
      Long.max(2147483647L, 2645L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3399L), 255L);
      range_Builder0.expandBegin((-283L));
      range_Builder0.shift(3752L);
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775802L);
      Range range1 = Range.of((-2147483617L));
      Object object0 = new Object();
      Range range2 = Range.of((-2210L), 2147483647L);
      range1.equals(range2);
      Range range3 = Range.of(2147483647L);
      Range range4 = range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.stream();
      List<Range> list0 = range3.complementFrom(linkedList0);
      range4.complement(range1);
      assertTrue(range4.isEmpty());
      
      range2.complementFrom(list0);
      assertFalse(range3.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range5 = Range.of(range_CoordinateSystem1, (-32768L), 255L);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.6222316689493
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = 2152L;
      Range range0 = Range.of(2152L);
      Long long1 = new Long(2152L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = 2750L;
      Range range1 = Range.of(range_CoordinateSystem0, 2750L, (-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range range2 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5728389968785996
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L, 1L);
      range1.getLength();
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Long long1 = new Long(127L);
      Range.Builder range_Builder4 = new Range.Builder(1L);
      range1.equals(range_Builder2);
      Long long2 = new Long(127L);
      range0.intersects(range0);
      range0.isSubRangeOf(range0);
      long long3 = 3230L;
      Range range2 = Range.ofLength(1L);
      range2.getEnd();
      long long4 = (-1389L);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.8394046161873705
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(2147L);
      Long long0 = new Long(2147L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2750L, (-9223372036854775808L));
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-331L));
      Long.max(4294967295L, 2462L);
      Long long1 = new Long(2750L);
      range1.intersects(range0);
      String string0 = "qSq<Wr?V--X!%J7[/@";
      Long.getLong("org.jcvi.jillion.internal.core.util.JillionUtil", 9223372036854772056L);
      range2.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(626L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.8569693465183374
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of((-561L), 2477L);
      range0.endsBefore(range1);
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(1630L);
      Long long2 = new Long((-1L));
      Range range2 = Range.of((-1L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long1);
      range0.intersects(range1);
      Long long3 = new Long((-1L));
      Range range3 = Range.of(1630L);
      range3.intersects(range2);
      Long.toUnsignedString((-85L));
      range3.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-9223372036854775808L), (-561L));
      range_Builder0.shift((-2429L));
      Range.Comparators.values();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2991 would make range [9223372036854773378 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.151798682372979
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 9223372036854775674L;
      Range range0 = Range.ofLength(9223372036854775674L);
      long long1 = 2477L;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.8209002159209025
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775674L);
      Range range1 = Range.of(0L, 9223372036854772056L);
      range0.endsBefore(range1);
      Long long0 = new Long(1385L);
      Long.max(1630L, 9223372036854775674L);
      String string0 = "org.jcvi.jillion.internal.core.util.Caches";
      long long1 = 1778L;
      Long long2 = new Long(1778L);
      Range.of((-1154L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long2);
      range0.intersects(range1);
      Long long3 = new Long(1778L);
      range0.intersects(range1);
      Long.toUnsignedString(2477L);
      range0.equals(range1);
      Range.of((-4214L), 2477L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long4 = (-903L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-876L), (-903L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.890329492151042
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(9223372036854775674L, 9223372036854775674L);
      Range range1 = Range.of(0L, 9223372036854772056L);
      range0.endsBefore(range1);
      Long.max(1630L, 9223372036854775674L);
      Long long0 = new Long(1630L);
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long0);
      range0.intersects(range1);
      Long.getLong((String) null, 1532L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range2 = Range.ofLength(9223372036854772056L);
      range2.equals((Object) null);
      Range range3 = Range.of((-2450L));
      Range.of(9223372036854775674L);
      range3.isSubRangeOf(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-1339L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3705251800659863
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L, 1L);
      range1.getLength();
      range0.equals(range1);
      range0.getLength();
      range1.equals(range0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("We9$ R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.We9$ R
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.9723071412669464
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775674L);
      Range range1 = Range.of(0L, 9223372036854772056L);
      boolean boolean0 = range0.endsBefore(range1);
      Long long0 = new Long(9223372036854775674L);
      Long long1 = new Long(1778L);
      Range range2 = Range.of((-1154L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long1);
      boolean boolean1 = range0.intersects(range1);
      Long long2 = new Long(1778L);
      range0.intersects(range1);
      Long.toUnsignedString(2477L);
      range0.isSubRangeOf(range1);
      range1.equals(range0);
      boolean boolean2 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      Range range3 = Range.ofLength(9223372036854772056L);
      Range range4 = range1.intersection(range3);
      List<Range> list0 = range4.complement(range3);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      boolean boolean3 = range2.intersects(range4);
      //  // Unstable assertion: assertSame(range4, range3);
      //  // Unstable assertion: assertFalse(boolean3 == boolean1);
      //  // Unstable assertion: assertTrue(range4.equals((Object)range1));
      //  // Unstable assertion: assertFalse(boolean3);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.990926167833292
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(255L, 2147483647L);
      Range range1 = Range.of(2477L, 2147483647L);
      range1.endsBefore(range0);
      Long long0 = new Long(127L);
      Long.max(255L, 2645L);
      Long.getLong("", long0);
      range1.intersects(range0);
      Long.sum(9223372034707292986L, 9223372034707292986L);
      range1.equals("V");
      Long.toUnsignedString(9223372034707292986L);
      Range.ofLength(2645L);
      range0.equals((Object) null);
      Range.of(0L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-5328L), 4367L);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-1968L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.8019721011868635
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(0L, 9223372036854772075L);
      Long.max(1630L, 9223372036854775730L);
      Long long0 = new Long(1630L);
      Long.toUnsignedString(0L);
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", (-2961L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long0);
      Long.getLong((String) null, 1532L);
      Object object0 = new Object();
      Range.of(0L, 9223372036854775730L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775730L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.95892915667768
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L), 2147483647L);
      Range.of(555L, 2477L);
      range0.endsBefore(range1);
      Long long0 = new Long(2147483647L);
      Range range2 = Range.ofLength(9L);
      Long.max(2147483647L, (-987L));
      Long long1 = new Long(39L);
      Long.toUnsignedString(555L);
      range2.getLength();
      range1.equals((Object) null);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("k6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.k6
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6251774363795963
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(2152L);
      Long long0 = new Long(2152L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2750L, (-9223372036854775808L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(2152L);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.351425353092322
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(91L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 91L, 91L);
      Long.max((-32768L), 9223372036854775661L);
      Long long0 = new Long(248L);
      Long.toUnsignedString(91L);
      Long.sum(248L, 255L);
      range1.equals(range0);
      Range.Comparators.values();
      Range.ofLength(536L);
      Range.Comparators.values();
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("1L I ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.1L I 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.939537863510939
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(2152L);
      Long long0 = new Long(2152L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2750L, (-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range_Builder1.copy();
      Range range2 = range_Builder1.build();
      Object object0 = new Object();
      Range range3 = Range.of(355L);
      boolean boolean0 = range0.equals(range3);
      assertFalse(boolean0);
      
      Range.of(1023L);
      Range range4 = range2.intersection(range0);
      List<Range> list0 = range4.complement(range2);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list1.contains(range1));
      assertTrue(list1.contains(range4));
      assertSame(range2, range1);
      
      Range.Comparators.values();
      Range range5 = Range.ofLength(1018L);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.8795671503396214
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Long long0 = new Long((-2085L));
      range0.equals(long0);
      range0.equals(".~_9&");
      Object object1 = new Object();
      Object object2 = new Object();
      long long1 = 0L;
      Range range1 = Range.ofLength(9223372036854772056L);
      Object object3 = new Object();
      range1.equals(".~_9&");
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(".~_9&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators..~_9&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.976486462353881
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775674L);
      Range range1 = Range.of(0L, 9223372036854772056L);
      range0.endsBefore(range1);
      Long long0 = new Long(9223372036854775674L);
      Long long1 = new Long(1778L);
      Range range2 = Range.of((-1140L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long1);
      boolean boolean0 = range0.intersects(range1);
      Long long2 = new Long(1778L);
      range0.intersects(range1);
      Long.toUnsignedString(2477L);
      range1.equals(range0);
      range1.isSubRangeOf(range0);
      Range range3 = Range.ofLength(9223372036854772056L);
      Range range4 = range1.intersection(range3);
      List<Range> list0 = range4.complement(range3);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      boolean boolean1 = range2.intersects(range4);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range1));
      //  // Unstable assertion: assertSame(range4, range3);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Range range5 = Range.ofLength(9223372036854775674L);
      //  // Unstable assertion: assertNotSame(range5, range3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.9983451912595465
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-9223372036854773351L));
      Range range1 = Range.of(0L, 9223372036854772056L);
      range0.endsBefore(range1);
      Long long0 = new Long(1630L);
      Long.getLong("org.jcvi.jillio.internal.core.util.Caches", long0);
      range0.intersects(range1);
      range0.startsBefore(range1);
      Long.getLong((String) null, 1532L);
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.isSubRangeOf(range0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range1.split(9223372036854772056L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -7505 would make range [9223372036854772056 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.7852799420248986
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(2147483623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(145L);
      Long.getLong("");
      range0.equals((Object) null);
      long long1 = 127L;
      long long2 = 65534L;
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65534L, (-2096L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.5877309283449685
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(9223372036854775674L, 9223372036854775674L);
      Range range1 = Range.of(0L, 9223372036854772056L);
      range0.endsBefore(range1);
      Long long0 = new Long(1630L);
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long0);
      range0.intersects(range1);
      range0.startsBefore(range1);
      Long.getLong((String) null, 1532L);
      range0.isSubRangeOf(range1);
      Long.sum(3283L, 9223372036854775674L);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(9223372036854772056L, 196L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5845873420658676
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(3752L, 3752L);
      Range range1 = Range.of(3752L, 3752L);
      range1.endsBefore(range0);
      Long long0 = new Long(1L);
      Long.getLong("", long0);
      range0.intersects(range0);
      range1.startsBefore(range0);
      long long1 = 1532L;
      Long.getLong((String) null, 1630L);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = (-1L);
      long long1 = 268L;
      Range.CoordinateSystem range_CoordinateSystem0 = null;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 134L, 268L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.8568730239335642
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(9223372036854775674L, 9223372036854775674L);
      Range range1 = Range.of(0L, 9223372036854772056L);
      boolean boolean0 = range0.endsBefore(range1);
      Long long0 = new Long(1630L);
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long0);
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      
      Long.getLong((String) null, 1532L);
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean3 = range0.isSubRangeOf(range0);
      assertFalse(boolean3 == boolean2);
      
      Range.Comparators.values();
      Range range2 = Range.of(0L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.6256333985256557
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(9223372036854775674L, 9223372036854775674L);
      Range range1 = Range.of(0L, 9223372036854772056L);
      range0.endsBefore(range1);
      Long long0 = new Long(1630L);
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long0);
      range0.intersects(range1);
      Long long1 = new Long(9223372036854775674L);
      Range range2 = Range.of(9223372036854772231L);
      range2.endsBefore(range0);
      range0.isSubRangeOf(range1);
      Long.sum(9223372036854775674L, 9223372036854772231L);
      Object object0 = new Object();
      range0.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775552L, 940L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.5784605411107657
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(91L);
      Range range1 = Range.of(91L, 91L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.6387575986424006
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2509L), (-2509L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 134L, 1877L);
      range0.endsBefore(range1);
      Long long0 = new Long((-5060L));
      Long long1 = new Long((-2509L));
      Long.max(255L, 1224L);
      Long long2 = new Long(1877L);
      range1.intersects(range1);
      Long.toUnsignedString(1224L);
      Long.sum(2644L, 9223372034707292986L);
      range0.equals(range0);
      Range.Comparators.values();
      range1.isSubRangeOf(range0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("O_xh?*}TO'-)ughlz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.O_xh?*}TO'-)ughlz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.9904270317539314
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(2152L);
      Long long0 = new Long(2152L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2750L, (-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range_Builder1.copy();
      Range range2 = range_Builder1.build();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range2.complementFrom(list1);
      range1.complement(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.945643370951397
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(255L, 2147483647L);
      Range range1 = Range.of(2477L, 2147483647L);
      range1.endsBefore(range0);
      Long long0 = new Long(127L);
      Long.max(255L, 2645L);
      Long.getLong("", long0);
      boolean boolean0 = range1.intersects(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Long.sum(9223372034707292986L, 9223372034707292986L);
      range1.equals("V");
      Long.toUnsignedString(9223372034707292986L);
      range0.equals(range0);
      Range range2 = range0.intersection(range0);
      range0.isSubRangeOf(range0);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertSame(range2, range0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.724602159430217
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(9223372036854775674L, 9223372036854775674L);
      Range range1 = Range.of(0L, 9223372036854772056L);
      range0.endsBefore(range1);
      Long long0 = new Long(1620L);
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long0);
      range0.intersects(range1);
      range0.startsBefore(range1);
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.isSubRangeOf(range0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.1607452721665386
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), (-1L));
      range_Builder0.shift(5L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range range0 = range_Builder2.build();
      range_Builder0.contractBegin(1623L);
      range_Builder2.expandEnd((-1L));
      range_Builder2.expandBegin(0L);
      range_Builder2.contractEnd((-232L));
      range_Builder2.expandEnd(0L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder3.copy();
      Long.sum(926L, (-2210L));
      Object object0 = new Object();
      range0.equals(range_Builder3);
      Range range1 = Range.of((-1097L), 3876L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(4366L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 3876L, 65535L);
      List<Range> list0 = range3.complement(range2);
      assertFalse(list0.contains(range3));
      assertEquals(1, list0.size());
      
      boolean boolean1 = range1.intersects(range3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.8406151338672356
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 3600L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Long.max(4294967295L, 3600L);
      Long.getLong("", (Long) null);
      Range range1 = Range.ofLength(3600L);
      boolean boolean1 = range0.startsBefore(range1);
      Long.getLong("org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange", 3600L);
      Long.sum(4294967295L, (-3836L));
      range0.equals((Object) null);
      Range range2 = Range.of((-1L));
      boolean boolean2 = range1.isSubRangeOf(range2);
      assertTrue(boolean2 == boolean1);
      
      Range.Comparators.values();
      boolean boolean3 = range2.intersects(range1);
      assertTrue(boolean3 == boolean0);
      assertFalse(range2.isEmpty());
      assertFalse(boolean3);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.96412707307764
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(2152L, 2152L);
      Long long0 = new Long(2152L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2750L, (-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range1));
      
      Range.Builder range_Builder3 = new Range.Builder(2152L);
      List<Range> list2 = range2.complementFrom(list0);
      assertEquals(0, list2.size());
      
      range2.asRange();
      assertSame(range2, range1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.6842184011610213
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(3752L);
      Range range1 = Range.of(3752L, 3752L);
      Range range2 = Range.of(3752L, 3752L);
      range0.endsBefore(range2);
      Long long0 = new Long(3752L);
      Long long1 = new Long((-2147483648L));
      Long long2 = new Long((-2147483648L));
      Range range3 = Range.of(1142L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range3.equals(range2);
      Object object3 = new Object();
      Object object4 = new Object();
      range1.equals(object3);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range range4 = Range.of((-519L), 0L);
      range3.isSubRangeOf(range4);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("q0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.q0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3348698012699174
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = 134L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-840L), (-840L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      long long1 = 29016L;
      range_Builder0.expandBegin((-840L));
      Range.Builder range_Builder1 = range_Builder0.shift(29016L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "";
      Long.max(1025L, 1025L);
      Long long0 = new Long(2133L);
      Long long1 = new Long(1025L);
      Long.getLong("", long1);
      long long2 = (-1012L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775731L, (-1012L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1012 would make range [9223372036854775731 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.842814299695547
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of((-561L), 2477L);
      range0.endsBefore(range1);
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(1630L);
      Long long2 = new Long((-1L));
      Range range2 = Range.of((-1L));
      Long.getLong("O.R|uN", long1);
      range0.intersects(range1);
      Long long3 = new Long((-1L));
      Range range3 = Range.of((-1105L));
      range3.intersects(range2);
      range3.isSubRangeOf(range1);
      long long4 = new Long(4294967295L);
      Object object0 = new Object();
      range3.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854772056L, (-85L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.8886554178239456
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = (-2210L);
      Long long1 = new Long((-2210L));
      Long.max(2147483647L, 2645L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3422L), 255L);
      range_Builder0.shift(3752L);
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Range range1 = Range.of((-2147483648L));
      Object object0 = new Object();
      Range.of((-2210L), 2147483647L);
      Range.of(2147483647L);
      range1.intersection(range0);
      String string0 = "unable to mkdir for ";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("unable to mkdir for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.unable to mkdir for 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.579321507356968
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Range.CoordinateSystem.values();
      Range range1 = Range.ofLength(65535L);
      range1.complement(range0);
      String string0 = "A";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=4.084485971393085
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(3752L, 3752L);
      Range range1 = Range.ofLength(3752L);
      Range range2 = Range.of(3752L, 3752L);
      Range.Builder range_Builder0 = new Range.Builder(3752L);
      range_Builder0.expandBegin(3752L);
      range_Builder0.shift((-2147483648L));
      Range.Comparators.values();
      Range range3 = Range.of((-2147483648L));
      range2.getBegin();
      Object object0 = new Object();
      range3.equals(object0);
      Long.sum(3752L, 2227L);
      Range.of(536L);
      range2.isSubRangeOf(range0);
      Range.of(3752L, 32767L);
      Range.of((-1L));
      Range.of((-594L), 32767L);
      Object object1 = new Object();
      range1.equals(object1);
      Range range4 = Range.of(3752L);
      Range range5 = Range.of(1083L);
      range5.intersection(range4);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.200767051101671
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.of(134L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.9481748007340935
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775674L);
      Long long0 = new Long(9223372036854772056L);
      Long long1 = new Long((-3336L));
      Long long2 = new Long(1L);
      Range range1 = Range.of((-1755L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches");
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", (Long) null);
      boolean boolean0 = range0.intersects(range1);
      Long long3 = new Long(9223372036854772056L);
      Range range2 = Range.of((-128L));
      range2.intersects(range0);
      boolean boolean1 = range1.isSubRangeOf(range2);
      assertTrue(boolean1 == boolean0);
      
      Long.sum((-1460L), 1807L);
      Object object0 = new Object();
      boolean boolean2 = range1.equals((Object) null);
      assertFalse(boolean2);
      
      Range range3 = Range.ofLength(1630L);
      Range range4 = range0.intersection(range1);
      List<Range> list0 = range1.complement(range4);
      assertTrue(range4.isEmpty());
      assertTrue(list0.contains(range1));
      assertFalse(list0.contains(range4));
      
      boolean boolean3 = range3.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean3 == boolean2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.06179684886891
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L), 2147483647L);
      range0.endsBefore(range1);
      range1.complement(range1);
      Long.max((-1L), (-1L));
      range1.startsBefore(range1);
      Long.sum(536L, 2147483647L);
      Range.of(32767L);
      range0.isSubRangeOf(range1);
      Range.of(536L, 2477L);
      Range range2 = Range.ofLength(2147483647L);
      Range range3 = Range.ofLength(2147483647L);
      Range.of(2147484183L);
      range2.isSubRangeOf(range3);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("J31^FG)KX0W/%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.J31^FG)KX0W/%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.9203323963445458
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Long long0 = new Long((-9223372036854775808L));
      range0.endsBefore(range0);
      Long long1 = new Long(0L);
      Long long2 = new Long((-1L));
      Long long3 = new Long(0L);
      Long.max(0L, (-32772L));
      Long.max(0L, (-1375L));
      Long long4 = new Long(0L);
      range0.intersects(range0);
      Long.toUnsignedString(32767L);
      Long.sum(9223372034707292986L, 2147483647L);
      range0.equals("32767");
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.startsBefore(range1);
      boolean boolean1 = range0.equals((Object) null);
      Range range2 = Range.of(0L);
      Range range3 = range2.intersection(range0);
      boolean boolean2 = range2.isSubRangeOf(range3);
      assertTrue(boolean2 == boolean1);
      
      Range range4 = Range.of(2147483647L);
      List<Range> list0 = range3.complement(range4);
      range3.complementFrom(list0);
      Range.Comparators.values();
      boolean boolean3 = range1.intersects(range2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2927478139646293
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(134L);
      Range range1 = Range.of(134L);
      assertNotSame(range1, range0);
      
      Range range2 = Range.ofLength(4294967295L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.037468742441514
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      boolean boolean0 = range0.endsBefore(range0);
      Long long0 = new Long((-2210L));
      Long.max(2147483647L, 2645L);
      range0.intersects(range0);
      Long long1 = new Long(2147483647L);
      range0.intersects(range0);
      Long.toUnsignedString(1L);
      boolean boolean1 = range0.equals(long1);
      assertFalse(boolean1);
      
      Range.Comparators.values();
      Range range1 = Range.ofLength(9223372034707292986L);
      Range range2 = Range.of(127L, 127L);
      boolean boolean2 = range0.isSubRangeOf(range2);
      assertTrue(boolean2 == boolean0);
      
      List<Range> list0 = range1.complement(range2);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(2, list0.size());
      assertEquals(2, list1.size());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.7027063933745414
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.endsBefore(range0);
      Long long0 = new Long(127L);
      Long long1 = new Long(2645L);
      Long.max(1L, 9223372034707292986L);
      Long long2 = new Long(3575L);
      range1.intersects(range0);
      Long.toUnsignedString((-1375L));
      Long.sum((-1789L), 0L);
      range0.equals(range1);
      Range.Comparators.values();
      Range range2 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 255L, 3133L);
      range2.isSubRangeOf(range3);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("O_xh?*}TO'-)ughlz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.O_xh?*}TO'-)ughlz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.354100214318228
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = 2152L;
      Range range0 = Range.of(2152L, 2152L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.677749582159139
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder1.expandEnd(65502L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2210L), 0L);
      range0.getBegin(range_CoordinateSystem0);
      range_Builder2.contractBegin(2165L);
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("SB", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=4.173202626142136
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      Range range1 = Range.ofLength(3577L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 340L, 65561L);
      Range.ofLength(3577L);
      Range range3 = range1.asRange();
      Range.Comparators.values();
      List<Range> list0 = range2.complement(range3);
      Long.getLong("", 4294967295L);
      range1.complementFrom(list0);
      assertEquals(1, list0.size());
      
      Range range4 = Range.of((-1389L));
      Long.sum((-1389L), 9223372036854775673L);
      Object object0 = new Object();
      boolean boolean0 = range3.equals((Object) null);
      Range range5 = Range.of(9223372036854774284L, 9223372036854775673L);
      boolean boolean1 = range5.isSubRangeOf(range3);
      assertTrue(boolean1 == boolean0);
      
      Range range6 = Range.ofLength(4366L);
      range5.intersection(range4);
      List<Range> list1 = range0.complement(range1);
      assertTrue(list1.contains(range0));
      
      boolean boolean2 = range0.intersects(range6);
      assertFalse(range6.isEmpty());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.4136447733725124
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      range0.getLength();
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(1L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.expandBegin(2147483647L);
      long long1 = 1061L;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-7L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=4.084007638607946
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-3164L), 9223372034707292160L);
      Long long0 = new Long(3576L);
      Long long1 = new Long((-932L));
      Long.sum(9223372036854772231L, (-577L));
      Range range1 = Range.of(1630L, 9223372036854771654L);
      List<Range> list0 = range1.complement(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object0);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object1);
      Range.of((-2253L));
      Range range2 = range0.intersection(range1);
      range0.complement(range2);
      range2.complementFrom(list0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.982030341304437
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder((-10L), (-10L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      Long.getLong((String) null, 0L);
      Object object0 = new Object();
      Range range0 = Range.of((-3313L));
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(551L, 551L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range2));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.807059559405788
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), (-1L));
      range_Builder0.shift((-2L));
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Long long0 = new Long((-2L));
      Range range0 = Range.of((-3027L));
      Long.getLong("V,sT}t!\"is6S", long0);
      Range range1 = Range.of(0L, 1917L);
      range0.intersects(range1);
      Long long1 = new Long((-2L));
      Range range2 = Range.of(0L);
      range2.intersects(range0);
      range2.isSubRangeOf(range0);
      Long.sum(2625L, (-2L));
      Object object0 = new Object();
      range0.isSubRangeOf(range2);
      Range range3 = Range.of(1L, 65535L);
      range3.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.6727425604692616
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-3164L), 9223372034707292160L);
      Long.max(1L, (-3164L));
      Long long0 = new Long(9223372034707292160L);
      Long.toUnsignedString(32767L);
      Long.getLong("", 1630L);
      Long long1 = new Long(1630L);
      Long.getLong("", long1);
      Range range1 = Range.of(1L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.927230868667516
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-3164L), 9223372034707292160L);
      Long long0 = new Long(3576L);
      Long long1 = new Long((-932L));
      Long.sum(9223372036854772231L, (-577L));
      Range range1 = Range.of(1630L, 9223372036854771654L);
      range1.complement(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object0);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object2);
      range0.intersection(range1);
      String string0 = "The second parameter in the comparison is null.";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("The second parameter in the comparison is null.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.The second parameter in the comparison is null.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=4.034026780229631
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(3752L);
      Range range1 = Range.ofLength(3752L);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(3752L);
      Range.Builder range_Builder1 = range_Builder0.shift((-2147483648L));
      range_Builder1.copy();
      Range range3 = Range.of((-1270L));
      Long long0 = new Long(2477L);
      Long long1 = new Long((-128L));
      Long long2 = new Long((-1270L));
      range0.intersection(range1);
      range_Builder0.build();
      range0.intersects(range3);
      Long.getLong("qSq<Wr?V--X!%J7[/@", (-2147483648L));
      range3.asRange();
      range2.equals(range_Builder1);
      // Undeclared exception!
      try { 
        Range.of(536L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.842971045025495
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.iterator();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1839L), 0L);
      range0.intersects(range1);
      boolean boolean0 = range1.endsBefore(range0);
      assertTrue(boolean0);
      
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      range_CoordinateSystem0.toString();
      range0.startsBefore(range1);
      String string0 = range2.toString();
      assertEquals("[ -1839 .. -1 ]/0B", string0);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.950628383612924
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(3752L, 3752L);
      Range range1 = Range.ofLength(3752L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(3752L);
      range_Builder0.shift((-2147483648L));
      Range range3 = Range.of((-1270L));
      Long long0 = new Long(2477L);
      Long.max((-128L), (-2147483648L));
      Long long1 = new Long((-1270L));
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range3);
      Range.Builder range_Builder2 = range_Builder1.shift((-90L));
      Range.Comparators.values();
      Range.Builder range_Builder3 = new Range.Builder(range1);
      assertFalse(range1.isEmpty());
      
      Range range4 = range_Builder2.build();
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.3102112398816907
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      long long0 = 2703L;
      Range.of(2703L, 4294967295L);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=4.023582295119033
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(3752L, 3752L);
      Range range1 = Range.ofLength(3752L);
      Range range2 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(3752L);
      range_Builder0.shift((-2147483648L));
      Range range3 = Range.of((-1270L));
      Long long0 = new Long(2477L);
      Long.max((-128L), (-2147483648L));
      Long long1 = new Long((-1270L));
      range0.intersects(range3);
      Long.getLong("qSq<Wr?V--X!%J7[/@", (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-128L), 1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
      
      Range range4 = Range.of(65535L);
      assertNotSame(range4, range0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.850348102684692
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long.max(3577L, 1532L);
      Long long0 = new Long(145L);
      range0.intersects(range0);
      range0.startsBefore(range0);
      Long.getLong("r", (-2986L));
      Range range1 = Range.of(2412L, 9223372036854775807L);
      Range range2 = range0.intersection(range1);
      range0.endsBefore(range0);
      Range.ofLength(4110L);
      range0.isSubRangeOf(range0);
      range0.complement(range2);
      Range.ofLength(1532L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.532758066040891
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.ofLength(4742L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4742L, 4742L);
      range0.split(4742L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2432L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3925058903494896
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(2152L);
      Long long0 = new Long(2152L);
      range0.equals(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.559787512527142
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(2412L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Range range1 = Range.ofLength(1459L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=4.125725976178374
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.endsBefore(range0);
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(1630L);
      Long.compareUnsigned(2006L, 2477L);
      Long long2 = new Long((-1L));
      Range range1 = Range.of((-1L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2581L), (-1L));
      Range.of((-1958L));
      Range range3 = range0.intersection(range2);
      range0.endsBefore(range1);
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range2.complementFrom(list0);
      assertTrue(list1.contains(range1));
      
      range3.asRange();
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=4.079728234449364
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 2147483647L);
      Range range3 = Range.of(555L, 2477L);
      String string0 = "";
      range1.endsBefore(range2);
      Long long0 = new Long(2147483647L);
      Long.max(2412L, 2412L);
      Long long1 = new Long(2477L);
      range1.intersects(range2);
      Long.getLong("qSq<Wr?V--X!%J7[/@", 2477L);
      range0.equals(long1);
      Range range4 = Range.of((-1931L), 536L);
      range3.intersection(range4);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-690L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.8494341621015904
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(3752L, 3752L);
      Range range1 = Range.ofLength(3752L);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(3752L);
      range_Builder0.contractEnd(3752L);
      range_Builder0.shift((-2147483648L));
      Long long0 = new Long(2477L);
      Long.max((-128L), (-2147483648L));
      Long long1 = new Long((-1270L));
      boolean boolean0 = range0.intersects(range2);
      assertFalse(boolean0);
      assertTrue(range2.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(1L);
      range_Builder3.copy();
      Range range3 = range_Builder2.build();
      range0.complement(range3);
      range1.intersects(range0);
      assertFalse(range1.isEmpty());
      
      List<Range> list0 = range0.complement(range3);
      assertSame(range3, range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.730438670178419
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Long long0 = new Long((-9223372036854775808L));
      range0.endsBefore(range0);
      Long long1 = new Long(0L);
      Long long2 = new Long((-1L));
      Long long3 = new Long(9223372036854775807L);
      Long.max(9223372036854775807L, (-32772L));
      Long.max(9223372036854775807L, (-1375L));
      Long long4 = new Long(9223372036854775807L);
      range0.intersects(range0);
      Long.toUnsignedString(32767L);
      Long.sum(9223372034707292986L, 2147483647L);
      range0.equals("32767");
      Range.Comparators.values();
      Range.Comparators.values();
      Range range1 = Range.of((-9223372036854775808L), (-2119L));
      range0.isSubRangeOf(range1);
      Range.Comparators.values();
      String string0 = "start offset can not be less than 0";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("start offset can not be less than 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.start offset can not be less than 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.8616476907777533
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), (-1L));
      range_Builder0.shift((-2L));
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder0.contractBegin(1623L);
      range_Builder2.expandEnd((-1L));
      Range range0 = Range.of((-2L), 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      range0.equals(object0);
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = Range.of((-1L));
      Range range2 = range1.intersection(range0);
      Range.Comparators.values();
      range2.intersects(range1);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-1430L), (-9223372034707292159L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.9510492650377933
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(9223372036854775807L);
      Long.max(3577L, 1532L);
      Long long0 = new Long(145L);
      range0.intersects(range1);
      range1.startsBefore(range0);
      Long.getLong("r", (-2986L));
      range0.equals("qq<Wr?V--X!%J97[/");
      Range range2 = Range.of(2412L, 9223372036854775807L);
      Range range3 = range0.intersection(range2);
      range1.endsBefore(range0);
      Range.ofLength(4110L);
      range1.isSubRangeOf(range0);
      range0.complement(range3);
      Range.ofLength(1532L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=4.227696144738404
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), (-1L));
      Range.Builder range_Builder2 = range_Builder0.shift((-2L));
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range range0 = range_Builder3.build();
      range_Builder0.contractBegin(1623L);
      range_Builder3.expandEnd((-1L));
      range_Builder3.expandBegin(0L);
      range_Builder3.contractEnd((-232L));
      range_Builder3.expandEnd(0L);
      range_Builder0.copy();
      range0.spliterator();
      Range range1 = Range.of(1623L);
      range1.endsBefore(range0);
      boolean boolean0 = range1.startsBefore(range0);
      range1.equals(range_Builder2);
      Range range2 = Range.of((-1221L));
      Range range3 = range2.intersection(range1);
      boolean boolean1 = range2.isSubRangeOf(range3);
      assertTrue(boolean1 == boolean0);
      assertTrue(range3.isEmpty());
      
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range2));
      
      Range.Comparators.values();
      boolean boolean2 = range0.intersects(range3);
      assertFalse(range1.isEmpty());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.425413718753598
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(134L);
      range0.split(134L);
      // Undeclared exception!
      try { 
        range0.split((-2327L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.1786334995603744
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(2152L);
      Long.max(3284L, (-817L));
      Long long0 = new Long((-9223372036854775808L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.870777378742039
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 1501L);
      Range range0 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 255L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range0.complement(range2);
      range0.complementFrom(list0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=4.0334765988157235
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(3752L, 3752L);
      Range range1 = Range.ofLength(3752L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(3752L);
      range_Builder0.contractEnd(3752L);
      range_Builder0.shift((-2147483648L));
      Range range3 = Range.of((-1270L));
      Long long0 = new Long(2477L);
      Long.max((-128L), (-2147483648L));
      Long long1 = new Long((-1270L));
      range0.intersects(range3);
      assertFalse(range3.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(1L);
      range_Builder3.copy();
      Range range4 = range_Builder2.build();
      List<Range> list0 = range0.complement(range4);
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = range1.intersects(range0);
      assertSame(range0, range4);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.5404991198559905
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long.max(3577L, 1532L);
      Long long0 = new Long(145L);
      range0.complement(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      range0.equals(object0);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range.of(1532L);
      boolean boolean0 = range0.equals(object6);
      assertFalse(boolean0);
      
      Range range1 = range0.intersection(range0);
      List<Range> list0 = range0.complement(range1);
      range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(range0.isEmpty());
      assertTrue(list1.contains(range1));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.6345910019799046
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(0L, 9223372036854772056L);
      Long.max(1630L, 9223372036854775730L);
      Long long0 = new Long(1630L);
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long0);
      Long.getLong((String) null, 1532L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.intersection(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.315608610650334
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.of(255L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -129 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.781443847166769
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(3765L, 3765L);
      Range range1 = Range.ofLength(3765L);
      Range range2 = range1.intersection(range0);
      range1.intersects(range1);
      range2.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("j1uI07&uB&eD]R'G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse j1uI07&uB&eD]R'G into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.774228653670053
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775674L);
      Range range1 = Range.of(0L, 9223372036854772056L);
      range0.endsBefore(range1);
      Long long0 = new Long(9223372036854775674L);
      Long long1 = new Long(1778L);
      Range.of((-1154L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches", long1);
      range0.intersects(range1);
      Long long2 = new Long(1778L);
      Range.Comparators.values();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.845902155427286
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-3164L), 9223372034707292160L);
      Long long0 = new Long(3576L);
      Long long1 = new Long((-932L));
      Long.sum(9223372036854772231L, (-577L));
      Range range1 = Range.of((-3164L), 9223372036854771654L);
      range1.complement(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.ofLength((-1348L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.89096550109275
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(9223372036854775807L);
      Long.max(3577L, 1532L);
      Long long0 = new Long(145L);
      range0.intersects(range1);
      range0.isEmpty();
      Long.getLong("r", (-2986L));
      range0.equals("qq<Wr?V--X!%J97[/");
      Range range2 = Range.of(2412L, 9223372036854775807L);
      Range range3 = range0.intersection(range2);
      range1.endsBefore(range0);
      Range.ofLength(4110L);
      range1.isSubRangeOf(range0);
      range0.complement(range3);
      Range.ofLength(1532L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.9278580067459505
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(3752L, 3752L);
      Range range1 = Range.ofLength(3752L);
      range1.equals(range0);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(3752L);
      range_Builder0.expandEnd(828L);
      range_Builder0.contractEnd(3752L);
      range_Builder0.shift((-2147483648L));
      Range range3 = Range.of((-1811L), (-1811L));
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.559184621484277
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L, 1L);
      range1.getLength();
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(1L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.expandBegin(2147483647L);
      long long1 = 1061L;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-7L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.2563121549435428
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 255L;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.537477037865928
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(134L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range.of(134L, 134L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 0L, 0L);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.5814035068644783
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Long long0 = new Long((-2210L));
      long long1 = 2645L;
      Range range0 = Range.of((-5162L), 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.850308722673473
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      range0.endsBefore(range1);
      range0.intersects(range0);
      range0.startsBefore(range1);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.isSubRangeOf(range0);
      Range.Comparators.values();
      Range range2 = Range.of(9223372036854775807L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.679068052733273
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), (-1L));
      range_Builder0.shift((-2L));
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder2.expandEnd((-1L));
      range_Builder2.contractEnd((-232L));
      range_Builder2.expandEnd(0L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range range0 = Range.of((-2210L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=4.180421841743904
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(255L, 2147483647L);
      Range range1 = Range.of(2477L, 2147483647L);
      range1.endsBefore(range0);
      Long long0 = new Long(127L);
      Long.max(255L, 2645L);
      Long.getLong("end of file reached before entire block was skipped", long0);
      range1.intersects(range0);
      Range.of(127L);
      Long.sum(9223372034707292986L, 9223372034707292986L);
      range1.equals("V");
      Long.toUnsignedString(9223372034707292986L);
      Range range2 = Range.ofLength(2645L);
      range0.equals(range2);
      Range.of((-5328L), (-2112L));
      Range range3 = range1.intersection(range2);
      range3.iterator();
      Range.ofLength(2477L);
      range3.isSubRangeOf(range0);
      Range range4 = range0.intersection(range3);
      boolean boolean0 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range4.complementFrom(list0);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      //  // Unstable assertion: assertEquals(2, list1.size());
      //  // Unstable assertion: assertSame(range3, range4);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.736868337730435
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(134L, 134L);
      Range range1 = Range.of(2958L);
      boolean boolean0 = range0.endsBefore(range1);
      Long long0 = new Long(2958L);
      Long.max(536L, (-2147483652L));
      Long.getLong((String) null, long0);
      range1.intersects(range0);
      Long.getLong((String) null, 536L);
      Long.sum(1L, 536L);
      range1.isSubRangeOf(range1);
      Range range2 = Range.of((-1L));
      range2.isSubRangeOf(range0);
      Range.Comparators.values();
      boolean boolean1 = range2.intersects(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(range2.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.9898374774348433
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.endsBefore(range0);
      Long long0 = new Long((-2210L));
      Range range1 = Range.of((-3612L));
      long long1 = (-1459L);
      Long long2 = new Long((-1459L));
      Long.max((-128L), 9223372036854773515L);
      Long long3 = new Long((-1L));
      range1.intersects(range0);
      String string0 = "qSq<Wr?V--X!%J7[/@";
      Long.getLong("qSq<Wr?V--X!%J7[/@", (-3612L));
      range0.equals((Object) null);
      Range range2 = Range.of((-1459L), 1880L);
      Range range3 = range0.intersection(range1);
      range2.endsBefore(range3);
      Range.ofLength(536L);
      range1.isSubRangeOf(range0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.580317399090901
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      range1.endsBefore(range0);
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(4294967295L);
      Long long2 = new Long((-1529L));
      Range range2 = Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals(object1);
      Object object3 = new Object();
      Object object4 = new Object();
      range2.equals(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        Range.of((-519L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.6712553674444455
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Long long0 = new Long((-505L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Long long1 = new Long((-1L));
      Long long2 = new Long((-1L));
      Range.of((-1L));
      Range range0 = Range.of(4294966763L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("urm,Dg-W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.urm,Dg-W
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=4.087702912846358
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(2412L);
      Range range1 = Range.of((-1L));
      Range range2 = Range.ofLength(2412L);
      String string0 = range0.toString();
      assertEquals("[ 2412 .. 2412 ]/0B", string0);
      
      Range range3 = Range.of((-1L), 2147483647L);
      Range range4 = range2.intersection(range3);
      range4.endsBefore(range1);
      boolean boolean0 = range0.isSubRangeOf(range3);
      assertTrue(boolean0);
      
      List<Range> list0 = range1.complement(range4);
      List<Range> list1 = range2.complementFrom(list0);
      assertFalse(range1.isEmpty());
      assertTrue(list1.contains(range1));
      
      Range range5 = range4.asRange();
      assertSame(range5, range2);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.9890149378534665
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-825L), (-825L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 2147483647L, 9223372036854773656L);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range.of(2147483647L);
      Range.ofLength(1675L);
      Range.of(range_CoordinateSystem1, (-825L), (-825L));
      long long0 = new Long((-825L));
      range0.intersection(range1);
      range1.asRange();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.5357594170716253
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-840L), (-840L));
      Range range1 = Range.of((-128L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of((-750L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-749L), long0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.4184599201826193
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(145L);
      Long long0 = new Long(145L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      range0.equals(object0);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range1 = Range.of(1532L);
      range1.getBegin();
      range0.equals(object5);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("unable to mkdir for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.unable to mkdir for 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.9005306964610442
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(750L, 750L);
      range_Builder0.copy();
      range_Builder0.shift(843L);
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(750L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder(750L, 843L);
      range_Builder0.copy();
      range_Builder0.expandEnd(52L);
      range_Builder0.build();
      range_Builder0.expandBegin(750L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1128L);
      range0.getBegin();
      Range range1 = Range.of(1L);
      Range range2 = range1.intersection(range0);
      Range.ofLength(0L);
      range2.isSubRangeOf(range0);
      Range.Comparators.values();
      String string0 = "O_xh?*}TO'-)ughlz";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("coordinateSystem can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.coordinateSystem can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.623736673088062
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.of(2152L);
      Long long0 = new Long(2152L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2750L, (-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandBegin(1L);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("0\"*~VOp,C =Dx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.0\"*~VOp,C =Dx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.7683171141464773
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 1501L);
      Range range0 = Range.of(2183L);
      Range range1 = Range.of(2556L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.661955249766853
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Long long0 = new Long(2174L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(3526L);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.490869813851243
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1501L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("_>(ziazdd$bd)%9A(vr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem._>(ziazdd$bd)%9A(vr
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.469997512107659
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2238L), (-2238L));
      Range range0 = Range.of((-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.7039863934955877
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-32769L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.7693772548615057
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Long long0 = new Long((-1L));
      Range range2 = Range.of((-71L));
      range0.endsBefore(range2);
      Long long1 = new Long(9980L);
      Long.max((-32768L), (-1L));
      Long long2 = new Long((-1L));
      range2.intersects(range1);
      long long3 = (-2303L);
      Long.toUnsignedString((-2303L));
      Range range3 = Range.of((-2303L));
      range3.startsBefore(range0);
      range1.isSubRangeOf(range3);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("18446744073709549313");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.18446744073709549313
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=4.0379020208926075
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-9223372036854773351L));
      Range range1 = Range.of(0L, 9223372036854772056L);
      range0.endsBefore(range1);
      Long long0 = new Long(1630L);
      Long.getLong("org.jcvi.jillio.internal.core.util.Caches", long0);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      
      Long.getLong((String) null, 1532L);
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean2 = range0.isSubRangeOf(range0);
      assertTrue(boolean2 == boolean1);
      
      Range.Comparators.values();
      Range range2 = Range.of(0L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.9713264810672797
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), (-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-1090L));
      range_Builder2.expandEnd((-1L));
      range_Builder2.contractBegin(2230L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder2.contractEnd((-232L));
      range_Builder2.expandEnd(0L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      long long0 = (-2210L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range range0 = Range.of(range_CoordinateSystem0, (-2210L), 0L);
      Range.of((-2210L));
      range0.getLength();
      Range.of(0L, 2210L);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=4.067102898559043
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.of((-2128L));
      Range range0 = Range.ofLength(3577L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 3576 ]/0B", range_CoordinateSystem1);
      Range range2 = Range.parseRange("[ 0 .. 3576 ]/0B");
      Range range3 = range0.intersection(range2);
      range3.complement(range1);
      Range range4 = Range.parseRange("[ 0 .. 3576 ]/0B");
      range4.startsBefore(range2);
      range2.isSubRangeOf(range3);
      Range.parseRange("[ 0 .. 3576 ]/0B");
      // Undeclared exception!
      try { 
        Range.ofLength((-1223L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.180624539878941
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(2412L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2413L, long0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.818542042010388
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), (-1L));
      range_Builder0.shift((-2L));
      Range.Builder range_Builder2 = range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder3.expandEnd((-1L));
      range_Builder3.contractEnd((-232L));
      range_Builder2.contractBegin(536L);
      range_Builder3.expandEnd(0L);
      range_Builder0.copy();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2L), 0L);
      Range range0 = Range.of((-2L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      long long0 = (-386L);
      Range.of((-386L), 228L);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder((-2210L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.505814509323345
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(2152L);
      Long long0 = new Long(2152L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3526L, 3526L);
      assertTrue(range1.isEmpty());
      
      Range range2 = Range.of(2152L);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.875114196697372
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(3752L, 3752L);
      Range range1 = Range.ofLength(3752L);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(3752L);
      range_Builder0.shift(3752L);
      Range.of((-1270L));
      Long long0 = new Long(3752L);
      Long.max((-128L), 3752L);
      Long long1 = new Long((-1270L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2484L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.916031258773624
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L), 2147483647L);
      long long0 = 555L;
      Range.of(555L, 2477L);
      range0.endsBefore(range1);
      Long long1 = new Long(2147483647L);
      Long.max(2412L, 2412L);
      Long long2 = new Long(2477L);
      range0.intersects(range1);
      Long.getLong("qSq<Wr?V--X!%J7[/@", 2477L);
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ -1 .. 2147483647 ]/0B", range_CoordinateSystem1);
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.5750432006687403
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder((-32768L), 29016L);
      Range.Builder range_Builder1 = range_Builder0.shift(65535L);
      Range.Comparators.values();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = range_Builder1.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.6623255766369827
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1501L);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-1090L));
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1501L);
      range_Builder2.contractBegin(2165L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.contractEnd((-1090L));
      range_Builder0.copy();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1L), (-1090L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.528512245383871
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Long long0 = new Long(2174L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2750L;
      Range.of(range_CoordinateSystem0, 2750L, (-9223372036854775808L));
      Long long2 = new Long((-1L));
      Long long3 = new Long(2750L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-32768L), 3575L);
      // Undeclared exception!
      try { 
        Range.of(20L, (-1388L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.041041881042495
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range range0 = range_Builder0.build();
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("0\"*~VOp,C =Dx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.0\"*~VOp,C =Dx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.1866848071632385
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getEnd();
      assertEquals((-32768L), long0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Long.getLong((String) null, 1532L);
      Object object0 = new Object();
      Range range0 = Range.of((-2972L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.245905362460895
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-424L), 246L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.5913122988452257
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.of(134L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-840L), 3526L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("xv \",AhDtj^i{%r^+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.xv \",AhDtj^i{%r^+
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.3876344284752276
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.6539075438144764
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 3600L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.ofLength(9974L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder2.expandEnd(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 0L, 0L);
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder3 = range_Builder1.contractBegin((-1887L));
      assertFalse(range_Builder3.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.845157852250961
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      long long0 = (-1L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), (-1L));
      range_Builder0.shift((-2L));
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder2.build();
      range_Builder0.contractBegin(1623L);
      range_Builder2.expandEnd((-1L));
      range_Builder2.expandBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder2.contractEnd((-232L));
      range_Builder2.expandEnd(0L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder3.copy();
      long long1 = (-2210L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range range0 = Range.of(range_CoordinateSystem0, (-2210L), 0L);
      range0.getBegin();
      range0.getBegin(range_CoordinateSystem0);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(0L, (-2210L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.2622243017037382
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.5730136204289864
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), (-1L));
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      range_Builder2.shift(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = range_Builder2.expandBegin(0L);
      range_Builder4.copy();
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("0\"*~VOp,C =Dx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.0\"*~VOp,C =Dx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.450233349710572
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 4L, 4L);
      Range.of(9223372036854775553L);
      long long0 = (-840L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-840L), 9223372036854775553L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.5002767629080385
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Long long0 = new Long(2477L);
      Long long1 = new Long(2477L);
      Long.sum((-435L), 9223372036854775552L);
      Range.of(1458L, 1458L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(9223372036854775552L);
      assertFalse(range0.isEmpty());
  }
}
