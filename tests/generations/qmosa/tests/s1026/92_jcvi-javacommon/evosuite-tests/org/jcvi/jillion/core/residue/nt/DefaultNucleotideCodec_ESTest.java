/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 16:22:55 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-20);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode(nucleotide0);
      byte byte0 = (byte) (-1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2527773616912183
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<DefaultNucleotideCodec> linkedList1 = new LinkedList<DefaultNucleotideCodec>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList1.remove((Object) linkedList0);
      LinkedList<DefaultNucleotideCodec> linkedList2 = new LinkedList<DefaultNucleotideCodec>();
      linkedList0.addAll((Collection<? extends DefaultNucleotideCodec>) linkedList2);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList3.parallelStream();
      Object object0 = new Object();
      linkedList4.removeLastOccurrence(linkedList0);
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      linkedList5.addAll((Collection<? extends Nucleotide>) linkedList4);
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList9 = new LinkedList<Nucleotide>();
      linkedList9.stream();
      ListIterator<Nucleotide> listIterator0 = linkedList3.listIterator();
      linkedList7.removeFirstOccurrence("  encodedglyph length is ");
      linkedList3.add(nucleotide0);
      LinkedList<Nucleotide> linkedList10 = new LinkedList<Nucleotide>();
      linkedList10.descendingIterator();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, 1358954495);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1358954495);
      String string0 = "";
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1358954495, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1432));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.283477208167445
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec1.encode(nucleotide1);
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      Object object0 = new Object();
      linkedList0.remove(object0);
      LinkedList<DefaultNucleotideCodec> linkedList1 = new LinkedList<DefaultNucleotideCodec>();
      linkedList1.addAll((Collection<? extends DefaultNucleotideCodec>) linkedList0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      linkedList2.parallelStream();
      Object object1 = new Object();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList4.removeLastOccurrence(set0);
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      linkedList2.addAll((Collection<? extends Nucleotide>) linkedList5);
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList9 = new LinkedList<Nucleotide>();
      linkedList4.stream();
      LinkedList<Integer> linkedList10 = new LinkedList<Integer>();
      LinkedList<Nucleotide> linkedList11 = new LinkedList<Nucleotide>();
      linkedList6.retainAll(linkedList11);
      linkedList7.removeFirstOccurrence(linkedList4);
      Nucleotide nucleotide2 = Nucleotide.NotThymine;
      linkedList5.add(nucleotide2);
      LinkedList<Nucleotide> linkedList12 = new LinkedList<Nucleotide>();
      Object object2 = new Object();
      Object object3 = new Object();
      linkedList2.remove(object3);
      linkedList8.descendingIterator();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec2.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-46)}, byteArray1);
      
      int int0 = defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      assertEquals(1, int0);
      assertEquals(5, byteArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3111983732103516
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide1);
      Nucleotide nucleotide2 = Nucleotide.Guanine;
      Set<Nucleotide> set1 = nucleotide2.getAllPossibleAmbiguities();
      defaultNucleotideCodec1.toString(byteArray1);
      Range range0 = Range.of((long) (byte) (-1));
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem4, 0L, 0L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      List<Range> list3 = range1.complementFrom(list2);
      range1.complementFrom(list3);
      Range range2 = Range.ofLength(0L);
      range2.spliterator();
      range1.startsBefore(range2);
      Range.parseRange("[ 0 .. 0 ]/RB", range_CoordinateSystem3);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (byte) (-1));
      defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-1));
      defaultNucleotideCodec1.isGap(byteArray1, 0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.-
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.357309204042725
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec1.encode(nucleotide1);
      Nucleotide nucleotide2 = Nucleotide.Thymine;
      Set<Nucleotide> set1 = nucleotide2.getAllPossibleAmbiguities();
      defaultNucleotideCodec1.toString(byteArray0);
      Range range0 = Range.of((long) (byte) (-1));
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem3, 0L, 0L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      List<Range> list3 = range1.complementFrom(list2);
      range1.complementFrom(list3);
      Range range2 = Range.ofLength(0L);
      range2.spliterator();
      range1.startsBefore(range2);
      Range.parseRange("[ 0 .. 0 ]/RB", range_CoordinateSystem2);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-1));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("T`DTk:f^XArhzFN`p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.T`DTk:f^XArhzFN`p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3292744953740026
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, (-1860));
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec5.getGappedOffsetFor(byteArray1, (-3121));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray1);
      assertEquals(1, int0);
      
      defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec6.toString(byteArray0);
      assertEquals("CG", string0);
      
      Nucleotide nucleotide2 = Nucleotide.Gap;
      boolean boolean0 = defaultNucleotideCodec6.isGap(byteArray2, (-3121));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-46)}, byteArray2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3014369510832204
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-46)}, byteArray0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide1);
      nucleotide0.getAllPossibleAmbiguities();
      String string0 = defaultNucleotideCodec1.toString(byteArray1);
      assertEquals("-", string0);
      
      Nucleotide nucleotide2 = Nucleotide.NotCytosine;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide3 = Nucleotide.Gap;
      byte[] byteArray2 = defaultNucleotideCodec2.encode(nucleotide3);
      Nucleotide nucleotide4 = Nucleotide.Gap;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide5 = Nucleotide.Thymine;
      byte[] byteArray3 = defaultNucleotideCodec3.encode(nucleotide5);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.add(nucleotide2);
      Nucleotide nucleotide6 = Nucleotide.Unknown;
      linkedList0.add(nucleotide6);
      linkedList0.descendingIterator();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide7 = Nucleotide.NotAdenine;
      defaultNucleotideCodec4.encode(nucleotide7);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.isGap(byteArray3, (-2146818172));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-32)}, byteArray3);
      
      int int0 = defaultNucleotideCodec2.decodedLengthOf(byteArray2);
      List<Integer> list0 = defaultNucleotideCodec5.getGapOffsets(byteArray1);
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(int0));
      
      DefaultNucleotideCodec.values();
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray1, (-2146818172));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.323958886753748
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide1);
      Nucleotide nucleotide2 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide2.getAllPossibleAmbiguities();
      defaultNucleotideCodec1.toString(byteArray1);
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-7), (byte)104, (byte)67, (byte)80}, byteArray2);
      
      Nucleotide nucleotide3 = Nucleotide.NotCytosine;
      byte[] byteArray3 = defaultNucleotideCodec0.encode(nucleotide3);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec2.toString(byteArray0);
      assertEquals("S", string0);
      
      Nucleotide nucleotide4 = Nucleotide.Gap;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec4.decodedLengthOf(byteArray3);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 1);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (long) (byte) (-119), (long) (byte) (-1));
      String string0 = "KPo1AS]PS;\\n23Ri9";
      String string1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4368192399644037
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1707));
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-29);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)14);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)87;
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-29));
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, (byte) (-29));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 32767;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGappedOffsetFor((byte[]) null, 2564);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4265832137690273
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec1.encode(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      defaultNucleotideCodec1.toString(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide2 = Nucleotide.NotCytosine;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide2);
      Nucleotide nucleotide3 = Nucleotide.Gap;
      Nucleotide nucleotide4 = Nucleotide.Keto;
      defaultNucleotideCodec0.encode(nucleotide4);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, (byte)9);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide5 = Nucleotide.NotCytosine;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec3.encode(nucleotide5);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.isGap(byteArray2, 125);
      defaultNucleotideCodec3.toString(byteArray1);
      defaultNucleotideCodec1.decodedLengthOf(byteArray3);
      defaultNucleotideCodec1.getUngappedLength(byteArray1);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("NHDBWYK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.NHDBWYK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.398758547305401
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1));
      assertEquals(1, int0);
      
      Byte byte0 = new Byte((byte)92);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 12);
      assertFalse(boolean0);
      
      Nucleotide nucleotide1 = Nucleotide.Cytosine;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, (byte)0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-80)}, byteArray0);
      
      Nucleotide nucleotide2 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set1 = nucleotide2.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-34)}, byteArray1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte byte0 = new Byte((byte)69);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) byte0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      predicate0.and(predicate1);
      Object object0 = new Object();
      predicate0.test(object0);
      predicate1.or(predicate0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2300, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<DefaultNucleotideCodec> linkedList1 = new LinkedList<DefaultNucleotideCodec>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList1.remove((Object) linkedList0);
      LinkedList<DefaultNucleotideCodec> linkedList2 = new LinkedList<DefaultNucleotideCodec>();
      linkedList0.addAll((Collection<? extends DefaultNucleotideCodec>) linkedList2);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList3.parallelStream();
      Object object0 = new Object();
      linkedList4.removeLastOccurrence(linkedList0);
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      linkedList5.addAll((Collection<? extends Nucleotide>) linkedList4);
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList9 = new LinkedList<Nucleotide>();
      linkedList9.stream();
      linkedList7.removeFirstOccurrence("  encodedglyph length is ");
      linkedList3.add(nucleotide0);
      LinkedList<Nucleotide> linkedList10 = new LinkedList<Nucleotide>();
      Object object1 = new Object();
      linkedList10.remove(object1);
      Iterator<Nucleotide> iterator0 = linkedList10.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(3, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.170793809518273
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      defaultNucleotideCodec1.encode(nucleotide1);
      Nucleotide nucleotide2 = Nucleotide.Thymine;
      nucleotide2.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide3 = Nucleotide.Keto;
      linkedList0.add(nucleotide3);
      Nucleotide nucleotide4 = Nucleotide.NotAdenine;
      linkedList0.add(nucleotide4);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.addAll((Collection<? extends Nucleotide>) set0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getUngappedOffsetFor((byte[]) null, (-2134145239));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 2634L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)26;
      int int0 = 1073741824;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<DefaultNucleotideCodec> linkedList1 = new LinkedList<DefaultNucleotideCodec>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList1.remove((Object) linkedList0);
      LinkedList<DefaultNucleotideCodec> linkedList2 = new LinkedList<DefaultNucleotideCodec>();
      linkedList0.addAll((Collection<? extends DefaultNucleotideCodec>) linkedList2);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList3.parallelStream();
      Object object0 = new Object();
      linkedList4.removeLastOccurrence(linkedList0);
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      linkedList5.addAll((Collection<? extends Nucleotide>) linkedList4);
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList9 = new LinkedList<Nucleotide>();
      linkedList9.stream();
      linkedList7.removeFirstOccurrence("  encodedglyph length is ");
      linkedList3.add(nucleotide0);
      LinkedList<Nucleotide> linkedList10 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-66);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.280413541520429
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      defaultNucleotideCodec0.encode(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      byte byte0 = (byte) (-1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec3.iterator(byteArray0, range0);
      defaultNucleotideCodec2.encode((int) (byte) (-1), iterator0);
      defaultNucleotideCodec1.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-5227);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.encode((-5227), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)87;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.622204027249963
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-119);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      byte[] byteArray1 = new byte[8];
      byte byte0 = (byte) (-119);
      byteArray1[7] = (byte) (-119);
      byte byte1 = (byte) (-1);
      defaultNucleotideCodec0.isGap(byteArray1, (byte) (-1));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (long) (byte) (-119), (long) (byte) (-1));
      // Undeclared exception!
      try { 
        Range.of((long) (byte) (-1), (-160L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.929465443379214
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)60;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)117;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)35, (long) (byte)60);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-1);
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-1));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (long) (byte) (-119), (long) (byte) (-1));
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.stream();
      LinkedList<DefaultNucleotideCodec> linkedList1 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<DefaultNucleotideCodec> linkedList2 = new LinkedList<DefaultNucleotideCodec>();
      linkedList2.parallelStream();
      linkedList2.remove((Object) null);
      linkedList0.pollFirst();
      linkedList1.addAll((Collection<? extends DefaultNucleotideCodec>) linkedList2);
      linkedList0.removeAll(linkedList1);
      linkedList0.parallelStream();
      linkedList0.removeLastOccurrence(linkedList0);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2227);
      Integer integer1 = new Integer(2227);
      Integer.getInteger((String) null, integer1);
      linkedList3.add(integer0);
      linkedList0.removeAll(linkedList3);
      linkedList0.addAll((Collection<? extends Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      linkedList0.add(nucleotide0);
      linkedList4.descendingIterator();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)5;
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-123));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 656);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte)36;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)84;
      byteArray1[6] = (byte) (-20);
      byteArray1[7] = (byte) (-20);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0977454543294893
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-75);
      byteArray0[1] = (byte)2;
      byteArray0[5] = (byte) (-75);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.encode((int) (byte)3, iterator0);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-3413));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0977454543294893
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)2;
      byte byte1 = (byte) (-1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-71);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.encode((int) (byte)3, iterator0);
      DefaultNucleotideCodec.values();
      int int0 = (-1816142158);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-3413));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 106330364;
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte)16;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-463), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9622453358601244
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)2;
      byte byte0 = (byte) (-1);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((int) (byte) (-1), iterator0);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6091182796915318
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 106330364;
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte) (-1);
      byteArray0[7] = (byte)16;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.151402100085204
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.stream();
      LinkedList<DefaultNucleotideCodec> linkedList1 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<DefaultNucleotideCodec> linkedList2 = new LinkedList<DefaultNucleotideCodec>();
      linkedList2.remove((Object) linkedList0);
      linkedList1.addAll((Collection<? extends DefaultNucleotideCodec>) linkedList2);
      linkedList0.removeAll(linkedList1);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      linkedList3.parallelStream();
      linkedList3.removeLastOccurrence(linkedList0);
      linkedList0.addAll((Collection<? extends Nucleotide>) linkedList3);
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      linkedList3.add(nucleotide0);
      linkedList0.descendingIterator();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Weak;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec.values();
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 328);
      assertFalse(boolean0);
      
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 328);
      Range range0 = Range.of((long) 0);
      defaultNucleotideCodec1.iterator(byteArray0, range0);
      int int1 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 328);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)64}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[2] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      String string0 = defaultNucleotideCodec0.toString(byteArray1);
      assertEquals("", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decode(byteArray0, (byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec1.decode(byteArray0, (byte)0);
      assertEquals(Nucleotide.Gap, nucleotide0);
      
      int int0 = defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.054134187035537
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 256);
      byteArray0[1] = (byte) (-119);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-45);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)30);
      byte[] byteArray1 = new byte[6];
      byteArray1[1] = (byte) (-45);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-45);
      byteArray1[4] = (byte)101;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2326));
      byteArray1[5] = (byte) (-119);
      defaultNucleotideCodec0.decode(byteArray1, (byte)0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)58;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.289592918075839
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<DefaultNucleotideCodec> linkedList1 = new LinkedList<DefaultNucleotideCodec>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList1.remove((Object) linkedList0);
      LinkedList<DefaultNucleotideCodec> linkedList2 = new LinkedList<DefaultNucleotideCodec>();
      linkedList0.addAll((Collection<? extends DefaultNucleotideCodec>) linkedList2);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList3.parallelStream();
      Object object0 = new Object();
      linkedList4.removeLastOccurrence(linkedList0);
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      linkedList5.addAll((Collection<? extends Nucleotide>) linkedList4);
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList9 = new LinkedList<Nucleotide>();
      linkedList9.stream();
      linkedList7.removeFirstOccurrence("  encodedglyph length is ");
      linkedList3.add(nucleotide0);
      LinkedList<Nucleotide> linkedList10 = new LinkedList<Nucleotide>();
      Object object1 = new Object();
      linkedList10.remove(object1);
      linkedList10.descendingIterator();
      defaultNucleotideCodec0.isGap(byteArray0, 131327);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 3);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 3 corresponds to encodedIndex 5  encodedglyph length is 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.18378790391713
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) set0;
      objectArray0[2] = (Object) set0;
      objectArray0[3] = (Object) linkedList0;
      linkedList1.toArray(objectArray0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Object object0 = new Object();
      linkedList1.clear();
      Object object1 = new Object();
      linkedList2.removeLastOccurrence(object1);
      linkedList2.removeLastOccurrence((Object) null);
      linkedList1.addAll((Collection<? extends Nucleotide>) linkedList1);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList1.stream();
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      linkedList1.poll();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      Object object2 = new Object();
      Object object3 = new Object();
      linkedList3.removeFirstOccurrence(object3);
      linkedList3.add(nucleotide0);
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      Object object4 = new Object();
      Integer integer0 = new Integer((-1059));
      linkedList2.descendingIterator();
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      defaultNucleotideCodec0.isGap(byteArray0, (-1059));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-5122L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -5122
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4054727319449625
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 106330364;
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte) (-1);
      byteArray0[7] = (byte)16;
      byteArray0[5] = (byte)2;
      byte byte0 = (byte) (-35);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Strong;
      nucleotide0.getBasesFor();
      byte byte0 = (byte) (-1);
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      nucleotide1.getAllPossibleAmbiguities();
      Range range0 = Range.of((long) (byte) (-1));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem3, 0L, 0L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      range1.complementFrom(list0);
      Range range2 = Range.ofLength(0L);
      range2.spliterator();
      range1.startsBefore(range2);
      Range.parseRange("[ 0 .. 0 ]/RB", range_CoordinateSystem2);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)122);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte byte0 = new Byte((byte)69);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) byte0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      predicate0.and(predicate1);
      Object object0 = new Object();
      predicate0.test(object0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.negate();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, 2779);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.53196927214486
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[22];
      byte byte0 = (byte)9;
      byteArray0[0] = (byte)9;
      byte byte1 = (byte)122;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.349704962535642
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<DefaultNucleotideCodec> linkedList1 = new LinkedList<DefaultNucleotideCodec>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList1.remove((Object) linkedList0);
      LinkedList<DefaultNucleotideCodec> linkedList2 = new LinkedList<DefaultNucleotideCodec>();
      linkedList0.addAll((Collection<? extends DefaultNucleotideCodec>) linkedList2);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList3.parallelStream();
      Object object0 = new Object();
      linkedList4.removeLastOccurrence(linkedList0);
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      linkedList5.addAll((Collection<? extends Nucleotide>) linkedList4);
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList9 = new LinkedList<Nucleotide>();
      linkedList9.stream();
      linkedList7.removeFirstOccurrence("  encodedglyph length is ");
      linkedList3.add(nucleotide0);
      LinkedList<Nucleotide> linkedList10 = new LinkedList<Nucleotide>();
      linkedList10.descendingIterator();
      defaultNucleotideCodec0.isGap(byteArray0, 131327);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 3);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) 3, (long) 3);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 3 .. 2 ]/0B is out of range of sequence which is only [ 0 .. 1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) comparator0;
      objectArray0[3] = (Object) linkedList0;
      linkedList1.toArray(objectArray0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Object object0 = new Object();
      linkedList1.clear();
      Object object1 = new Object();
      linkedList2.removeLastOccurrence(object1);
      linkedList2.removeLastOccurrence((Object) null);
      linkedList1.addAll((Collection<? extends Nucleotide>) linkedList1);
      Nucleotide nucleotide0 = Nucleotide.Strong;
      linkedList1.add(nucleotide0);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      linkedList1.stream();
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      linkedList5.poll();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      Object object2 = new Object();
      Object object3 = new Object();
      linkedList3.removeFirstOccurrence(object3);
      LinkedList<Nucleotide> linkedList9 = new LinkedList<Nucleotide>();
      Object object4 = new Object();
      Integer integer0 = new Integer((-1059));
      linkedList2.descendingIterator();
      LinkedList<Integer> linkedList10 = new LinkedList<Integer>();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0504308989646125
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) set0;
      objectArray0[2] = (Object) set0;
      objectArray0[3] = (Object) linkedList0;
      linkedList1.toArray(objectArray0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Object object0 = new Object();
      linkedList1.clear();
      Object object1 = new Object();
      linkedList2.removeLastOccurrence(object1);
      linkedList2.removeLastOccurrence((Object) null);
      linkedList1.addAll((Collection<? extends Nucleotide>) linkedList1);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList1.stream();
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      linkedList1.poll();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      Object object2 = new Object();
      Object object3 = new Object();
      linkedList3.removeFirstOccurrence(object3);
      linkedList3.add(nucleotide0);
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      Object object4 = new Object();
      Integer integer0 = new Integer((-1059));
      linkedList2.descendingIterator();
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      defaultNucleotideCodec0.isGap(byteArray0, (-1059));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)35;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray1, 131);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.177065559242401
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList1.parallelStream();
      Object object0 = new Object();
      Object object1 = new Object();
      linkedList2.removeLastOccurrence(object1);
      linkedList2.removeLastOccurrence((Object) null);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      linkedList2.addAll((Collection<? extends Nucleotide>) linkedList1);
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      linkedList5.stream();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>();
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList7.retainAll(linkedList6);
      LinkedList<Nucleotide> linkedList10 = new LinkedList<Nucleotide>();
      Object object2 = new Object();
      linkedList10.removeFirstOccurrence(object2);
      LinkedList<Nucleotide> linkedList11 = new LinkedList<Nucleotide>();
      linkedList10.add(nucleotide0);
      LinkedList<Nucleotide> linkedList12 = new LinkedList<Nucleotide>();
      Object object3 = new Object();
      Integer integer0 = new Integer((-1059));
      linkedList6.descendingIterator();
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, (-1059));
      Range range0 = Range.of((long) (-1059), 0L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -1059 .. 0 ]/0B is out of range of sequence which is only [ 0 .. 1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2972391343731697
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<DefaultNucleotideCodec> linkedList1 = new LinkedList<DefaultNucleotideCodec>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList1.remove((Object) linkedList0);
      LinkedList<DefaultNucleotideCodec> linkedList2 = new LinkedList<DefaultNucleotideCodec>();
      linkedList0.addAll((Collection<? extends DefaultNucleotideCodec>) linkedList2);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList3.parallelStream();
      Object object0 = new Object();
      linkedList4.removeLastOccurrence(linkedList0);
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      linkedList5.addAll((Collection<? extends Nucleotide>) linkedList4);
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList9 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Cytosine;
      linkedList9.add(nucleotide1);
      linkedList9.stream();
      linkedList7.removeFirstOccurrence("  encodedglyph length is ");
      linkedList3.add(nucleotide0);
      LinkedList<Nucleotide> linkedList10 = new LinkedList<Nucleotide>();
      linkedList10.descendingIterator();
      defaultNucleotideCodec0.isGap(byteArray0, 131327);
      int int0 = 3;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 3);
      Range range0 = Range.of(12L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 12 .. 12 ]/0B is out of range of sequence which is only [ 0 .. 1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byte byte0 = (byte) (-10);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 256);
      byteArray0[1] = (byte) (-10);
      long long0 = (-343L);
      Range range0 = Range.of((long) 0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-119);
      byteArray1[2] = (byte) (-10);
      byteArray1[3] = (byte) (-10);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.52762385589389
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)66;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.527062838287056
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)77;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-11);
      byteArray1[6] = (byte)85;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte)14;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)14, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)14;
      defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Stream<Nucleotide> stream0 = linkedList0.parallelStream();
      Object object0 = new Object();
      linkedList0.removeLastOccurrence(stream0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList0.addAll((Collection<? extends Nucleotide>) linkedList1);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      linkedList5.stream();
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList1.retainAll(linkedList0);
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList9 = new LinkedList<Nucleotide>();
      Object object1 = new Object();
      linkedList9.removeFirstOccurrence(object1);
      LinkedList<Nucleotide> linkedList10 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      linkedList5.add(nucleotide0);
      LinkedList<Nucleotide> linkedList11 = new LinkedList<Nucleotide>();
      Object object2 = new Object();
      Integer integer0 = new Integer(0);
      Byte byte0 = new Byte((byte)0);
      linkedList8.remove((Object) byte0);
      linkedList5.descendingIterator();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList10);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte)0);
      assertEquals(0, int0);
      assertEquals(4, byteArray1.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.174769677480312
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) set0;
      objectArray0[2] = (Object) set0;
      objectArray0[3] = (Object) linkedList0;
      linkedList1.toArray(objectArray0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Object object0 = new Object();
      linkedList1.clear();
      Object object1 = new Object();
      linkedList2.removeLastOccurrence(object1);
      linkedList2.removeLastOccurrence((Object) null);
      linkedList1.addAll((Collection<? extends Nucleotide>) linkedList1);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList1.stream();
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      linkedList1.poll();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      Object object2 = new Object();
      Object object3 = new Object();
      linkedList3.removeFirstOccurrence(object3);
      linkedList3.add(nucleotide0);
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      Object object4 = new Object();
      Integer integer0 = new Integer((-1059));
      linkedList2.descendingIterator();
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      defaultNucleotideCodec0.isGap(byteArray0, (-1059));
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte) (-101);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 842);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-4651));
      byte byte0 = (byte) (-119);
      byteArray0[7] = (byte) (-119);
      byte byte1 = (byte) (-1);
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-1));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (long) (byte) (-119), (long) (byte) (-1));
      // Undeclared exception!
      try { 
        Range.of((long) (byte) (-1), (-160L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Strong;
      nucleotide0.getBasesFor();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<DefaultNucleotideCodec> linkedList1 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      linkedList2.parallelStream();
      Object object0 = new Object();
      Object object1 = new Object();
      linkedList3.removeLastOccurrence(object1);
      linkedList3.removeLastOccurrence((Object) null);
      linkedList2.addAll((Collection<? extends Nucleotide>) linkedList2);
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      linkedList6.stream();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>();
      LinkedList<String> linkedList9 = new LinkedList<String>();
      LinkedList<Nucleotide> linkedList10 = new LinkedList<Nucleotide>();
      Object object2 = new Object();
      Object object3 = new Object();
      linkedList4.removeFirstOccurrence(object3);
      LinkedList<Nucleotide> linkedList11 = new LinkedList<Nucleotide>();
      linkedList7.add(nucleotide0);
      LinkedList<Nucleotide> linkedList12 = new LinkedList<Nucleotide>();
      Object object4 = new Object();
      Integer integer0 = new Integer((-1059));
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-999);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)14;
      Range range0 = Range.of((long) (-1059), 0L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte) (-119);
      byteArray0[0] = (byte) (-119);
      byte byte1 = (byte) (-1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 256);
      byteArray0[1] = (byte) (-1);
      long long0 = (-343L);
      Range range0 = Range.of((-343L));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-119);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte) (-119);
      byteArray0[0] = (byte) (-119);
      byte byte1 = (byte)3;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 256);
      byteArray0[1] = (byte)3;
      long long0 = (-343L);
      Range range0 = Range.of((-343L));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-119);
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.4125876522655534
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)5;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.658181529514042
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.stream();
      LinkedList<DefaultNucleotideCodec> linkedList1 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<DefaultNucleotideCodec> linkedList2 = new LinkedList<DefaultNucleotideCodec>();
      linkedList2.parallelStream();
      linkedList1.toArray();
      linkedList2.remove((Object) null);
      linkedList0.pollFirst();
      linkedList1.addAll((Collection<? extends DefaultNucleotideCodec>) linkedList2);
      linkedList0.removeAll(linkedList1);
      linkedList0.parallelStream();
      linkedList0.removeLastOccurrence(linkedList0);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2227);
      Integer integer1 = new Integer(2227);
      Integer.getInteger((String) null, integer1);
      linkedList3.add(integer0);
      linkedList0.removeAll(linkedList3);
      linkedList0.addAll((Collection<? extends Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      linkedList0.add(nucleotide0);
      linkedList4.descendingIterator();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-123);
      byteArray0[4] = (byte) (-20);
      byteArray0[2] = (byte)5;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 656);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte) (-123);
      byteArray1[4] = (byte) (-20);
      byteArray1[5] = (byte)5;
      byteArray1[6] = (byte)5;
      byteArray1[7] = (byte)5;
      byteArray1[8] = (byte)5;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray1, (-1273));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.1285055413947673
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) set0;
      objectArray0[2] = (Object) set0;
      objectArray0[3] = (Object) linkedList0;
      linkedList1.toArray(objectArray0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Object object0 = new Object();
      linkedList1.clear();
      Object object1 = new Object();
      linkedList2.removeLastOccurrence(object1);
      linkedList2.removeLastOccurrence((Object) null);
      linkedList1.addAll((Collection<? extends Nucleotide>) linkedList1);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList1.stream();
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      linkedList1.poll();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      Object object2 = new Object();
      Object object3 = new Object();
      linkedList3.removeFirstOccurrence(object3);
      linkedList3.add(nucleotide0);
      LinkedList<Nucleotide> linkedList8 = new LinkedList<Nucleotide>();
      Object object4 = new Object();
      Integer integer0 = new Integer((-1059));
      linkedList2.descendingIterator();
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (-1059));
      assertFalse(boolean0);
      
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.8169294940280825
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 106330364;
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte) (-1);
      byteArray0[7] = (byte)16;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte) (-35);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(106330364, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-393);
      Iterator<Nucleotide> iterator0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-5);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-11);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-1140457227L), long0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.049419009260591
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) set0;
      objectArray0[2] = (Object) set0;
      objectArray0[3] = (Object) linkedList0;
      linkedList1.toArray(objectArray0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Object object0 = new Object();
      linkedList2.clear();
      linkedList1.clear();
      Object object1 = new Object();
      linkedList2.removeLastOccurrence(object1);
      linkedList2.removeLastOccurrence((Object) null);
      linkedList1.addAll((Collection<? extends Nucleotide>) linkedList1);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      linkedList1.stream();
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      linkedList1.poll();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      Object object2 = new Object();
      Object object3 = new Object();
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1));
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-46)}, byteArray0);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.2234472963742657
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)112}, byteArray1);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 1358954495);
      assertEquals(1358954495, int0);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray2 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[6] = (byte)0;
      boolean boolean0 = defaultNucleotideCodec4.isGap(byteArray3, 1041);
      assertFalse(boolean0);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec5.toString(byteArray0);
      assertEquals("", string0);
      
      defaultNucleotideCodec3.decodedLengthOf(byteArray3);
      long long0 = defaultNucleotideCodec4.getUngappedLength(byteArray2);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)108;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.049419009260591
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<DefaultNucleotideCodec> linkedList0 = new LinkedList<DefaultNucleotideCodec>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) set0;
      objectArray0[2] = (Object) set0;
      objectArray0[3] = (Object) linkedList0;
      linkedList1.toArray(objectArray0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList1.parallelStream();
      Object object0 = new Object();
      linkedList1.clear();
      Object object1 = new Object();
      linkedList2.removeLastOccurrence(object1);
      linkedList2.removeLastOccurrence((Object) null);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      linkedList3.addAll((Collection<? extends Nucleotide>) linkedList1);
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList5 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      linkedList3.stream();
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      linkedList6.poll();
      LinkedList<String> linkedList8 = new LinkedList<String>();
      LinkedList<Nucleotide> linkedList9 = new LinkedList<Nucleotide>();
      Object object2 = new Object();
      Object object3 = new Object();
      linkedList4.removeFirstOccurrence(object3);
      linkedList6.add(nucleotide0);
      LinkedList<Nucleotide> linkedList10 = new LinkedList<Nucleotide>();
      Object object4 = new Object();
      Integer integer0 = new Integer((-1059));
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-46)}, byteArray0);
      assertEquals(2L, long0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.400344526816758
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)9;
      byteArray0[0] = (byte)9;
      byte byte1 = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-117);
      byte byte2 = (byte) (-114);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-117));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 2877L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 2877 corresponds to encodedIndex 1442  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.054134187035537
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 256);
      byteArray0[1] = (byte) (-1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-45);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)30);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-45);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-45);
      byteArray1[4] = (byte)101;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2326));
      byteArray1[5] = (byte) (-119);
      defaultNucleotideCodec0.decode(byteArray1, (byte)1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)84;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-1);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-1432), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)122;
      byte byte0 = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 32767);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = new byte[5];
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte) (-114), (long) 32767);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      String string0 = "KPo1AS]PS;\\n23Ri9";
      // Undeclared exception!
      try { 
        Range.parseRange("n@\"~r:XH~,/,x~E&A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse n@\"~r:XH~,/,x~E&A into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
