/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 06:34:02 GMT 2020
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " ADD ", true, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(335544421);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \" ADD \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("select intocreate materialized view");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" empty: ");
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("//", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("//", dBForeignKeyConstraint0.getName());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "Nd", "kSoAQh<IfDTP");
      assertEquals("", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = SQLUtil.renderValue(stringBuffer0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", defaultDBTable0, (-127), "k");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("K", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1843462921), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1-V+", (DBTable) null, dBDataType0, (Integer) null, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("H2 File Lock Watchdog ", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = SQLUtil.removeComments(":xSexUdw9");
      assertEquals(":xSexUdw9", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001|\u0001\uFFFF\u0001R\u0001L\u0001R\u0003\uFFFF\u0001V\u0001Y\u0001E\u0002R\u0001S\u0001O\u0001N\u0001O\u0001R\u0001U\u0001A\u0001O\u0001A\u0002S\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0001>\u0001=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001N\u0001S\u0001U\u0001O\u0001\u0001B\u0001A\u0001I\u0001M\u0001L\u0001X\u0001T\u0001M\u0001A\u0001O\u0001F\u0001z\u0001T\u0001Y\u0002z\u0001T\u0001R\u0001I\u0002z\u0001X\u0001V\u0001N\u0001A\u0001W\u0001N\u0001T\u0001S\u0001L\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001G\u0001R\u0001z\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001P\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0002O\u0001A\u0001z\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001z\u0001A\u0002\uFFFF\u0001V\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0001T\u0001E\u0001I\u0001E\u0001B\u0001z\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001z\u0001U\u0001C\u0001\uFFFF\u0001E\u0002z\u0001N\u0001Q\u0001E\u0001z\u0001T\u0001z\u0001T\u0001R\u0001I\u0001M\u0001E\u0001A\u0002K\u0001z\u0001A\u0001O\u0001E\u0001z\u0001G\u0001S\u0001R\u0001B\u0001z\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001z\u0001E\u0001C\u0001z\u0001E\u0001z\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001R\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001z\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002z\u0001E\u0001A\u0001E\u0003z\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001z\u0001D\u0002z\u0001\uFFFF\u0001L\u0001R\u0001z\u0001\uFFFF\u0001E\u0001T\u00012\u0001z\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001z\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002z\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001z\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002z\u0001E\u0001G\u0001z\u0001A\u0001S\u0001z\u0001T\u0001z\u0001\uFFFF\u0001E\u0002\uFFFF\u0001z\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001z\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001z\u0001A\u0001_\u0001N\u0001z\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001z\u0002\uFFFF\u0001I\u0001N\u0001E\u0001z\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001z\u0001R\u0002\uFFFF\u0001z\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001R\u0001A\u0001z\u0001M\u0001\uFFFF\u0001N\u0001E\u0001z\u0001L\u0001\uFFFF\u0001R\u0001P\u0001z\u0001\uFFFF\u0001A\u0002z\u0001E\u0001I\u0001O\u0001z\u0001S\u0001z\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001z\u0001\uFFFF\u0002z\u0001I\u0001E\u0001z\u0001\uFFFF\u00012\u0001\uFFFF\u0001z\u0001N\u0001z\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001z\u0001\uFFFF\u0001E\u0001z\u0001T\u0001z\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001T\u0001\uFFFF\u0001z\u0001E\u0002z\u0001S\u0001L\u0001z\u0001O\u0001I\u0001S\u0001N\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001z\u0001S\u0001I\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF\u0002z\u0001\uFFFF\u0001L\u0001O\u0001E\u0002z\u0002\uFFFF\u0003z\u0001\uFFFF\u0001z\u0001O\u0001z\u0004\uFFFF\u0001z\u0001N\u0001z\u0006\uFFFF\u0001N\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF");
      String[] stringArray0 = new String[9];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "@S", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT @S ", stringBuilder0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("org.h2.tools.SimpleResultSet$Column", (String) null, "org.h2.tools.SimpleResultSet$Column");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("alter index");
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "p|{3p] zVUb;N,d<");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("p|{3p] zVUb;N,d<", (DBTable) null, dBDataType0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) null);
      Vector<DBColumn> vector0 = new Vector<DBColumn>(linkedList0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Object object0 = new Object();
      constraintDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("s9lect into.5D,>r3jv#jwr_~", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view", (DBTable) null, (DBDataType) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("()", (String[]) null, "update", "()", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("dSkf", stringArray0, (String) null, "dSkf", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        SQLUtil.join("org.apache.d!rby.impl.sql.compile.CreateTableNode", ".%0!A~[N/6:", stringArray0, ".%0!A~[N/6:", "create unique indexupdatedrop i", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = new String[8];
      // Undeclared exception!
      try { 
        SQLUtil.join("RENAME", "~91", stringArray0, "vppW'<L2c;", "Illegal column type format: ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("CONSTRAINT ", (String[]) null, "rename", "Fb;@ex!iC", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("d3kDH join org.apache.d!rby.impl.sql.compile.CreateTableNode as org.apache.d!rby.impl.sql.compile.CreateTableNode on .%0!A~[N/6:.null = org.apache.d!rby.impl.sql.compile.CreateTableNode.null and .%0!A~[N/6:..%0!A~[N/6: = org.apache.d!rby.impl.sql.compile.CreateTableNode..%0!A~[N/6: and .%0!A~[N/6:.d3kDH = org.apache.d!rby.impl.sql.compile.CreateTableNode.d3kDH and .%0!A~[N/6:.null = org.apache.d!rby.impl.sql.compile.CreateTableNode.null and .%0!A~[N/6:.null = org.apache.d!rby.impl.sql.compile.CreateTableNode.null and .%0!A~[N/6:.null = org.apache.d!rby.impl.sql.compile.CreateTableNode.null", stringArray0, "Connection not closed", "d3kDH", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition(" ADD ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("S,c", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema("alter materialized view?~-/lo+do+p", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view?~-/lo+do+p", dBSchema0);
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8}zqCME-`S;yW,S!#", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001|\u0001\uFFFF\u0001R\u0001L\u0001R\u0003\uFFFF\u0001V\u0001Y\u0001E\u0002R\u0001S\u0001O\u0001N\u0001O\u0001R\u0001U\u0001A\u0001O\u0001A\u0002S\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0001>\u0001=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001N\u0001S\u0001U\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001L\u0001X\u0001T\u0001M\u0001A\u0001O\u0001F\u0001z\u0001T\u0001Y\u0002z\u0001T\u0001R\u0001I\u0002z\u0001X\u0001V\u0001N\u0001A\u0001W\u0001N\u0001T\u0001S\u0001L\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001G\u0001R\u0001z\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001P\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0002O\u0001A\u0001z\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001z\u0001A\u0002\uFFFF\u0001V\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0001T\u0001E\u0001I\u0001E\u0001B\u0001z\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001z\u0001U\u0001C\u0001\uFFFF\u0001E\u0002z\u0001N\u0001Q\u0001E\u0001z\u0001T\u0001z\u0001T\u0001R\u0001I\u0001M\u0001E\u0001A\u0002K\u0001z\u0001A\u0001O\u0001E\u0001z\u0001G\u0001S\u0001R\u0001B\u0001z\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001z\u0001E\u0001C\u0001z\u0001E\u0001z\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001R\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001z\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002z\u0001E\u0001A\u0001E\u0003z\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001z\u0001D\u0002z\u0001\uFFFF\u0001L\u0001R\u0001z\u0001\uFFFF\u0001E\u0001T\u00012\u0001z\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001z\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002z\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001z\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002z\u0001E\u0001G\u0001z\u0001A\u0001S\u0001z\u0001T\u0001z\u0001\uFFFF\u0001E\u0002\uFFFF\u0001z\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001z\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001z\u0001A\u0001_\u0001N\u0001z\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001z\u0002\uFFFF\u0001I\u0001N\u0001E\u0001z\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001z\u0001R\u0002\uFFFF\u0001z\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001R\u0001A\u0001z\u0001M\u0001\uFFFF\u0001N\u0001E\u0001z\u0001L\u0001\uFFFF\u0001R\u0001P\u0001z\u0001\uFFFF\u0001A\u0002z\u0001E\u0001I\u0001O\u0001z\u0001S\u0001z\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001z\u0001\uFFFF\u0002z\u0001I\u0001E\u0001z\u0001\uFFFF\u00012\u0001\uFFFF\u0001z\u0001N\u0001z\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001z\u0001\uFFFF\u0001E\u0001z\u0001T\u0001z\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001T\u0001\uFFFF\u0001z\u0001E\u0002z\u0001S\u0001L\u0001z\u0001O\u0001I\u0001S\u0001N\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001z\u0001S\u0001I\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF\u0002z\u0001\uFFFF\u0001L\u0001O\u0001E\u0002z\u0002\uFFFF\u0003z\u0001\uFFFF\u0001z\u0001O\u0001z\u0004\uFFFF\u0001z\u0001N\u0001z\u0006\uFFFF\u0001N\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF");
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("}k$XF'P4Y[");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("}k$XF'P4Y[", stringBuilder1.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("|wY0{B!s,", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("PCTFREE");
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("PCTFREE", stringBuilder1.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema("alter materialized view?~-/lo+do+p", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view?~-/lo+do+p", dBSchema0);
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8}zqCME-`S;yW,S!#", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.join("state", "qb\"?w5)F$xgcKXA1k", stringArray0, "qb\"?w5)F$xgcKXA1k", "alter index-#:)ke$sw4'cvz^db3#", stringArray0);
      assertEquals("state join qb\"?w5)F$xgcKXA1k as alter index-#:)ke$sw4'cvz^db3# on qb\"?w5)F$xgcKXA1k.null = alter index-#:)ke$sw4'cvz^db3#.null and qb\"?w5)F$xgcKXA1k.null = alter index-#:)ke$sw4'cvz^db3#.null and qb\"?w5)F$xgcKXA1k.null = alter index-#:)ke$sw4'cvz^db3#.null and qb\"?w5)F$xgcKXA1k.null = alter index-#:)ke$sw4'cvz^db3#.null and qb\"?w5)F$xgcKXA1k.null = alter index-#:)ke$sw4'cvz^db3#.null and qb\"?w5)F$xgcKXA1k.null = alter index-#:)ke$sw4'cvz^db3#.null and qb\"?w5)F$xgcKXA1k.null = alter index-#:)ke$sw4'cvz^db3#.null", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.join("inner", "AVoi/x)c-+vm-HM", stringArray0, "create unique indexd\u0004\uFFFF\u0001e", "D007", stringArray0);
      assertEquals("create unique indexd\u0004\uFFFF\u0001e as D007 on AVoi/x)c-+vm-HM.null = D007.null and AVoi/x)c-+vm-HM.null = D007.null and AVoi/x)c-+vm-HM.null = D007.null and AVoi/x)c-+vm-HM.null = D007.null and AVoi/x)c-+vm-HM.null = D007.null and AVoi/x)c-+vm-HM.null = D007.null and AVoi/x)c-+vm-HM.null = D007.null and AVoi/x)c-+vm-HM.null = D007.null", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery(".5v,>r3jv#JWR_~");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("kSoAQh<IfDTP");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("update4xp[!0>5m_dvs[j__<");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("execute");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter tableuzsxp7a#mr\"ryk");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("update");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("RDB$REF_CONSTRAINTS");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execute");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("ALTER TABLE ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = SQLUtil.renderValue("\u0001|\u0001\uFFFF\u0001R\u0001L\u0001R\u0003\uFFFF\u0001V\u0001Y\u0001E\u0002R\u0001S\u0001O\u0001N\u0001O\u0001R\u0001U\u0001A\u0001O\u0001A\u0002S\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0001>\u0001=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001N\u0001S\u0001U\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001L\u0001X\u0001T\u0001M\u0001A\u0001O\u0001F\u0001z\u0001T\u0001Y\u0002z\u0001T\u0001R\u0001I\u0002z\u0001X\u0001V\u0001N\u0001A\u0001W\u0001N\u0001T\u0001S\u0001L\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001G\u0001R\u0001z\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001P\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0002O\u0001A\u0001z\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001z\u0001A\u0002\uFFFF\u0001V\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0001T\u0001E\u0001I\u0001E\u0001B\u0001z\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001z\u0001U\u0001C\u0001\uFFFF\u0001E\u0002z\u0001N\u0001Q\u0001E\u0001z\u0001T\u0001z\u0001T\u0001R\u0001I\u0001M\u0001E\u0001A\u0002K\u0001z\u0001A\u0001O\u0001E\u0001z\u0001G\u0001S\u0001R\u0001B\u0001z\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001z\u0001E\u0001C\u0001z\u0001E\u0001z\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001R\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001z\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002z\u0001E\u0001A\u0001E\u0003z\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001z\u0001D\u0002z\u0001\uFFFF\u0001L\u0001R\u0001z\u0001\uFFFF\u0001E\u0001T\u00012\u0001z\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001z\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002z\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001z\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002z\u0001E\u0001G\u0001z\u0001A\u0001S\u0001z\u0001T\u0001z\u0001\uFFFF\u0001E\u0002\uFFFF\u0001z\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001z\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001z\u0001A\u0001_\u0001N\u0001z\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001z\u0002\uFFFF\u0001I\u0001N\u0001E\u0001z\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001z\u0001R\u0002\uFFFF\u0001z\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001R\u0001A\u0001z\u0001M\u0001\uFFFF\u0001N\u0001E\u0001z\u0001L\u0001\uFFFF\u0001R\u0001P\u0001z\u0001\uFFFF\u0001A\u0002z\u0001E\u0001I\u0001O\u0001z\u0001S\u0001z\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001z\u0001\uFFFF\u0002z\u0001I\u0001E\u0001z\u0001\uFFFF\u00012\u0001\uFFFF\u0001z\u0001N\u0001z\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001z\u0001\uFFFF\u0001E\u0001z\u0001T\u0001z\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001T\u0001\uFFFF\u0001z\u0001E\u0002z\u0001S\u0001L\u0001z\u0001O\u0001I\u0001S\u0001N\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001z\u0001S\u0001I\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF\u0002z\u0001\uFFFF\u0001L\u0001O\u0001E\u0002z\u0002\uFFFF\u0003z\u0001\uFFFF\u0001z\u0001O\u0001z\u0004\uFFFF\u0001z\u0001N\u0001z\u0006\uFFFF\u0001N\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF");
      assertEquals("'\u0001|\u0001\uFFFF\u0001R\u0001L\u0001R\u0003\uFFFF\u0001V\u0001Y\u0001E\u0002R\u0001S\u0001O\u0001N\u0001O\u0001R\u0001U\u0001A\u0001O\u0001A\u0002S\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0001>\u0001=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001N\u0001S\u0001U\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001L\u0001X\u0001T\u0001M\u0001A\u0001O\u0001F\u0001z\u0001T\u0001Y\u0002z\u0001T\u0001R\u0001I\u0002z\u0001X\u0001V\u0001N\u0001A\u0001W\u0001N\u0001T\u0001S\u0001L\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001G\u0001R\u0001z\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001P\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0002O\u0001A\u0001z\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001z\u0001A\u0002\uFFFF\u0001V\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0001T\u0001E\u0001I\u0001E\u0001B\u0001z\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001z\u0001U\u0001C\u0001\uFFFF\u0001E\u0002z\u0001N\u0001Q\u0001E\u0001z\u0001T\u0001z\u0001T\u0001R\u0001I\u0001M\u0001E\u0001A\u0002K\u0001z\u0001A\u0001O\u0001E\u0001z\u0001G\u0001S\u0001R\u0001B\u0001z\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001z\u0001E\u0001C\u0001z\u0001E\u0001z\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001R\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001z\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002z\u0001E\u0001A\u0001E\u0003z\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001z\u0001D\u0002z\u0001\uFFFF\u0001L\u0001R\u0001z\u0001\uFFFF\u0001E\u0001T\u00012\u0001z\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001z\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002z\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001z\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002z\u0001E\u0001G\u0001z\u0001A\u0001S\u0001z\u0001T\u0001z\u0001\uFFFF\u0001E\u0002\uFFFF\u0001z\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001z\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001z\u0001A\u0001_\u0001N\u0001z\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001z\u0002\uFFFF\u0001I\u0001N\u0001E\u0001z\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001z\u0001R\u0002\uFFFF\u0001z\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001R\u0001A\u0001z\u0001M\u0001\uFFFF\u0001N\u0001E\u0001z\u0001L\u0001\uFFFF\u0001R\u0001P\u0001z\u0001\uFFFF\u0001A\u0002z\u0001E\u0001I\u0001O\u0001z\u0001S\u0001z\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001z\u0001\uFFFF\u0002z\u0001I\u0001E\u0001z\u0001\uFFFF\u00012\u0001\uFFFF\u0001z\u0001N\u0001z\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001z\u0001\uFFFF\u0001E\u0001z\u0001T\u0001z\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001T\u0001\uFFFF\u0001z\u0001E\u0002z\u0001S\u0001L\u0001z\u0001O\u0001I\u0001S\u0001N\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001z\u0001S\u0001I\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF\u0002z\u0001\uFFFF\u0001L\u0001O\u0001E\u0002z\u0002\uFFFF\u0003z\u0001\uFFFF\u0001z\u0001O\u0001z\u0004\uFFFF\u0001z\u0001N\u0001z\u0006\uFFFF\u0001N\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF'", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("upateStrig", defaultDBTable0, (-127), "W#=K'6!G;biriNTh5d");
      StringBuilder stringBuilder0 = new StringBuilder("create tableaqq,@5uywm>ouj^cr/");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("create tableaqq,@5uywm>ouj^cr/W#=K'6!G;BIRINTH5D", stringBuilder0.toString());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "org.databene.jdbacl.sql.parser.SQLParser$literal_return");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("p|{3p] zVUb;N,d<", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("p|{3p] zVUb;N,d< ORG.DATABENE.JDBACL.SQL.PARSER.SQLPARSER$LITERAL_RETURN(0,0) NULL", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(p~lu Jl'n}F0{]Mo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (p~lu Jl'n}F0{]Mo
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderColumnListWithTableName("AVoi/x)c-+vm-HM", stringArray0);
      assertEquals("AVoi/x)c-+vm-HM.null, AVoi/x)c-+vm-HM.null, AVoi/x)c-+vm-HM.null, AVoi/x)c-+vm-HM.null, AVoi/x)c-+vm-HM.null, AVoi/x)c-+vm-HM.null, AVoi/x)c-+vm-HM.null, AVoi/x)c-+vm-HM.null", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".%0!A~[N/6:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = SQLUtil.normalize("4L!$WKO']ER", false);
      assertEquals("4L ! $ WKO ']ER'", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = SQLUtil.normalize("-- commit ", false);
      assertEquals("-- commit", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter index6.ct[w?[&rk v", false);
      assertEquals("alter index6.ct [ w ? [ & rk v", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = SQLUtil.normalize(".%0!A~[N/6:", false);
      assertEquals(".% 0 ! A ~ [ N / 6 :", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = SQLUtil.normalize("unique (z[qx|56\"sn=, z[", false);
      assertEquals("unique (z [ qx | 56 \"sn=, z[\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = SQLUtil.normalize("+g-acaj,1j", true);
      assertEquals("+ g - acaj, 1j", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = SQLUtil.normalize("-#:)ke", true);
      assertEquals("- # :) ke", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = SQLUtil.normalize("\u0001|\u0001\uFFFF\u0001R\u0001L\u0001R\u0003\uFFFF\u0001V\u0001Y\u0001E\u0002R\u0001S\u0001O\u0001N\u0001O\u0001R\u0001U\u0001A\u0001O\u0001A\u0002S\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0001>\u0001=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001N\u0001S\u0001U\u0001O\u0001\u0001B\u0001A\u0001I\u0001M\u0001L\u0001X\u0001T\u0001M\u0001A\u0001O\u0001F\u0001z\u0001T\u0001Y\u0002z\u0001T\u0001R\u0001I\u0002z\u0001X\u0001V\u0001N\u0001A\u0001W\u0001N\u0001T\u0001S\u0001L\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001G\u0001R\u0001z\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001P\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0002O\u0001A\u0001z\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001z\u0001A\u0002\uFFFF\u0001V\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0001T\u0001E\u0001I\u0001E\u0001B\u0001z\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001z\u0001U\u0001C\u0001\uFFFF\u0001E\u0002z\u0001N\u0001Q\u0001E\u0001z\u0001T\u0001z\u0001T\u0001R\u0001I\u0001M\u0001E\u0001A\u0002K\u0001z\u0001A\u0001O\u0001E\u0001z\u0001G\u0001S\u0001R\u0001B\u0001z\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001z\u0001E\u0001C\u0001z\u0001E\u0001z\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001R\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001z\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002z\u0001E\u0001A\u0001E\u0003z\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001z\u0001D\u0002z\u0001\uFFFF\u0001L\u0001R\u0001z\u0001\uFFFF\u0001E\u0001T\u00012\u0001z\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001z\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002z\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001z\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002z\u0001E\u0001G\u0001z\u0001A\u0001S\u0001z\u0001T\u0001z\u0001\uFFFF\u0001E\u0002\uFFFF\u0001z\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001z\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001z\u0001A\u0001_\u0001N\u0001z\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001z\u0002\uFFFF\u0001I\u0001N\u0001E\u0001z\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001z\u0001R\u0002\uFFFF\u0001z\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001R\u0001A\u0001z\u0001M\u0001\uFFFF\u0001N\u0001E\u0001z\u0001L\u0001\uFFFF\u0001R\u0001P\u0001z\u0001\uFFFF\u0001A\u0002z\u0001E\u0001I\u0001O\u0001z\u0001S\u0001z\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001z\u0001\uFFFF\u0002z\u0001I\u0001E\u0001z\u0001\uFFFF\u00012\u0001\uFFFF\u0001z\u0001N\u0001z\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001z\u0001\uFFFF\u0001E\u0001z\u0001T\u0001z\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001T\u0001\uFFFF\u0001z\u0001E\u0002z\u0001S\u0001L\u0001z\u0001O\u0001I\u0001S\u0001N\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001z\u0001S\u0001I\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF\u0002z\u0001\uFFFF\u0001L\u0001O\u0001E\u0002z\u0002\uFFFF\u0003z\u0001\uFFFF\u0001z\u0001O\u0001z\u0004\uFFFF\u0001z\u0001N\u0001z\u0006\uFFFF\u0001N\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF", false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence(",(86", ",(86", ",(86");
      String string0 = SQLUtil.typeAndName(dBSequence0);
      assertNotNull(string0);
      assertEquals("sequence ,(86", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DBSchema dBSchema0 = new DBSchema("QEkH", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("QEkH", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "AQq,@5uywm>ouJ^cr/", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT AQq,@5uywm>ouJ^cr/ ", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AVoi/x)c-+vm-HM");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(", ", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("QEkH");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\"y@T^uR%ciEhXa-");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("QEkH", stringBuilder0.toString());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DBSchema dBSchema0 = new DBSchema("QEkH", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("QEkH", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "AQq,@5uywm>ouJ^cr/", true, stringArray0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT AQq,@5uywm>ouJ^cr/ PRIMARY KEY (, , , , , , , )", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage("Ec5lIwhCL:W7U'ja0_/", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("Pg%<BgqjGK", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("Ec5lIwhCL:W7U'ja0_/.Pg%<BgqjGK", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((CompositeDBObject) null).when(compositeDBObject0).getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("nestedUpdateUserTransaction");
      SQLUtil.addOptionalCondition("PRIMARY KEY ", stringBuilder0);
      assertEquals("nestedUpdateUserTransaction or PRIMARY KEY ", stringBuilder0.toString());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1466);
      SQLUtil.addOptionalCondition("K", stringBuilder0);
      assertEquals("K", stringBuilder0.toString());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("nestedUpdateUserTransaction");
      SQLUtil.addRequiredCondition("PRIMARY KEY ", stringBuilder0);
      assertEquals("nestedUpdateUserTransaction and PRIMARY KEY ", stringBuilder0.toString());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition(" ADD ", stringBuilder0);
      assertEquals(" ADD ", stringBuilder0.toString());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join((String) null, " ($_Ousz&/-ao\"61b", stringArray0, "org.apache.d!rby.impl.sql.compile.CreateTableNode", "*/", stringArray0);
      assertEquals("org.apache.d!rby.impl.sql.compile.CreateTableNode as */ on  ($_Ousz&/-ao\"61b.null = */.null and  ($_Ousz&/-ao\"61b.null = */.null and  ($_Ousz&/-ao\"61b.null = */.null and  ($_Ousz&/-ao\"61b.null = */.null and  ($_Ousz&/-ao\"61b.null = */.null", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("callwq[q!'4-0x=_|r", false, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , , ) REFERENCES null()", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001|\u0001\uFFFF\u0001R\u0001L\u0001R\u0003\uFFFF\u0001V\u0001Y\u0001E\u0002R\u0001S\u0001O\u0001N\u0001O\u0001R\u0001U\u0001A\u0001O\u0001A\u0002S\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0001>\u0001=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001N\u0001S\u0001U\u0001O\u0001\u0001B\u0001A\u0001I\u0001M\u0001L\u0001X\u0001T\u0001M\u0001A\u0001O\u0001F\u0001z\u0001T\u0001Y\u0002z\u0001T\u0001R\u0001I\u0002z\u0001X\u0001V\u0001N\u0001A\u0001W\u0001N\u0001T\u0001S\u0001L\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001G\u0001R\u0001z\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001P\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0002O\u0001A\u0001z\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001z\u0001A\u0002\uFFFF\u0001V\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0001T\u0001E\u0001I\u0001E\u0001B\u0001z\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001z\u0001U\u0001C\u0001\uFFFF\u0001E\u0002z\u0001N\u0001Q\u0001E\u0001z\u0001T\u0001z\u0001T\u0001R\u0001I\u0001M\u0001E\u0001A\u0002K\u0001z\u0001A\u0001O\u0001E\u0001z\u0001G\u0001S\u0001R\u0001B\u0001z\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001z\u0001E\u0001C\u0001z\u0001E\u0001z\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001R\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001z\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002z\u0001E\u0001A\u0001E\u0003z\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001z\u0001D\u0002z\u0001\uFFFF\u0001L\u0001R\u0001z\u0001\uFFFF\u0001E\u0001T\u00012\u0001z\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001z\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002z\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001z\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002z\u0001E\u0001G\u0001z\u0001A\u0001S\u0001z\u0001T\u0001z\u0001\uFFFF\u0001E\u0002\uFFFF\u0001z\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001z\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001z\u0001A\u0001_\u0001N\u0001z\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001z\u0002\uFFFF\u0001I\u0001N\u0001E\u0001z\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001z\u0001R\u0002\uFFFF\u0001z\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001R\u0001A\u0001z\u0001M\u0001\uFFFF\u0001N\u0001E\u0001z\u0001L\u0001\uFFFF\u0001R\u0001P\u0001z\u0001\uFFFF\u0001A\u0002z\u0001E\u0001I\u0001O\u0001z\u0001S\u0001z\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001z\u0001\uFFFF\u0002z\u0001I\u0001E\u0001z\u0001\uFFFF\u00012\u0001\uFFFF\u0001z\u0001N\u0001z\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001z\u0001\uFFFF\u0001E\u0001z\u0001T\u0001z\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001T\u0001\uFFFF\u0001z\u0001E\u0002z\u0001S\u0001L\u0001z\u0001O\u0001I\u0001S\u0001N\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001z\u0001S\u0001I\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF\u0002z\u0001\uFFFF\u0001L\u0001O\u0001E\u0002z\u0002\uFFFF\u0003z\u0001\uFFFF\u0001z\u0001O\u0001z\u0004\uFFFF\u0001z\u0001N\u0001z\u0006\uFFFF\u0001N\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF");
      String[] stringArray0 = new String[9];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "@S", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT @S UNIQUE (, , , , , , , , )", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema("alter materialized view?~-/lodo+p", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view?~-/lodo+p", dBSchema0);
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8}zqCME-`S;yW,S!#", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , )", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.8775242811493906
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view?~-/lo+do+p");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session-#:)ke$sw4'cvz^db3#");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("executec");
      assertNull(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Character character0 = new Character('}');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'}'", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer integer0 = new Integer(4244);
      DBDataType dBDataType0 = DBDataType.getInstance(4244, ")qHO[~hovA3r5");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ag!fDu", (DBTable) null, dBDataType0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("ag!fDu : )QHO[~HOVA3R5(4244)", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".%0!A~[N/6:");
      StringBuilder stringBuilder0 = new StringBuilder("create tableaqq,@5uywm>ouj^cr/");
      DBDataType dBDataType0 = DBDataType.getInstance(329, "alter index)");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter index)", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("create tableaqq,@5uywm>ouj^cr/ALTER INDEX)(1,1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1989), "DATE");
      Integer integer0 = new Integer((-321740716));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONSTANTS", (DBTable) null, dBDataType0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("CONSTANTS : DATE", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|wY0{B!s,", defaultDBTable0, (-1840700267), " REFERENCES ");
      defaultDBColumn0.setDefaultValue("hqDL?f7}dH,Z}Fi[~d");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("|wY0{B!s,  REFERENCES  DEFAULT hqDL?f7}dH,Z}Fi[~d NULL", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      linkedList0.add((DBColumn) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|wY0{B!s,", defaultDBTable0, (-1840700267), " REFERENCES ");
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.remove();
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("|wY0{B!s,, |wY0{B!s,", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("upateString", defaultDBTable0, (-127), "W#=K'6!G;biriNTh5d");
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("upateString, upateString, upateString, upateString, upateString", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1595888143086257
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";XJcJ#$&aMl]59|-");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.9830877585747855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|wY0{B!s,", defaultDBTable0, (-1840700267), " RFR]NCES ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|wY0{B!s,");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewq1b\"qbs0");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("create materialized viewq1b\"qbs0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(QEkH, , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"QEkH\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("select current_setting('standard_conforming_strings')");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'standard_conforming_strings'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.162225544921092
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("W#=K'6!G;biriNTh5d", false, (String) null, "k");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK k", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("select into");
      DBSchema dBSchema0 = new DBSchema("select into", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into", dBSchema0);
      String[] stringArray0 = new String[7];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique index", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create unique index\" PRIMARY KEY (, , , , , , )", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.innerJoin("org.h2.command.ddl.DefineCommand", stringArray0, "org.h2.command.ddl.DefineCommand", "lT}$m%7X`oD`ZsX", stringArray0);
      assertEquals("org.h2.command.ddl.DefineCommand as lT}$m%7X`oD`ZsX on org.h2.command.ddl.DefineCommand.null = lT}$m%7X`oD`ZsX.null and org.h2.command.ddl.DefineCommand.null = lT}$m%7X`oD`ZsX.null and org.h2.command.ddl.DefineCommand.null = lT}$m%7X`oD`ZsX.null and org.h2.command.ddl.DefineCommand.null = lT}$m%7X`oD`ZsX.null", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers(" empty: ", ")", " empty: ");
      assertEquals(" empty: ", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("left join null as null on ", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".%0!A~[N/6:");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("o<2nOfhvXRy", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , ) REFERENCES .%0!A~[N/6:(, , , , , , , )", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("vmsf");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
