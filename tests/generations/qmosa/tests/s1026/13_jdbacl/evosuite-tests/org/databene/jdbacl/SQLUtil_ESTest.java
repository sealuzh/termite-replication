/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 15:53:26 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Predicate;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.access.Qualifier;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.services.monitor.FileMonitor;
import org.apache.derby.impl.services.reflect.ReflectClassesJava2;
import org.apache.derby.impl.services.reflect.ReflectGeneratedClass;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericStorablePreparedStatement;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.TypeCompilerFactoryImpl;
import org.apache.derby.impl.sql.conn.CachedStatement;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.gds.impl.jni.NativeGDSImpl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBResultSet;
import org.h2.expression.Parameter;
import org.h2.jdbc.JdbcSQLException;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Z[Qx|56\"Sn=";
      TableContainer tableContainer0 = new TableContainer("");
      TableContainer tableContainer1 = new TableContainer("");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("Z[Qx|56\"Sn=", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Z[Qx|56\"Sn=", defaultDBTable0, 4242, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1023040408591336
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("deletep#-saex`{ze)", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "kSoAQh<IfDTP";
      stringArray0[1] = "kSoAQh<IfDTP";
      stringArray0[2] = "|{R";
      stringArray0[3] = "|{R";
      stringArray0[4] = "kSoAQh<IfDTP";
      stringArray0[5] = "<F,";
      stringArray0[6] = "|{R";
      stringArray0[7] = "|{R";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "6'", false, stringArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("E|19y", false, defaultDBTable0, "D");
      Locale locale0 = Locale.CHINESE;
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("M$KL28n]J(H", "6'");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.format(locale0, "|{R", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("ivh]j9", defaultDBTable0, (-1722322087), "5(1#2`_Q5B7[:vw,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 5(1#2`_Q5B7[:vw,
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5701440539296363
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%+-+tKy)S\"|d");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("No primary key found for table {0}.", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n_[RYCf");
      boolean boolean0 = false;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      defaultDBTable0.getPrimaryKeyConstraint();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint1, nameSpec1);
      SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      NameSpec nameSpec2 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec2);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("PRIMARY KEY ()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7560836273833573
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a{7wq/_0q,";
      stringArray0[1] = "7a{7wq/_0q,";
      stringArray0[3] = "7a{7wq/_0q,";
      stringArray0[4] = stringArray0[2];
      stringArray0[5] = "7a{7wq/_0q,";
      boolean boolean0 = SQLUtil.isDML("Vv[\":$^afzjCYzWyV");
      Boolean.valueOf(false);
      boolean boolean1 = SQLUtil.isDDL("7a{7wq/_0q,");
      assertFalse(boolean1);
      
      boolean boolean2 = SQLUtil.isQuery("selectrelease");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("+wuy2r!~wt");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("+wuy2r!~wt", "+wuy2r!~w", versionNumber0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VersionNumber.valueOf("+wuy2r!~w");
      DBCatalog dBCatalog0 = new DBCatalog("SUPERTYPE_CAT", defaultDatabase0);
      dBCatalog0.getTable("#z%;l9fq:X[dX~Gzv", false);
      defaultDatabase0.getSequences(false);
      DBDataType dBDataType0 = DBDataType.getInstance((-2083), "alter materialized viewaltej tablecall");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewaltej tablecall", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter materialized viewaltej tablecall ALTER MATERIALIZED VIEWALTEJ TABLECALL(1,1) NULL", string0);
      
      String string1 = SQLUtil.renderValue(versionNumber0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Object object0 = new Object();
      constraintDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7340677293591482
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[0] = 'W';
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      MockFile mockFile0 = new MockFile("zH?dBO^", "zH?dBO^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileMonitor fileMonitor0 = new FileMonitor();
      mockPrintWriter0.write("{%_");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, defaultDBTable0, " NOT NUL");
      Locale locale0 = Locale.CHINESE;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) fileMonitor0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) stringBuilder0;
      objectArray0[3] = (Object) fileMonitor0;
      objectArray0[7] = (Object) stringBuilder0;
      mockPrintWriter0.format(locale0, "8Zf&5;^x?t3", objectArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK  NOT NUL", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4010763366655903
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" on ");
      defaultDBTable0.getComponents();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getIndex("alter session");
      Integer.max(3112, 2007);
      DBDataType dBDataType0 = DBDataType.getInstance((-1066), "update");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.min(2007, 40);
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" on ", defaultDBTable0, dBDataType0, integer1);
      Integer.compareUnsigned(3112, 586);
      DBDataType.getInstance(610, "");
      Integer integer2 = new Integer(1);
      Integer.compareUnsigned((-802), (-802));
      Integer integer3 = new Integer(3112);
      Integer.getInteger("getMiscResultSet", integer3);
      Integer.remainderUnsigned(2007, 17);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("deletedelgten_\"rycf", defaultDBTable0, dBDataType0, integer2);
      boolean boolean0 = SQLUtil.isProcedureCall("deletedelgten_\"rycf");
      assertFalse(boolean0);
      
      Random.setNextRandom(3112);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getMiscResultSet";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("getMiscResultSet", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT getMiscResultSet FOREIGN KEY (getMiscResultSet) REFERENCES  on (getMiscResultSet)", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(51);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChar(45);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.nval = (-1.0);
      streamTokenizer0.wordChars((-4), 362);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.commentChar(983);
      pipedReader0.markSupported();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar(45);
      SQLUtil.renderNumber(streamTokenizer0);
      Locale locale0 = Locale.ROOT;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2922214509759553
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "select ";
      stringArray0[1] = "select ";
      stringArray0[2] = "select ";
      stringArray0[3] = "select ";
      defaultDBTable0.equals("select ");
      stringArray0[4] = "select ";
      stringArray0[5] = "executeselect intou:iwb";
      stringArray0[6] = "select ";
      stringArray0[7] = "select ";
      stringArray0[8] = "select ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      String string0 = SQLUtil.innerJoin("select ", stringArray0, "update", "select ", stringArray0);
      assertEquals("update as select  on select .select  = select .select  and select .select  = select .select  and select .select  = select .select  and select .select  = select .select  and select .select  = select .select  and select .executeselect intou:iwb = select .executeselect intou:iwb and select .select  = select .select  and select .select  = select .select  and select .select  = select .select ", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("/kR-J(@ }h3_", true, defaultDBTable0, "l");
      dBCheckConstraint0.setTable(defaultDBTable0);
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"select \" PRIMARY KEY (select , select , select , select , select , executeselect intou:iwb, select , select , select )", string1);
      
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      String string2 = SQLUtil.join("inner", (String) null, stringArray0, "CONSTRAINT \"select \" PRIMARY KEY (select , select , select , select , select , executeselect intou:iwb, select , select , select )", "select ", stringArray0);
      assertEquals("CONSTRAINT \"select \" PRIMARY KEY (select , select , select , select , select , executeselect intou:iwb, select , select , select ) as select  on null.select  = select .select  and null.select  = select .select  and null.select  = select .select  and null.select  = select .select  and null.select  = select .select  and null.executeselect intou:iwb = select .executeselect intou:iwb and null.select  = select .select  and null.select  = select .select  and null.select  = select .select ", string2);
      
      System.setCurrentTimeMillis(9223372036854775807L);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT \"select \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ttype = (-2);
      streamTokenizer0.wordChars(93, 362);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      DBDataType.getInstance("NCLOB");
      DBSchema dBSchema0 = new DBSchema("CHECK ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.valueOf((-3198));
      Integer.compareUnsigned(335544794, 362);
      Random.setNextRandom((-4));
      SQLUtil.renderValue(defaultDBTable0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.355785150714608
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)34;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getUser();
      jdbcDataSource0.getPassword();
      jdbcDataSource0.getURL();
      jdbcDataSource0.getLogWriter();
      SQLUtil.mutatesDataOrStructure("select into");
      BasicDatabase basicDatabase0 = new BasicDatabase();
      assertEquals(2, basicDatabase0.getEngineType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("253i2$@Q", defaultDBTable0, 41, "253i2$@Q");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      ErrorMessages errorMessages0 = new ErrorMessages();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[1];
      xSQLVARArray0[0] = xSQLVAR0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "drop table");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      GDSType.getType((String) null);
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%+-+tKy)S\"|d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-2703));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ordinaryChars((-4), (-747));
      stringReader0.skip((-195L));
      streamTokenizer0.commentChar(983);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer2.ordinaryChars((-334951280), 983);
      streamTokenizer2.ordinaryChar((-1845990316));
      streamTokenizer2.ordinaryChars(983, (-334951280));
      streamTokenizer2.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      boolean boolean0 = SQLUtil.isProcedureCall("calldeleten_[rycf");
      boolean boolean1 = SQLUtil.isQuery("``,");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4472483959455777
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a{Ewq@/_0q,";
      stringArray0[1] = "7a{Ewq@/_0q,";
      stringArray0[3] = "7a{Ewq@/_0q,";
      stringArray0[4] = stringArray0[2];
      stringArray0[5] = "7a{Ewq@/_0q,";
      PipedReader pipedReader0 = new PipedReader(90093);
      SQLUtil.isDML("Vv[\":$^afzjCYzWyV");
      SQLUtil.mutatesDataOrStructure("7a{Ewq@/_0q,");
      SQLUtil.isProcedureCall("Cannot set,character stream because the unsupported encoding is detected in theJVM: ");
      SQLUtil.isQuery("selectrelease");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%+-+tKy)S\"|d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-2703));
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ordinaryChars((-4), (-747));
      stringReader0.skip((-195L));
      streamTokenizer0.commentChar(983);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      int int0 = (-334951280);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer2.ordinaryChars((-334951280), 983);
      streamTokenizer2.ordinaryChar(983);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-747), "(]3xP>Em+2P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (]3xP>Em+2P
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getComponents();
      defaultDBTable0.getIndex("update");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "update";
      stringArray0[2] = "update";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[7] = "update";
      Integer.max(3112, 3112);
      DBDataType dBDataType0 = DBDataType.getInstance(1287, "update");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/13_jdbacl");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.min(580, (-1955157727));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setType(dBDataType0);
      Integer.compareUnsigned(3112, 2415);
      defaultDBColumn0.setFractionDigits(integer0);
      DBDataType.getInstance(1287, "equals");
      Integer integer1 = new Integer(2415);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.renderColumn(defaultDBColumn0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("update");
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[1] = " NULL";
      stringArray0[2] = " NULL";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " NULL", false, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" NULL\" PRIMARY KEY (,  NULL,  NULL)", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("/y2?.Akg|g,5$o");
      DBSchema dBSchema0 = new DBSchema("create tablescroll-sensitive result sets are not supported.", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("dxQxWo^l55uu:C", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("into", defaultDBTable0, (-17), " in statement [");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("into", string0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate3 = predicate2.negate();
      linkedList0.removeIf(predicate3);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      Character character0 = new Character('%');
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("TM:C", defaultDBTable0, (-4767), "I2N]");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("a?", defaultDBTable0, 0, "--");
      dBColumnArray0[6] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("into, TM:C, into, into, into, into, a?, into, into", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3982055696212994
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[0] = 'W';
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zH?dBO,^");
      defaultDBTable0.getComponents();
      defaultDBTable0.getIndex("update");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "update";
      stringArray0[2] = "update";
      stringArray0[3] = "zH?dBO,^";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[7] = "update";
      Integer.max(3112, 3112);
      DBDataType dBDataType0 = DBDataType.getInstance(1287, "update");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.min(580, (-1955157727));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("zH?dBO,^", defaultDBTable0, dBDataType0, integer0);
      Integer.compareUnsigned(3112, 2415);
      DBDataType.getInstance(1287, "equals");
      Integer integer1 = new Integer(2415);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("update");
      Locale locale0 = Locale.ITALY;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "alter session", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.478006498651262
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("/y2?.Akg|g,5$o");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+nh", defaultDBTable0, (-17), "Something unusual has occured to ause the driver to fail. Please reort this exceptin.");
      MockFile mockFile0 = new MockFile("l|DGaB\"f,oJD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write("dcQ0Wokl55Gu:C");
      Locale locale0 = Locale.CHINESE;
      mockFile0.toPath();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "l|DGaB\"f,oJD", objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) defaultDBColumn0;
      objectArray1[1] = (Object) mockPrintWriter0;
      objectArray1[3] = (Object) mockPrintWriter0;
      printWriter0.printf("+nh", objectArray1);
      mockFile0.getAbsolutePath();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("zh", locale0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "delete");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "create unique indexalt->tqabkeor";
      stringArray0[1] = "Ssov6R6*R(B-:";
      stringArray0[2] = "+?6r";
      stringArray0[3] = "create unique indexalt->tqabkeor";
      stringArray0[4] = "+?6r";
      stringArray0[5] = "Ssov6R6*R(B-:";
      stringArray0[6] = "create unique indexalt->tqabkeor";
      stringArray0[7] = "calldeleten_[rycf";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "executealt->tqabkeor";
      stringArray1[1] = "Ssov6R6*R(B-:";
      stringArray1[2] = "{CVa/]'7!Y.tap$^";
      stringArray1[3] = "delete";
      stringArray1[4] = "create unique indexalt->tqabkeor";
      stringArray1[5] = "delete";
      // Undeclared exception!
      try { 
        SQLUtil.join("create unique indexalt->tqabkeor", "Ssov6R6*R(B-:", stringArray0, "create unique indexalt->tqabkeor", "create unique indexalt->tqabkeor", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a`7wq/_0q,";
      stringArray0[1] = "7a`7wq/_0q,";
      stringArray0[2] = "7a`7wq/_0q,";
      stringArray0[3] = "7a`7wq/_0q,";
      stringArray0[4] = "7a`7wq/_0q,";
      stringArray0[5] = "7a`7wq/_0q,";
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("/*");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7a`7wq/_0q,");
      defaultDBTable0.getUniqueConstraints(false);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("/*", "7a`7wq/_0q,", versionNumber0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select intou:iwb");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter session");
      CachedStatement cachedStatement0 = new CachedStatement();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      // Undeclared exception!
      try { 
        cachedStatement0.clearIdentity();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.conn.CachedStatement", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "f6C";
      stringArray0[1] = "f6C";
      stringArray0[2] = " NOT NULL";
      stringArray0[3] = "tB&H|GpQT0N?UF";
      stringArray0[4] = "tB&H|GpQT0N?UF";
      stringArray0[5] = "bsri]b";
      stringArray0[6] = "executedeleten_[rycf";
      stringArray0[7] = "bsri]b";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl2.setOutSqlda((XSQLDA) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)97;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 'W';
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getComponents();
      defaultDBTable0.getIndex("update");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "update";
      stringArray0[1] = "alter tableiwst2cmr";
      stringArray0[2] = "update";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "update";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a`7wq/_0q,";
      stringArray0[1] = "7a`7wq/_0q,";
      stringArray0[2] = "7a`7wq/_0q,";
      stringArray0[3] = "7a`7wq/_0q,";
      String[] stringArray1 = new String[8];
      stringArray1[0] = null;
      stringArray1[1] = "7a`7wq/_0q,";
      stringArray1[2] = null;
      stringArray1[3] = "DYZbLc";
      stringArray1[4] = "7a`7wq/_0q,";
      stringArray1[5] = "7a`7wq/_0q,";
      stringArray1[6] = "7a`7wq/_0q,";
      stringArray1[7] = "DYZbLc";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("7a`7wq/_0q,", stringArray0, "7a`7wq/_0q,", (String) null, stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KyPe/Q7zWg");
      SQLUtil.isDML("deleten_[rycf");
      PipedReader pipedReader0 = new PipedReader();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      basicDatabase0.getId();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      FBResultSet fBResultSet0 = null;
      try {
        fBResultSet0 = new FBResultSet((XSQLVAR[]) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractResultSet", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Yx$");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%'6hk|I|V&$&";
      defaultDBTable0.getComponents();
      defaultDBTable0.getIndex("alter tableiwst2cmr");
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "PL{`\"6.Z@?3=n";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("PL{`\"6.Z@?3=n", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec1);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "%'6hk|I|V&$&";
      stringArray0[1] = "PL{`\"6.Z@?3=n";
      stringArray1[2] = "alter tableiwst2cmr";
      stringArray1[3] = "";
      stringArray1[4] = "%'6hk|I|V&$&";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'Yx$' has no foreign key with the columns (%'6hk|I|V&$&, , alter tableiwst2cmr, , %'6hk|I|V&$&, , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DYZbLc";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "DYZbLc";
      stringArray1[1] = "DYZbLc";
      stringArray1[2] = "DYZbLc";
      String string0 = SQLUtil.leftJoin("DYZbLc", stringArray0, "DYZbLc", "DYZbLc", stringArray1);
      assertEquals("left join DYZbLc as DYZbLc on DYZbLc.DYZbLc = DYZbLc.DYZbLc", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("KbZfygdW(b4l/dj'f", stringBuilder0);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      databaseParameterBufferImp0.addArgument((-256));
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)126;
      databaseParameterBufferImp0.addArgument((int) (byte)51, byteArray0);
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.removeExtensionParams();
      SQLUtil.addRequiredCondition(" join ", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("ISO8859_9");
      dBCatalog0.getTable("ISO8859_9", false);
      DBDataType dBDataType0 = DBDataType.getInstance(44, "eZ:<[L/h]5{L");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("%Fms|GmQ&FYhA=", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EZ:<[L/H]5{L", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "Z[Qx|56\"Sn=";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("Z[Qx|56\"Sn=", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8360625566946513
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create table", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "al1er tablea tero ]a";
      stringArray0[2] = "}O'.`";
      stringArray0[3] = "aleer iJdex";
      stringArray0[5] = "#?$B49|]ppSf[fcKf";
      stringArray0[6] = "(4";
      stringArray0[1] = "alter tableaFl";
      stringArray0[8] = stringArray0[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("al1er tablea tero ]a = 'al1er tablea tero ]a' AND alter tableaFl = 'alter tableaFl' AND }O'.` = '}O'.`' AND aleer iJdex = 'aleer iJdex' AND null = null AND #?$B49|]ppSf[fcKf = '#?$B49|]ppSf[fcKf' AND (4 = '(4' AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.join("}O'.`", "alter tableaFl", stringArray0, "+?6\r", stringArray0[8], stringArray0);
      assertEquals("}O'.` join +?6\r as null on alter tableaFl.al1er tablea tero ]a = null.al1er tablea tero ]a and alter tableaFl.alter tableaFl = null.alter tableaFl and alter tableaFl.}O'.` = null.}O'.` and alter tableaFl.aleer iJdex = null.aleer iJdex and alter tableaFl.null = null.null and alter tableaFl.#?$B49|]ppSf[fcKf = null.#?$B49|]ppSf[fcKf and alter tableaFl.(4 = null.(4 and alter tableaFl.null = null.null and alter tableaFl.null = null.null", string1);
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.relname = "}O'.` join +?6\r as null on alter tableaFl.al1er tablea tero ]a = null.al1er tablea tero ]a and alter tableaFl.alter tableaFl = null.alter tableaFl and alter tableaFl.}O'.` = null.}O'.` and alter tableaFl.aleer iJdex = null.aleer iJdex and alter tableaFl.null = null.null and alter tableaFl.#?$B49|]ppSf[fcKf = null.#?$B49|]ppSf[fcKf and alter tableaFl.(4 = null.(4 and alter tableaFl.null = null.null and alter tableaFl.null = null.null";
      xSQLVAR0.deepCopy();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      BasicUUID basicUUID0 = new BasicUUID();
      SQLUtil.renderValue("+?6\r");
      String string2 = SQLUtil.renderColumnListWithTableName("BINARY", stringArray0);
      assertEquals("BINARY.al1er tablea tero ]a, BINARY.alter tableaFl, BINARY.}O'.`, BINARY.aleer iJdex, BINARY.null, BINARY.#?$B49|]ppSf[fcKf, BINARY.(4, BINARY.null, BINARY.null", string2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.511943908709577
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "kSoAQh<IfDTP";
      stringArray0[1] = "kSoAQh<IfDTP";
      stringArray0[2] = "|{R";
      stringArray0[3] = "|{R";
      stringArray0[4] = "kSoAQh<IfDTP";
      stringArray0[5] = "<F,";
      stringArray0[6] = "|{R";
      stringArray0[7] = "|{R";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "6'", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint1, nameSpec1);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = new DBPrimaryKeyConstraint(defaultDBTable0, "Q_wQKc.Er=c@lys", false, stringArray0);
      NameSpec nameSpec2 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint2, nameSpec2);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "kSoAQh<IfDTP");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("PRIMARY KEY (kSoAQh<IfDTP, kSoAQh<IfDTP, |{R, |{R, kSoAQh<IfDTP, <F,, |{R, |{R)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kSoAQh<IfDTP\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%+-+tKy)S\"|d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-2703));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ordinaryChars((-4), (-747));
      stringReader0.skip((-195L));
      streamTokenizer0.commentChar(983);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      String string0 = "TM:C";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TM:C");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("r;>#mQX{|D>;N6", defaultDBTable0, (-816), "setFloat(String,float)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a{Ewq@/_0q,";
      stringArray0[1] = "7a{Ewq@/_0q,";
      stringArray0[3] = "7a{Ewq@/_0q,";
      stringArray0[4] = stringArray0[2];
      stringArray0[5] = "7a{Ewq@/_0q,";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      charArray0[0] = 'W';
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zH?dBO,^");
      defaultDBTable0.getComponents();
      defaultDBTable0.getIndex("update");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "update";
      stringArray0[2] = "update";
      stringArray0[3] = "zH?dBO,^";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[7] = "update";
      Integer.max(3112, 3112);
      DBDataType dBDataType0 = DBDataType.getInstance(1287, "update");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("zH?dBO,^", defaultDBTable0, dBDataType0, integer0);
      Integer.compareUnsigned(3112, 2415);
      DBDataType.getInstance(1287, "equals");
      Integer integer1 = new Integer(2415);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getURL();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$22_,%A|y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "9D2<tIw.i";
      stringArray0[1] = "9D2<tIw.i";
      stringArray0[2] = "9D2<tIw.i";
      stringArray0[3] = "9D2<tIw.i";
      stringArray0[4] = "9D2<tIw.i";
      stringArray0[5] = ")EOL5hu'$N|<";
      stringArray0[6] = "9D2<tIw.i";
      stringArray0[7] = "9D2<tIw.i";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "9D2<tIw.i", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("9D2<tIw.i", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "9D2<tIw.i", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT 9D2<tIw.i ", stringBuilder0.toString());
      assertEquals("CONSTRAINT 9D2<tIw.i ", stringBuilder1.toString());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3549631862710414
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a`7wq/_0q,";
      stringArray0[1] = "7a`7wq/_0q,";
      stringArray0[2] = "7a`7wq/_0q,";
      stringArray0[3] = "7a`7wq/_0q,";
      stringArray0[4] = "7a`7wq/_0q,";
      stringArray0[5] = "7a`7wq/_0q,";
      stringArray0[6] = "n_[RYCf";
      stringArray0[7] = "7a`7wq/_0q,";
      stringArray0[8] = "7a`7wq/_0q,";
      SQLUtil.renderColumnListWithTableName("7a`7wq/_0q,", stringArray0);
      SQLUtil.normalize("7a`7wq/_0q,", false);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "7a`7wq/_0q,";
      stringArray1[1] = "#=^\"2Anh|qrE8%uvy<I";
      stringArray1[2] = "7a`7wq/_0q,";
      stringArray1[3] = "7a`7wq/_0q,";
      stringArray1[4] = "n_[RYCf";
      stringArray1[5] = "#=^\"2Anh|qrE8%uvy<I";
      stringArray1[6] = "7a ` 7wq  / _0q,";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("7a`7wq/_0q,", stringArray0, "#=^\"2Anh|qrE8%uvy<I", "7a`7wq/_0q,", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+:4^0nf)smX2V";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p#^sIhg");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = SQLUtil.normalize("=9[`LXK/AY&LCi~", false);
      assertEquals("= 9 [ ` LXK / AY & LCi ~", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage("delgten_\"rycf", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("delgten_\"rycf", dBPackage0);
      dBProcedure0.getOwner();
      SQLUtil.typeAndName(dBProcedure0);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        errorMessages0.getTimestamp(0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getTimestamp
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage((String) null, (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      dBProcedure0.getOwner();
      SQLUtil.typeAndName(dBProcedure0);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-50);
      databaseParameterBufferImp0.addArgument((int) (byte) (-50), byteArray0);
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLUtil.mutatesStructure("call");
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getIndexConglomerateNumber();
      constantActionActivation0.getContextManager();
      TypeCompilerFactoryImpl typeCompilerFactoryImpl0 = new TypeCompilerFactoryImpl();
      Character.valueOf('1');
      StringBuilder stringBuilder0 = new StringBuilder("C");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.apache.derby.impl.sql.execute.CreateTableConstantAction", true, "91PviRX%g.aIX", "updateString");
      assertTrue(dBCheckConstraint0.isNameDeterministic());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}Y,:4yi#~vdEjA1c7)");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("drop materialized viewattempting to initilize native library.", false);
      assertEquals("drop materialized viewattempting to initilize native library.", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a{7wq/_0q,";
      stringArray0[1] = "7a{7wq/_0q,";
      stringArray0[3] = "7a{7wq/_0q,";
      stringArray0[4] = stringArray0[2];
      stringArray0[5] = "7a{7wq/_0q,";
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getPassword();
      jdbcDataSource0.getLogWriter();
      jdbcDataSource0.getURL();
      JdbcDataSource jdbcDataSource1 = new JdbcDataSource();
      jdbcDataSource1.getLogWriter();
      SQLUtil.mutatesDataOrStructure("execdelgten_\"r");
      BasicDatabase basicDatabase0 = new BasicDatabase();
      assertFalse(basicDatabase0.isActive());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3190095981344987
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a{7wq/_0q,";
      stringArray0[1] = "7a{7wq/_0q,";
      SQLUtil.mutatesDataOrStructure("truncaterelease");
      Boolean boolean0 = new Boolean("with UUID ");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = (-2697);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(95, "7a{7wq/_0q,", (-2697), 95, 161, 161, (-1739), (-1580), (-1739), 95);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2697
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("W", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      boolean boolean0 = false;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint1, nameSpec1);
      SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      NameSpec nameSpec2 = NameSpec.NEVER;
      NameSpec nameSpec3 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec3);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "setNCharacterStream(String, Reader, long)";
      SQLUtil.parseColumnTypeAndSize("derby.product.external.name");
      SQLUtil.ukSpec(dBPrimaryKeyConstraint1, nameSpec2);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-1881912475));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z[Qx|56\"Sn=");
      String[] stringArray0 = new String[4];
      defaultDBTable0.getComponents();
      stringArray0[0] = "Z[Qx|56\"Sn=";
      stringArray0[1] = "Z[Qx|56\"Sn=";
      stringArray0[2] = "Z[Qx|56\"Sn=";
      stringArray0[2] = "Z[Qx|56\"Sn=";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      dBPrimaryKeyConstraint0.equals(stringArray0[3]);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (Z[Qx|56\"Sn=, Z[Qx|56\"Sn=, Z[Qx|56\"Sn=, )", string0);
      
      Character character0 = new Character('[');
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLUtil.mutatesStructure("alter tablealter tablecall");
      CachedStatement cachedStatement0 = new CachedStatement();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[8];
      // Undeclared exception!
      try { 
        cachedStatement0.setIdentity("alter tablealter tablecall");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.derby.impl.sql.GenericStatement
         //
         verifyException("org.apache.derby.impl.sql.conn.CachedStatement", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-117);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      TableContainer tableContainer0 = new TableContainer("drop materialized viewreferences");
      tableContainer0.getTable("drop materialized viewreferences");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((String) null, (String) null, "eH{MVpOFV*|s");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("253i2$@Q", defaultDBTable0, 41, "253i2$@Q");
      defaultDBColumn0.toString();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      ErrorMessages errorMessages0 = new ErrorMessages();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[1];
      xSQLVARArray0[0] = xSQLVAR1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "drop table");
      Locale locale0 = Locale.CANADA_FRENCH;
      NativeGDSImpl nativeGDSImpl0 = null;
      try {
        nativeGDSImpl0 = new NativeGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a{7wq/_0q,";
      stringArray0[1] = "7a{7wq/_0q,";
      stringArray0[3] = "7a{7wq/_0q,";
      stringArray0[4] = stringArray0[2];
      stringArray0[5] = "7a{7wq/_0q,";
      Boolean boolean0 = new Boolean("$[~F<;(O");
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getOutSqlda();
      isc_stmt_handle_impl0.setOutSqlda((XSQLDA) null);
      isc_stmt_handle_impl0.clearRows();
      isc_stmt_handle_impl0.getRsr_rdb();
      DBColumn dBColumn0 = null;
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("   column_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec7a{7wq/_0q,", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V. jVJi!abiy#L";
      stringArray0[1] = "org.apache.derby.iapi.services.timer.TimerFactory";
      stringArray0[2] = "GHBsx_:7VTcp";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("V. jVJi!abiy#L", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("   column_", "u~f{aa{<XKE~+Q+", "   column_");
      jdbcConnectionPool0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6386541211153043
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "C";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments("C");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.mutatesDataOrStructure("(C, , , , , , , )");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.removeComments("(C, , , , , , , )");
      String string0 = "`PUmK2#lAk(]|<r`Qlo";
      StringBuilder stringBuilder0 = new StringBuilder("GegJ#O");
      StringBuilder stringBuilder1 = stringBuilder0.append("`+c");
      StringBuilder stringBuilder2 = stringBuilder1.append((float) (byte)48);
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      // Undeclared exception!
      try { 
        stringBuilder2.insert((int) (byte)62, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 62
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5804433332419348
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      defaultDBTable0.getComponents();
      stringArray0[0] = "Z[Qx|56\"Sn=";
      stringArray0[1] = "Z[Qx|56\"Sn=";
      stringArray0[2] = "Z[Qx|56\"Sn=";
      stringArray0[3] = "Z[Qx|56\"Sn=";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "<F,", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "UNIQUE (Z[Qx|56\"Sn=, Z[Qx|56\"Sn=, Z[Qx|56\"Sn=, Z[Qx|56\"Sn=)");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, stringBuilder0);
      assertEquals("UNIQUE (Z[Qx|56\"Sn=, Z[Qx|56\"Sn=, Z[Qx|56\"Sn=, Z[Qx|56\"Sn=)CONSTRAINT <F, ", stringBuilder0.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLUtil.normalize("%+-+tKy)S\"|", false);
      GenericStorablePreparedStatement genericStorablePreparedStatement0 = null;
      try {
        genericStorablePreparedStatement0 = new GenericStorablePreparedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.GenericPreparedStatement", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , ) REFERENCES null(, , , , , , , )", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("   column_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec7a{7wq/_0q,", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V. jVJi!abiy#L";
      stringArray0[1] = "org.apache.derby.iapi.services.timer.TimerFactory";
      stringArray0[2] = "GHBsx_:7VTcp";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("V. jVJi!abiy#L", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("   column_", "u~f{aa{<XKE~+Q+", "   column_");
      jdbcConnectionPool0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.NEVER;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      mockPrintWriter0.append('-');
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(34, pipedInputStream1.available());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "insert";
      stringArray0[1] = "org.databene.jdbacl.S5LUtil";
      stringArray0[2] = " NULL";
      stringArray0[3] = "alter materialized view";
      stringArray0[4] = "bDlRn PacI?P:J$+Q+k";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Ssov6R6*R(B-:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Ssov6R6*R(B-:
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "selec intvu:iw";
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.642143078360459
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "7a`7wq\\/_0q,";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a`7wq/_0q,";
      stringArray0[1] = "7a`7wq/_0q,";
      stringArray0[2] = "7a`7wq/_0q,";
      stringArray0[3] = "7a`7wq/_0q,";
      stringArray0[4] = "7a`7wq/_0q,";
      stringArray0[6] = "n_[RYCf";
      stringArray0[7] = "7a`7wq/_0q,";
      stringArray0[8] = "7a`7wq/_0q,";
      SQLUtil.renderColumnListWithTableName("7a`7wq/_0q,", stringArray0);
      SQLUtil.normalize("7a`7wq/_0q,", false);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "7a`7wq/_0q,";
      stringArray1[1] = "#=^\"2Anh|qrE8%uvy<I";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderWhereClause(stringArray1, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".Q?9X-5Lb8P;Sn";
      stringArray0[1] = "0.j>w1ZLnH66E(L";
      stringArray0[2] = "%+-+tKy)S\"|d";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "0.j>w1ZLnH66E(L", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(">2, T'", false, dBUniqueConstraint0);
      String string0 = SQLUtil.ownerDotComponent(dBUniqueIndex0);
      assertEquals("null.>2, T'", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLUtil.isDDL("<F{Z)pj4l");
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<F{Z)pj4l");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      predicate2.or(predicate4);
      Predicate<Object> predicate5 = predicate3.and(predicate2);
      Predicate<Object> predicate6 = predicate5.or(predicate1);
      predicate3.or(predicate6);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(true);
      SQLUtil.addOptionalCondition("KbZfygdW(b4l/dj'f", stringBuilder0);
      Csv csv0 = Csv.getInstance();
      Csv csv1 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv1);
      SimpleResultSet simpleResultSet1 = new SimpleResultSet(csv0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Csv csv2 = Csv.getInstance();
      SimpleResultSet simpleResultSet2 = new SimpleResultSet(csv2);
      Csv.getInstance();
      Csv.getInstance();
      Csv csv3 = Csv.getInstance();
      SimpleResultSet simpleResultSet3 = new SimpleResultSet(csv3);
      try { 
        simpleResultSet3.getTimestamp(" WHERE ");
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // Column \" WHERE \" not found [42122-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop indexja^ry");
      assertTrue(boolean0);
      
      StringBuffer stringBuffer0 = new StringBuffer("CHECK ");
      VersionNumber.valueOf((String) null);
      Boolean boolean1 = new Boolean("alter materialized viewalter tablealter tablecall");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tableor");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      GenericStorablePreparedStatement genericStorablePreparedStatement0 = null;
      try {
        genericStorablePreparedStatement0 = new GenericStorablePreparedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.GenericPreparedStatement", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "7a{7wq/_0q,";
      stringArray0[3] = stringArray0[0];
      stringArray0[4] = stringArray0[2];
      stringArray0[5] = "7a{7wq/_0q,";
      PipedReader pipedReader0 = new PipedReader(90102);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      Boolean boolean0 = new Boolean("$[~F<;(O");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%+-+tKy)S\"|d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-2703));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ordinaryChars((-4), (-747));
      stringReader0.skip((-195L));
      streamTokenizer0.commentChar(983);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "mPu ~dQG(");
      streamTokenizer2.ordinaryChars((-334951280), 983);
      streamTokenizer2.ordinaryChar((-1845990316));
      streamTokenizer2.ordinaryChar((-233487651));
      streamTokenizer2.ordinaryChars(983, (-334951280));
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("UL0", (String[]) null, "UL0", "8&@f", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLUtil.isDML("delgten_\"rycf");
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      byte[][] byteArray0 = new byte[3][1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-125);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-125);
      byteArray2[1] = (byte) (-125);
      byteArray2[2] = (byte) (-125);
      byteArray2[3] = (byte) (-125);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-125);
      byteArray3[1] = (byte) (-125);
      byteArray3[2] = (byte) (-125);
      byteArray3[3] = (byte) (-125);
      byteArray3[4] = (byte) (-125);
      byteArray3[5] = (byte) (-125);
      byteArray3[6] = (byte) (-1);
      byteArray3[7] = (byte) (-125);
      byteArray3[8] = (byte) (-125);
      byteArray0[2] = byteArray3;
      isc_stmt_handle_impl.printRow(byteArray0);
      isc_stmt_handle_impl0.clearRows();
      int int0 = 335544800;
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("/y2?.Akg|g,5$o");
      dBCatalog0.getSchema("/y2?.Akg|g,5$o");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      linkedList0.listIterator();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.or(predicate0);
      linkedList0.removeIf(predicate4);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7682293763712118
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "%'6hk|I|V&$&";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      String string1 = "PL{`\"6\\.Z@?3=n";
      String string2 = "Yx$";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Yx$");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%'6hk|I|V&$&";
      defaultDBTable0.getComponents();
      String string3 = "";
      String string4 = "alter tableiwst2cmr";
      defaultDBTable0.getIndex("alter tableiwst2cmr");
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "PL{`\"6.Z@?3=n";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("PL{`\"6.Z@?3=n", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBForeignKeyConstraint0.toString();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(2606, (Object) "PL{`\"6.Z@?3=n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2606
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLUtil.normalize("|XAResource.TMENDRSCAN", false);
      System.setCurrentTimeMillis(1949L);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(`Pw6~");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("(`Pw6~", false);
      assertEquals("(` Pw6 ~", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SQLUtil.normalize("(c, , ", true);
      GenericStorablePreparedStatement genericStorablePreparedStatement0 = null;
      try {
        genericStorablePreparedStatement0 = new GenericStorablePreparedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.GenericPreparedStatement", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.setLoginTimeout(162);
      jdbcDataSource0.getPassword();
      JdbcDataSource jdbcDataSource1 = new JdbcDataSource();
      jdbcDataSource1.getLogWriter();
      SQLUtil.removeComments("");
      jdbcDataSource0.getPassword();
      jdbcDataSource1.getURL();
      jdbcDataSource0.getLogWriter();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertNull(isc_db_handle_impl0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("/y2?.Akg|g,5$o");
      dBCatalog0.getSchema("/y2?.Akg|g,5$o");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "7a`7wq/_0q,";
      stringArray0[3] = "7a`7wq/_0q,";
      stringArray0[4] = "7a`7wq/_0q,";
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(" uEFeRENCES ");
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Csv.getInstance();
      SimpleResultSet simpleResultSet1 = new SimpleResultSet();
      Csv.getInstance();
      Csv csv1 = Csv.getInstance();
      csv1.setEscapeCharacter('c');
      Csv.getInstance();
      Csv csv2 = Csv.getInstance();
      SimpleResultSet simpleResultSet2 = new SimpleResultSet(csv2);
      try { 
        simpleResultSet1.getTimestamp(" uEFeRENCES ");
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // Column \" uEFeRENCES \" not found [42122-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.3291016900199226
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DBSchema dBSchema0 = new DBSchema(")(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("save ", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "gOP>pd@?";
      stringArray0[1] = "save ";
      stringArray0[2] = "save ";
      stringArray0[3] = "e1";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM save  WHERE gOP>pd@? = 'gOP>pd@?' AND save  = 'save ' AND save  = 'save ' AND e1 = 'e1'", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("setLong(", "4ex)sre%g6K&", versionNumber0);
      defaultDatabase0.getTable("setLong(", false);
      DBCatalog dBCatalog0 = new DBCatalog();
      defaultDatabase0.removeCatalog(dBCatalog0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "8000002a-00d0-fd77-3ed8-000a0a0b1900");
      defaultDatabase0.getCatalog("80000010-00d0-fd77-3ed8-000a0a0b1900");
      stringArray0[1] = "";
      stringArray0[3] = "setLong(";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter materialized view";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "alter materialized view";
      stringArray1[1] = "p#^sIhg";
      stringArray1[2] = "alter materialized view";
      stringArray1[3] = "bsri]b";
      stringArray1[4] = "bsri]b";
      stringArray1[5] = "p#^sIhg";
      stringArray1[6] = "alter tablealter ta";
      stringArray1[7] = "drop materialized view";
      String[] stringArray2 = new String[9];
      stringArray2[0] = "alter tablealter ta";
      stringArray2[1] = "bsri]b";
      stringArray2[2] = "alter materialized view";
      stringArray2[3] = "alter tableja^ry";
      stringArray2[4] = "bsri]b";
      stringArray2[5] = "tB&H|GpQT0N?UF";
      stringArray2[6] = "";
      stringArray2[7] = "";
      stringArray2[8] = "tB&H|GpQT0N?UF";
      String string0 = SQLUtil.innerJoin("drop materialized view", stringArray1, "drop materialized view", "tB&H|GpQT0N?UF", stringArray2);
      assertEquals("drop materialized view as tB&H|GpQT0N?UF on drop materialized view.alter materialized view = tB&H|GpQT0N?UF.alter tablealter ta and drop materialized view.p#^sIhg = tB&H|GpQT0N?UF.bsri]b and drop materialized view.alter materialized view = tB&H|GpQT0N?UF.alter materialized view and drop materialized view.bsri]b = tB&H|GpQT0N?UF.alter tableja^ry and drop materialized view.bsri]b = tB&H|GpQT0N?UF.bsri]b and drop materialized view.p#^sIhg = tB&H|GpQT0N?UF.tB&H|GpQT0N?UF and drop materialized view.alter tablealter ta = tB&H|GpQT0N?UF. and drop materialized view.drop materialized view = tB&H|GpQT0N?UF.", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setOutSqlda((XSQLDA) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      isc_stmt_handle_impl0.setInsertCount((-3344));
      isc_stmt_handle_impl0.clearRows();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      byte[][] byteArray0 = new byte[6][0];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)8;
      isc_stmt_handle_impl.printRow(byteArray0);
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte)115;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)46;
      byteArray2[1] = (byte) (-39);
      byteArray2[2] = (byte)115;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)8;
      byteArray0[3] = byteArray4;
      isc_stmt_handle_impl0.clearRows();
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte) (-12);
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getRsr_rdb();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string0 = SQLUtil.innerJoin("r&AN?G'UA", stringArray0, ">V!+yH%", ":+T", stringArray0);
      assertEquals(">V!+yH% as :+T on r&AN?G'UA.null = :+T.null and r&AN?G'UA.null = :+T.null and r&AN?G'UA.null = :+T.null and r&AN?G'UA.null = :+T.null and r&AN?G'UA.null = :+T.null", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (String) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      StringBuilder stringBuilder4 = stringBuilder3.append(charArray0);
      SQLUtil.addRequiredCondition("", stringBuilder4);
      assertEquals("null0.0# and ", stringBuilder4.toString());
      assertEquals("null0.0# and ", stringBuilder0.toString());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "R,(%<";
      stringArray0[1] = "?S._s!Ne~~^JFZ^O";
      stringArray0[2] = "R,(%<";
      stringArray0[3] = "R,(%<";
      stringArray0[4] = "R,(%<";
      stringArray0[5] = "R,(%<";
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "^U@|Q=|tr$_+c\"J";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("mrop t4able", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a{Ewq@/_0q,";
      stringArray0[1] = "7a{Ewq@/_0q,";
      stringArray0[3] = "7a{Ewq@/_0q,";
      stringArray0[4] = stringArray0[2];
      stringArray0[5] = "7a{Ewq@/_0q,";
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create table", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter tablealter ta";
      stringArray0[1] = "derby.database.fullAccessUsers";
      stringArray0[2] = "}O'.`";
      stringArray0[3] = "alter index";
      stringArray0[4] = "alter tablealter ta";
      stringArray0[5] = "#?$B49:|]ppSf[fcKf";
      stringArray0[6] = "(4";
      stringArray0[7] = "alter tableal";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = SQLUtil.normalize("}O'.`", true);
      assertEquals("} O '.`'", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (String) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      StringBuilder stringBuilder4 = stringBuilder3.append(charArray0);
      SQLUtil.addRequiredCondition("", stringBuilder4);
      assertEquals("null0.0# and ", stringBuilder4.toString());
      assertEquals("null0.0# and ", stringBuilder0.toString());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("tJ~9D;7&p!uq");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string0 = "|&a\\=<KXa[*?8\"oR&";
      SQLUtil.normalize("|&a=<KXa[*?8\"oR&", false);
      XSQLVAR[] xSQLVARArray0 = null;
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        genericDescriptorList0.remove((-277889049));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("+wuy2r!~wt");
      VersionNumber versionNumber1 = VersionNumber.valueOf("%Ezw0*#TYYa]");
      versionNumber0.compareTo(versionNumber1);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("+wuy2r!~wt", "+wuy2r!~w", versionNumber0);
      SQLUtil.normalize("+wuy2r!~wt", true);
      System.setCurrentTimeMillis(1949L);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage((String) null, (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      dBProcedure0.toString();
      dBProcedure0.toString();
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      Csv.getInstance();
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      SQLUtil.ownerDotComponent(compositeDBObject0);
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLUtil.isQuery("IWT2CMr");
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      XSQLVAR xSQLVAR2 = xSQLVAR0.deepCopy();
      xSQLVAR1.deepCopy();
      XSQLVAR xSQLVAR3 = new XSQLVAR();
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      xSQLVAR2.deepCopy();
      XSQLVAR xSQLVAR6 = xSQLVAR0.deepCopy();
      assertNotSame(xSQLVAR6, xSQLVAR2);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "Ssov6R6*R(B-:";
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("n_[RYWeCf", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.4089970488048076
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLUtil.isQuery("IWST2CMr");
      SQLUtil.isDDL("<F{Z)pj4l");
      PipedReader pipedReader0 = new PipedReader(1559);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(false);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.isDML("drop indexdrop materialized viewdrop materialized viewc");
      String string0 = "org.databene.jdbacl.SQLUtil";
      String[] stringArray0 = new String[11];
      stringArray0[0] = "IWST2CMr";
      stringArray0[1] = "org.databene.jdbacl.SQLUtil";
      stringArray0[2] = "- 0";
      stringArray0[3] = null;
      stringArray0[4] = "drop indexdrop materialized viewdrop materialized viewc";
      stringArray0[5] = null;
      stringArray0[6] = "- 0";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("org.databene.jdbacl.SQLUtil", (String[]) null, "u9^yaopaI_4j8,>", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("8&@f", "#s", (String[]) null, "#s", "Q3NL{-hElKgi&wW`S3", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[11];
      stringArray0[0] = "al1er tablea tero ]a";
      stringArray0[1] = "al1er tablea tero ]a";
      stringArray0[3] = "o-uhFrQg!O";
      stringArray0[5] = "al1er tablea tero ]a";
      stringArray0[6] = "al1er tablea tero ]a";
      boolean boolean0 = new Boolean("al1er tablea tero ]a");
      SQLUtil.join(stringArray0[2], "al1er tablea tero ]a", stringArray0, "+?6r", stringArray0[8], stringArray0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, "+l4oX7WCi=`wN@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("/y2?.Akg|g,5$o");
      dBCatalog0.getSchema("/y2?.Akg|g,5$o");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+nh", defaultDBTable0, (-17), " in stte1ment [");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      linkedList0.listIterator();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.or(predicate0);
      linkedList0.removeIf(predicate4);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("TM:C", defaultDBTable0, (-4767), "?2N]");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("?", defaultDBTable0, 0, "--");
      dBColumnArray0[6] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumn(dBColumnArray0[4]);
      assertEquals("TM:C ?2N] NULL", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = ")L\"Js\"$R6}hm6r%gNb";
      stringArray0[2] = "<";
      stringArray0[3] = "<<XRS:Q9;Dcy4+N";
      stringArray0[4] = null;
      stringArray0[5] = "l}-p{@68=B+fg9ov";
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, ":8VBmN;0dI]\"}u", "<<XRS:Q9;Dcy4+N", stringArray0);
      assertEquals("left join :8VBmN;0dI]\"}u as <<XRS:Q9;Dcy4+N on null.null = <<XRS:Q9;Dcy4+N.null and null.)L\"Js\"$R6}hm6r%gNb = <<XRS:Q9;Dcy4+N.)L\"Js\"$R6}hm6r%gNb and null.< = <<XRS:Q9;Dcy4+N.< and null.<<XRS:Q9;Dcy4+N = <<XRS:Q9;Dcy4+N.<<XRS:Q9;Dcy4+N and null.null = <<XRS:Q9;Dcy4+N.null and null.l}-p{@68=B+fg9ov = <<XRS:Q9;Dcy4+N.l}-p{@68=B+fg9ov", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S]f}7");
      StringBuilder stringBuilder1 = stringBuilder0.append((-332645013));
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl2.setInSqlda((XSQLDA) null);
      isc_stmt_handle_impl2.setOutSqlda((XSQLDA) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl3.setInsertCount(9);
      isc_stmt_handle_impl0.clearRows();
      isc_stmt_handle_impl isc_stmt_handle_impl4 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl3.clearRows();
      isc_stmt_handle_impl isc_stmt_handle_impl5 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl5.setInsertCount(9);
      isc_stmt_handle_impl5.getRsr_rdb();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NA(i");
      Parameter parameter0 = new Parameter((-2541));
      String string0 = SQLUtil.substituteMarkers("ga\"%cW'8G_,", "truncate", parameter0);
      assertEquals("ga\"%cW'8G_,", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("- ");
      DBSchema dBSchema0 = new DBSchema("- ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("- ", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "- ";
      stringArray0[1] = "- ";
      stringArray0[2] = "- ";
      stringArray0[3] = "- ";
      stringArray0[4] = "- ";
      stringArray0[5] = "- ";
      stringArray0[6] = "- ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("- ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \"- \" ", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.7584209838818394
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",'$ywo)|");
      MockFile mockFile0 = new MockFile("Returning autogenerated keys by column index is not supported.", ",'$ywo)|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileMonitor fileMonitor0 = new FileMonitor();
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'J';
      charArray0[2] = 'p';
      charArray0[3] = ']';
      charArray0[4] = '8';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.write("SQLERRD5");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("XlB", true, defaultDBTable0, "SQLERRD5");
      Locale locale0 = Locale.CHINESE;
      Object object0 = new Object();
      locale0.getDisplayCountry();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) fileMonitor0;
      objectArray0[1] = (Object) "XlB";
      mockPrintWriter1.format(locale0, "X0Y25.S", objectArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      assertEquals(",'$ywo)|", defaultDBTable0.getName());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z[Qx|56\"Sn=");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Z[Qx|56\"Sn=";
      TableContainer tableContainer0 = new TableContainer("");
      TableContainer tableContainer1 = new TableContainer("");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized view", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create materialized view\" PRIMARY KEY (Z[Qx|56\"Sn=, , , )", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "7a{7wq/_0q,";
      stringArray0[2] = "7a{7wq/_0q,";
      stringArray0[3] = "7a{7wq/_0q,";
      stringArray0[4] = "7a{7wq/_0q,";
      stringArray0[5] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "7a{7wq/_0q,", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "91PviRX%g.aIX";
      boolean boolean0 = true;
      SQLUtil.mutatesStructure("c}all");
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      Qualifier[][] qualifierArray0 = new Qualifier[4][2];
      Qualifier[] qualifierArray1 = new Qualifier[6];
      int int0 = (-584);
      int int1 = 48;
      ReflectClassesJava2 reflectClassesJava2_0 = new ReflectClassesJava2();
      Class<DBPrimaryKeyConstraint> class0 = DBPrimaryKeyConstraint.class;
      ReflectGeneratedClass reflectGeneratedClass0 = new ReflectGeneratedClass(reflectClassesJava2_0, class0, class0);
      try { 
        reflectGeneratedClass0.getMethod("91PviRX%g.aIX");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Method 91PviRX%g.aIX() does not exist in generated class org.databene.jdbacl.model.DBPrimaryKeyConstraint.
         //
         verifyException("org.apache.derby.iapi.error.StandardException", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7a{7wq/_0q,";
      stringArray0[1] = "7a{7wq/_0q,";
      stringArray0[3] = "7a{7wq/_0q,";
      stringArray0[4] = stringArray0[2];
      stringArray0[5] = "7a{7wq/_0q,";
      PipedReader pipedReader0 = new PipedReader(90102);
      Random.setNextRandom(90102);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers(stringArray0[4], "7a{7wq/_0q,", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'h'", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("SAVEPT");
      String string0 = SQLUtil.renderValue(jMXPrincipal0);
      assertEquals("JMXPrincipal:  SAVEPT", string0);
  }
}
