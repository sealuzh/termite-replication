/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 15:47:13 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 27;
      SimpleNode simpleNode0 = new SimpleNode(27);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.identifiers = null;
      String string0 = "{";
      StringBuffer stringBuffer0 = new StringBuffer("2<");
      stringWriter0.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = new StringBuffer("2<");
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      stringBuffer1.chars();
      charArray0[6] = 'W';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(63);
      simpleNode0.setIdentifier("k,:0xGt;[.Hr(5oKDL");
      StringWriter stringWriter0 = new StringWriter(3711);
      simpleNode0.setIdentifier(">");
      stringWriter0.close();
      simpleNode0.dump(">", stringWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "2<");
      StringBuffer stringBuffer0 = new StringBuffer("2<");
      stringWriter0.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "{");
      char[] charArray0 = new char[7];
      stringBuffer1.chars();
      Object object0 = new Object();
      stringBuffer1.append(object0);
      charArray0[6] = 'W';
      stringWriter0.write(charArray0);
      StringBuffer stringBuffer2 = new StringBuffer();
      StringBuffer stringBuffer3 = new StringBuffer((CharSequence) "2<");
      StringBuffer stringBuffer4 = new StringBuffer();
      StringBuffer stringBuffer5 = new StringBuffer(stringBuffer1);
      StringBuffer stringBuffer6 = new StringBuffer('W');
      stringBuffer6.append(true);
      stringWriter0.append((CharSequence) stringBuffer6);
      simpleNode0.setIdentifier(">=");
      simpleNode0.dump(">=", stringWriter0);
      assertEquals("2<2<\u0000\u0000\u0000\u0000\u0000\u0000Wtrue<EnumBody>\n  <identifier>*ge</identifier>\n</EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.7962209059715708
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-83);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(109);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = new StringBuffer("ArrayInitializer");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "ArrayInitializer");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      stringBuffer0.chars();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      StringBuffer stringBuffer2 = new StringBuffer();
      StringBuffer stringBuffer3 = new StringBuffer(charBuffer0);
      StringBuffer stringBuffer4 = new StringBuffer();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) stringBuffer2);
      StringBuffer stringBuffer5 = new StringBuffer(charBuffer1);
      StringBuffer stringBuffer6 = new StringBuffer((byte)115);
      stringWriter2.append((CharSequence) charBuffer0);
      simpleNode0.setIdentifier(">");
      simpleNode0.dump("# {}C^fv%~qME[", stringWriter0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ArrayInitializer\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<VariableDeclaratorId>\n  <identifier>*gt</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.append((CharSequence) "2<");
      StringBuffer stringBuffer0 = new StringBuffer("2<");
      stringWriter0.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "{");
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      stringBuffer1.chars();
      charArray0[6] = 'W';
      stringWriter0.write(charArray0);
      StringBuffer stringBuffer2 = new StringBuffer();
      StringBuffer stringBuffer3 = new StringBuffer((CharSequence) "2<");
      StringBuffer stringBuffer4 = new StringBuffer();
      StringBuffer stringBuffer5 = new StringBuffer(stringBuffer1);
      simpleNode0.identifiers = null;
      StringBuffer stringBuffer6 = new StringBuffer('W');
      stringWriter0.append((CharSequence) stringBuffer6);
      String string0 = ">=";
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier(">=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3816002975101453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(27);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer("2<");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = new StringBuffer("2<");
      char[] charArray0 = new char[7];
      stringBuffer1.append((-1076860143));
      charArray0[0] = '\"';
      stringBuffer1.chars();
      StringBuffer stringBuffer2 = new StringBuffer();
      StringBuffer stringBuffer3 = new StringBuffer(stringBuffer0);
      StringBuffer stringBuffer4 = new StringBuffer(27);
      CharBuffer charBuffer0 = CharBuffer.allocate(27);
      StringBuffer stringBuffer5 = new StringBuffer(charBuffer0);
      charBuffer0.append((CharSequence) stringBuffer2);
      StringBuffer stringBuffer6 = new StringBuffer(27);
      stringWriter1.append((CharSequence) charBuffer0);
      simpleNode0.setIdentifier("{");
      simpleNode0.dump("{", stringWriter0);
      assertEquals("2<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<Initializer>\n</Initializer>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("Initializer : {", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.087302357535235
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.setIdentifier(">>");
      StringWriter stringWriter0 = new StringWriter(9);
      simpleNode0.toString();
      char char0 = '0';
      StringWriter stringWriter1 = stringWriter0.append('0');
      simpleNode0.dump("EnumBody : >>", stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter0.append((CharSequence) "EnumBody : >>");
      int int0 = (-2040451886);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "EnumBody : >>", 9, (-2040451886));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1386);
      simpleNode0.jjtAddChild((Node) null, 1386);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 1386);
      simpleNode0.jjtGetChild(3);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-2054332632));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2054332632
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.356715031474521
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleNode simpleNode0 = new SimpleNode(21);
      SimpleNode simpleNode1 = new SimpleNode(10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Aj*");
      simpleNode0.setIdentifier("Aj*");
      simpleNode0.setIdentifier("fA");
      simpleNode1.toString("_%EJOG'");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "fA");
      StringWriter stringWriter3 = new StringWriter();
      stringWriter3.append((CharSequence) "pGtk");
      stringWriter3.append((CharSequence) "Aj*");
      simpleNode0.dump("lg9KSX]XGoXajbOun9", stringWriter0);
      simpleNode0.jjtAddChild(simpleNode1, 10);
      simpleNode0.jjtGetChild(10);
      simpleNode1.dump("flb#s}(:T0", stringWriter2);
      assertEquals("Aj*fA<MethodDeclaration>\n  <identifier>Aj*</identifier>\n  <identifier>fA</identifier>\n</MethodDeclaration>\n", stringWriter2.toString());
      assertEquals("Aj*fA<MethodDeclaration>\n  <identifier>Aj*</identifier>\n  <identifier>fA</identifier>\n</MethodDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(27);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer("}");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      stringBuffer0.chars();
      Object object0 = new Object();
      stringBuffer0.append((Object) simpleNode0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      stringWriter1.write(charArray0);
      StringBuffer stringBuffer2 = new StringBuffer();
      StringBuffer stringBuffer3 = new StringBuffer(stringBuffer2);
      StringBuffer stringBuffer4 = new StringBuffer();
      StringBuffer stringBuffer5 = new StringBuffer(stringBuffer2);
      StringBuffer stringBuffer6 = new StringBuffer(27);
      stringBuffer1.append(true);
      assertEquals(12, stringBuffer0.length());
      
      StringBuffer stringBuffer7 = new StringBuffer(stringBuffer2);
      stringWriter0.append((CharSequence) stringBuffer7);
      simpleNode0.setIdentifier("}");
      StringWriter stringWriter2 = new StringWriter(0);
      simpleNode0.dump(">=", stringWriter2);
      assertEquals("<Initializer>\n</Initializer>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2677359312028278
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      simpleNode0.setIdentifier("&");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.toString("VariableInitializer");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VariableInitializerInstanceOfExpression : &");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",?$4rb7X6>M1");
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VariableInitializerInstanceOfExpression : &");
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.allocate('l');
      charBuffer0.clear();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2i<");
      stringWriter1.flush();
      simpleNode0.dump("{", stringWriter1);
      StringWriter stringWriter2 = new StringWriter(47);
      assertFalse(stringWriter2.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.087302357535235
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter0 = new StringWriter(9);
      simpleNode0.toString();
      char char0 = '0';
      StringWriter stringWriter1 = stringWriter0.append('0');
      simpleNode0.dump("EnumBody : <=", stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter0.append((CharSequence) "EnumBody : <=");
      int int0 = (-2040451886);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "EnumBody : <=", 9, (-2040451886));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "2<");
      StringBuffer stringBuffer0 = new StringBuffer("2<");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "{");
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0019';
      stringBuffer1.chars();
      charArray0[6] = 'W';
      stringWriter0.write(charArray0);
      StringBuffer stringBuffer2 = new StringBuffer();
      StringBuffer stringBuffer3 = new StringBuffer((CharSequence) "2<");
      stringWriter2.write(charArray0);
      StringBuffer stringBuffer4 = new StringBuffer();
      StringBuffer stringBuffer5 = new StringBuffer(stringBuffer0);
      StringBuffer stringBuffer6 = new StringBuffer();
      StringBuffer stringBuffer7 = new StringBuffer(stringBuffer3);
      StringBuffer stringBuffer8 = new StringBuffer(9);
      stringWriter1.append((CharSequence) stringBuffer7);
      simpleNode0.setIdentifier("&&");
      simpleNode0.dump("xjFcWW29NC,fyg4(", stringWriter0);
      assertEquals("2<2<\u0019\u0000\u0000\u0000\u0000\u0000W\u0019\u0000\u0000\u0000\u0000\u0000W2<<EnumBody>\n  <identifier>*amp</identifier>\n</EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8548864134659022
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      String string0 = "r<";
      simpleNode0.setIdentifier("r<");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump(string0, stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.304438279306519
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.jjtGetNumChildren();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)1;
      sequenceInputStream0.read(byteArray0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, (-1472808153));
      simpleNode0.jjtAddChild(simpleNode1, 1);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("InstanceOfExpression : 2<", stringWriter0);
      assertEquals(2, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8437745248738278
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 9;
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.setIdentifier("C>");
      StringWriter stringWriter0 = new StringWriter(9);
      String string0 = ";";
      simpleNode0.setIdentifier(";");
      stringWriter0.close();
      stringWriter0.close();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump(string0, stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1052041846733325
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.setIdentifier("C>");
      StringWriter stringWriter0 = new StringWriter(9);
      String string0 = ";";
      stringWriter0.close();
      stringWriter0.append((CharSequence) "YZHn8 .T");
      simpleNode0.setIdentifier("YZHn8 .T");
      stringWriter0.close();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.toString();
      // Undeclared exception!
      try { 
        simpleNode0.dump(string0, stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "<<");
      StringBuffer stringBuffer0 = new StringBuffer("<<");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{");
      CharBuffer charBuffer0 = CharBuffer.allocate(47);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "<<");
      StringWriter stringWriter3 = stringWriter1.append((CharSequence) "<<");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "<<");
      stringBuffer1.chars();
      Object object0 = new Object();
      StringBuffer stringBuffer2 = new StringBuffer("<<");
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      StringBuffer stringBuffer3 = new StringBuffer();
      StringBuffer stringBuffer4 = new StringBuffer(stringBuffer0);
      StringBuffer stringBuffer5 = new StringBuffer();
      StringBuffer stringBuffer6 = new StringBuffer(charBuffer0);
      StringBuffer stringBuffer7 = new StringBuffer(711);
      stringBuffer5.append(true);
      stringWriter2.append((CharSequence) stringBuffer6);
      simpleNode0.setIdentifier("<<");
      simpleNode0.dump("*lshft", stringWriter3);
      assertEquals("<<{<<<<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n", stringWriter3.toString());
      assertEquals("<<{<<<<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 310);
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-1108317541));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleNode simpleNode0 = new SimpleNode((-371));
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.dump("{", stringWriter0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8120939218445867
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.setIdentifier("C>");
      StringWriter stringWriter0 = new StringWriter(9);
      simpleNode0.setIdentifier(";");
      StringReader stringReader0 = new StringReader("C>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 822, 905, 9);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager1);
      javaParser0.getNextToken();
      Token token0 = javaParser0.token;
      Token token1 = javaParser0.jj_nt;
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager1);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser2 = new JavaParser(javaParserTokenManager2);
      JavaParser javaParser3 = new JavaParser(javaParser2.token_source);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.close();
      simpleNode0.dump("#HB^d[wk3;R6", stringWriter1);
      assertEquals("<EnumBody>\n  <identifier>C></identifier>\n</EnumBody>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2213836861256668
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "2<");
      simpleNode0.setIdentifier("Dtub)<D");
      stringWriter1.close();
      StringBuffer stringBuffer0 = new StringBuffer("Dtub)<D");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "Dtub)<D");
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = stringWriter0.append((CharSequence) "Dtub)<D");
      StringBuffer stringBuffer1 = new StringBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer1);
      StringBuffer stringBuffer2 = new StringBuffer(charBuffer0);
      StringBuffer stringBuffer3 = new StringBuffer();
      StringBuffer stringBuffer4 = new StringBuffer(stringBuffer3);
      StringBuffer stringBuffer5 = new StringBuffer(3679);
      StringBuffer stringBuffer6 = new StringBuffer((CharSequence) "2<");
      StringBuffer stringBuffer7 = new StringBuffer(";");
      stringWriter4.append((CharSequence) stringBuffer4);
      stringWriter2.append((CharSequence) stringBuffer7);
      StringBuffer stringBuffer8 = new StringBuffer();
      StringBuffer stringBuffer9 = new StringBuffer("\"~\"");
      stringBuffer6.append((CharSequence) stringBuffer9);
      simpleNode0.dump(";", stringWriter3);
      assertEquals("<VariableDeclaratorId>\n  <identifier>Dtub)<D</identifier>\n</VariableDeclaratorId>\n", stringWriter3.toString());
      
      StringWriter stringWriter5 = new StringWriter(18);
      String string0 = simpleNode0.toString(")!e/");
      assertEquals(")!e/VariableDeclaratorId : Dtub)<D", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9946571675310574
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer("/e=4KrJ}p:lf&");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringBuffer stringBuffer1 = new StringBuffer("{");
      stringBuffer0.chars();
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      stringWriter1.write(charArray0);
      StringBuffer stringBuffer2 = new StringBuffer();
      StringBuffer stringBuffer3 = new StringBuffer(stringBuffer0);
      StringBuffer stringBuffer4 = new StringBuffer();
      StringBuffer stringBuffer5 = new StringBuffer(stringBuffer2);
      StringBuffer stringBuffer6 = new StringBuffer(47);
      stringWriter0.append((CharSequence) stringBuffer1);
      simpleNode0.setIdentifier("");
      simpleNode0.dump("blPkEZvj{y#nC;KV", stringWriter1);
      assertEquals("WW\"\"\"\"\"{<InstanceOfExpression>\n</InstanceOfExpression>\n", stringWriter1.toString());
      assertEquals("WW\"\"\"\"\"{<InstanceOfExpression>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1123103344201821
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "2<");
      StringBuffer stringBuffer0 = new StringBuffer("2<");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "{");
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[2] = '$';
      charArray0[3] = 'n';
      charArray0[4] = 'x';
      charArray0[5] = 'o';
      CharBuffer charBuffer0 = CharBuffer.allocate('o');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "2<");
      stringBuffer1.chars();
      Object object0 = new Object();
      StringBuffer stringBuffer2 = new StringBuffer("{");
      stringBuffer2.append((Object) null);
      char[] charArray1 = new char[0];
      stringWriter3.write(charArray1);
      StringBuffer stringBuffer3 = new StringBuffer();
      StringBuffer stringBuffer4 = new StringBuffer(9);
      stringBuffer3.append(true);
      StringBuffer stringBuffer5 = new StringBuffer();
      StringWriter stringWriter4 = stringWriter1.append((CharSequence) stringBuffer5);
      simpleNode0.setIdentifier(";");
      simpleNode0.dump("{", stringWriter4);
      assertEquals("2<{\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<EnumBody>\n</EnumBody>\n", stringWriter4.toString());
      assertEquals("2<{\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<EnumBody>\n</EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(960);
      StringReader stringReader0 = new StringReader("&&");
      int int0 = (-8);
      Node node0 = simpleNode0.parent;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleNode simpleNode0 = new SimpleNode((-1106101594));
      Node node0 = simpleNode0.parent;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaParser javaParser0 = new JavaParser("*le");
      simpleNode0.parser = javaParser0;
      simpleNode0.jjtAddChild((Node) null, 2231);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtAddChild((Node) null, 2232);
      simpleNode0.jjtAddChild((Node) null, 2276);
      assertEquals(2277, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1));
      StringReader stringReader0 = new StringReader("MZ`0|w)t");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.jjtSetParent(simpleNode0);
      Node node0 = simpleNode0.jjtGetParent();
      assertSame(node0, simpleNode0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2433, 2433);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      stringReader0.read();
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaCharStream0.bufpos = 2433;
      JavaParser javaParser1 = new JavaParser("R$rdCa- Ff");
      SimpleNode simpleNode0 = new SimpleNode(javaParser1, 0);
      SimpleNode simpleNode1 = new SimpleNode(2433);
      simpleNode0.jjtAddChild(simpleNode1, 2986);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(2987, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0682924484507355
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("<");
      StringReader stringReader0 = new StringReader("Y{l-W3 p2 G~`,^U");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 822, (-2332), 332);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParser0.getNextToken();
      javaParserTokenManager0.curLexState = 0;
      Token token0 = javaParser0.token;
      Token token1 = javaParser0.jj_nt;
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser2 = new JavaParser("Y{l-W3 p2 G~`,^U");
      JavaParser javaParser3 = new JavaParser((JavaParserTokenManager) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>*lt</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("VariableDeclaratorId : <", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3136);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      nodeArray0[8] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      JavaParser javaParser0 = new JavaParser((String) null);
      Node node0 = javaParser0.currNode;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-706));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -706
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.443707505883507
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      javaParser0.ConditionalOrExpression();
      int int0 = (-1468);
      try { 
        javaParser0.ShiftExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-2021406187));
      simpleNode0.identifiers = null;
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump((String) null, stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "{");
      StringWriter stringWriter1 = stringWriter0.append('K');
      stringWriter1.write("{");
      simpleNode0.dump("{", stringWriter1);
      simpleNode0.jjtClose();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleNode simpleNode0 = new SimpleNode((-414));
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump("{", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -414
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = " ";
      simpleNode0.setIdentifier("@");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("@", stringWriter0);
      InputStream inputStream0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-3234), (byte) (-104), 92);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-3234));
      Token token1 = token0.next;
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      Token token2 = javaParser0.jj_nt;
      javaParser0.token_source.TokenLexicalActions(javaParser0.token);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      JavaParser javaParser2 = new JavaParser(javaParser1.token_source);
      javaCharStream0.Done();
      JavaParser javaParser3 = new JavaParser(javaParser0.token_source);
      SimpleNode simpleNode0 = new SimpleNode(javaParser3, 2);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("u>~<_qrJ=FJO0}8WMOD", stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Type");
      stringReader0.markSupported();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Type");
      JavaParser javaParser0 = new JavaParser(stringReader1);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 3014);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3014
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 4423);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Type");
      stringReader0.markSupported();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Type");
      SimpleNode simpleNode0 = new SimpleNode(49);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-2212));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(126);
      simpleNode0.jjtGetParent();
      simpleNode0.id = 2295;
      simpleNode0.jjtOpen();
      simpleNode0.jjtSetParent(simpleNode0);
      simpleNode0.jjtOpen();
      int int0 = (-1377);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1377));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Type");
      stringReader0.markSupported();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Type");
      SimpleNode simpleNode0 = new SimpleNode(2199);
      // Undeclared exception!
      try { 
        simpleNode0.toString("Type");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2199
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
