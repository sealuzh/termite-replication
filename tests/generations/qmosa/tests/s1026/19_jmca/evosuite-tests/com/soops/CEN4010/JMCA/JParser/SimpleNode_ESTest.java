/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 05:06:43 GMT 2020
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.SyncFailedException;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 71;
      SimpleNode simpleNode0 = new SimpleNode(71);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(10);
      CharBuffer.wrap((CharSequence) ">=");
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = '>';
      charArray0[2] = 'h';
      CharBuffer.wrap(charArray0);
      stringWriter1.append('>');
      simpleNode0.setIdentifier(">=");
      String string0 = "<<";
      simpleNode0.setIdentifier("<<");
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump("*lshft", stringWriter0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1, (-1103981311));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter(10);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append((CharSequence) null);
      CharBuffer.wrap((CharSequence) ">=");
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = 'z';
      charArray0[4] = '{';
      charArray0[5] = '{';
      CharBuffer.wrap(charArray0);
      StringWriter stringWriter3 = new StringWriter();
      stringWriter2.append((CharSequence) ">=");
      simpleNode0.setIdentifier(">>");
      simpleNode0.setIdentifier(">>");
      StringWriter stringWriter4 = new StringWriter();
      simpleNode0.dump(">>", stringWriter3);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 10);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream0);
      assertFalse(pushbackInputStream2.equals((Object)pushbackInputStream1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.589280063598296
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-84);
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringWriter stringWriter0 = new StringWriter(18);
      StringWriter stringWriter1 = stringWriter0.append('v');
      simpleNode0.setIdentifier("tv)4L9w!}d~Wg<H1?");
      stringWriter1.write((int) (byte) (-84));
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      String string0 = "\\";
      simpleNode0.setIdentifier("");
      stringWriter1.append((CharSequence) "");
      String string1 = simpleNode0.toString();
      // Undeclared exception!
      try { 
        simpleNode0.dump(string1, stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) ">=");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">=");
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = stringWriter3.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      CharBuffer.allocate(0);
      stringWriter4.write(10);
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter5 = new StringWriter();
      stringWriter2.close();
      stringWriter5.write((-1954));
      StringWriter stringWriter6 = new StringWriter();
      stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.write("*ge");
      stringWriter3.write(0);
      stringWriter5.write(10);
      StringWriter stringWriter7 = new StringWriter(1);
      stringWriter3.write(charArray0);
      stringWriter0.flush();
      stringWriter4.append((CharSequence) "<=");
      stringWriter5.append((CharSequence) ">=");
      simpleNode0.dump("<=", stringWriter3);
      assertEquals(">=\n\u0000d<=<EnumConstant>\n  <identifier>*le</identifier>\n</EnumConstant>\n", stringWriter3.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6885673693022826
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) ">=");
      CharBuffer.wrap((CharSequence) ">=");
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer charBuffer1 = charBuffer0.slice();
      SimpleNode simpleNode1 = new SimpleNode('d');
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.jjtGetNumChildren();
      String string0 = "(H~/MOvq<";
      simpleNode0.dump("(H~/MOvq<", stringWriter1);
      CharBuffer charBuffer2 = CharBuffer.allocate(9);
      stringWriter2.append((CharSequence) charBuffer1);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) charBuffer2, 0, (-104));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1428852304537858
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 68);
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter(68);
      simpleNode0.setIdentifier("&");
      simpleNode0.toString();
      simpleNode0.toString();
      int int0 = 10;
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 10);
      simpleNode1.setIdentifier("AllocationExpression : &");
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier("EnumConstant");
      simpleNode0.dump("CompilationUnit", stringWriter0);
      simpleNode0.jjtAddChild(simpleNode1, 68);
      simpleNode1.toString();
      simpleNode0.jjtGetChild(68);
      simpleNode0.setIdentifier(".2Q+({r$");
      simpleNode0.toString();
      simpleNode1.dump("EnumDeclaration", stringWriter0);
      SimpleNode simpleNode2 = new SimpleNode(68);
      // Undeclared exception!
      try { 
        simpleNode2.jjtGetChild(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'j';
      charArray0[2] = 'B';
      stringWriter0.write(charArray0);
      simpleNode0.setIdentifier("<");
      simpleNode0.dump(";", stringWriter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.setIdentifier("<");
      simpleNode0.dump(";", stringWriter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6428579130907905
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(10);
      StringWriter stringWriter3 = new StringWriter();
      stringWriter2.close();
      StringWriter stringWriter4 = new StringWriter(10);
      StringWriter stringWriter5 = new StringWriter(10);
      simpleNode0.setIdentifier(">=");
      stringWriter4.write(10);
      StringWriter stringWriter6 = new StringWriter();
      stringWriter4.write(">=");
      StringWriter stringWriter7 = new StringWriter();
      stringWriter1.close();
      stringWriter2.write(10);
      StringWriter stringWriter8 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[1] = '\u0094';
      StringWriter stringWriter9 = new StringWriter();
      stringWriter1.write(charArray0);
      charArray0[0] = '\u001F';
      stringWriter3.write(">=");
      stringWriter9.write(10);
      charArray0[1] = '\u0094';
      stringWriter5.append('\u001F');
      charArray0[3] = '\u001F';
      stringWriter8.write((int) '\u001F');
      StringWriter stringWriter10 = new StringWriter();
      charArray0[4] = '\u0094';
      charArray0[0] = '\u0000';
      stringWriter0.write(charArray0);
      stringWriter4.flush();
      StringWriter stringWriter11 = new StringWriter('\u001F');
      simpleNode0.dump("a$^TfWC}d", stringWriter9);
      assertEquals("\n<EnumConstant>\n  <identifier>*ge</identifier>\n</EnumConstant>\n", stringWriter9.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("EnumConstant : >=", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p-k8AAh7");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("|");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = "1";
      simpleNode0.setIdentifier("1");
      simpleNode0.dump(";", stringWriter0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("|", "kyAdIzC'K.3<H`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"kyAdIzC'K.3<H`\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(47);
      String string0 = "H=";
      simpleNode0.setIdentifier("H=");
      simpleNode0.dump(" ,us7e;(_+iM{1+ +3-", stringWriter0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter1 = new StringWriter(47);
      simpleNode0.setIdentifier("}");
      simpleNode0.dump("T", stringWriter0);
      stringWriter1.close();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      simpleNode0.setIdentifier("T");
      simpleNode0.dump(" ,us7e;(_+iM{1+ +3-", stringWriter1);
      SimpleNode simpleNode1 = new SimpleNode(47);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("1", "}6mwGvgq+rO\"56k}7o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"}6mwGvgq+rO\"56k}7o\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(47);
      String string0 = "H=";
      simpleNode0.setIdentifier("H=");
      simpleNode0.dump(" ,us7e;(_+iM{1+ +3-", stringWriter0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter1 = new StringWriter(47);
      simpleNode0.setIdentifier("}");
      simpleNode0.dump("T", stringWriter0);
      stringWriter1.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      simpleNode0.setIdentifier("T");
      simpleNode0.dump(" ,us7e;(_+iM{1+ +3-", stringWriter1);
      Node node0 = simpleNode0.parent;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("1", "}6mwGvgq+rO\"56k}7o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"}6mwGvgq+rO\"56k}7o\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 10;
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.setIdentifier("z::wsT_{^");
      String string0 = "=";
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter1 = stringWriter0.append('@');
      simpleNode0.dump(">=", stringWriter1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      try { 
        pipedOutputStream0.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3445982481028228
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&&");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("&&");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      simpleNode0.setIdentifier(">");
      String string0 = "*ge";
      simpleNode0.dump("*ge", stringWriter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("2p$KXc!wVK");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetChild(0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.identifiers = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier("<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3433);
      simpleNode0.id = (-154417720);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-4668));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.5660857389596289
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.setIdentifier("");
      simpleNode0.dump(";", stringWriter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtSetParent(simpleNode0);
      Node node0 = simpleNode1.jjtGetParent();
      assertSame(node0, simpleNode0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.7668382315802122
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("|");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.setIdentifier("1");
      simpleNode0.dump(";", stringWriter0);
      simpleNode0.toString("1");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6428579130907905
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(10);
      StringWriter stringWriter3 = new StringWriter();
      stringWriter2.close();
      StringWriter stringWriter4 = new StringWriter(10);
      StringWriter stringWriter5 = new StringWriter(10);
      simpleNode0.setIdentifier(">=");
      stringWriter4.write(10);
      StringWriter stringWriter6 = new StringWriter();
      stringWriter4.write(">=");
      stringWriter1.close();
      stringWriter2.write(10);
      StringWriter stringWriter7 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[1] = '\u0094';
      stringWriter7.close();
      StringWriter stringWriter8 = new StringWriter();
      stringWriter1.write(charArray0);
      charArray0[0] = '\u001F';
      stringWriter3.write(">=");
      stringWriter7.write(">=");
      stringWriter8.write(10);
      charArray0[1] = '\u0094';
      StringWriter stringWriter9 = new StringWriter();
      charArray0[3] = '\u001F';
      stringWriter7.write((int) '\u001F');
      StringWriter stringWriter10 = new StringWriter();
      charArray0[4] = '\u0094';
      stringWriter0.write(charArray0);
      stringWriter4.flush();
      StringWriter stringWriter11 = new StringWriter('\u001F');
      simpleNode0.dump("a$^TfWC}d", stringWriter8);
      assertEquals("\n<EnumConstant>\n  <identifier>*ge</identifier>\n</EnumConstant>\n", stringWriter8.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("EnumConstant : >=", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9532710147058912
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) ">=");
      StringReader stringReader0 = new StringReader("NP~gT!^64");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.parser = javaParser0;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">=");
      StringWriter stringWriter3 = new StringWriter();
      stringWriter3.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      charBuffer1.slice();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode0.dump("(H~/MOvq<", stringWriter1);
      // Undeclared exception!
      try { 
        stringWriter2.write(charArray0, 9, 387);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6428579130907905
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(10);
      StringWriter stringWriter3 = new StringWriter();
      stringWriter2.close();
      StringWriter stringWriter4 = new StringWriter(10);
      StringWriter stringWriter5 = new StringWriter(10);
      simpleNode0.setIdentifier(">=");
      stringWriter4.write(10);
      StringWriter stringWriter6 = new StringWriter();
      stringWriter4.write(">=");
      stringWriter1.close();
      stringWriter4.append((CharSequence) ">=");
      stringWriter2.write(10);
      StringWriter stringWriter7 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[1] = '\u0094';
      StringWriter stringWriter8 = new StringWriter();
      stringWriter1.write(charArray0);
      charArray0[0] = '\u001F';
      stringWriter3.write(">=");
      stringWriter7.write(">=");
      stringWriter8.write(10);
      charArray0[1] = '\u0094';
      StringWriter stringWriter9 = new StringWriter();
      charArray0[3] = '\u001F';
      stringWriter7.write((int) '\u001F');
      StringWriter stringWriter10 = new StringWriter();
      charArray0[4] = '\u0094';
      stringWriter0.write(charArray0);
      stringWriter4.flush();
      StringWriter stringWriter11 = new StringWriter('\u001F');
      simpleNode0.dump("a$^TfWC}d", stringWriter8);
      assertEquals("\n<EnumConstant>\n  <identifier>*ge</identifier>\n</EnumConstant>\n", stringWriter8.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("EnumConstant : >=", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1274832349932322
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(10);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">=");
      StringWriter stringWriter3 = new StringWriter();
      stringWriter3.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      CharBuffer charBuffer2 = charBuffer1.slice();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetNumChildren();
      charBuffer1.duplicate();
      simpleNode0.dump("(H~/MOvq<", stringWriter1);
      CharBuffer charBuffer3 = CharBuffer.allocate(9);
      stringWriter3.append('\\');
      stringWriter3.append((CharSequence) charBuffer2);
      charBuffer3.rewind();
      simpleNode0.jjtAddChild((Node) null, 9);
      simpleNode0.jjtGetChild(1);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) charBuffer3, 0, (-104));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("*lt");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 10);
      SimpleNode simpleNode1 = new SimpleNode(0);
      Node node0 = simpleNode1.parent;
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode1;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = null;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-21));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -21
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimpleNode simpleNode0 = new SimpleNode(18);
      String string0 = "|";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = "p-k\\8AAh7";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p-k8AAh7");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("|");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.setIdentifier((String) null);
      String string2 = ";";
      // Undeclared exception!
      try { 
        simpleNode0.dump(";", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("HA~>Ewg%#Z5fP*M,");
      simpleNode0.jjtClose();
      simpleNode0.setIdentifier("<");
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier("[6aOuG-nz(DA>@<");
      simpleNode0.setIdentifier("HA~>Ewg%#Z5fP*M,");
      simpleNode0.toString();
      SystemInUtil.addInputLine(">~");
      simpleNode0.setIdentifier("<=");
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode(10);
      simpleNode1.jjtSetParent(simpleNode0);
      simpleNode0.jjtSetParent(simpleNode1);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(1485);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "com.soops.CEN4010.JMCA.JParser.JavaParser";
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = 'y';
      charArray0[2] = 'F';
      charArray0[3] = ']';
      charArray0[4] = '2';
      stringReader0.read(charArray0);
      int int0 = 10;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 10, 10);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParserTokenManager0.TokenLexicalActions(javaParser0.token);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      stringReader0.read();
      try { 
        javaParser1.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 10, column 44.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sv3-jIB{(yN(Qzp[A");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1405, 1405);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.input_stream = javaCharStream0;
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1405);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("=d", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1405
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6428579130907905
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(10);
      StringWriter stringWriter3 = new StringWriter();
      stringWriter2.close();
      StringWriter stringWriter4 = new StringWriter(10);
      StringWriter stringWriter5 = new StringWriter(10);
      simpleNode0.setIdentifier(">=");
      stringWriter4.write(10);
      StringWriter stringWriter6 = new StringWriter();
      stringWriter4.write(">=");
      stringWriter1.close();
      stringWriter2.write(10);
      StringWriter stringWriter7 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[1] = '\u0094';
      StringWriter stringWriter8 = new StringWriter();
      stringWriter1.write(charArray0);
      charArray0[0] = '\u001F';
      stringWriter3.write(">=");
      stringWriter8.write(10);
      charArray0[1] = '\u0094';
      StringWriter stringWriter9 = new StringWriter();
      charArray0[3] = '\u001F';
      StringWriter stringWriter10 = new StringWriter();
      charArray0[4] = '\u0094';
      stringWriter0.write(charArray0);
      stringWriter4.flush();
      StringWriter stringWriter11 = new StringWriter('\u001F');
      simpleNode0.dump("a$^TfWC}d", stringWriter8);
      assertEquals("\n<EnumConstant>\n  <identifier>*ge</identifier>\n</EnumConstant>\n", stringWriter8.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("EnumConstant : >=", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'y';
      charArray0[1] = 'F';
      charArray0[3] = ']';
      charArray0[4] = '2';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 10, 10);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParserTokenManager0.TokenLexicalActions(javaParser0.token);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      stringReader0.read();
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
      javaCharStream0.bufcolumn = javaParserTokenManager0.jjnewLexState;
      StringReader stringReader2 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
      javaParserTokenManager1.jjimageLen = (-1);
      stringReader2.skip((-37L));
      JavaParser javaParser2 = new JavaParser(javaParserTokenManager1);
      javaParserTokenManager0.jjround = 10;
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1939));
      StringWriter stringWriter0 = new StringWriter();
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 191);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 191);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(sequenceInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream3 = new PushbackInputStream(sequenceInputStream0);
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (-1086385980));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter(10);
      int int0 = 0;
      StringWriter stringWriter1 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.slice();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetNumChildren();
      CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1994477666));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1994477666
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 191);
      byte[] byteArray0 = new byte[0];
      pushbackInputStream0.read(byteArray0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 191);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(sequenceInputStream0);
      sequenceInputStream0.available();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream3 = new PushbackInputStream(sequenceInputStream0);
      SimpleNode simpleNode0 = new SimpleNode((-1086385980));
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1086385980
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      StringWriter stringWriter0 = new StringWriter(93);
      stringWriter0.append('v');
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = 'v';
      SimpleNode simpleNode0 = new SimpleNode(7);
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.796311640173813
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[2] = 'y';
      charArray0[2] = 'F';
      charArray0[3] = ']';
      charArray0[4] = '2';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 10, 10);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParserTokenManager0.TokenLexicalActions(javaParser0.token);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      stringReader0.read();
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager1.defaultLexState = 111;
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
      javaCharStream0.bufcolumn = javaParserTokenManager0.jjnewLexState;
      StringReader stringReader2 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
      javaParserTokenManager1.jjimageLen = (-1);
      stringReader0.reset();
      javaParserTokenManager1.jjimageLen = (-1);
      stringReader2.skip((-37L));
      JavaParser javaParser2 = new JavaParser(javaParserTokenManager1);
      javaParserTokenManager0.jjround = 10;
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1939));
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("com.soops.CEN4010.JMCA.JParser.JavaParser", stringWriter0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = 'y';
      charArray0[2] = 'F';
      charArray0[4] = '2';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 10, 10);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParserTokenManager0.TokenLexicalActions(javaParser0.token);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      stringReader0.read();
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager1.defaultLexState = 111;
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
      javaCharStream0.bufcolumn = javaParserTokenManager0.jjnewLexState;
      StringReader stringReader2 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
      javaParserTokenManager1.jjimageLen = (-1);
      stringReader0.reset();
      javaParserTokenManager1.jjimageLen = (-1);
      stringReader2.skip((-37L));
      JavaParser javaParser2 = new JavaParser(javaParserTokenManager1);
      javaParserTokenManager0.jjround = 10;
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1939));
      // Undeclared exception!
      try { 
        simpleNode0.toString("com.soops.CEN4010.JMCA.JParser.JavaParser");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1939
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
