/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 18:06:57 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.net.Proxy;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JLayeredPane;
import messages.Message;
import messages.global.GlobalChatMsg;
import messages.global.GlobalStateMsg;
import messages.global.MapInfo;
import messages.global.MapListMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import messages.round.CountdownMsg;
import messages.session.SessionParticipationMsg;
import org.apache.log4j.LogManager;
import org.apache.log4j.spi.RepositorySelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      SessionListMsg sessionListMsg0 = new SessionListMsg();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      int int0 = 1;
      int int1 = 1;
      GlobalStateMsg globalStateMsg0 = new GlobalStateMsg(int1);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      String string0 = "";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 1);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      GlobalChatMsg globalChatMsg0 = new GlobalChatMsg(string0);
      MockSocket mockSocket1 = new MockSocket(proxy0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket1, bomberClient0);
      SessionParticipationMsg sessionParticipationMsg0 = new SessionParticipationMsg(boolean0, int0, string0);
      clientMsgReceiver0.processMsg(sessionParticipationMsg0);
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.setClassAssertionStatus("DRO", false);
      classLoader1.getParent();
      classLoader0.setClassAssertionStatus("DRO", true);
      classLoader0.setDefaultAssertionStatus(true);
      classLoader1.clearAssertionStatus();
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classLoader2.setPackageAssertionStatus("DRO", false);
      classLoader0.setClassAssertionStatus("DRO", false);
      classLoader1.clearAssertionStatus();
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("DRO", true);
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      classLoader0.clearAssertionStatus();
      ClassLoader.getSystemClassLoader();
      classLoader2.setPackageAssertionStatus("Couldn't create ObjectInputStream!", true);
      classLoader3.setPackageAssertionStatus("Couldn't create ObjectInputStream!", false);
      ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      LogManager.setRepositorySelector(repositorySelector0, classLoader1);
      classLoader0.setClassAssertionStatus("Couldn't create ObjectInputStream!", false);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg((Message) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      DataTruncation dataTruncation0 = new DataTruncation(855, true, false, 855, 0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(dataTruncation0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLRecoverableException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StackTraceElement[] stackTraceElementArray0 = dataTruncation0.getStackTrace();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "~,~X|F+,m<t31S%");
      SQLWarning sQLWarning0 = new SQLWarning("8859_1", "X(X", 6, sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("?gO%A*^b Y]k");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Game over!", 6);
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Game over!", "?gO%A*^b Y]k", 6);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("M/,%<@Hz>d{#gfEB", sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedException0.getStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Couldn't close input stream", "Game over!", 6, (Throwable) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      System.setCurrentTimeMillis(0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      Vector<MapInfo> vector0 = new Vector<MapInfo>();
      MapListMsg mapListMsg0 = new MapListMsg(vector0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(mapListMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("messages.global.MapListMsg", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      SessionListMsg sessionListMsg0 = new SessionListMsg();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-6);
      byteArray0[0] = byte0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[2] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[3] = byte2;
      byte byte3 = (byte) (-123);
      byteArray0[4] = byte3;
      byte byte4 = (byte) (-61);
      byteArray0[4] = byte4;
      String string0 = null;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      byte[] byteArray1 = new byte[4];
      byte byte5 = (byte)0;
      byteArray1[1] = byte5;
      byte byte6 = (byte)100;
      byteArray1[2] = byte3;
      byte byte7 = (byte)115;
      byteArray1[3] = byte7;
      String string1 = "1T1l1t+io/d6cM";
      ImageIcon imageIcon0 = new ImageIcon(byteArray1, string1);
      int int0 = 24;
      SessionDetailsMsg sessionDetailsMsg0 = new SessionDetailsMsg(string0, arrayList0, imageIcon0, int0, byte6, byteArray1[2]);
      sessionListMsg0.addSessionInfo(sessionDetailsMsg0);
      int int1 = (-3366);
      CountdownMsg countdownMsg0 = new CountdownMsg(int1);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      Message message0 = null;
      clientMsgReceiver0.processMsg(message0);
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      byte byte0 = (byte)1;
      byte byte1 = (byte) (-61);
      String string0 = null;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, (String) null);
      SessionDetailsMsg sessionDetailsMsg0 = new SessionDetailsMsg((String) null, arrayList0, imageIcon0, (byte)1, 2985, 44);
      SessionListMsg sessionListMsg0 = new SessionListMsg();
      sessionListMsg0.addSessionInfo((SessionDetailsMsg) null);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver(bomberClient0.server, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ERROR");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Couldn't create ObjectInputStream!");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ERROR");
      System.setCurrentTimeMillis((-2295L));
      System.setCurrentTimeMillis(0L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      DataTruncation dataTruncation0 = new DataTruncation(855, true, false, 855, 0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(dataTruncation0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLRecoverableException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StackTraceElement[] stackTraceElementArray0 = dataTruncation0.getStackTrace();
      sQLRecoverableException0.spliterator();
      SQLWarning sQLWarning0 = new SQLWarning("8859_1", "", 6, sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("?gO%A*^b Y]k");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Game over!", 6);
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Game over!", "?gO%A*^b Y]k", 6);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("M/,%<@Hz>d{#gfEB", sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedException0.getStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Couldn't close input stream", "Game over!", 6, (Throwable) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      System.setCurrentTimeMillis(196L);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }
}
