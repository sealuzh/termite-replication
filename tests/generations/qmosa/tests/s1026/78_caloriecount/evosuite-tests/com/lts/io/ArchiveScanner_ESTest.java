/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 16:42:00 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("H7m=xK7ya`");
      Integer integer0 = new Integer((-369346479));
      Integer integer1 = new Integer((-369346479));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-369346479));
      Integer integer3 = new Integer((-121));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer4 = new Integer((-1234));
      Integer integer5 = new Integer(15);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer3;
      linkedList2.add(integer4);
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) linkedList2;
      objectArray0[3] = (Object) "H7m=xK7ya`";
      Integer integer6 = new Integer((-121));
      linkedList2.add(integer6);
      linkedList2.toArray(objectArray0);
      linkedList2.add(integer2);
      Integer integer7 = new Integer((-1234));
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H7m=xK7ya`";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesExcluded = vector0;
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      System.setCurrentTimeMillis(1188L);
      archiveScanner0.processFile("H7m=xK7ya`");
      System.setCurrentTimeMillis(15);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "H7m=xK7ya`", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{K");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{K";
      stringArray0[1] = "{K";
      stringArray0[2] = "{K";
      stringArray0[3] = "{K";
      stringArray0[4] = "{K";
      archiveScanner0.setExcludes(stringArray0);
      Vector<DataInputStream> vector0 = new Vector<DataInputStream>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Vector<String> vector1 = new Vector<String>(2);
      archiveScanner0.dirsExcluded = vector1;
      vector0.add(dataInputStream0);
      vector0.listIterator();
      vector0.add((DataInputStream) null);
      LinkedList<DataInputStream> linkedList0 = new LinkedList<DataInputStream>();
      vector0.add((DataInputStream) null);
      linkedList0.add((DataInputStream) null);
      linkedList0.add((DataInputStream) null);
      linkedList0.parallelStream();
      vector0.addAll((Collection<? extends DataInputStream>) linkedList0);
      vector0.parallelStream();
      linkedList0.add((DataInputStream) null);
      String[] stringArray1 = new String[2];
      linkedList0.add((DataInputStream) null);
      stringArray1[0] = "?l4BWG";
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      vector0.add(dataInputStream1);
      DataInputStream dataInputStream2 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream2);
      linkedList0.add(dataInputStream3);
      stringArray1[1] = "{K";
      archiveScanner0.setIncludes(stringArray1);
      DataInputStream dataInputStream4 = new DataInputStream(dataInputStream2);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "?l4BWG", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{K");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{K";
      stringArray0[1] = "{K";
      stringArray0[2] = "{K";
      stringArray0[3] = "{K";
      stringArray0[4] = "{K";
      archiveScanner0.setExcludes(stringArray0);
      Vector<DataInputStream> vector0 = new Vector<DataInputStream>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector1;
      vector0.add(dataInputStream0);
      vector0.listIterator();
      vector0.add((DataInputStream) null);
      LinkedList<DataInputStream> linkedList0 = new LinkedList<DataInputStream>();
      vector0.add((DataInputStream) null);
      linkedList0.add((DataInputStream) null);
      linkedList0.add((DataInputStream) null);
      linkedList0.parallelStream();
      vector0.addAll((Collection<? extends DataInputStream>) linkedList0);
      vector0.parallelStream();
      linkedList0.add((DataInputStream) null);
      String[] stringArray1 = new String[2];
      linkedList0.add((DataInputStream) null);
      stringArray1[0] = "?l4BWG";
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      vector0.add(dataInputStream1);
      DataInputStream dataInputStream2 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream2);
      stringArray1[1] = "{K";
      archiveScanner0.setIncludes(stringArray1);
      DataInputStream dataInputStream4 = new DataInputStream(dataInputStream2);
      System.setCurrentTimeMillis((-3664L));
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "?l4BWG", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "{K";
      ImprovedFile improvedFile0 = new ImprovedFile("{K", "{K");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(&<tZ";
      stringArray0[1] = "(&<tZ";
      stringArray0[2] = "(&<tZ";
      stringArray0[3] = "(&<tZ";
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[4] = "{K";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processFile("aW3NTy0|&L8z");
      System.setCurrentTimeMillis(256);
      archiveScanner0.processArchive(improvedFile0, "@fh2,i}jqF");
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "(&<tZ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("XJ");
      Integer integer0 = new Integer(575);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(575);
      Integer integer2 = new Integer(575);
      linkedList0.add(integer2);
      Integer integer3 = new Integer(12);
      linkedList0.add(integer0);
      Integer integer4 = new Integer(12);
      Integer integer5 = new Integer(12);
      Integer integer6 = new Integer(575);
      linkedList0.add(integer6);
      Integer integer7 = new Integer(12);
      Integer integer8 = new Integer((-91134838));
      Integer integer9 = new Integer(12);
      Integer integer10 = new Integer((-2153));
      Integer integer11 = new Integer((-91134838));
      linkedList0.add(integer11);
      linkedList0.add(integer5);
      linkedList0.add(integer6);
      Integer integer12 = new Integer(12);
      Integer integer13 = new Integer((-2153));
      Integer integer14 = new Integer(50);
      Integer integer15 = new Integer(575);
      Integer integer16 = new Integer((-2153));
      Integer integer17 = new Integer(575);
      linkedList0.add(integer17);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XJ";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "XJ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{K", "{K");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(&<tZ";
      stringArray0[1] = "(&<tZ";
      stringArray0[2] = "(&<tZ";
      stringArray0[3] = "(&<tZ";
      stringArray0[4] = "{K";
      archiveScanner0.setExcludes(stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "aW3NTy0|&L8z";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<DataInputStream> vector0 = new Vector<DataInputStream>();
      archiveScanner0.filesIncluded = vector0;
      stringArray1[1] = "(&<tZ";
      stringArray1[2] = "{K";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      archiveScanner0.setIncludes(stringArray1);
      System.setCurrentTimeMillis(256);
      archiveScanner0.processFile("aW3NTy0|&L8z");
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("(&<tZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{K", "{K");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.write(6);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 6);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      pipedOutputStream0.close();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream1.mark(0);
      ImprovedFile improvedFile1 = new ImprovedFile("{K");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      pipedOutputStream0.close();
      vector0.add((InputStream) pipedInputStream0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector1;
      DirectoryScanner.matchPath("{K", "{K");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".+SR";
      stringArray0[1] = ", the call to create the directory failed.";
      stringArray0[2] = "*qWaU[I{{r5";
      stringArray0[3] = ".+SR";
      stringArray0[4] = "{K";
      archiveScanner0.setExcludes(stringArray0);
      vector1.add((InputStream) pipedInputStream0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile1, ", the call to create the directory failed.", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("XK");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "XK";
      stringArray0[1] = "XK";
      stringArray0[2] = "XK";
      stringArray0[3] = "XK";
      stringArray0[4] = "XK";
      archiveScanner0.setExcludes(stringArray0);
      Vector<DataInputStream> vector0 = new Vector<DataInputStream>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      archiveScanner0.isExcluded("XK");
      vector0.add(dataInputStream0);
      vector0.add((DataInputStream) null);
      LinkedList<DataInputStream> linkedList0 = new LinkedList<DataInputStream>();
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector1;
      vector0.add((DataInputStream) null);
      linkedList0.add((DataInputStream) null);
      linkedList0.add((DataInputStream) null);
      vector0.addAll((Collection<? extends DataInputStream>) linkedList0);
      linkedList0.add((DataInputStream) null);
      String[] stringArray1 = new String[2];
      linkedList0.add((DataInputStream) null);
      stringArray1[0] = "XK";
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream2 = new DataInputStream((InputStream) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("XK");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      vector0.add((DataInputStream) null);
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream2);
      linkedList0.add(dataInputStream3);
      stringArray1[1] = "XK";
      archiveScanner0.setIncludes(stringArray1);
      DataInputStream dataInputStream4 = new DataInputStream(dataInputStream3);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "XK", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("<");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      archiveScanner0.excludes = stringArray0;
      stringArray0[1] = "<";
      stringArray0[2] = "<";
      stringArray0[3] = "<";
      stringArray0[4] = "<";
      stringArray0[5] = "<";
      archiveScanner0.setExcludes(stringArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      archiveScanner0.toFileType(improvedFile0);
      improvedFile0.createNewFile();
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String string0 = ".zip";
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("H7m=xK7ya`");
      Integer integer0 = new Integer((-369346479));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.write(6);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 6);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "H7m=xK7ya`";
      stringArray0[1] = "H7m=xK7ya`";
      stringArray0[2] = "H7m=xK7ya`";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsIncluded = vector0;
      pushbackInputStream0.mark(2589);
      stringArray0[3] = "H7m=xK7ya`";
      ImprovedFile.buildName("H7m=xK7ya`", 3714L, "H7m=xK7ya`", improvedFile0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pipedInputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)2;
      vector0.add((InputStream) sequenceInputStream0);
      DirectoryScanner.matchPatternStart("H7m=xK7ya`", "H7m=xK7ya`");
      stringArray0[4] = ".EAR";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      System.setCurrentTimeMillis(31);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("H7m=xK7ya`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("<");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<DataInputStream> vector0 = new Vector<DataInputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<";
      stringArray0[1] = "<";
      stringArray0[2] = "<";
      stringArray0[3] = "<";
      stringArray0[4] = "<";
      stringArray0[5] = "<";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String string0 = ".zip";
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("<");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String string0 = ".zip";
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Y=0Z-Zx";
      ImprovedFile improvedFile0 = new ImprovedFile(")K{#W~m(0cAgKr.jar", "Y=0Z-Zx");
      boolean boolean0 = DirectoryScanner.matchPath(")K{#W~m(0cAgKr.jar", ")K{#W~m(0cAgKr.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(")K{#W~m(0cAgKr.jar/Y=0Z-Zx");
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      boolean boolean2 = true;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean2);
      vector0.forEach(consumer0);
      vector0.containsAll(vector0);
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) vector0, locale_FilteringMode0);
      vector0.containsAll(list0);
      Object object0 = new Object();
      boolean boolean3 = true;
      boolean boolean4 = false;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean3, boolean4);
      vector0.spliterator();
      boolean boolean5 = false;
      archiveScanner0.haveSlowResults = boolean1;
      archiveScanner0.processDirectory(improvedFile0, string0, boolean5);
      String string1 = "@j4AYKVPS@\\gN&<";
      try { 
        archiveScanner0.scanArchive(improvedFile0, string1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/)K{#W~m(0cAgKr.jar/Y=0Z-Zx
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.55213793531794
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ")K{#!~m(0cAgKr.jar";
      String string1 = "Y=0Z-Zx";
      ImprovedFile improvedFile0 = new ImprovedFile(")K{#!~m(0cAgKr.jar", "Y=0Z-Zx");
      improvedFile0.createTempDir();
      Vector<Object> vector0 = new Vector<Object>();
      DirectoryScanner.matchPath(")K{#!~m(0cAgKr.jar", ")K{#!~m(0cAgKr.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      vector0.add((Object) string0);
      Vector<String> vector1 = new Vector<String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super DataInputStream, ?>) function0);
      vector0.replaceAll(unaryOperator0);
      vector0.addAll((Collection<?>) vector1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(")K{#!~m(0cAgKr.jar/Y=0Z-Zx/tempdir0");
      FileSystemHandling.createFolder(evoSuiteFile0);
      archiveScanner0.dirsNotIncluded = vector1;
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string2 = "qqQ[oQJ*G7Jw3^}~\\";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      vector1.forEach(consumer0);
      vector1.containsAll(vector1);
      Vector<Locale.LanguageRange> vector2 = new Vector<Locale.LanguageRange>();
      boolean boolean0 = vector1.containsAll(vector0);
      Vector<Locale.LanguageRange> vector3 = new Vector<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) vector3, (Collection<String>) linkedList0, locale_FilteringMode0);
      Object object0 = new Object();
      Object object1 = new Object();
      vector0.add((Object) vector1);
      DirectoryScanner.match(string0, string1);
      String string3 = "{n3uz}2,3ZB,bHMr?_*";
      boolean boolean1 = true;
      archiveScanner0.scandir(improvedFile0, string3, boolean1);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("H7m=xK7ya`");
      Integer integer0 = new Integer((-369346479));
      Integer integer1 = new Integer((-369346479));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-369346479));
      Integer integer3 = new Integer((-121));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer4 = new Integer((-1234));
      Integer integer5 = new Integer(15);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.add(integer2);
      Integer integer6 = new Integer((-1234));
      Integer integer7 = new Integer(8);
      Integer integer8 = new Integer((-81514126));
      linkedList0.add(integer2);
      Integer integer9 = new Integer((-242143256));
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2$yM_";
      stringArray0[1] = "H7m=xK7ya`";
      stringArray0[2] = "H7m=xK7ya`";
      stringArray0[3] = "H7m=xK7ya`";
      stringArray0[4] = "H7m=xK7ya`";
      stringArray0[5] = "H7m=xK7ya`";
      stringArray0[6] = "H7m=xK7ya`";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.filesExcluded = vector0;
      stringArray0[7] = "H7m=xK7ya`";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processArchive(improvedFile0, "2$yM_");
      assertEquals("H7m=xK7ya`", improvedFile0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("H7m=xK7ya`");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.write(6);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 6);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "H7m=xK7ya`";
      stringArray0[1] = "H7m=xK7ya`";
      stringArray0[2] = "H7m=xK7ya`";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsIncluded = vector0;
      pushbackInputStream0.mark(6);
      stringArray0[3] = "H7m=xK7ya`";
      ImprovedFile.buildName("H7m=xK7ya`", 3714L, "H7m=xK7ya`", improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "H7m=xK7ya`";
      stringArray1[1] = "H7m=xK7ya`";
      stringArray1[2] = "H7m=xK7ya`";
      stringArray1[3] = "H7m=xK7ya`";
      stringArray1[4] = "H7m=xK7ya`";
      stringArray1[5] = "H7m=xK7ya`";
      stringArray1[6] = "H7m=xK7ya`";
      stringArray1[7] = "H7m=xK7ya`";
      archiveScanner1.setExcludes(stringArray1);
      archiveScanner0.setIncludes(archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS);
      String string0 = "";
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("XK");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "XK";
      stringArray0[1] = "XK";
      stringArray0[2] = "XK";
      stringArray0[3] = "XK";
      stringArray0[4] = "XK";
      archiveScanner0.setExcludes(stringArray0);
      Vector<DataInputStream> vector0 = new Vector<DataInputStream>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      vector0.add(dataInputStream0);
      vector0.add(dataInputStream0);
      vector0.add((DataInputStream) null);
      LinkedList<DataInputStream> linkedList0 = new LinkedList<DataInputStream>();
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector1;
      vector0.add((DataInputStream) null);
      linkedList0.add((DataInputStream) null);
      linkedList0.add((DataInputStream) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.add((DataInputStream) null);
      String[] stringArray1 = new String[2];
      linkedList0.add((DataInputStream) null);
      stringArray1[0] = "?l4BWG";
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream2 = new DataInputStream((InputStream) null);
      vector0.add((DataInputStream) null);
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream2);
      linkedList0.add(dataInputStream3);
      stringArray1[1] = "XK";
      archiveScanner0.setIncludes(stringArray1);
      DataInputStream dataInputStream4 = new DataInputStream(dataInputStream3);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "?l4BWG", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/XK
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      ImprovedFile improvedFile0 = new ImprovedFile(")K{#W~m(0cAgKr.jar", "(&<tZ");
      Vector<Object> vector0 = new Vector<Object>();
      DirectoryScanner.matchPath(")K{#W~m(0cAgKr.jar", ")K{#W~m(0cAgKr.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")K{#W~m(0cAgKr.jar";
      stringArray0[1] = "(&<tZ";
      archiveScanner0.setIncludes(stringArray0);
      URI uRI1 = MockURI.aFileURI;
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector1;
      String string0 = "";
      Vector<String> vector2 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector2;
      try { 
        archiveScanner0.processDirectory(improvedFile0, "", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/)K{#W~m(0cAgKr.jar/(&<tZ
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      ImprovedFile improvedFile0 = new ImprovedFile(")K{#W~m(0cAgKr.jar", "Y=0Z-Zx");
      Vector<Object> vector0 = new Vector<Object>();
      DirectoryScanner.matchPath(")K{#W~m(0cAgKr.jar", ")K{#W~m(0cAgKr.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      MockURI.relativize(uRI0, uRI0);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector1;
      Vector<String> vector2 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector2;
      String string0 = "jrE<j#S";
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Error trying to ascertain the existence of entry, ", "Error trying to ascertain the existence of entry, ");
      Vector<Object> vector0 = new Vector<Object>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.write(2);
      pipedInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 256);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = ArchiveScanner.ARCHIVE;
      Vector<InputStream> vector1 = new Vector<InputStream>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Error trying to ascertain the existence of entry, ";
      stringArray0[1] = "Error trying to ascertain the existence of entry, ";
      stringArray0[2] = "|";
      stringArray0[3] = "Error trying to ascertain the existence of entry, ";
      stringArray0[4] = "Error trying to ascertain the existence of entry, ";
      stringArray0[5] = "Error trying to ascertain the existence of entry, ";
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.filesExcluded = vector1;
      String[] stringArray1 = new String[7];
      stringArray1[0] = "EG;Gd^Z";
      stringArray1[1] = "Error trying to ascertain the existence of entry, ";
      stringArray1[2] = "Error trying to ascertain the existence of entry, ";
      stringArray1[3] = "Error trying to ascertain the existence of entry, ";
      stringArray1[4] = "Error trying to ascertain the existence of entry, ";
      stringArray1[5] = "Error trying to ascertain the existence of entry, ";
      stringArray1[6] = "EG;Gd^Z";
      archiveScanner0.setIncludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(".JAR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.892246898188396
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Error trying to ascertain the existence of entry, ", "Error trying to ascertain the existence of entry, ");
      Vector<Object> vector0 = new Vector<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.write(2);
      pipedOutputStream0.write((-121));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 256);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Error trying to ascertain the existence of entry, ";
      stringArray0[1] = "Error trying to ascertain the existence of entry, ";
      Vector<Integer> vector2 = new Vector<Integer>();
      archiveScanner0.filesExcluded = vector2;
      stringArray0[2] = "Error trying to ascertain the existence of entry, ";
      archiveScanner0.setIncludes(stringArray0);
      ImprovedFile.createTempImprovedFile("=}J", "Error trying to copy file to staging directory.  Input file: ", improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "Error trying to ascertain the existence of entry, ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{K", "{K");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(&<tZ";
      stringArray0[1] = "(&<tZ";
      stringArray0[2] = "(&<tZ";
      stringArray0[3] = "(&<tZ";
      stringArray0[4] = "{K";
      archiveScanner0.setExcludes(stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "3W3NTy0|&L8 6z";
      Vector<DataInputStream> vector0 = new Vector<DataInputStream>();
      vector0.add((DataInputStream) null);
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsNotIncluded = vector1;
      LinkedList<DataInputStream> linkedList0 = new LinkedList<DataInputStream>();
      linkedList0.add((DataInputStream) null);
      vector1.retainAll(archiveScanner0.dirsNotIncluded);
      vector0.clone();
      vector0.addAll((Collection<? extends DataInputStream>) linkedList0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.parallelStream();
      archiveScanner0.filesIncluded = vector0;
      stringArray1[1] = "(&<tZ";
      stringArray1[2] = "{K";
      archiveScanner0.setIncludes(stringArray1);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      vector0.add(dataInputStream0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "3PMEjz@C\"Xb&!i&>p^O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "{K";
      URI uRI0 = MockURI.aFTPURI;
      ImprovedFile improvedFile0 = new ImprovedFile("{K");
      Integer integer0 = new Integer((-369346479));
      Integer integer1 = new Integer((-369346479));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-369346479));
      Integer integer3 = new Integer(8);
      linkedList0.add(integer1);
      Integer integer4 = new Integer(8);
      Integer integer5 = new Integer(8);
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      linkedList0.removeAll(set0);
      linkedList0.add(integer4);
      Integer integer6 = new Integer((-369346479));
      Integer integer7 = new Integer((-369346479));
      Integer integer8 = new Integer((-369346479));
      Integer integer9 = new Integer((-369346479));
      linkedList0.add(integer9);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      DirectoryScanner.matchPatternStart("", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "com.lts.io.ArchiveScanner");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = ")K{#!~m(0cAgKr.jar";
      ImprovedFile improvedFile0 = new ImprovedFile(")K{#!~m(0cAgKr.jar", "Y=0Z-Zx");
      improvedFile0.createTempDir();
      Vector<Object> vector0 = new Vector<Object>();
      DirectoryScanner.matchPath(")K{#!~m(0cAgKr.jar", ")K{#!~m(0cAgKr.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      vector0.add((Object) string0);
      Vector<String> vector1 = new Vector<String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function0 = unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      Object object0 = null;
      unaryOperator0.apply(object0);
      unaryOperator0.compose((Function<? super Object, ?>) function0);
      vector0.replaceAll(unaryOperator0);
      vector0.addAll((Collection<?>) vector1);
      archiveScanner0.dirsNotIncluded = vector1;
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector1.forEach(consumer0);
      vector1.containsAll(vector1);
      Vector<Locale.LanguageRange> vector2 = new Vector<Locale.LanguageRange>();
      String string1 = "289q$X)^ J pF2gZ=I0{K.jar";
      boolean boolean0 = vector1.add(string1);
      Vector<Locale.LanguageRange> vector3 = new Vector<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      improvedFile0.mkdir();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) vector3, (Collection<String>) linkedList0, locale_FilteringMode0);
      Object object1 = new Object();
      Object object2 = new Object();
      vector0.add((Object) vector1);
      String string2 = "%POPO4ne?Nb!ZYlnRyT06.jar";
      boolean boolean1 = true;
      archiveScanner0.processDirectory(improvedFile0, string2, boolean1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\".jar.jar");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("hw5U,e6H#jZg`;U?&}i/63G-m! q5j]");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ImprovedFile improvedFile0 = new ImprovedFile("hw5U,e6H#jZg`;U?&}i", "\".jar.jar");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/foo.bar/AvWYb,c\\f%@E9-2'MHn");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      DirectoryScanner.matchPatternStart("hw5U,e6H#jZg`;U?&}i", "a-[?Gf&[x21g_OxA");
      ImprovedFile.createTempImprovedFile("The directory, ", "X2pyb=RuHX.MA:!", improvedFile0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The directory, ";
      stringArray0[1] = "hw5U,e6H#jZg`;U?&}i";
      stringArray0[2] = "The directory, ";
      stringArray0[3] = "The directory, ";
      stringArray0[4] = "The directory, ";
      stringArray0[5] = "hw5U,e6H#jZg`;U?&}i";
      stringArray0[6] = "\".jar.jar";
      stringArray0[7] = "The directory, ";
      stringArray0[8] = "\".jar.jar";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "The directory, ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile.createTempFile("Jcq7n9yMrE 2a9", "AvYb,c\f@E9-2'MHn.jar", (File) improvedFile0);
      System.setCurrentTimeMillis(0L);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "The directory, ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("XK");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ALZ8";
      stringArray0[1] = "XK";
      stringArray0[2] = "XK";
      archiveScanner0.setExcludes(stringArray0);
      Vector<DataInputStream> vector0 = new Vector<DataInputStream>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      vector0.add(dataInputStream0);
      vector0.listIterator();
      vector0.add(dataInputStream1);
      LinkedList<DataInputStream> linkedList0 = new LinkedList<DataInputStream>();
      vector0.add(dataInputStream1);
      LinkedList<DataInputStream> linkedList1 = new LinkedList<DataInputStream>();
      linkedList1.add((DataInputStream) null);
      linkedList0.add((DataInputStream) null);
      linkedList0.parallelStream();
      vector0.addAll((Collection<? extends DataInputStream>) linkedList1);
      vector0.parallelStream();
      linkedList1.add(dataInputStream0);
      linkedList0.add(dataInputStream1);
      DataInputStream dataInputStream2 = new DataInputStream((InputStream) null);
      vector0.add((DataInputStream) null);
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream1);
      DataInputStream dataInputStream4 = new DataInputStream(dataInputStream3);
      linkedList1.add((DataInputStream) null);
      archiveScanner0.setIncludes(stringArray0);
      DataInputStream dataInputStream5 = new DataInputStream(dataInputStream1);
      System.setCurrentTimeMillis((-3664L));
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "@A'4BWG", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5366777855438347
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = ")K{#!~m(0cAgKr.jar";
      ImprovedFile improvedFile0 = new ImprovedFile(")K{#!~m(0cAgKr.jar", "Y=0Z-Zx");
      improvedFile0.createTempDir();
      Vector<Object> vector0 = new Vector<Object>();
      DirectoryScanner.matchPath(")K{#!~m(0cAgKr.jar", ")K{#!~m(0cAgKr.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      vector0.add((Object) string0);
      Vector<String> vector1 = new Vector<String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function0 = unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      unaryOperator0.compose((Function<? super Object, ?>) function0);
      vector0.replaceAll(unaryOperator0);
      vector0.addAll((Collection<?>) vector1);
      archiveScanner0.dirsNotIncluded = vector1;
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector1.forEach(consumer0);
      vector1.containsAll(vector1);
      Vector<Locale.LanguageRange> vector2 = new Vector<Locale.LanguageRange>();
      String string1 = "289q$X)^ J pF2gZ=I0{K.jar";
      vector1.add(string1);
      Vector<Locale.LanguageRange> vector3 = new Vector<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      improvedFile0.mkdir();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) vector3, (Collection<String>) linkedList0, locale_FilteringMode0);
      Object object0 = new Object();
      Object object1 = new Object();
      vector0.add((Object) vector1);
      String string2 = "%POPO4ne?Nb!ZYlnRyT06.jar";
      boolean boolean0 = false;
      archiveScanner0.processDirectory(improvedFile0, string2, boolean0);
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockURI.URI(".jar");
      MockFile mockFile0 = new MockFile(".jar", ".jar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.setWritable(true, true);
      boolean boolean0 = true;
      ImprovedFile improvedFile0 = new ImprovedFile("_&,z{-sy", ".jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".jar";
      stringArray0[1] = ".jar";
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.isArchive(improvedFile0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = true;
      boolean boolean2 = false;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean0, boolean2);
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{K", "{K");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(&Pt1Z";
      stringArray0[1] = "(&Pt1Z";
      stringArray0[2] = "(&Pt1Z";
      stringArray0[3] = "(&Pt1Z";
      stringArray0[4] = "{K";
      archiveScanner0.setExcludes(stringArray0);
      Vector<DataInputStream> vector0 = new Vector<DataInputStream>();
      vector0.add((DataInputStream) null);
      LinkedList<DataInputStream> linkedList0 = new LinkedList<DataInputStream>();
      vector0.add((DataInputStream) null);
      linkedList0.add((DataInputStream) null);
      linkedList0.add((DataInputStream) null);
      linkedList0.stream();
      vector0.clone();
      linkedList0.parallelStream();
      vector0.addAll((Collection<? extends DataInputStream>) linkedList0);
      vector0.parallelStream();
      String[] stringArray1 = new String[2];
      linkedList0.add((DataInputStream) null);
      stringArray1[0] = "59pj.jfr";
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      vector0.add(dataInputStream0);
      linkedList0.poll();
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      linkedList0.add(dataInputStream1);
      stringArray1[1] = "(&Pt1Z";
      archiveScanner0.setIncludes(stringArray1);
      DataInputStream dataInputStream2 = new DataInputStream((InputStream) null);
      vector0.add(dataInputStream2);
      try { 
        archiveScanner0.scandir(improvedFile0, "<.jar", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/{K/{K
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".EAR0Error getting temp directory for nested archive, .jar");
      Integer integer0 = new Integer((-369346479));
      Integer integer1 = new Integer((-369346479));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-369346479));
      Integer integer3 = new Integer(8);
      linkedList0.add(integer1);
      Integer integer4 = new Integer(8);
      Integer integer5 = new Integer((-81514139));
      Integer integer6 = new Integer((-369346479));
      linkedList0.add(integer6);
      Integer integer7 = new Integer(8);
      Integer integer8 = new Integer((-91134838));
      linkedList0.add(integer0);
      Integer integer9 = new Integer(8);
      Integer integer10 = new Integer((-2155));
      linkedList0.add(integer5);
      linkedList0.add(integer6);
      Integer integer11 = new Integer(3198);
      Integer integer12 = new Integer((-2155));
      Integer integer13 = new Integer(63);
      Integer integer14 = new Integer((-81514139));
      linkedList0.add(integer14);
      Integer integer15 = new Integer(8);
      Integer integer16 = new Integer((-2155));
      linkedList0.add(integer7);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.listIterator();
      vector0.containsAll(linkedList0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Locale.LanguageRange> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = function2.andThen((Function<? super Locale.LanguageRange, ? extends String>) function3);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function4.andThen((Function<? super String, ? extends String>) function4);
      function2.compose((Function<? super Locale.LanguageRange, ?>) function0);
      function0.apply(unaryOperator1);
      vector0.add("Pang,;");
      Function<Object, Locale.LanguageRange> function5 = unaryOperator1.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function2);
      Function.identity();
      Function.identity();
      function4.compose((Function<? super String, ?>) function0);
      UnaryOperator.identity();
      unaryOperator1.apply("");
      Function<String, String> function6 = Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) function6);
      unaryOperator0.compose((Function<? super Object, ?>) function4);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function7).apply(any());
      Function.identity();
      Function<Object, Integer> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function7);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator3);
      Function<Object, Object> function9 = unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator3);
      function8.compose((Function<? super Object, ?>) function9);
      function8.apply(vector0);
      function5.andThen((Function<? super Locale.LanguageRange, ? extends Integer>) function8);
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Locale.LanguageRange> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = function2.andThen((Function<? super Locale.LanguageRange, ? extends String>) function3);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function4.andThen((Function<? super String, ? extends String>) function4);
      function2.compose((Function<? super Locale.LanguageRange, ?>) function0);
      function0.apply(unaryOperator1);
      vector0.add("Pang,;");
      Function<Object, Locale.LanguageRange> function5 = unaryOperator1.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function2);
      Function.identity();
      Function.identity();
      function4.compose((Function<? super String, ?>) function0);
      UnaryOperator.identity();
      unaryOperator1.apply("");
      Function<String, String> function6 = Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) function6);
      unaryOperator0.compose((Function<? super Object, ?>) function4);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function7).apply(any());
      Function.identity();
      Function<Object, Integer> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function7);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator3);
      Function<Object, Object> function9 = unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator3);
      function8.compose((Function<? super Object, ?>) function9);
      function8.apply(vector0);
      function5.andThen((Function<? super Locale.LanguageRange, ? extends Integer>) function8);
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive(improvedFile0, "}{BK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("<");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String[] stringArray0 = new String[0];
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      archiveScanner0.isArchive(improvedFile0);
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{K", "{K");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int0 = (-1936);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.isArchive(improvedFile0);
      PipedOutputStream pipedOutputStream1 = null;
      // Undeclared exception!
      try { 
        pipedInputStream0.connect(pipedOutputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Locale.LanguageRange> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = function2.andThen((Function<? super Locale.LanguageRange, ? extends String>) function3);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function4.andThen((Function<? super String, ? extends String>) function4);
      Function<Object, Object> function5 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      function2.compose((Function<? super Locale.LanguageRange, ?>) function5);
      function0.apply(unaryOperator1);
      vector0.add("Pa\"0Vg,Z");
      unaryOperator1.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function2);
      Function.identity();
      Function.identity();
      function4.compose((Function<? super String, ?>) function0);
      UnaryOperator.identity();
      unaryOperator1.apply("xaWXk");
      Function<String, String> function6 = Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) function6);
      unaryOperator0.compose((Function<? super Object, ?>) function4);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function7).apply(any());
      Function.identity();
      Function<Object, Integer> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function7);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, Object> function9 = unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator3);
      Function.identity();
      function8.compose((Function<? super Object, ?>) function9);
      function8.apply(vector0);
      ImprovedFile improvedFile0 = new ImprovedFile("xaWXk", "xaWXk");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(&Pt1Z";
      stringArray0[1] = "(&Pt1Z";
      stringArray0[2] = "(&Pt1Z";
      Vector<DataInputStream> vector0 = new Vector<DataInputStream>();
      vector0.setSize(33);
      vector0.add((DataInputStream) null);
      LinkedList<DataInputStream> linkedList0 = new LinkedList<DataInputStream>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      vector0.removeElement(dataInputStream1);
      vector0.add(dataInputStream0);
      DataInputStream dataInputStream2 = new DataInputStream((InputStream) null);
      linkedList0.add(dataInputStream2);
      linkedList0.add(dataInputStream2);
      LinkedList<DataInputStream> linkedList1 = new LinkedList<DataInputStream>();
      linkedList1.stream();
      vector0.clone();
      linkedList1.parallelStream();
      vector0.addAll((Collection<? extends DataInputStream>) linkedList0);
      vector0.parallelStream();
      linkedList0.add((DataInputStream) null);
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream2);
      vector0.add((DataInputStream) null);
      linkedList0.poll();
      DataInputStream dataInputStream4 = new DataInputStream((InputStream) null);
      linkedList1.add((DataInputStream) null);
      DataInputStream dataInputStream5 = new DataInputStream(dataInputStream2);
      vector0.add(dataInputStream2);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Locale.LanguageRange> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = function2.andThen((Function<? super Locale.LanguageRange, ? extends String>) function3);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function4.andThen((Function<? super String, ? extends String>) function4);
      function2.compose((Function<? super Locale.LanguageRange, ?>) function0);
      function0.apply(unaryOperator1);
      vector0.add("Pan0_g,;");
      Function<Object, Locale.LanguageRange> function5 = unaryOperator1.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function2);
      Function<String, String> function6 = Function.identity();
      Function.identity();
      function4.compose((Function<? super String, ?>) function0);
      UnaryOperator.identity();
      unaryOperator1.apply("");
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) function6);
      unaryOperator0.compose((Function<? super Object, ?>) function4);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function7).apply(any());
      Function.identity();
      Function<Object, Integer> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function7);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, Object> function9 = unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator3);
      Function.identity();
      function8.compose((Function<? super Object, ?>) function9);
      function8.apply(vector0);
      function5.andThen((Function<? super Locale.LanguageRange, ? extends Integer>) function8);
      Object object0 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("{K");
      Integer integer0 = new Integer((-369346479));
      Integer integer1 = new Integer((-369346479));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-16519105));
      Integer integer3 = new Integer(8);
      linkedList0.add(integer1);
      Integer integer4 = new Integer(8);
      Integer integer5 = new Integer((-16519105));
      linkedList0.add(integer5);
      Integer integer6 = new Integer((-16519105));
      Integer integer7 = new Integer(155);
      linkedList0.add(integer5);
      Integer integer8 = new Integer(3198);
      Integer integer9 = new Integer(155);
      Integer integer10 = new Integer(8);
      Integer integer11 = new Integer(3198);
      Integer integer12 = new Integer(63);
      linkedList0.add(integer6);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.containsAll(vector0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }
}
