/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 18:36:39 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.594846045286933
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.addElement("!dD/`67O@)@ms5");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm1.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm1.addElement(jSTerm0);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2, jSSubstitution1);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm2);
      jSTerm1.equals(jSTerm1);
      jSTerm3.spliterator();
      JSSubstitution jSSubstitution4 = jSTerm3.matches(jSTerm1, jSSubstitution1);
      jSSubstitution0.addAll((Collection) jSTerm3);
      jSTerm3.matches(jSTerm0, jSSubstitution1);
      jSTerm2.matches(jSTerm1, jSSubstitution2);
      jSSubstitution2.addAll((Collection) jSSubstitution4);
      JSJshopVars.rightPar = 1275;
      jSSubstitution3.removeAll(jSSubstitution2);
      jSSubstitution3.standarizerSubs();
      jSSubstitution2.trimToSize();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm3.applySubstitutionT((JSSubstitution) null);
      jSTerm1.standardizerTerm();
      assertEquals("[!dD/`67O@)@ms5, [!dD/`67O@)@ms5]]", jSTerm1.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7749180265853273
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement("!dD/`67O@)@ms5");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.trimToSize();
      jSTerm1.addElement("yZSGSn.t.O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("yZSGSn.t.O");
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.addElement("yZSGSn.t.O");
      jSTerm2.forEach(consumer0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm3.removeElement(iterator0);
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      jSTerm0.matches(jSTerm2);
      jSTerm3.equals(jSTerm0);
      jSTerm4.matches(jSTerm1);
      jSTerm0.call();
      jSTerm4.cloneT();
      jSTerm2.matches(jSTerm0);
      jSTerm4.standardizerTerm();
      jSTerm4.matches(jSTerm1, jSSubstitution0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm4.standardizerTerm();
      jSTerm3.forEach(consumer1);
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7016458301569415
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement("expecting");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.addElement(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.addElement("yZSGSn..O");
      jSSubstitution0.removeElement(jSTerm0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm3.removeElement(iterator0);
      jSTerm0.matches(jSTerm2);
      jSTerm3.equals(jSTerm0);
      jSTerm4.matches(jSTerm1);
      jSTerm1.iterator();
      jSTerm1.call();
      jSTerm4.call();
      jSTerm3.standardizerTerm();
      JSTerm jSTerm5 = jSTerm4.standardizerTerm();
      jSTerm0.call();
      jSTerm4.cloneT();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0);
      jSTerm4.standardizerTerm();
      jSTerm4.matches(jSTerm1, jSSubstitution0);
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm6 = jSTerm3.cloneT();
      jSTerm0.matches(jSTerm2);
      jSTerm3.equals(jSTerm4);
      jSTerm1.matches(jSTerm1, jSSubstitution0);
      jSTerm5.matches(jSTerm6, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7982566881555564
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement("!dD/`67O@)@ms5");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.trimToSize();
      jSTerm1.addElement("yZSGSn.t.O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("yZSGSn.t.O");
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.addElement(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.addElement("yZSGSn.t.O");
      jSSubstitution0.removeElement(jSTerm0);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm0.removeElement(iterator0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.matches(jSTerm2);
      jSTerm0.equals(jSTerm0);
      jSTerm3.matches(jSTerm1);
      jSTerm0.call();
      jSTerm3.cloneT();
      jSTerm2.matches(jSTerm0);
      jSTerm3.standardizerTerm();
      jSTerm3.matches(jSTerm1, jSSubstitution0);
      jSTerm2.equals(jSTerm1);
      jSTerm0.cloneT();
      jSTerm0.matches(jSTerm2);
      jSTerm1.equals(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.780591922909414
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement("!dD/`67O@)@ms5");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.trimToSize();
      jSTerm1.addElement("yZSGSn..O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.addElement(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.addElement("yZSGSn..O");
      jSTerm2.forEach(consumer0);
      jSSubstitution0.removeElement(jSTerm0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm3.removeElement(iterator0);
      jSTerm0.matches(jSTerm2);
      jSTerm3.equals(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.standardizerTerm();
      jSTerm0.call();
      jSTerm4.cloneT();
      jSTerm2.matches(jSTerm0);
      jSTerm4.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm4.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.647354537786038
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement("efpecing");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.trimToSize();
      jSTerm1.addElement("yZSGSn..O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.addElement(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.addElement("yZSGSn..O");
      jSSubstitution0.removeElement(jSTerm0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm3.removeElement(iterator0);
      jSTerm0.matches(jSTerm2);
      jSTerm3.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm4.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2383497075834473
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(?");
      stringReader0.ready();
      SystemInUtil.addInputLine("(?");
      SystemInUtil.addInputLine("(s68%(E&3iEus Xq}");
      StringReader stringReader1 = new StringReader("?_Zf(");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("(?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(620L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5669029451519165
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      Predicate.isEqual((Object) "{C4''W'[$-P8f.r{B$");
      jSTerm0.addElement("yZSGSn.t.O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.addElement("{C4''W'[$-P8f.r{B$");
      JSTerm jSTerm4 = jSTerm2.cloneT();
      JSTerm jSTerm5 = jSTerm3.cloneT();
      jSTerm2.matches(jSTerm5, jSSubstitution0);
      jSTerm1.matches(jSTerm2);
      jSTerm3.matches(jSTerm4, jSSubstitution0);
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm3.isFunction());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6237180760658338
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(c");
      stringReader0.markSupported();
      int int0 = 119;
      streamTokenizer0.quoteChar(119);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.iterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7699255434995624
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("%hRej");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate6);
      Predicate<Object> predicate8 = predicate0.and(predicate4);
      Predicate<Object> predicate9 = predicate2.and(predicate7);
      predicate7.or(predicate9);
      Predicate<Object> predicate10 = predicate6.or(predicate3);
      Predicate<Object> predicate11 = predicate4.negate();
      predicate10.negate();
      Predicate<Object> predicate12 = predicate9.or(predicate8);
      predicate6.or(predicate12);
      Predicate<Object> predicate13 = predicate8.negate();
      predicate9.test("%hRej");
      Predicate<Object> predicate14 = predicate5.negate();
      Predicate<Object> predicate15 = predicate13.and(predicate14);
      predicate9.or(predicate13);
      Predicate<Object> predicate16 = predicate5.and(predicate11);
      predicate16.or(predicate15);
      predicate2.negate();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.cloneS();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      jSTerm2.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.840525888227093
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("%%%");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate0.and(predicate0);
      Predicate<Object> predicate8 = predicate2.and(predicate6);
      predicate5.or(predicate3);
      Predicate<Object> predicate9 = predicate3.negate();
      predicate7.negate();
      predicate8.or(predicate7);
      Predicate<Object> predicate10 = predicate7.negate();
      predicate8.test("%%%");
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate10.and(predicate11);
      predicate8.or(predicate10);
      Predicate<Object> predicate13 = predicate4.and(predicate9);
      predicate13.test(predicate2);
      predicate13.or(predicate12);
      jSTerm1.clear();
      predicate2.negate();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.cloneS();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3300932728301085
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement(iterator0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(iterator0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.makeVariable();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm4.applySubstitutionT(jSSubstitution5);
      assertTrue(jSTerm2.isVariable());
      
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "{C4''W'[$-P8f.r{B$");
      jSTerm0.addElement("yZSGSn.t.O");
      Predicate<String> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate4);
      predicate3.test("{C4''W'[$-P8f.r{B$");
      predicate3.test("equal");
      Predicate<Object> predicate7 = predicate6.and(predicate4);
      Predicate<Object> predicate8 = predicate2.or(predicate7);
      Predicate<String> predicate9 = predicate1.and(predicate0);
      predicate6.or(predicate5);
      predicate2.and(predicate6);
      predicate3.or(predicate8);
      predicate1.negate();
      StringReader stringReader0 = new StringReader("D\"jWo");
      jSTerm0.addElement(predicate9);
      StringReader stringReader1 = new StringReader("t|} (3_*K&jfmr");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis((-1837L));
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$49/2112488015 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(?");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.nextToken();
      streamTokenizer1.whitespaceChars(2392, (-4));
      streamTokenizer0.whitespaceChars(2392, (-3255));
      streamTokenizer1.slashStarComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer2.pushBack();
      streamTokenizer2.sval = null;
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer2.commentChar(40);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.346960310867515
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      LinkedList<JSSubstitution> linkedList0 = new LinkedList<JSSubstitution>();
      jSTerm0.removeAll(linkedList0);
      jSTerm0.addElement(iterator0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(iterator0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSJshopVars.interrogation = 42;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      System.setCurrentTimeMillis(562L);
      StringReader stringReader0 = new StringReader("Expecting Term");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      assertEquals(1, jSTerm1.size());
      
      jSTerm3.toStr();
      assertTrue(jSTerm0.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.742683459035243
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("%%%");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate6);
      Predicate<Object> predicate8 = predicate0.and(predicate4);
      Predicate<Object> predicate9 = predicate2.and(predicate7);
      Predicate<Object> predicate10 = predicate6.or(predicate3);
      Predicate<Object> predicate11 = predicate4.negate();
      predicate10.negate();
      predicate9.or(predicate8);
      Predicate<Object> predicate12 = predicate8.negate();
      predicate9.test("%%%");
      Predicate<Object> predicate13 = predicate9.negate();
      Predicate<Object> predicate14 = predicate12.and(predicate13);
      predicate9.or(predicate12);
      Predicate<Object> predicate15 = predicate5.and(predicate11);
      predicate15.test(predicate2);
      predicate15.or(predicate14);
      predicate2.negate();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.cloneS();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm2);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSTerm1.isVariable());
      
      jSTerm2.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertNotSame(jSTerm0, jSTerm3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.874997302691067
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement("!dD/`67O@)@ms5");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.trimToSize();
      jSTerm0.makeVariable();
      jSTerm1.addElement("yZSGSn.t.O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("yZSGSn.t.O");
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm2.addElement("yZSGSn.t.O");
      jSSubstitution0.removeElement(jSTerm0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm3.removeElement(iterator0);
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      jSTerm0.matches(jSTerm2);
      jSTerm3.equals(jSTerm0);
      jSTerm4.matches(jSTerm1);
      jSTerm0.call();
      jSTerm4.cloneT();
      jSTerm2.matches(jSTerm0);
      jSTerm4.standardizerTerm();
      jSTerm4.matches(jSTerm1, jSSubstitution0);
      jSTerm2.equals(jSTerm1);
      jSTerm3.cloneT();
      jSTerm0.matches(jSTerm2);
      jSTerm3.equals(jSTerm4);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7980360106756934
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement("!dD/`67O@)@ms5");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.trimToSize();
      jSTerm1.addElement("yZSGSn.t.O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("yZSGSn.t.O");
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.forEach(consumer0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm3.removeElement(iterator0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm3, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      jSTerm0.matches(jSTerm2);
      boolean boolean0 = jSTerm3.equals(jSTerm0);
      jSTerm4.matches(jSTerm1);
      JSTerm jSTerm5 = jSTerm0.call();
      assertTrue(jSTerm5.isFunction());
      
      jSTerm4.cloneT();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm0);
      assertTrue(jSSubstitution2.fail());
      
      jSTerm4.standardizerTerm();
      JSSubstitution jSSubstitution3 = jSTerm4.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution3.fail());
      
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm4.standardizerTerm();
      jSTerm3.forEach(consumer1);
      boolean boolean1 = jSTerm2.equals(jSTerm1);
      assertTrue(jSTerm2.isFunction());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSJshopVars.colon = (-1405);
      JSJshopVars.greaterT = (-1405);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2413);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate0);
      predicate2.or(predicate5);
      Predicate<String> predicate8 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate1.and(predicate3);
      predicate9.negate();
      Predicate<String> predicate11 = predicate8.and(predicate1);
      predicate4.and(predicate3);
      predicate2.or(predicate10);
      Predicate<String> predicate12 = predicate8.or(predicate11);
      predicate11.and(predicate0);
      predicate12.negate();
      jSTerm0.addElement("?.]kFJDTCn[( WC/F");
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(?");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("(");
      StringReader stringReader2 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.463945909837186
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement(iterator0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(iterator0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      System.setCurrentTimeMillis(521L);
      StringReader stringReader0 = new StringReader("Expecting Term");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      assertEquals(1, jSTerm1.size());
      
      JSJshopVars.colon = 59;
      jSTerm2.isGround();
      jSTerm2.standardizerTerm();
      assertTrue(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6717110427504682
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement(iterator0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(iterator0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm0.addElement(jSTerm4);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm6 = jSTerm2.standardizerTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm6.replaceAll(unaryOperator0);
      jSTerm6.call();
      jSTerm4.print();
      assertEquals(1, jSTerm1.size());
      
      jSTerm5.cloneT();
      assertTrue(jSTerm0.equals((Object)jSTerm5));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.442844995360599
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement(iterator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      JSJshopVars.backquote = (-920);
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.print();
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.removeAllElements();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm4.isFunction());
      
      JSTerm jSTerm5 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm4));
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm5.isEval());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      jSTerm0.addElement(jSSubstitution1);
      jSTerm0.cloneT();
      JSJshopVars.interrogation = 44;
      JSJshopVars.astherisk = 2147483645;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSJshopVars.plus = 2147483645;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5798997132995725
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement(iterator0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(iterator0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm1.cloneT();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.isGround();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm1.standardizerTerm();
      jSTerm0.addElement(jSTerm5);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution5);
      jSTerm0.applySubstitutionT(jSSubstitution4);
      jSTerm3.cloneT();
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm3.equals((Object)jSTerm5));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.514034501044072
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      stringReader0.mark(2293);
      jSTerm0.addElement("Y");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isFunction());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.isVariable();
      jSTerm2.call();
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.605432419236112
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("%%%");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isVariable());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate6);
      Predicate<Object> predicate8 = predicate0.and(predicate4);
      Predicate<Object> predicate9 = predicate2.and(predicate7);
      Predicate<Object> predicate10 = predicate2.negate();
      Predicate<Object> predicate11 = predicate4.negate();
      predicate10.negate();
      predicate9.or(predicate8);
      Predicate<Object> predicate12 = predicate8.negate();
      predicate9.test("%%%");
      Predicate<Object> predicate13 = predicate9.negate();
      Predicate<Object> predicate14 = predicate12.and(predicate13);
      predicate9.or(predicate12);
      Predicate<Object> predicate15 = predicate5.and(predicate11);
      predicate15.test(predicate2);
      predicate15.or(predicate14);
      predicate2.negate();
      jSTerm1.makeVariable();
      jSSubstitution0.cloneS();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.call();
      assertFalse(jSTerm1.isFunction());
      
      jSTerm2.standardizerTerm();
      jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5528475600451452
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement(iterator0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(iterator0);
      jSTerm1.cloneT();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm0.addElement(jSTerm3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      SystemInUtil.addInputLine(") ");
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm4.toStr();
      assertEquals(1, jSTerm1.size());
      
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm5.equals((Object)jSTerm0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("c");
      StringReader stringReader2 = new StringReader("as");
      StringReader stringReader3 = new StringReader("list ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.lowerCaseMode(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%.O{&A$f2v$:!");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.setSize(96);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 126;
      jSTerm0.setSize(126);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7778426412725379
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("V|#395QJf[.)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.stream();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.pushBack();
      jSTerm0.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(126);
      System.setCurrentTimeMillis(833L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("%%%");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      predicate2.test("%%%");
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate6);
      Predicate<Object> predicate8 = predicate0.and(predicate4);
      Predicate<Object> predicate9 = predicate2.and(predicate7);
      Predicate<Object> predicate10 = predicate6.or(predicate3);
      predicate4.negate();
      predicate10.negate();
      predicate9.or(predicate8);
      predicate8.negate();
      predicate9.test("%%%");
      predicate9.negate();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.replaceAll(unaryOperator0);
      Integer integer0 = new Integer(46);
      jSTerm1.addElement(integer0);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 126;
      jSTerm0.setSize(126);
      System.setCurrentTimeMillis(833L);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0608333657846836
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      String string0 = "!dD/`67O@)@ms5";
      jSTerm0.addElement("!dD/`67O@)@ms5");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.trimToSize();
      jSTerm1.addElement("yZSGSn..O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addElement(iterator0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.389305951313833
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement(iterator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm2.isVariable());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.makeVariable();
      assertTrue(jSTerm1.isVariable());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.standardizerTerm();
      assertTrue(jSTerm0.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.328811135389218
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "%%%");
      predicate0.test("%%%");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate.isEqual((Object) "\"R=8FBi^&Y<TWwGDx&");
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate3.negate();
      predicate5.test(predicate0);
      Predicate<Object> predicate9 = predicate8.or(predicate2);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate5.negate();
      Predicate<Object> predicate11 = predicate6.negate();
      predicate9.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      Predicate<Object> predicate13 = predicate11.or(predicate12);
      Predicate<Object> predicate14 = predicate13.negate();
      Predicate<Object> predicate15 = predicate2.negate();
      Predicate<Object> predicate16 = predicate9.and(predicate15);
      Predicate<Object> predicate17 = predicate16.or(predicate6);
      predicate4.test(predicate1);
      predicate7.test(predicate17);
      Predicate<String> predicate18 = Predicate.isEqual((Object) "%%%");
      Predicate<Object> predicate19 = predicate15.negate();
      Predicate<Object> predicate20 = predicate10.and(predicate19);
      predicate0.negate();
      Predicate<Object> predicate21 = predicate7.negate();
      predicate18.and(predicate21);
      Predicate<Object> predicate22 = predicate9.and(predicate14);
      predicate6.or(predicate20);
      predicate14.negate();
      jSTerm0.addElement(predicate22);
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$49/2112488015 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.dot = 10;
      StringReader stringReader0 = new StringReader("(?");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer2.whitespaceChars(2392, (-4));
      streamTokenizer1.nval = 0.0;
      streamTokenizer2.slashStarComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = 0.0;
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer3.pushBack();
      streamTokenizer3.sval = null;
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer3.commentChar((-4));
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.548288354496929
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.addElement("!dD/`67O@)@ms5");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.trimToSize();
      jSTerm1.addElement("yZSGSn.t.O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("yZSGSn.t.O");
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.addElement("yZSGSn.t.O");
      jSTerm2.forEach(consumer0);
      jSTerm3.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(126);
      StringReader stringReader0 = new StringReader("%G\"r(5[vBG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      jSTerm0.clone();
      streamTokenizer0.resetSyntax();
      System.setCurrentTimeMillis(126);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.326620058651022
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.capacity();
      stringReader0.ready();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("Expecting ", stringBuffer0.toString());
      
      jSTerm0.isConstant();
      char[] charArray0 = new char[8];
      charArray0[1] = 'S';
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement(iterator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.843031640589932
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nextToken();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      jSTerm0.isConstant();
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      jSTerm0.iterator();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.addElement(stringBuffer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.toStr();
      System.setCurrentTimeMillis(32);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm3.matches(jSTerm5, jSSubstitution0);
      jSTerm1.matches(jSTerm4);
      // Undeclared exception!
      try { 
        jSTerm5.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate0);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<String> predicate10 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate12 = predicate3.and(predicate11);
      predicate5.and(predicate4);
      Predicate<String> predicate13 = predicate10.negate();
      Predicate<Object> predicate14 = predicate5.negate();
      Predicate<Object> predicate15 = predicate2.or(predicate9);
      predicate15.negate();
      Predicate.isEqual((Object) predicate11);
      Predicate<Object> predicate16 = predicate7.negate();
      predicate16.test(predicate5);
      Predicate<Object> predicate17 = predicate11.or(predicate12);
      Predicate<String> predicate18 = predicate10.negate();
      Predicate<Object> predicate19 = predicate15.or(predicate0);
      Predicate<Object> predicate20 = Predicate.isEqual((Object) predicate17);
      predicate19.negate();
      Predicate<String> predicate21 = predicate13.and(predicate18);
      predicate8.and(predicate19);
      Predicate<Object> predicate22 = predicate20.or(predicate16);
      predicate18.or(predicate1);
      predicate21.negate();
      StringReader stringReader0 = new StringReader("(s|%(E&iEus Xq}");
      jSTerm0.addElement(predicate14);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate23 = predicate22.and(predicate2);
      jSTerm0.addElement(predicate23);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$49/2112488015 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0625752316533053
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "{C4''W'[$-P8f.r{B$");
      jSTerm0.addElement("yZSGSn.t.O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "{C4''W'[$-P8f.r{B$");
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate2.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate3);
      predicate5.negate();
      Predicate<String> predicate7 = predicate0.or(predicate6);
      predicate7.or(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(126);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.lastElement();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElement(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%zUw]}OABjd[R+Tg");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      System.setCurrentTimeMillis((-3));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.027090428983503
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.matches(jSTerm1);
      jSTerm0.toStr();
      System.setCurrentTimeMillis(0L);
      jSTerm1.print();
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis(4075L);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2);
      assertFalse(jSSubstitution2.fail());
      
      jSSubstitution0.clone();
      JSTerm jSTerm4 = jSTerm1.call();
      JSTerm jSTerm5 = jSTerm4.standardizerTerm();
      jSTerm1.toStr();
      jSTerm1.toStr();
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals(4, stringBuffer0.length());
      
      jSTerm5.isGround();
      assertFalse(jSTerm5.isFunction());
      
      boolean boolean0 = jSTerm3.isGround();
      assertTrue(boolean0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm2);
      assertTrue(jSTerm3.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5056091725408716
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(32);
      JSJshopVars.slash = 32;
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "%%%");
      predicate0.test("%%%");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate.isEqual((Object) "\"R=8FBi^&Y<TWwGDx&");
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      predicate2.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      predicate4.test(predicate0);
      Predicate<Object> predicate7 = predicate6.or(predicate2);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate4.negate();
      Predicate<Object> predicate9 = predicate5.negate();
      predicate8.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate9.or(predicate10);
      predicate11.negate();
      Predicate<Object> predicate12 = predicate2.negate();
      Predicate<Object> predicate13 = predicate7.and(predicate12);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate0);
      predicate13.or(predicate14);
      Predicate<Object> predicate15 = predicate13.or(predicate5);
      predicate3.test(predicate1);
      Predicate<String> predicate16 = Predicate.isEqual((Object) "%%%");
      Predicate<Object> predicate17 = predicate3.negate();
      predicate15.and(predicate0);
      predicate17.negate();
      Predicate<Object> predicate18 = predicate10.negate();
      predicate16.and(predicate5);
      predicate2.and(predicate0);
      predicate0.or(predicate10);
      predicate18.negate();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.plus = 2294;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.listIterator();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution4 = jSSubstitution0.standarizerSubs();
      jSSubstitution4.trimToSize();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4512207483496162
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement("!dD/`67O@)@ms5");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm1.trimToSize();
      jSTerm1.addElement("yZSGSn.t.O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.addElement(jSTerm0);
      JSTerm jSTerm5 = jSTerm3.cloneT();
      jSTerm3.removeElement(iterator0);
      jSTerm5.matches(jSTerm4, jSSubstitution0);
      jSTerm3.matches(jSTerm5);
      // Undeclared exception!
      try { 
        jSTerm4.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.520805078028692
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      StringReader stringReader0 = new StringReader("yZSGSn.t.O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.replaceAll((UnaryOperator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UnaryOperator.identity();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("w~5m$ZSuS}Rh}C`d/o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("T");
      StringReader stringReader2 = new StringReader("w~5m$ZSuS}Rh}C`d/o");
      JSJshopVars.interrogation = (-4);
      stringReader1.markSupported();
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.quoteChar(33);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1));
      jSTerm0.cloneT();
      streamTokenizer0.quoteChar((-461));
      System.setCurrentTimeMillis((-103L));
      System.setCurrentTimeMillis((-1));
      System.setCurrentTimeMillis(1677L);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M-M{aVn)i");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
      assertEquals("[M-MaVn]", jSTerm0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(?");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("consManbt");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4045));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "%%%");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.test("%%%");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Predicate.isEqual((Object) "%%%");
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate6.negate();
      predicate1.test(predicate0);
      Predicate<Object> predicate10 = predicate9.and(predicate4);
      predicate1.or(predicate2);
      predicate9.negate();
      Predicate<String> predicate11 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate12 = predicate6.negate();
      Predicate<Object> predicate13 = predicate7.negate();
      predicate13.or(predicate8);
      predicate9.negate();
      predicate2.test(predicate10);
      predicate12.negate();
      predicate7.or(predicate3);
      Predicate<String> predicate14 = predicate11.negate();
      predicate1.negate();
      predicate14.and(predicate8);
      predicate14.or(predicate3);
      StringReader stringReader0 = new StringReader("pHPP5Yl072>PpJ(Zu");
      SystemInUtil.addInputLine((String) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(1L);
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "(s|%(E&iEus Xq}";
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nextToken();
      stringReader0.ready();
      jSTerm0.toStr();
      jSTerm0.isConstant();
      stringReader0.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.quoteChar((-531));
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.2931300021708616
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.listIterator();
      jSSubstitution1.retainAll(jSSubstitution0);
      jSTerm0.addElement(jSSubstitution1);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.leftPar = 46;
      JSJshopVars.interrogation = 44;
      JSJshopVars.astherisk = 2147483645;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.addElement(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.listIterator();
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.toStr();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSSubstitution0.insertElementAt(jSSubstitution5, 2147483645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483645 > 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("constant");
      System.setCurrentTimeMillis(2588L);
      StringReader stringReader1 = new StringReader("constant");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7316032521359226
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.addElement("expecting");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.addElement(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.addElement("yZSGSn..O");
      jSTerm0.makeEval(false);
      jSSubstitution0.removeElement(jSTerm0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.equals(jSTerm0);
      jSTerm4.matches(jSTerm1);
      jSTerm1.call();
      jSTerm4.call();
      jSTerm3.standardizerTerm();
      jSTerm4.standardizerTerm();
      jSTerm0.call();
      jSTerm4.cloneT();
      jSTerm2.matches(jSTerm0);
      jSTerm4.standardizerTerm();
      jSTerm4.matches(jSTerm1, jSSubstitution0);
      jSTerm2.equals(jSTerm1);
      jSTerm3.cloneT();
      jSTerm0.matches(jSTerm2);
      jSTerm3.equals(jSTerm4);
      jSTerm1.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSJshopVars.colon = (-1405);
      JSJshopVars.greaterT = (-1405);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2413);
      JSJshopVars.leftBrac = (-1405);
      JSJshopVars.flagLevel = (-1405);
      JSJshopVars.flagLevel = (-1405);
      JSEvaluate.numericValue(jSTerm0);
      JSJshopVars.interrogation = 5485;
      System.setCurrentTimeMillis((-1405));
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.1171019303194956
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.spliterator();
      jSSubstitution0.listIterator();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution4);
      jSTerm1.makeFunction();
      // Undeclared exception!
      try { 
        jSSubstitution3.standarizerSubs();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.5910582267884945
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.addElement(iterator0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(iterator0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      System.setCurrentTimeMillis(521L);
      StringReader stringReader0 = new StringReader("Expecting Term");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      assertEquals(1, jSTerm1.size());
      
      JSJshopVars.colon = 59;
      jSTerm3.isFunction();
      jSTerm2.standardizerTerm();
      jSTerm0.call();
      jSTerm3.call();
      assertNotSame(jSTerm0, jSTerm2);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SystemInUtil.addInputLine("Y=(Xei06");
      SystemInUtil.addInputLine("Y=(Xei06");
      SystemInUtil.addInputLine("Y=(Xei06");
      StringReader stringReader0 = new StringReader("(s68%(E&3iEus Xq}");
      SystemInUtil.addInputLine((String) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), 2339);
      streamTokenizer0.whitespaceChars(3413, 3413);
      streamTokenizer0.wordChars((-1), 71);
      streamTokenizer0.slashStarComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.slashSlashComments(false);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer3.ordinaryChar(2339);
      streamTokenizer2.commentChar(2339);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.whitespaceChars(2339, (-4));
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "%%%");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.test("%%%");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Predicate.isEqual((Object) "NG`3-ZzT^W$&(");
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate4.negate();
      predicate6.test(predicate1);
      Predicate<Object> predicate10 = predicate0.and(predicate1);
      Predicate<Object> predicate11 = predicate9.or(predicate3);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate6.negate();
      Predicate<Object> predicate13 = predicate7.negate();
      Predicate<Object> predicate14 = predicate11.negate();
      Predicate<Object> predicate15 = predicate7.negate();
      Predicate<Object> predicate16 = predicate13.or(predicate15);
      Predicate<Object> predicate17 = predicate16.negate();
      Predicate<Object> predicate18 = predicate10.negate();
      Predicate<Object> predicate19 = predicate11.and(predicate18);
      predicate19.or(predicate10);
      Predicate<String> predicate20 = Predicate.isEqual((Object) "%%%");
      Predicate<Object> predicate21 = predicate16.negate();
      Predicate<Object> predicate22 = predicate12.and(predicate21);
      Predicate<Object> predicate23 = predicate8.negate();
      predicate20.and(predicate23);
      predicate11.and(predicate17);
      predicate7.or(predicate22);
      predicate20.or(predicate2);
      Predicate<String> predicate24 = predicate20.and(predicate14);
      predicate24.negate();
      StringReader stringReader0 = new StringReader("W^Sw~}QMA");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate4);
      Predicate<String> predicate8 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate9);
      Predicate<Object> predicate11 = predicate9.negate();
      predicate6.and(predicate9);
      Predicate<String> predicate12 = predicate8.negate();
      predicate10.negate();
      predicate10.negate();
      Predicate<Object> predicate13 = predicate7.negate();
      predicate11.and(predicate3);
      predicate13.test(predicate4);
      predicate13.negate();
      Predicate<Object> predicate14 = predicate5.negate();
      predicate4.or(predicate10);
      predicate14.test(predicate3);
      Predicate<Object> predicate15 = predicate9.or(predicate10);
      predicate8.negate();
      Predicate<String> predicate16 = predicate8.negate();
      predicate16.test(".");
      predicate4.or(predicate15);
      predicate16.or(predicate11);
      predicate12.negate();
      predicate16.negate();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "%%%");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.test("%%%");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Predicate.isEqual((Object) "%%%");
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate6.negate();
      predicate1.test(predicate0);
      Predicate<Object> predicate10 = predicate9.and(predicate4);
      Predicate<Object> predicate11 = predicate1.or(predicate2);
      predicate9.negate();
      Predicate<String> predicate12 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate13 = predicate6.negate();
      Predicate<Object> predicate14 = predicate7.negate();
      predicate14.or(predicate8);
      Predicate<Object> predicate15 = predicate9.negate();
      predicate2.test(predicate10);
      predicate13.negate();
      predicate7.or(predicate3);
      Predicate<String> predicate16 = predicate12.negate();
      Predicate<Object> predicate17 = predicate1.negate();
      Predicate<String> predicate18 = predicate16.and(predicate8);
      Predicate<String> predicate19 = predicate16.or(predicate3);
      predicate18.or(predicate15);
      predicate16.and(predicate19);
      jSTerm0.isFunction();
      predicate18.negate();
      predicate11.negate();
      predicate17.test(predicate11);
      StringReader stringReader0 = new StringReader("-i");
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      predicate4.and(predicate0);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate4);
      Predicate<String> predicate8 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate9);
      Predicate<Object> predicate11 = predicate9.negate();
      predicate6.and(predicate9);
      Predicate<String> predicate12 = predicate8.negate();
      predicate10.negate();
      predicate10.negate();
      Predicate<Object> predicate13 = predicate7.negate();
      predicate11.and(predicate3);
      predicate13.test(predicate4);
      predicate13.negate();
      Predicate<Object> predicate14 = predicate5.negate();
      predicate4.or(predicate10);
      predicate14.test(predicate3);
      Predicate<Object> predicate15 = predicate9.or(predicate10);
      predicate8.negate();
      Predicate<String> predicate16 = predicate8.negate();
      predicate16.test(".");
      predicate11.and(predicate1);
      predicate4.or(predicate15);
      predicate16.or(predicate11);
      predicate12.negate();
      predicate16.negate();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1055781828284859
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(s68%(E&3iEus Xq}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.whitespaceChars(2339, (-4));
      streamTokenizer1.slashStarComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.nval = (double) 2339;
      streamTokenizer1.slashSlashComments(false);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(3413);
      streamTokenizer0.commentChar(4488);
      System.setCurrentTimeMillis(4488);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars(2339, 2339);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.wordChars((-1333), (-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(s|%(E&iEus Xq}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("!dd/`67o@)@ms5");
      System.setCurrentTimeMillis(0L);
      streamTokenizer0.lowerCaseMode(false);
      SystemInUtil.addInputLine("s");
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.pushBack();
      SystemInUtil.addInputLine("(s|%(E&iEus Xq}");
      streamTokenizer0.slashStarComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-4));
      long long0 = (-396L);
      System.setCurrentTimeMillis((-396L));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("-i");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) function1);
      function1.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator<JSSubstitution> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super JSSubstitution, ? extends String>) function2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function3 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSSubstitution> function4 = unaryOperator0.andThen((Function<? super Object, ? extends JSSubstitution>) function3);
      unaryOperator3.andThen((Function<? super String, ? extends JSSubstitution>) function4);
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends JSSubstitution>) function4);
      streamTokenizer0.ordinaryChar(3772);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-105));
      System.setCurrentTimeMillis(966);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "%%%");
      predicate0.test("%%%");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate.isEqual((Object) "\"R=8FBi^&Y<TWwGD&");
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate3.negate();
      predicate5.test(predicate0);
      Predicate<Object> predicate9 = predicate8.or(predicate2);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      predicate11.negate();
      Predicate<Object> predicate13 = predicate6.negate();
      Predicate<Object> predicate14 = predicate12.or(predicate13);
      Predicate<Object> predicate15 = predicate14.negate();
      Predicate<Object> predicate16 = predicate2.negate();
      Predicate<Object> predicate17 = predicate9.and(predicate16);
      Predicate<Object> predicate18 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate19 = predicate17.or(predicate18);
      predicate17.or(predicate6);
      predicate4.test(predicate1);
      Predicate<String> predicate20 = Predicate.isEqual((Object) "%%%");
      Predicate<Object> predicate21 = predicate16.negate();
      Predicate<Object> predicate22 = predicate10.and(predicate21);
      predicate20.negate();
      predicate0.negate();
      predicate7.negate();
      predicate16.or(predicate6);
      predicate19.negate();
      predicate6.or(predicate22);
      predicate15.negate();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
