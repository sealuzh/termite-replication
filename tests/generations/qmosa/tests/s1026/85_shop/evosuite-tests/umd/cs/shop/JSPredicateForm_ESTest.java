/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 06:17:05 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0042424730540764
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.compose((Function<? super Object, ? extends String>) function2);
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      UnaryOperator.identity();
      Function<Object, Object> function4 = unaryOperator1.andThen((Function<? super Object, ?>) function3);
      function2.andThen((Function<? super String, ?>) function1);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) function5);
      unaryOperator2.apply("J9");
      StringReader stringReader0 = new StringReader("D");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator.identity();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm2);
      function2.apply(function4);
      function5.compose((Function<? super Object, ?>) function1);
      UnaryOperator.identity();
      Function<Object, String> function6 = unaryOperator2.compose((Function<? super Object, ? extends String>) function5);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-1));
      jSTerm1.standarizerPredicateForm();
      jSTerm1.clonePF();
      assertEquals(2, jSTerm1.size());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      int int0 = 1;
      JSJshopVars.rightPar = 1;
      jSPredicateForm0.print();
      jSPredicateForm0.toStr();
      jSPredicateForm0.removeAllElements();
      JSJshopVars.apostrophe = 1;
      StringReader stringReader0 = new StringReader("PT)V'!616j57{ySMZ^V");
      stringReader0.skip((-2621L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      int int1 = (-3425);
      streamTokenizer0.lowerCaseMode(true);
      stringReader0.reset();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.nval = (-537.52743341508);
      stringReader0.close();
      streamTokenizer0.whitespaceChars((-3425), (-877));
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\u0005aGtgDU/V y+/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.ordinaryChars((-4), (-2));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.nextToken();
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.ordinaryChars(127, 127);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars(127, (-4));
      streamTokenizer0.pushBack();
      jSTerm0.add((Object) (-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[8];
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.nextToken();
      streamTokenizer1.ordinaryChars((-3), 41);
      charArray0[3] = '^';
      streamTokenizer0.ttype = (int) '^';
      streamTokenizer0.ttype = (int) '\u0000';
      streamTokenizer0.ttype = (int) '\u0000';
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.wordChars(0, 127);
      streamTokenizer0.ordinaryChars(127, 3);
      streamTokenizer1.commentChar(127);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4503379533856173
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.ordinaryChar(367);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.pushBack();
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.lowerCaseMode(true);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.eolIsSignificant(true);
      streamTokenizer3.resetSyntax();
      streamTokenizer3.whitespaceChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-1));
      streamTokenizer0.ttype = (-4);
      streamTokenizer3.parseNumbers();
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer3.slashSlashComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-1435794412), (-1435794412));
      streamTokenizer4.wordChars((-4), (-1539));
      streamTokenizer4.quoteChar((-4));
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("('>{PB<Wu{#?(Q");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(>{PB:Wu{#v?(Q");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6648993023209906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(wL)]/`Qak");
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(4, stringBuffer0.length());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(96);
      Integer integer1 = new Integer(96);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add(integer0);
      Integer integer2 = new Integer(96);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer3 = new Integer(96);
      linkedList2.add(integer3);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.add(integer1);
      Integer integer4 = new Integer(96);
      Integer integer5 = new Integer(96);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      Integer integer6 = new Integer(1439);
      linkedList0.add(integer6);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer integer7 = new Integer(96);
      Integer integer8 = new Integer((-1059));
      Integer integer9 = new Integer(1439);
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      Integer integer10 = new Integer(1439);
      System.setCurrentTimeMillis(0L);
      jSPredicateForm0.print();
      StringReader stringReader0 = new StringReader("(wL)]/`Qak");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm1);
      assertTrue(boolean0);
      
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      assertNotSame(jSPredicateForm2, jSPredicateForm0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.25731864054383163
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(wL)]/`Qak");
      StringReader stringReader0 = new StringReader("(wL)]/`Qak");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
      JSJshopVars.backquote = 397;
      // Undeclared exception!
      try { 
        jSPredicateForm0.containsAll((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(127);
      charBuffer0.flip();
      charBuffer0.read(charBuffer0);
      charBuffer0.codePoints();
      charBuffer0.read(charBuffer0);
      charBuffer0.codePoints();
      charBuffer0.clear();
      CharBuffer charBuffer1 = charBuffer0.put('`');
      charBuffer0.clear();
      CharBuffer charBuffer2 = charBuffer0.append((CharSequence) charBuffer0);
      CharBuffer charBuffer3 = CharBuffer.allocate(126);
      CharBuffer charBuffer4 = CharBuffer.allocate('`');
      charBuffer1.codePoints();
      charBuffer0.slice();
      charBuffer4.get();
      char[] charArray0 = new char[3];
      charBuffer4.limit((int) '`');
      charArray0[1] = '\u001D';
      CharBuffer charBuffer5 = charBuffer2.asReadOnlyBuffer();
      CharBuffer.allocate('\u001D');
      charBuffer3.read(charBuffer2);
      charBuffer3.put(charArray0);
      charBuffer0.read(charBuffer0);
      CharBuffer charBuffer6 = CharBuffer.allocate(343);
      charBuffer6.order();
      charBuffer3.order();
      charBuffer5.codePoints();
      charBuffer0.flip();
      CharBuffer.allocate(127);
      StringReader stringReader0 = new StringReader("not");
      stringReader0.read(charBuffer2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6766961325918528
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nNt");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      jSTerm0.clone();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSJshopVars.verticalL = 2502;
      jSPredicateForm0.equals(jSPredicateForm1);
      jSTerm0.clonePF();
      jSPredicateForm1.add((Object) jSTerm0);
      assertEquals("[nNt]", jSTerm0.toString());
      
      jSPredicateForm1.print();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) linkedList0);
      StringReader stringReader0 = new StringReader("Ey+ne_MNn`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-16L));
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.add((Object) "sfmgu./pzz");
      jSTerm0.add((Object) jSTerm1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm0.equals(jSTerm1);
      jSTerm1.makeEval(true);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1595697967390537
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\u0005aGtgDU/V y+/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.slashSlashComments(false);
      stringReader0.read();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.leftPar = (-2);
      jSTerm0.iterator();
      Integer integer0 = new Integer(92);
      streamTokenizer0.parseNumbers();
      jSTerm0.add((Object) integer0);
      streamTokenizer0.whitespaceChars(42, 41);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      streamTokenizer1.lowerCaseMode(true);
      Function.identity();
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      JSJshopVars.apostrophe = (-1969704303);
      jSPredicateForm1.equals(jSPredicateForm0);
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis(0L);
      jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(2125);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '$';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '1';
      charArray0[5] = '\'';
      char[] charArray1 = new char[2];
      charArray1[1] = '!';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '$';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '1';
      charArray0[5] = '\'';
      char[] charArray1 = new char[2];
      charArray1[1] = '!';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(43);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '$';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '1';
      charArray0[5] = '\'';
      char[] charArray1 = new char[2];
      charArray1[1] = '!';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-414));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-319352257));
      linkedList0.add(integer1);
      Integer integer2 = new Integer((-1393));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer3 = new Integer((-803));
      linkedList2.add(integer3);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer4 = new Integer((-1393));
      Integer integer5 = new Integer(785);
      Integer integer6 = new Integer((-3576));
      Integer integer7 = new Integer(785);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(127);
      CharBuffer charBuffer1 = CharBuffer.allocate(127);
      CharBuffer charBuffer2 = CharBuffer.allocate(127);
      charBuffer1.read(charBuffer2);
      charBuffer1.order();
      charBuffer1.chars();
      CharBuffer charBuffer3 = CharBuffer.allocate(127);
      charBuffer1.flip();
      CharBuffer charBuffer4 = CharBuffer.allocate('+');
      CharBuffer charBuffer5 = CharBuffer.allocate(127);
      CharBuffer.allocate(127);
      CharBuffer charBuffer6 = CharBuffer.allocate(127);
      charBuffer1.chars();
      charBuffer6.put('+');
      charBuffer3.order();
      charBuffer5.order();
      CharBuffer charBuffer7 = charBuffer6.append('(');
      charBuffer2.order();
      CharBuffer charBuffer8 = charBuffer0.append('\u008D');
      CharBuffer charBuffer9 = charBuffer8.append('6');
      CharBuffer.allocate('\u008D');
      charBuffer9.flip();
      CharBuffer.allocate('6');
      charBuffer9.read(charBuffer7);
      CharBuffer.allocate(127);
      charBuffer6.chars();
      charBuffer9.read(charBuffer4);
      charBuffer9.chars();
      CharBuffer.allocate('+');
      CharBuffer.allocate(127);
      CharBuffer.allocate('+');
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.andThen((Function<? super JSTerm, ?>) function2);
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      Function<Object, Object> function3 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      function1.apply(unaryOperator0);
      Function<Object, Object> function4 = function1.andThen((Function<? super String, ?>) unaryOperator1);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      function1.compose((Function<? super Object, ?>) function4);
      function5.compose((Function<? super Object, ?>) unaryOperator1);
      Function<Object, Object> function6 = Function.identity();
      function5.compose((Function<? super String, ?>) unaryOperator1);
      unaryOperator2.compose((Function<? super String, ? extends String>) function1);
      unaryOperator2.apply("not");
      function5.compose((Function<? super Object, ?>) function4);
      Function<Object, String> function7 = function5.andThen((Function<? super String, ? extends String>) function1);
      jSTerm0.add((Object) null);
      function3.andThen((Function<? super Object, ?>) function7);
      Function.identity();
      function6.apply((Object) null);
      function3.apply(function7);
      function5.apply(function1);
      function1.compose((Function<? super Object, ?>) function3);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super JSTerm, ?>) unaryOperator1);
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.515707952085713
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u:X)dIHBZ,`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      stringReader0.read();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.toStr();
      CharBuffer charBuffer0 = CharBuffer.allocate(41);
      charBuffer0.duplicate();
      charBuffer0.order();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      jSPredicateForm2.removeAll(jSPredicateForm1);
      jSPredicateForm2.stream();
      jSPredicateForm0.iterator();
      jSPredicateForm0.retainAll(jSPredicateForm2);
      jSPredicateForm1.addElement(jSTerm0);
      stringReader0.read();
      jSPredicateForm1.toStr();
      jSPredicateForm1.toStr();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.515707952085713
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u:X)dIHBZ,`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      stringReader0.read();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.toStr();
      CharBuffer charBuffer0 = CharBuffer.allocate(41);
      charBuffer0.duplicate();
      charBuffer0.order();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.clonePF();
      jSPredicateForm3.removeAll(jSPredicateForm1);
      jSPredicateForm3.stream();
      jSPredicateForm0.iterator();
      jSPredicateForm0.retainAll(jSPredicateForm3);
      jSPredicateForm1.addElement(jSPredicateForm2);
      jSPredicateForm2.removeAllElements();
      stringReader0.read();
      // Undeclared exception!
      try { 
        jSPredicateForm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\u0005aGtgDU/V y+/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.read();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      streamTokenizer0.nval = (double) (-2);
      streamTokenizer1.ordinaryChars((-2), 92);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.nextToken();
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.ordinaryChars(92, 127);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars(127, 92);
      jSTerm1.trimToSize();
      streamTokenizer0.pushBack();
      jSTerm0.add((Object) (-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[8];
      streamTokenizer1.commentChar((-2));
      streamTokenizer0.nextToken();
      streamTokenizer1.nval = (double) '^';
      streamTokenizer0.ttype = (int) '^';
      streamTokenizer0.ttype = (int) '\u0000';
      charArray0[5] = '\u0000';
      streamTokenizer0.ttype = (int) '\u0000';
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.ordinaryChars(127, 3);
      streamTokenizer0.sval = null;
      streamTokenizer1.commentChar(127);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\u0005aGtgDU/V y+/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.read();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      streamTokenizer0.nval = (double) (-2);
      streamTokenizer1.ordinaryChars((-2), 92);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.nextToken();
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.ordinaryChars(92, 127);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars(127, 92);
      streamTokenizer0.pushBack();
      jSTerm0.add((Object) (-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[8];
      streamTokenizer1.commentChar((-2));
      streamTokenizer0.nextToken();
      streamTokenizer1.ordinaryChars((-3), 41);
      charArray0[3] = '^';
      streamTokenizer0.ttype = (int) '^';
      streamTokenizer0.ttype = (int) '\u0000';
      streamTokenizer0.ttype = (int) '\u0000';
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.ordinaryChars(127, 3);
      streamTokenizer0.sval = null;
      streamTokenizer1.commentChar(127);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.8979457248567797
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\u0005aGtgDU/V y+/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.addAll((Collection) jSTerm0);
      stringReader0.read();
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\u0005aGtgDU/V y+/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.read();
      streamTokenizer0.slashStarComments(true);
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.slashSlashComments(true);
      JSJshopVars.leftPar = (-4);
      streamTokenizer1.ordinaryChars((-6), 96);
      streamTokenizer1.nval = 0.0;
      streamTokenizer1.eolIsSignificant(true);
      jSTerm0.iterator();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.ttype = (-1431888477);
      streamTokenizer0.wordChars((-1431888477), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.ordinaryChars(96, (-1431888477));
      streamTokenizer0.wordChars(63, (-1431888477));
      streamTokenizer1.resetSyntax();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.nval = 0.0;
      streamTokenizer0.pushBack();
      streamTokenizer0.nextToken();
      streamTokenizer1.whitespaceChars((-2), 96);
      jSTerm0.add((Object) (-1431888477));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nNt");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply(jSTerm0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Object> function1 = Function.identity();
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) function2);
      Function<Object, Object> function3 = function2.andThen((Function<? super String, ?>) function1);
      Function<Object, Object> function4 = function2.andThen((Function<? super String, ?>) function3);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) function2);
      unaryOperator2.apply("2hGvuDfwER1?5R");
      jSTerm0.add((Object) unaryOperator1);
      Integer integer0 = new Integer(638);
      function5.apply(integer0);
      function2.compose((Function<? super Object, ?>) function1);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super JSTerm, ?>) function4);
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      unaryOperator1.andThen((Function<? super Object, ?>) function1);
      Function<Object, Object> function2 = function1.andThen((Function<? super String, ?>) unaryOperator2);
      Function<Object, Object> function3 = function1.andThen((Function<? super String, ?>) unaryOperator1);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) function1);
      unaryOperator2.apply("not");
      unaryOperator2.andThen((Function<? super String, ? extends String>) function1);
      function4.andThen((Function<? super String, ? extends String>) function1);
      Function.identity();
      Function<Object, String> function5 = function1.compose((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      function6.compose((Function<? super Object, ?>) function4);
      jSTerm0.add((Object) function1);
      Function<Object, String> function7 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      function4.apply(function1);
      function2.andThen((Function<? super Object, ?>) function7);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      function8.compose((Function<? super Object, ?>) function2);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super JSTerm, ?>) function3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$54/1160768393 cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharBuffer.allocate(127);
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add(integer0);
      Integer integer1 = new Integer(127);
      linkedList1.add(integer1);
      Integer integer2 = new Integer((-1085570738));
      Integer integer3 = new Integer((-316615619));
      linkedList1.add(integer3);
      Integer integer4 = new Integer(2147483645);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer5 = new Integer((-319352257));
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.add(integer1);
      Integer integer6 = new Integer((-1085570738));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      jSTerm0.equals((JSPredicateForm) null);
      System.setCurrentTimeMillis((-1085570738));
      System.setCurrentTimeMillis((-319352257));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nNt");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      jSTerm0.add((Object) "nNt");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function.identity();
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      unaryOperator0.apply(jSTerm0);
      UnaryOperator.identity();
      unaryOperator1.apply("not");
      Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      function1.andThen((Function<? super String, ?>) unaryOperator2);
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) function1);
      unaryOperator2.apply("not");
      Function<Object, String> function4 = function1.compose((Function<? super Object, ?>) function2);
      jSTerm0.add((Object) null);
      function3.apply(function1);
      function1.compose((Function<? super Integer, ?>) function4);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function3);
      function6.apply(function3);
      unaryOperator1.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-848L));
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.addElement((Object) null);
      System.setCurrentTimeMillis(0L);
      JSJshopVars.exclamation = (-8323580);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function2.andThen((Function<? super String, ? extends String>) unaryOperator1);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function.identity();
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function5 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      UnaryOperator.identity();
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function7 = unaryOperator1.compose((Function<? super Object, ? extends String>) function6);
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      Function.identity();
      Function<Object, String> function8 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      function8.compose((Function<? super Integer, ?>) function4);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function7);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      Function<Object, String> function9 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function9);
      Function<Object, String> function10 = unaryOperator1.compose((Function<? super Object, ? extends String>) function8);
      function10.apply(function7);
      unaryOperator0.compose((Function<? super Integer, ?>) function6);
      Function.identity();
      System.setCurrentTimeMillis((-848L));
      System.setCurrentTimeMillis((-848L));
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.andThen((Function<? super JSTerm, ?>) function2);
      unaryOperator0.apply(jSTerm0);
      Function<Object, Object> function3 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      function1.apply(unaryOperator0);
      Function<Object, Object> function4 = function1.andThen((Function<? super String, ?>) unaryOperator2);
      Function<Object, Object> function5 = function1.andThen((Function<? super String, ?>) unaryOperator1);
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      function1.compose((Function<? super Object, ?>) function5);
      Function<Object, Object> function7 = Function.identity();
      function6.compose((Function<? super String, ?>) unaryOperator1);
      unaryOperator2.compose((Function<? super String, ? extends String>) function1);
      unaryOperator2.apply("not");
      function6.compose((Function<? super Object, ?>) function5);
      function6.andThen((Function<? super String, ? extends String>) function1);
      jSTerm0.add((Object) function7);
      Function.identity();
      function3.apply(function4);
      function1.apply(function3);
      function6.apply(function1);
      function1.compose((Function<? super Object, ?>) function3);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super JSTerm, ?>) unaryOperator1);
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4293230219306162
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(wLz]/`Q.ak");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer((-1122));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer(39);
      linkedList1.add(integer1);
      Integer integer2 = new Integer((-13));
      Integer integer3 = new Integer((-1122));
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(1);
      Integer integer6 = new Integer(93);
      Integer integer7 = new Integer(50);
      linkedList0.add(integer2);
      Integer integer8 = new Integer(93);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer9 = new Integer((-12457231));
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList2.add(integer8);
      Integer integer10 = new Integer(50);
      linkedList2.add(integer4);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.removeAll(linkedList1);
      CharBuffer charBuffer0 = CharBuffer.allocate(2850);
      charBuffer0.append('Q');
      JSTerm jSTerm0 = new JSTerm();
      Integer integer11 = new Integer(39);
      jSTerm0.add((Object) integer11);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.8976221848780437
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(wL)]/`Qak");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-643));
      Integer integer1 = new Integer((-643));
      Integer integer2 = new Integer((-643));
      linkedList0.addFirst(integer2);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.toArray();
      linkedList1.add(integer0);
      linkedList1.add(integer0);
      Integer integer3 = new Integer((-643));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer4 = new Integer((-643));
      linkedList2.add(integer4);
      Integer integer5 = new Integer((-643));
      linkedList2.add(integer5);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.iterator();
      linkedList3.add(integer1);
      Integer integer6 = new Integer(1204);
      Integer integer7 = new Integer(1204);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      StringReader stringReader0 = new StringReader("(wL)]/`Qak");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(1683);
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\u0005aGtgDU/V y+/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(1199);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      Integer integer0 = new Integer(92);
      Integer integer1 = new Integer(548);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer1);
      Integer integer2 = new Integer(548);
      linkedList0.iterator();
      linkedList0.add(integer1);
      Integer integer3 = new Integer(92);
      Integer integer4 = new Integer((-1197));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer5 = new Integer(1294);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.toArray();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer6 = new Integer((-1197));
      Integer integer7 = new Integer(42);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      Integer integer8 = new Integer(3975);
      System.setCurrentTimeMillis(548);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nNt");
      UnaryOperator.identity();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator3.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      function2.andThen((Function<? super String, ?>) unaryOperator2);
      Function<Object, Object> function3 = function2.andThen((Function<? super String, ?>) unaryOperator3);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator2.apply("nNt");
      jSTerm0.add((Object) unaryOperator3);
      function2.apply(unaryOperator1);
      function1.apply(function4);
      Function<Object, String> function5 = function1.compose((Function<? super Object, ?>) function3);
      UnaryOperator.identity();
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator0.andThen((Function<? super JSTerm, ?>) function6);
      Function.identity();
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(2249L);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-991L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-991L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-991L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1993L));
      System.setCurrentTimeMillis((-1331L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-991L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(469L);
      System.setCurrentTimeMillis((-2643L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(127);
      charBuffer0.flip();
      charBuffer0.read(charBuffer0);
      charBuffer0.codePoints();
      charBuffer0.read(charBuffer0);
      charBuffer0.codePoints();
      charBuffer0.clear();
      CharBuffer charBuffer1 = charBuffer0.put('\'');
      CharBuffer charBuffer2 = charBuffer0.append((CharSequence) charBuffer0);
      CharBuffer charBuffer3 = CharBuffer.allocate(127);
      CharBuffer charBuffer4 = charBuffer3.put('\'');
      charBuffer1.codePoints();
      charBuffer0.slice();
      charBuffer4.get();
      char[] charArray0 = new char[2];
      charBuffer4.limit((int) '\'');
      charArray0[1] = '!';
      charBuffer2.asReadOnlyBuffer();
      charBuffer0.slice();
      charBuffer3.read(charBuffer2);
      charBuffer3.put(charArray0);
      charBuffer0.read(charBuffer0);
      CharBuffer charBuffer5 = CharBuffer.allocate(343);
      charBuffer5.order();
      charBuffer3.order();
      charBuffer4.codePoints();
      charBuffer0.flip();
      CharBuffer.allocate(127);
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(92);
      charBuffer0.order();
      charBuffer0.codePoints();
      charBuffer0.mark();
      CharBuffer charBuffer1 = CharBuffer.allocate('>');
      CharBuffer charBuffer2 = charBuffer0.append('>');
      CharBuffer charBuffer3 = charBuffer2.slice();
      CharBuffer charBuffer4 = charBuffer0.append('>');
      CharBuffer charBuffer5 = charBuffer2.asReadOnlyBuffer();
      charBuffer2.order();
      char[] charArray0 = new char[6];
      charBuffer2.duplicate();
      charArray0[0] = '>';
      CharBuffer charBuffer6 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer7 = charBuffer0.put(charBuffer6);
      charBuffer3.flip();
      charArray0[5] = '>';
      CharBuffer.allocate('>');
      charBuffer6.asReadOnlyBuffer();
      charBuffer1.flip();
      charBuffer6.put(charBuffer1);
      CharBuffer charBuffer8 = charBuffer4.put("8.0");
      charBuffer2.limit(92);
      charBuffer7.chars();
      charBuffer8.compact();
      charBuffer1.compact();
      charBuffer0.append('t');
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "jot");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charBuffer5;
      jSSubstitution0.toArray(objectArray0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function2.andThen((Function<? super String, ? extends String>) unaryOperator1);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function5 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      UnaryOperator.identity();
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      Function<Object, String> function7 = unaryOperator1.compose((Function<? super Object, ? extends String>) function6);
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      Function.identity();
      Function<Object, String> function8 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      function8.compose((Function<? super Integer, ?>) function4);
      unaryOperator3.compose((Function<? super String, ? extends String>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function7);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      Function<Object, String> function9 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function9);
      Function<Object, String> function10 = unaryOperator1.compose((Function<? super Object, ? extends String>) function8);
      function10.apply(function7);
      unaryOperator0.compose((Function<? super Integer, ?>) function6);
      Function.identity();
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function2.andThen((Function<? super String, ? extends String>) unaryOperator1);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function5 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      UnaryOperator.identity();
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      Function<Object, String> function7 = unaryOperator1.compose((Function<? super Object, ? extends String>) function6);
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      Function.identity();
      Function<Object, String> function8 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      function8.compose((Function<? super Integer, ?>) function4);
      unaryOperator3.compose((Function<? super String, ? extends String>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function7);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      Function<Object, String> function9 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function9);
      Function<Object, String> function10 = unaryOperator1.compose((Function<? super Object, ? extends String>) function8);
      function10.apply(function7);
      unaryOperator0.compose((Function<? super Integer, ?>) function6);
      Function.identity();
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(127);
      CharBuffer charBuffer1 = CharBuffer.allocate(127);
      CharBuffer charBuffer2 = CharBuffer.allocate(127);
      charBuffer1.read(charBuffer2);
      charBuffer0.order();
      charBuffer1.chars();
      CharBuffer charBuffer3 = charBuffer1.duplicate();
      charBuffer1.flip();
      CharBuffer charBuffer4 = CharBuffer.allocate('+');
      CharBuffer charBuffer5 = CharBuffer.allocate(127);
      CharBuffer.allocate(127);
      CharBuffer charBuffer6 = charBuffer1.append('6');
      charBuffer6.put('+');
      charBuffer3.order();
      charBuffer5.order();
      CharBuffer charBuffer7 = charBuffer6.append('t');
      charBuffer5.order();
      CharBuffer charBuffer8 = charBuffer0.append('\u008D');
      CharBuffer charBuffer9 = charBuffer8.append('~');
      CharBuffer.allocate('\u008D');
      charBuffer9.flip();
      CharBuffer.allocate('6');
      charBuffer9.read(charBuffer7);
      CharBuffer.allocate(127);
      charBuffer6.chars();
      charBuffer9.read(charBuffer4);
      charBuffer9.chars();
      CharBuffer.allocate('+');
      CharBuffer.allocate(127);
      CharBuffer.allocate('~');
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(127);
      CharBuffer charBuffer1 = CharBuffer.allocate(127);
      CharBuffer charBuffer2 = CharBuffer.allocate(127);
      charBuffer1.read(charBuffer2);
      charBuffer0.order();
      charBuffer0.codePoints();
      charBuffer1.flip();
      CharBuffer.allocate('+');
      CharBuffer charBuffer3 = CharBuffer.allocate(127);
      CharBuffer charBuffer4 = charBuffer1.append('.');
      charBuffer2.order();
      charBuffer3.order();
      charBuffer4.append('t');
      charBuffer3.order();
      CharBuffer charBuffer5 = charBuffer0.append('~');
      CharBuffer charBuffer6 = charBuffer5.append('~');
      charBuffer0.mark();
      CharBuffer.allocate(127);
      charBuffer6.chars();
      CharBuffer.allocate(127);
      charBuffer6.append('u');
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(200);
      Integer integer1 = new Integer(58);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add(integer1);
      Integer integer2 = new Integer(200);
      linkedList1.push(integer2);
      Integer integer3 = new Integer(200);
      linkedList1.add(integer3);
      Integer integer4 = new Integer(548);
      Integer integer5 = new Integer(58);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer6 = new Integer(40);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      Integer integer7 = new Integer(200);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      linkedList5.add(integer2);
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      Integer integer8 = new Integer((-1610612734));
      Integer integer9 = new Integer(40);
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      Integer integer10 = new Integer(3370);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\u0005aGtgDU/V y+/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.read();
      streamTokenizer0.slashStarComments(true);
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.ordinaryChars((-6), (-2));
      streamTokenizer1.nval = 0.0;
      streamTokenizer1.eolIsSignificant(true);
      jSTerm0.iterator();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.ttype = (-1431888477);
      streamTokenizer0.wordChars((-1431888477), (-4));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.ordinaryChars((-6), (-1431888477));
      streamTokenizer0.wordChars((-1431888477), (-1431888477));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.pushBack();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.nval = 0.0;
      streamTokenizer0.pushBack();
      streamTokenizer0.nextToken();
      streamTokenizer1.whitespaceChars((-2), (-2));
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.quoteChar((-2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.andThen((Function<? super JSTerm, ?>) function2);
      unaryOperator0.apply(jSTerm0);
      Function<Object, Object> function3 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      function1.apply(unaryOperator0);
      Function<Object, Object> function4 = function1.andThen((Function<? super String, ?>) unaryOperator2);
      Function<Object, Object> function5 = function1.andThen((Function<? super String, ?>) unaryOperator1);
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      function1.compose((Function<? super Object, ?>) function5);
      Function.identity();
      function6.compose((Function<? super String, ?>) unaryOperator1);
      unaryOperator2.compose((Function<? super String, ? extends String>) function1);
      unaryOperator2.apply("not");
      Function<Object, String> function7 = function6.andThen((Function<? super String, ? extends String>) function1);
      jSTerm0.add((Object) null);
      function3.andThen((Function<? super Object, ?>) function7);
      Function.identity();
      function3.apply(function4);
      function1.apply(function3);
      function6.apply(function1);
      function1.compose((Function<? super Object, ?>) function3);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super JSTerm, ?>) unaryOperator1);
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function3 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      function1.apply(unaryOperator0);
      Function<Object, Object> function4 = function1.andThen((Function<? super String, ?>) unaryOperator2);
      Function<Object, Object> function5 = function1.andThen((Function<? super String, ?>) unaryOperator1);
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function7 = function1.compose((Function<? super Object, ?>) function5);
      function6.compose((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      function6.compose((Function<? super String, ?>) unaryOperator1);
      unaryOperator2.compose((Function<? super String, ? extends String>) function1);
      function4.compose((Function<? super String, ?>) function3);
      unaryOperator2.apply("not");
      function6.compose((Function<? super Object, ?>) function5);
      Function<Object, String> function8 = function6.andThen((Function<? super String, ? extends String>) function1);
      jSTerm0.add((Object) null);
      Function<Object, Object> function9 = function3.andThen((Function<? super Object, ?>) function8);
      Function.identity();
      unaryOperator2.compose((Function<? super Object, ? extends String>) function7);
      function2.apply(function4);
      Object object0 = new Object();
      function1.apply("not");
      Function<Object, String> function10 = function2.compose((Function<? super Object, ?>) function9);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super JSTerm, ?>) function10);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-991L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-991L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-991L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1993L));
      System.setCurrentTimeMillis((-1331L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1331L));
      System.setCurrentTimeMillis(3268L);
      System.setCurrentTimeMillis((-1993L));
      System.setCurrentTimeMillis((-2762L));
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(127);
      CharBuffer charBuffer1 = CharBuffer.allocate(127);
      CharBuffer charBuffer2 = CharBuffer.allocate(127);
      charBuffer1.read(charBuffer2);
      charBuffer0.order();
      charBuffer0.codePoints();
      charBuffer1.duplicate();
      charBuffer1.flip();
      CharBuffer charBuffer3 = CharBuffer.allocate('+');
      CharBuffer.allocate(127);
      CharBuffer charBuffer4 = charBuffer1.append('.');
      charBuffer4.put('+');
      charBuffer2.order();
      charBuffer3.order();
      CharBuffer charBuffer5 = charBuffer4.append('t');
      charBuffer0.order();
      CharBuffer charBuffer6 = charBuffer0.append('\u008D');
      CharBuffer charBuffer7 = charBuffer6.append('~');
      charBuffer7.put(charBuffer5);
      charBuffer0.mark();
      charBuffer1.duplicate();
      CharBuffer.allocate(127);
      charBuffer4.chars();
      charBuffer7.chars();
      charBuffer7.compact();
      charBuffer7.append('u');
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.trimToSize();
      jSPredicateForm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1331L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2170L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function3 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      function1.apply(unaryOperator0);
      Function<Object, Object> function4 = function1.andThen((Function<? super String, ?>) unaryOperator2);
      Function<Object, Object> function5 = function1.andThen((Function<? super String, ?>) unaryOperator1);
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function7 = function1.compose((Function<? super Object, ?>) function5);
      function6.compose((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      function6.compose((Function<? super String, ?>) unaryOperator1);
      unaryOperator2.compose((Function<? super String, ? extends String>) function1);
      function4.compose((Function<? super String, ?>) function3);
      unaryOperator2.apply("not");
      function6.compose((Function<? super Object, ?>) function5);
      Function.identity();
      Function<Object, String> function8 = function6.andThen((Function<? super String, ? extends String>) function1);
      jSTerm0.add((Object) null);
      Function<Object, Object> function9 = function3.andThen((Function<? super Object, ?>) function8);
      Function.identity();
      unaryOperator2.compose((Function<? super Object, ? extends String>) function7);
      function8.compose((Function<? super Object, ?>) function2);
      function2.apply(function4);
      Object object0 = new Object();
      function1.apply("not");
      Function<Object, String> function10 = function2.compose((Function<? super Object, ?>) function9);
      unaryOperator0.andThen((Function<? super JSTerm, ?>) function10);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      stringReader0.close();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = 13L;
      long long1 = (-1200L);
      StringReader stringReader0 = new StringReader("CHkErKZ_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "rz ");
      jSTerm0.setSize(562);
      jSTerm0.add((Object) "rz ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "rz ";
      jSTerm0.lastElement();
      objectArray0[3] = (Object) "rz ";
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = (Object) jSTerm0;
      jSSubstitution0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.exclamation = (-3419);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4293230219306162
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(0);
      linkedList0.add(integer1);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      Integer integer2 = new Integer((-168));
      linkedList0.add(integer2);
      Integer integer3 = new Integer((-168));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("ao.]/$o,!g b~e/s=");
      linkedList1.offerLast("nz");
      linkedList0.containsAll(linkedList1);
      linkedList0.add(integer3);
      linkedList0.add(integer3);
      Integer integer4 = new Integer(696);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer5 = new Integer(696);
      Integer integer6 = new Integer((-3));
      linkedList2.add(integer6);
      Integer integer7 = new Integer(2053);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer8 = new Integer(1231);
      linkedList2.add(integer5);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList2.add(integer5);
      Integer integer9 = new Integer(696);
      Integer integer10 = new Integer(0);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer integer11 = new Integer(1231);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(QjX^Ek");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4293230219306162
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(0);
      linkedList0.add(integer1);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      Integer integer2 = new Integer((-168));
      linkedList0.add(integer2);
      Integer integer3 = new Integer((-168));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("ao.]7$o,!g b~e/s=");
      linkedList1.offerLast("nz");
      linkedList0.containsAll(linkedList1);
      linkedList0.add(integer3);
      linkedList0.add(integer3);
      Integer integer4 = new Integer(706);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer5 = new Integer(706);
      Integer integer6 = new Integer((-3));
      linkedList2.add(integer6);
      Integer integer7 = new Integer(2053);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer8 = new Integer(1231);
      linkedList2.add(integer5);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList2.add(integer5);
      Integer integer9 = new Integer(706);
      Integer integer10 = new Integer(0);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer integer11 = new Integer(1231);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(QjX^Ek");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("%%%");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(0e'{P>R:Wu{OQ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
