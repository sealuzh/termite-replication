/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 17:36:45 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.151724182279323
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Integer integer0 = new Integer((-1340));
      Integer integer1 = new Integer((-3024));
      Integer integer2 = new Integer((-1478055809));
      Integer integer3 = new Integer(1826);
      StringReader stringReader0 = new StringReader("*}\"HbMZ@,>Z`5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.pushBack();
      streamTokenizer0.quoteChar((-3024));
      streamTokenizer0.wordChars((-36849270), (-1610612755));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.trimToSize();
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer0.commentChar((-1610612755));
      streamTokenizer0.pushBack();
      jSTerm1.add((Object) "*}\"HbMZ@,>Z`5");
      streamTokenizer0.whitespaceChars((-2013403795), 3715);
      stringReader0.close();
      streamTokenizer0.whitespaceChars((-1478055809), 513);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(not(*}\"HbMZ@,>Z`5))", stringBuffer0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.183863741747269
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("JSPredicateForm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) null);
      Integer integer0 = new Integer((-1340));
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.removeElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSSubstitution jSSubstitution2 = jSPredicateForm1.matches(jSPredicateForm2, jSSubstitution0);
      assertEquals(6, jSTerm0.size());
      assertFalse(jSSubstitution2.fail());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1934951464605863
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "onflYgz^gn^p`wog+mp8");
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm0.equals(jSPredicateForm2);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm3.trimToSize();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm3.matches(jSPredicateForm4, jSSubstitution0);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm2.clonePF();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm6.spliterator();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm4.standarizerPredicateForm();
      jSPredicateForm4.equals(jSPredicateForm3);
      JSPredicateForm jSPredicateForm8 = jSPredicateForm4.standarizerPredicateForm();
      jSPredicateForm1.equals(jSPredicateForm3);
      jSPredicateForm0.matches(jSPredicateForm4);
      JSPredicateForm jSPredicateForm9 = jSPredicateForm6.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm10 = jSPredicateForm8.clonePF();
      jSPredicateForm9.equals(jSPredicateForm6);
      JSPredicateForm jSPredicateForm11 = jSPredicateForm6.standarizerPredicateForm();
      jSPredicateForm3.standarizerPredicateForm();
      assertEquals(2, jSPredicateForm3.capacity());
      
      jSPredicateForm7.matches(jSPredicateForm8);
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm11.matches(jSPredicateForm8);
      jSPredicateForm9.standarizerPredicateForm();
      jSPredicateForm4.clonePF();
      jSPredicateForm5.clonePF();
      assertTrue(jSPredicateForm5.equals((Object)jSPredicateForm10));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addAll((Collection) jSTerm0);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3486605689713569
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "!");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      function1.apply(jSTerm0);
      Function.identity();
      function1.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator0.apply(function1);
      function1.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) jSTerm0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      jSTerm0.sort(comparator0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.969653847577839
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Integer integer0 = new Integer((-1340));
      Integer integer1 = new Integer((-3024));
      Integer integer2 = new Integer((-1478055809));
      Integer integer3 = new Integer(1826);
      StringReader stringReader0 = new StringReader("*}\"HbMZ@,>Z`5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.wordChars(41, (-2090));
      streamTokenizer0.wordChars((-36849270), (-1610612734));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer0.commentChar((-1610612734));
      jSTerm1.makeConstant();
      streamTokenizer0.pushBack();
      jSTerm1.add((Object) "*}\"HbMZ@,>Z`5");
      streamTokenizer0.whitespaceChars((-36849270), 40);
      streamTokenizer0.sval = "->";
      stringReader0.close();
      streamTokenizer0.whitespaceChars((-1478055809), 513);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm1.print();
      assertEquals("[not, [*}\"HbMZ@,>Z`5]]", jSTerm0.toString());
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3979162524135142
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "! ");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      function1.apply(jSTerm0);
      unaryOperator0.apply(function1);
      function1.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.setSize(496);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(496);
      System.setCurrentTimeMillis(496);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "!");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<String, String> function2 = Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      function1.apply(function2);
      UnaryOperator.identity();
      Function.identity();
      function1.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator0.apply(function1);
      function1.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3485552475882885
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      function1.apply(jSTerm0);
      UnaryOperator.identity();
      function1.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.apply(function1);
      function1.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.setSize(496);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(496);
      System.setCurrentTimeMillis(496);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      jSPredicateForm0.add((Object) "not");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2802);
      Integer integer1 = new Integer(967);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(967);
      Integer integer4 = new Integer(1666);
      Integer integer5 = new Integer((-4540));
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer((-924));
      Integer integer8 = new Integer(967);
      Integer integer9 = new Integer(1666);
      Integer integer10 = new Integer((-22583480));
      Integer integer11 = new Integer((-162));
      Integer integer12 = new Integer(967);
      StringReader stringReader0 = new StringReader("(?LzW/`Q5iaku");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(?LzW/`Q5iaku");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "('LnB/`O^#GH";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("('LnB/`O^#GH");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.028525748125744
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EvYZ3");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "EvYZ3");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSPredicateForm0.isEmpty();
      jSPredicateForm0.lastElement();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      jSPredicateForm0.addElement(jSPredicateForm2);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      Integer integer0 = new Integer(37);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm2.clonePF();
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm4.clonePF();
      jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm2.print();
      jSPredicateForm4.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.applySubstitutionPF(jSSubstitution0);
      assertEquals("[EvYZ3, [EvYZ3], [EvYZ3, [EvYZ3]]]", jSPredicateForm0.toString());
      assertNotSame(jSPredicateForm5, jSPredicateForm4);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.257173852897366
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi@A5(TPe`^9BD");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "hi@A5(TPe`^9BD");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      jSPredicateForm0.lastElement();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSJshopVars.percent = 39;
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      jSPredicateForm0.addElement(jSPredicateForm2);
      assertEquals(2, jSTerm0.size());
      
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm3.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.cloneS();
      JSJshopVars.slash = (-21);
      jSSubstitution1.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm4.parallelStream();
      JSPredicateForm jSPredicateForm5 = new JSPredicateForm((String) null);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm4.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm7 = jSPredicateForm6.standarizerPredicateForm();
      JSJshopVars.leftPar = 295;
      JSPredicateForm jSPredicateForm8 = (JSPredicateForm)jSPredicateForm7.clone();
      jSPredicateForm8.equals(jSPredicateForm3);
      JSPredicateForm jSPredicateForm9 = new JSPredicateForm();
      jSPredicateForm6.standarizerPredicateForm();
      assertTrue(jSPredicateForm4.equals((Object)jSPredicateForm2));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4850884752336673
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "noL";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noL");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm2.sort(comparator0);
      jSTerm0.lastElement();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm1.replaceAll(unaryOperator0);
      jSPredicateForm0.addElement((Object) null);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm3.removeAllElements();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "^");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "^";
      objectArray0[2] = (Object) "^";
      objectArray0[7] = (Object) jSTerm0;
      objectArray0[4] = (Object) "^";
      jSTerm0.add(objectArray0[7]);
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[7] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.spliterator();
      jSPredicateForm0.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3221086830269158
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) "COnfLgZ^N^k`WOG{mp8";
      objectArray0[2] = (Object) "COnfLgZ^N^k`WOG{mp8";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) iterator0;
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) "COnfLgZ^N^k`WOG{mp8";
      jSTerm0.toArray(objectArray0);
      UnaryOperator.identity();
      jSTerm0.add((Object) "COnfLgZ^N^k`WOG{mp8");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) listIterator0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector$ListItr cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.setSize(535);
      jSTerm0.setSize(535);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSSubstitution0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "nqt");
      UnaryOperator.identity();
      jSPredicateForm0.addElement("nqt");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "pLt");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1879);
      StringReader stringReader0 = new StringReader("^aimW.3h>3YOVZ;%");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-2));
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.clone();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      int int0 = 1939;
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-3647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.add((Object) "not");
      int int0 = 546;
      jSTerm0.setSize(546);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      int int0 = 504;
      jSTerm0.setSize(504);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "not";
      StringReader stringReader0 = new StringReader("not");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      int int0 = 504;
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      jSPredicateForm0.add((Object) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      System.setCurrentTimeMillis(1L);
      Function.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[4] = (Object) "COnfLgZ^N^k`WOG{mp8";
      objectArray0[2] = (Object) "COnfLgZ^N^k`WOG{mp8";
      Object object0 = new Object();
      objectArray0[3] = objectArray0[2];
      objectArray0[4] = (Object) iterator0;
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) "COnfLgZ^N^k`WOG{mp8";
      jSTerm0.add((Object) "/");
      jSTerm0.toArray(objectArray0);
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "/");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "8mbix:'0('.2gh,'h");
      int int0 = 535;
      jSTerm0.setSize(535);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSSubstitution0.stream();
      jSSubstitution0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "not";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      int int0 = 535;
      jSTerm0.setSize(535);
      System.setCurrentTimeMillis(535);
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-1));
      jSTerm0.add((Object) integer0);
      int int0 = 496;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vyot");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Vyot");
      int int0 = 504;
      jSTerm0.setSize(504);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")*T>+As+pLta/U.D;h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.sval = "J_?k$wT\"bP]8jj\"Ms";
      streamTokenizer1.ttype = (-4);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.pushBack();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.wordChars((-4), (-4));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.wordChars((-4), (-4));
      stringReader0.read();
      jSTerm0.add((Object) ")*T>+As+pLta/U.D;h");
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars(40, (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3221086830269158
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.add((Object) "COnfLgZ^N^k`WOG{mp8");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nol");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.wordChars((-1), (-1));
      jSTerm1.add((Object) "nol");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      streamTokenizer0.resetSyntax();
      jSSubstitution0.sort(comparator0);
      streamTokenizer0.pushBack();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      String string0 = "i\\YB^dJRt4zfks~Y";
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pLt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = null;
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.whitespaceChars((-4), 1);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.nval = (double) (-4);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.pushBack();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.wordChars((-4), (-4));
      jSTerm0.add((Object) "pLt");
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.pushBack();
      streamTokenizer0.whitespaceChars(563, (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      jSTerm0.add((Object) null);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("'LW/lZ^G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      jSPredicateForm0.add((Object) "nqt");
      UnaryOperator.identity();
      Integer integer0 = new Integer((-56563012));
      Integer integer1 = new Integer((-56563012));
      Integer integer2 = new Integer(32);
      Integer integer3 = new Integer(1528);
      Integer integer4 = new Integer(32);
      Integer integer5 = new Integer(39);
      Integer integer6 = new Integer(1878);
      Integer integer7 = new Integer((-56563012));
      Integer integer8 = new Integer((-812));
      Integer integer9 = new Integer(1506);
      Integer integer10 = new Integer((-422));
      Integer integer11 = new Integer(1528);
      Integer integer12 = new Integer(1);
      Integer integer13 = new Integer(33);
      Integer integer14 = new Integer((-3));
      jSPredicateForm0.print();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(2798);
      Integer integer1 = new Integer(967);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(967);
      Integer integer4 = new Integer(1634);
      Integer integer5 = new Integer((-4540));
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer((-924));
      Integer integer8 = new Integer(967);
      Integer integer9 = new Integer(44);
      int int0 = 33;
      Integer integer10 = new Integer(33);
      Integer integer11 = new Integer(44);
      Integer integer12 = new Integer((-85382544));
      Integer integer13 = new Integer((-85382544));
      Integer integer14 = new Integer(33);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(0);
      jSPredicateForm0.setSize(967);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer((-3));
      Integer integer1 = new Integer((-3));
      Integer integer2 = new Integer((-2004976608));
      Integer integer3 = new Integer((-1973));
      Integer integer4 = new Integer((-25));
      Integer integer5 = new Integer((-25));
      Integer integer6 = new Integer((-1));
      Integer integer7 = new Integer((-570));
      Integer integer8 = new Integer(3728);
      Integer integer9 = new Integer((-2028287951));
      Integer integer10 = new Integer((-3));
      Integer integer11 = new Integer((-25));
      Integer integer12 = new Integer(2307);
      Integer integer13 = new Integer(0);
      Integer integer14 = new Integer((-1283));
      Integer integer15 = new Integer((-2004976608));
      Integer integer16 = new Integer(0);
      Integer integer17 = new Integer((-1973));
      Integer integer18 = new Integer(45);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement(integer5);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-322));
      jSTerm0.add((Object) integer0);
      Integer integer1 = new Integer((-1340));
      Integer integer2 = new Integer((-322));
      Integer integer3 = new Integer((-2182));
      Integer integer4 = new Integer((-322));
      Integer integer5 = new Integer(1826);
      Integer integer6 = new Integer((-2628));
      Integer integer7 = new Integer(43);
      Integer integer8 = new Integer((-561));
      Integer integer9 = new Integer((-2628));
      Integer integer10 = new Integer(43);
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "qt";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "qt");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSPredicateForm0.toStr();
      Function<Object, String> function0 = null;
      // Undeclared exception!
      try { 
        unaryOperator0.andThen((Function<? super Object, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      jSPredicateForm0.add((Object) "not");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      Function.identity();
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis(63L);
      System.setCurrentTimeMillis(63L);
      System.setCurrentTimeMillis((-1221L));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pLt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = null;
      streamTokenizer0.eolIsSignificant(false);
      Integer integer0 = new Integer((-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.nval = (double) (-4);
      stringReader0.skip((-1998L));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      streamTokenizer0.pushBack();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.wordChars((-4), (-1631));
      jSTerm0.add((Object) "pLt");
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.pushBack();
      streamTokenizer0.whitespaceChars(563, (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pLt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = null;
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer((-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.ttype = (-4);
      stringReader0.skip((-1998L));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.stream();
      streamTokenizer0.pushBack();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.wordChars((-4), 669);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-4));
      jSTerm1.setSize(563);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.add((Object) "COnfLgZ^N^k`WOG{mp8");
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) "COnfLgZ^N^k`WOG{mp8";
      jSTerm0.add(objectArray0[1]);
      objectArray0[2] = (Object) "COnfLgZ^N^k`WOG{mp8";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) iterator0;
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) "COnfLgZ^N^k`WOG{mp8";
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) "COnfLgZ^N^k`WOG{mp8");
      jSTerm0.setSize(537);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer((-3));
      Integer integer1 = new Integer((-3));
      Integer integer2 = new Integer((-2004976608));
      Integer integer3 = new Integer((-1973));
      Integer integer4 = new Integer((-25));
      Integer integer5 = new Integer((-25));
      Integer integer6 = new Integer((-1));
      Integer integer7 = new Integer((-570));
      Integer integer8 = new Integer(0);
      Integer integer9 = new Integer((-1));
      Integer integer10 = new Integer((-1));
      Integer integer11 = new Integer(46);
      Integer integer12 = new Integer((-3));
      Integer integer13 = new Integer((-2077));
      Integer integer14 = new Integer((-2756));
      Integer integer15 = new Integer((-1159591874));
      Integer integer16 = new Integer((-2004976608));
      Integer integer17 = new Integer(1670);
      Integer integer18 = new Integer((-2756));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertEquals("[]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n<o");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "n<o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-453));
      Integer integer1 = new Integer((-1));
      Function.identity();
      UnaryOperator.identity();
      Function<Object, String> function0 = null;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        unaryOperator0.andThen((Function<? super Object, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.backquote = 537;
      jSPredicateForm0.equals((JSPredicateForm) null);
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "\"");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      int int0 = (-2222);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-2222), 496);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "\"");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      int int0 = (-2222);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-2222), 496);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 496;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "('LnB/`O^#GH";
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, String> function0 = null;
      StreamTokenizer streamTokenizer0 = null;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pLt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.wordChars((-1082013334), (-2));
      Integer integer1 = new Integer((-4));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      streamTokenizer0.pushBack();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      jSTerm0.add((Object) "pLt");
      streamTokenizer0.parseNumbers();
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.whitespaceChars(512, 563);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 39);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.whitespaceChars(39, 3329);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), 535);
      System.setCurrentTimeMillis((-4));
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      assertEquals("[pLt]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.isGround();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) "COnfLgZ^N^k`WOG{mp8";
      objectArray0[2] = (Object) "COnfLgZ^N^k`WOG{mp8";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) iterator0;
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) "COnfLgZ^N^k`WOG{mp8";
      jSTerm0.toArray(objectArray0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) "COnfLgZ^N^k`WOG{mp8");
      jSTerm0.setSize(537);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pLt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.ttype = (-4);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.pushBack();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.wordChars((-4), (-4));
      jSTerm0.add((Object) "pLt");
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars(40, (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      jSTerm0.clonePF();
      stringReader0.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pLt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.sval = "J_?k$wT\"bP]8jj\"Ms";
      streamTokenizer1.ttype = (-4);
      stringReader0.skip((-4));
      streamTokenizer0.pushBack();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.wordChars((-4), (-4));
      stringReader0.read();
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars(40, (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pLt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.sval = "J_?k$wT\"bP]8jj\"Ms";
      streamTokenizer1.ttype = (-4);
      stringReader0.skip((-4));
      streamTokenizer0.pushBack();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.wordChars((-4), (-4));
      stringReader0.read();
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars(40, (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(wLz]/`Q.aku");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
