/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 16:43:02 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3674724429174536
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl2.setLineNumber((-33));
      locatorImpl2.setColumnNumber((-33));
      locatorImpl2.getSystemId();
      locatorImpl1.getSystemId();
      locatorImpl2.setSystemId("p$(%iHnl/[7n");
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl2);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      locatorImpl1.getSystemId();
      dispatchHandler0.getHandler(" of document ");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, " of document ");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.setProperty("http://xml.org/sax/properties/declaration-handler", defaultHandler2_0);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.getXMLFilter();
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      xMLFilterImpl0.getDTDHandler();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.getHandler("S40}vh*~/^&uN}zH/");
      String[] stringArray0 = new String[0];
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 1392);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid path of length: 0 it must be greater than 2
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2990696902149015
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.getContentHandler();
      sAXReader0.setIgnoreComments(true);
      int int0 = (-30);
      String string0 = "/%,";
      InputSource inputSource0 = new InputSource();
      // Undeclared exception!
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXReader sAXReader2 = new SAXReader(xMLFilterImpl0, false);
      assertFalse(sAXReader2.isIgnoreComments());
      assertTrue(sAXReader2.isStringInternEnabled());
      assertFalse(sAXReader2.isValidating());
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader2.isMergeAdjacentText());
      assertFalse(sAXReader2.isStripWhitespaceText());
      
      sAXReader1.getErrorHandler();
      assertTrue(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2473399979120656
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.getContentHandler();
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl2.setParent((XMLReader) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte) (-27);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DOMNamespace dOMNamespace0 = new DOMNamespace("4;T._8Um^gh2No2H", (String) null);
      QName qName0 = QName.get("", (Namespace) dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createElement(qName0);
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", dOMNamespace0);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0527955150076096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" J1*^v5xj>qq");
      sAXReader_SAXEntityResolver0.resolveEntity(" J1*^v5xj>qq", " J1*^v5xj>qq");
      sAXReader_SAXEntityResolver0.resolveEntity("1O@)a$|^{nt", "http://xml.org/sax/features/namespace-prefixes");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/namespace-prefixes", "//tmp/tmp/Po@K0006mG.mk&HOl");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/tmp/Po@K0006mG.mk&HOl", " J1*^v5xj>qq");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/snnbU%0ETN0snnbU%0ETN", "//tmp/snnbU%0ETN0snnbU%0ETN");
      sAXReader_SAXEntityResolver0.resolveEntity("1O@)a$|^{nt", "M>i");
      sAXReader_SAXEntityResolver0.resolveEntity("n{*", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("http://xml.org/sax/handlers/LexicalHandler");
      sAXReader_SAXEntityResolver1.resolveEntity("1O@)a$|^{nt", (String) null);
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", true);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\"tWaV{|OsxM!.f");
      MockFile.createTempFile("org.dom4j.io.SAXReader$SAXEntityResolver", "Ci?a}]");
      MockFile.createTempFile("Aq}1k0 O>c CgUTW(", "Ci?a}]");
      MockURL.getFtpExample();
      MockFile mockFile0 = new MockFile("Aq}1k0 O>c CgUTW(", "C]*]a 8(`s%zSe");
      mockFile0.getCanonicalPath();
      MockFile mockFile1 = new MockFile("set(int,Object) unsupported", "[{BFd-jv");
      mockFile0.toURL();
      mockFile0.setWritable(false, true);
      mockFile0.setReadable(true);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "C]*]a 8(`s%zSe");
      MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("qh0bU6QET8D/^BuMxdA`U8twB*Z");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "set(int,Oject) unsupported");
      File file0 = MockFile.createTempFile("Aq}1k0 O>c CgUTW(", "qh0bU6QET8D");
      File file1 = file0.getAbsoluteFile();
      MockFile.createTempFile("qh0bU6QET8D", "Aq}1k0 O>c CgUTW(");
      MockURL.getFtpExample();
      MockFile mockFile0 = new MockFile("Aq}1k0 O>c CgUTW(");
      file1.setWritable(false, false);
      file1.toURL();
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "^BuMxdA`U8twB*Z");
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2473399979120656
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 683);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      String string0 = "//tmp/true() requires no arguments.0/tmp/attributes0Po@K";
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) dataInputStream0, "//tmp/true() requires no arguments.0/tmp/attributes0Po@K");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.322497969578516
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      MockException mockException0 = new MockException();
      locatorImpl0.getColumnNumber();
      SAXParseException sAXParseException0 = new SAXParseException("//tmp/X(PXUf'K?T=Lqz0X(PXUf'K?T=Lqz", locatorImpl0, mockException0);
      xMLFilterImpl1.warning(sAXParseException0);
      xMLFilterImpl1.getContentHandler();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)82;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 535, (byte)76);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLFilterImpl1, defaultHandler2_0);
      byteArrayInputStream0.mark((byte)82);
      byteArrayInputStream0.close();
      byteArrayInputStream0.close();
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.332817980313744
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getContentHandler();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.getColumnNumber();
      locator2Impl1.setLineNumber((-30));
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1, true);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)81;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      File file0 = MockFile.createTempFile("V.Yo\"", (String) null);
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2990696902149015
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.getContentHandler();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.getColumnNumber();
      int int0 = (-30);
      String string0 = "G%%,";
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      NamespaceStack namespaceStack3 = new NamespaceStack();
      Namespace namespace0 = Namespace.get("or.axen.pattrn.Pattern");
      namespace0.getName();
      Namespace namespace1 = Namespace.get("or.axen.pattrn.Pattern", "9t?#mQf|m3d*5H%Y}g");
      DOMNamespace dOMNamespace0 = new DOMNamespace("or.axen.pattrn.Pattern", "VSNT0o");
      QName qName0 = QName.get("", (Namespace) dOMNamespace0);
      namespaceStack1.getNamespaceForPrefix("VSNT0o");
      defaultDocumentFactory0.createQName("9t?#mQf|m3d*5H%Y}g", (Namespace) null);
      qName0.getQualifiedName();
      NamespaceStack namespaceStack4 = new NamespaceStack();
      namespaceStack1.pop("//tmp/tmp/tmp/Po@K000/tmp/Po@K000aGx2m");
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, namespace1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.076104579100767
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      String string0 = "zkeqF";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("zkeqF");
      sAXReader_SAXEntityResolver0.resolveEntity("Qm44l:!|1]U@~G#", ":M[{mKi%nOT$@Fn#");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      pruningDispatchHandler0.setDefaultHandler(dispatchHandler0);
      sAXReader0.addHandler("org.dom4j.util.NonLazyElement", pruningDispatchHandler0);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, true);
      try { 
        MockURL.URL("org.dom4j.util.NonLazyElement", "org.jaxen.expr.DefaultExpr", 1, ":M[{mKi%nOT$@Fn#");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: org.dom4j.util.nonlazyelement
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5536204259420283
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl1.getSystemId();
      locatorImpl2.setSystemId("p$(%iHnl/[7n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B$1");
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl2);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.isStripWhitespaceText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("Y!OM7", "Y!OM7");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.getXMLFilter();
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLReader0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1);
      sAXReader0.isIncludeInternalDTDDeclarations();
      SAXReader sAXReader2 = new SAXReader(documentFactory0);
      sAXReader1.getEntityResolver();
      sAXReader2.isIgnoreComments();
      URL uRL0 = MockURL.getFtpExample();
      sAXReader2.getDocumentFactory();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "aJy:5?\"", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl1.getSystemId();
      locatorImpl2.setSystemId((String) null);
      locatorImpl2.setSystemId("p$(%iHnl/[7n");
      locatorImpl1.getSystemId();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl2);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      locatorImpl1.getColumnNumber();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      inputSource0.getByteStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      StringReader stringReader0 = new StringReader("//tmp/Aq}1k0 O>c CgUTW(0qh0bU6QET8D");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.getDispatchHandler();
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/true() requires no arguments.0/tmp/attributes0Po@K");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/true() requires no arguments.0/tmp/attributes0Po@K not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3080502943468506
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      xMLFilterImpl0.getContentHandler();
      int int0 = (-30);
      // Undeclared exception!
      try { 
        sAXReader0.read("/,");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4135748571943636
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Aq}1k0 O>c CgUTW(0qh0bU6QET8D");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "Aq}1k0 O>c CgUTW(");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "^-Pj#");
      File file0 = MockFile.createTempFile("zQ7B", "^-Pj#");
      File file1 = MockFile.createTempFile("org.dom4j.dom.DOMElement", "^-Pj#");
      MockURL.getFtpExample();
      MockFile mockFile0 = new MockFile(file0, "The node cannot be a child of attribute");
      mockFile0.getCanonicalPath();
      MockFile mockFile1 = new MockFile(file1, "org.dom4j.dom.DOMElement");
      mockFile1.toURL();
      mockFile1.getCanonicalPath();
      mockFile1.toURL();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFile0.setReadOnly();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      try { 
        sAXReader0.read((Reader) null, "org.dom4j.dom.DOMElement");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/org.dom4j.dom.DOMElement (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/org.dom4j.dom.DOMElement (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)92;
      pipedOutputStream0.flush();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-21);
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte)92;
      byteArray1[4] = (byte)29;
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.getDocumentFactory();
      byteArray1[5] = (byte) (-95);
      byteArray1[6] = (byte)92;
      byteArray1[7] = (byte)29;
      byteArray1[8] = (byte)29;
      try { 
        pipedOutputStream0.write(byteArray1, 28, (int) (byte)92);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl1.getSystemId();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack();
      NamespaceStack namespaceStack2 = new NamespaceStack();
      NamespaceStack namespaceStack3 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      NamespaceStack namespaceStack4 = new NamespaceStack();
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      namespace1.getName();
      DOMNamespace dOMNamespace0 = new DOMNamespace((String) null, ";");
      NamespaceStack namespaceStack5 = new NamespaceStack();
      NamespaceStack namespaceStack6 = new NamespaceStack();
      NamespaceStack namespaceStack7 = new NamespaceStack();
      namespaceStack4.getNamespaceForPrefix((String) null);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/true() requires no arguments.0/tmp/attributes0Po@K");
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.createDefaultEntityResolver("fNdN}ReJ!@AT,LB:");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.getColumnNumber();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      locator2Impl1.setLineNumber((-3756));
      String string0 = "";
      SAXParseException sAXParseException0 = new SAXParseException("", locator2Impl1);
      xMLFilterImpl1.fatalError(sAXParseException0);
      xMLFilterImpl0.setErrorHandler(xMLFilterImpl1);
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl1);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4989990056051803
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getColumnNumber();
      locator2Impl1.setLineNumber((-1));
      SAXParseException sAXParseException0 = new SAXParseException(" data: ", locator2Impl1);
      xMLFilterImpl1.fatalError(sAXParseException0);
      DOMDocument dOMDocument0 = new DOMDocument();
      xMLFilterImpl0.setErrorHandler(xMLFilterImpl1);
      xMLFilterImpl0.setParent((XMLReader) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      QName qName0 = QName.get("G%%,", "");
      qName0.getDocumentFactory();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/org.jaxen.pattern.Pattern0qj0bU6QETQD", "or.axen.pattrn.Pattern");
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.338261407969476
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Aq}1k0 O>c CgUTW(0qh0bU6QET8D");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "//tmp/h50!U6QE[D0h50!U6QE[D");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "qh0bU6QET8D");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qh0bU6QET8D");
      File file0 = MockFile.createTempFile("Aq}1k0 O>c CgUTW(", "qh0bU6QET8D");
      MockURL.getFtpExample();
      file0.getCanonicalPath();
      file0.toURL();
      file0.setReadOnly();
      FileSystemHandling.shouldAllThrowIOExceptions();
      file0.toURL();
      char[] charArray0 = new char[2];
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      CharBuffer.wrap(charArray0);
      String string0 = "//tmp/Aq}1k0 O>c CgUTW(0qh0bU6QET8D";
      StringReader stringReader0 = new StringReader("//tmp/Aq}1k0 O>c CgUTW(0qh0bU6QET8D");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("p~8lEE#]_yR'L");
      sAXReader_SAXEntityResolver0.resolveEntity("p~8lEE#]_yR'L", "p~8lEE#]_yR'L");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      HandlerBase handlerBase0 = new HandlerBase();
      documentFactory0.createDocument("//tmp/org.jaxen.pattern.Pattern0org.jaxen.pattern.Pattern");
      SAXReader sAXReader1 = new SAXReader(documentFactory0, false);
      sAXReader1.setValidation(false);
      sAXReader1.setIncludeInternalDTDDeclarations(false);
      sAXReader1.isIncludeInternalDTDDeclarations();
      QName qName0 = QName.get("']", "']");
      qName0.getDocumentFactory();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)26;
      DefaultHandler defaultHandler0 = new DefaultHandler();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      String string0 = "X(PXUf'K?T=Lqz";
      sAXReader0.removeHandler("X(PXUf'K?T=Lqz");
      sAXReader0.isValidating();
      try { 
        sAXReader0.setFeature("G3]6y073E$Zx7?a06P(", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'G3]6y073E$Zx7?a06P(' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setXMLReader((XMLReader) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      NamespaceStack namespaceStack3 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      namespace0.getName();
      Namespace namespace1 = Namespace.get("org.jaxen.pattern.Pattern", "9t?#m{fd|mcd*Y}g");
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.jaxen.pattern.Pattern", "V!#hFo");
      defaultDocumentFactory0.createQName("V!#hFo", namespace1);
      defaultDocumentFactory0.createQName("9t?#m{fd|mcd*Y}g", namespace1);
      NamespaceStack namespaceStack4 = new NamespaceStack(defaultDocumentFactory0);
      QName qName0 = QName.get("org.jaxen.pattern.Pattern", (Namespace) dOMNamespace0, "//tmp/tmp/attributes0Po@K0The Node already has an existing parent of \"");
      assertEquals("V!#hFo", qName0.getNamespaceURI());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2481121986842663
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.getContentHandler();
      int int0 = (-30);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      sAXReader0.getXMLReader();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      xMLFilterImpl1.setDocumentLocator(locator2Impl1);
      // Undeclared exception!
      try { 
        sAXReader0.read("/%,");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7012136219835283
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.resetHandlers();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl0);
      locatorImpl0.setColumnNumber(0);
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl1);
      locatorImpl3.getSystemId();
      locatorImpl0.getSystemId();
      locatorImpl3.setSystemId("<![CDATA[");
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("o_3<w");
      sAXReader_SAXEntityResolver0.resolveEntity("xi_6o;/ ", (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("_YT", "http://xml.org/sax/features/namespaces");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      locatorImpl3.getSystemId();
      dispatchHandler0.getHandler("org.dom4j.dom.DOMDocumentType");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("+");
      sAXReader_SAXEntityResolver1.resolveEntity("http://xml.org/sax/features/namespaces", "//tmp/tmp/Po@K000/tmp/Po@K00");
      sAXReader_SAXEntityResolver1.resolveEntity("+", "/csf|;W`_");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      assertFalse(defaultHandler2_1.equals((Object)defaultHandler2_0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl2.setLineNumber((-33));
      locatorImpl2.setColumnNumber((-33));
      locatorImpl2.getSystemId();
      locatorImpl1.getSystemId();
      locatorImpl2.setSystemId("p$(%iHnl/[7n");
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl2);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      locatorImpl1.getSystemId();
      dispatchHandler0.getHandler(" of document ");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, " of document ");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "http://xml.org/sax/properties/lexical-handler";
      stringArray0[1] = "t.z'3'$F|y,#XA";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "http://xml.org/sax/features/validation";
      stringArray0[5] = "COMMENT_NODE";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.getHandler("t.z'3'$F|y,#XA");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 1335);
      pruningElementStack0.getPath();
      pruningElementStack0.lastElementIndex = 347;
      DispatchHandler dispatchHandler0 = pruningElementStack0.getDispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      sAXReader0.setMergeAdjacentText(true);
      assertTrue(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack();
      NamespaceStack namespaceStack2 = new NamespaceStack();
      namespaceStack2.getAttributeQName("header", "//tmp/tmp/Po@K0006mG.mk&HOl", "//tmp/tmp/Entity0/tmp/Po@K000");
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Namespace.get("//tmp/V.Yo\"0.tmp", "//tmp/V.Yo\"0.tmp");
      QName qName0 = QName.get("ZY", namespace0);
      defaultDocumentFactory0.createElement(qName0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      MockURL.getFtpExample();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.setStripWhitespaceText(false);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "set(int,Object) unsupported");
      MockFile.createTempFile("Aq}1k0 O>c CgUTW(", "qh0bU6QET8D");
      File file0 = MockFile.createTempFile("qh0bU6QET8D", "Aq}1k0 O>c CgUTW(");
      MockURL.getFtpExample();
      file0.getCanonicalPath();
      MockFile mockFile0 = new MockFile("qh0bU6QET8D", "^BuMxdA`U8twB*Z");
      mockFile0.toURL();
      mockFile0.setWritable(true, false);
      file0.toURL();
      char[] charArray0 = new char[2];
      CharBuffer.wrap(charArray0);
      try { 
        sAXReader0.setProperty("Aq}1k0 O>c CgUTW(", "Aq}1k0 O>c CgUTW(");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'Aq}1k0 O>c CgUTW(' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      try { 
        sAXReader0.setProperty("75", xMLFilterImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: 75
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2637804311525747
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      MockFile.createTempFile("org.jaxen.pattern.Pattern", "qh0bU6QET8:D");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      NamespaceStack namespaceStack3 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      QName.get("//tmp/vB>7 lo>+&!~kxI06mG.mk&HOl", namespace1);
      SAXReader sAXReader1 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader2 = new SAXReader(xMLFilterImpl0);
      sAXReader2.setEntityResolver(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("//tmp/vB>7 lo>+&!~kxI06mG.mk&HOl");
      StringReader stringReader1 = new StringReader("a,4p5A5t!\"p1N");
      try { 
        sAXReader2.read((Reader) stringReader1, "y2QL&.Tq]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.4879527817033544
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl2.getSystemId();
      String string0 = "//tmp/Fklc-^5wl]06mG.mk&HOl";
      locatorImpl1.setSystemId("//tmp/Fklc-^5wl]06mG.mk&HOl");
      String string1 = "p$(%iHnl/[7n";
      locatorImpl1.setSystemId("]Q_\"UI|>m5{{>u");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler("http://xml.org/sax/features/string-interning", dispatchHandler0);
      locatorImpl1.getSystemId();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      locatorImpl1.getColumnNumber();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" Nested exception: ");
      sAXReader_SAXEntityResolver0.uriPrefix = "//tmp/Fklc-^5wl]06mG.mk&HOl";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("]Q_\"UI|>m5{{>u", "//tmp/true() requires no arguments.0/tmp/attributes0Po@K");
      InputSource inputSource1 = new InputSource();
      inputSource0.getByteStream();
      try { 
        sAXReader1.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/Fklc-^5wl]06mG.mk&HOl//tmp/true() requires no arguments.0/tmp/attributes0Po@K Nested exception: no protocol: //tmp/Fklc-^5wl]06mG.mk&HOl//tmp/true() requires no arguments.0/tmp/attributes0Po@K
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4509513350945165
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.removeHandler("X(PXUf'K?T=Lqz");
      sAXReader0.removeHandler((String) null);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("7");
      sAXReader0.addHandler((String) null, dispatchHandler0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("dqQ\"7c&3bL'#", "O'j1j>`Aa6]KtZ=Hld");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      assertTrue(sAXReader0.isIncludeExternalDTDDeclarations());
      
      SAXReader sAXReader1 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader2 = new SAXReader(true);
      sAXReader2.getDispatchHandler();
      assertFalse(sAXReader2.isMergeAdjacentText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      NamespaceStack namespaceStack3 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      NamespaceStack namespaceStack4 = new NamespaceStack();
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      namespace0.getName();
      DOMNamespace dOMNamespace0 = new DOMNamespace((String) null, "t|-Bgg");
      NamespaceStack namespaceStack5 = new NamespaceStack();
      NamespaceStack namespaceStack6 = new NamespaceStack();
      NamespaceStack namespaceStack7 = new NamespaceStack();
      namespaceStack6.getNamespaceForPrefix("//tmp/org.jaxen.pattern.Pattern0qj0bU6QETQD");
      try { 
        sAXReader0.setXMLReaderClassName("t|-Bgg");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class t|-Bgg not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      NamespaceStack namespaceStack2 = new NamespaceStack();
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      namespace1.getName();
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/org.jaxen.pattern.Pattern0.tmp", "namespace()");
      NamespaceStack namespaceStack3 = new NamespaceStack();
      NamespaceStack namespaceStack4 = new NamespaceStack();
      NamespaceStack namespaceStack5 = new NamespaceStack();
      NamespaceStack namespaceStack6 = new NamespaceStack();
      namespaceStack6.getNamespaceForPrefix("namespace()");
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      NamespaceStack namespaceStack2 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      NamespaceStack namespaceStack3 = new NamespaceStack();
      try { 
        sAXReader0.setFeature("+t!_&w`]", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '+t!_&w`]' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      String string1 = "X(PXUf'K?T=Lqz";
      sAXReader0.removeHandler("X(PXUf'K?T=Lqz");
      sAXReader0.isValidating();
      try { 
        sAXReader0.setFeature("G3]6y073E$Zx7?a06P(", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'G3]6y073E$Zx7?a06P(' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.removeHandler("");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Aq}1k0 O>c CgUTW(0qh0bU6QET8D");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "Aq}1k0 O>c CgUTW(");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "^-Pj#");
      File file0 = MockFile.createTempFile("zQ7B", "^-Pj#");
      File file1 = MockFile.createTempFile("org.dom4j.dom.DOMElement", "^-Pj#");
      MockURL.getFtpExample();
      MockFile mockFile0 = new MockFile(file0, "The node cannot be a child of attribute");
      mockFile0.getCanonicalPath();
      MockFile mockFile1 = new MockFile(file1, "org.dom4j.dom.DOMElement");
      mockFile1.toURL();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFile0.setReadOnly();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " of document ");
      mockFile1.toURL();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "//tmp/qn0bU60ETQD0qn0bU60ETQD";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "Qb#kN!8lVnwH)";
      MockFile.createTempFile("//tmp/tmp/qn0bU60ETD0/tmp/qn0bU60ETD0qn0bU60ETD0/tmp/Po@K00", "Qb#kN!8lVnwH)");
      String string2 = "g(2Z_";
      StringReader stringReader0 = new StringReader("g(2Z_");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      String string3 = " : ";
      try { 
        sAXReader0.read((Reader) stringReader0, " : ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  :  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getContentHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "yisNu^Nn>";
      defaultHandler2_0.startDTD("helC~BXKo.", "helC~BXKo.", "yisNu^Nn>");
      sAXReader0.setIgnoreComments(true);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("yisNu^Nn>", "yisNu^Nn>");
      DOMNamespace dOMNamespace0 = new DOMNamespace((Element) null, "yisNu^Nn>", (String) null);
      QName.get("yisNu^Nn>", (Namespace) dOMNamespace0, "yisNu^Nn>");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory(documentFactory0);
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@60ee990c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0312986443355245
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl2.setColumnNumber((-33));
      locatorImpl2.getSystemId();
      locatorImpl1.getSystemId();
      locatorImpl2.setSystemId("p$(%iHnl/[7n");
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl2);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      locatorImpl1.getColumnNumber();
      locatorImpl1.getSystemId();
      dispatchHandler0.getHandler(" of document ");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, " of document ");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.configureReader(xMLFilterImpl1, defaultHandler2_0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack();
      QName qName0 = namespaceStack1.getAttributeQName("header", "header", "header");
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Namespace namespace1 = Namespace.get("//tmp/V.Yo\"0.tmp", "//tmp/V.Yo\"0.tmp");
      QName.get((String) null, namespace1);
      defaultDocumentFactory0.createElement(qName0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      URL uRL0 = MockURL.getFtpExample();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3754e6e5 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3754e6e5 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl2.setLineNumber((-33));
      locatorImpl2.setColumnNumber((-33));
      locatorImpl2.getSystemId();
      locatorImpl1.getSystemId();
      locatorImpl1.getColumnNumber();
      locatorImpl0.setPublicId((String) null);
      locatorImpl2.setSystemId("p$(%iHnl/[7n");
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl2);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      locatorImpl1.getSystemId();
      dispatchHandler0.getHandler(" of document ");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, " of document ");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2473399979120656
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.getContentHandler();
      int int0 = (-30);
      // Undeclared exception!
      try { 
        sAXReader0.read("G%%,");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3863046904967216
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      int int0 = (-34);
      String string0 = "true() requires no arguments.";
      try { 
        sAXReader0.read("true() requires no arguments.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/true() requires no arguments. (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/true() requires no arguments. (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("vAm4W0]q<uTY[u");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class vAm4W0]q<uTY[u not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("vAm4W0]q<uT[");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class vAm4W0]q<uT[ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-54);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack(documentFactory0);
      NamespaceStack namespaceStack2 = new NamespaceStack(documentFactory0);
      NamespaceStack namespaceStack3 = new NamespaceStack();
      NamespaceStack namespaceStack4 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Namespace.get((String) null, "/");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 3698);
      pushbackInputStream0.skip((byte) (-54));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      try { 
        sAXReader0.read((InputStream) dataInputStream0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.setStringInternEnabled(true);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      NamespaceStack namespaceStack3 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      NamespaceStack namespaceStack4 = new NamespaceStack();
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      namespace0.getName();
      DOMNamespace dOMNamespace0 = new DOMNamespace("7m^1oT5o%X}[Ck- >", (String) null);
      NamespaceStack namespaceStack5 = new NamespaceStack();
      NamespaceStack namespaceStack6 = new NamespaceStack();
      NamespaceStack namespaceStack7 = new NamespaceStack();
      namespaceStack1.getNamespaceForPrefix("t|-Bgg");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader1 = new SAXReader(parserAdapter0);
      try { 
        sAXReader1.setXMLReaderClassName("|WR4H+0");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class |WR4H+0 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Aq}1k0 O>c CgUTW(0qh0bU6QET8D");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "Aq}1k0 O>c CgUTW(");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "^-Pj#");
      File file0 = MockFile.createTempFile("zQ7B", "^-Pj#");
      File file1 = MockFile.createTempFile("org.dom4j.dom.DOMElement", "^-Pj#");
      MockURL.getFtpExample();
      MockFile mockFile0 = new MockFile(file0, "The node cannot be a child of attribute");
      mockFile0.getCanonicalPath();
      MockFile mockFile1 = new MockFile(file1, "org.dom4j.dom.DOMElement");
      file1.setExecutable(false);
      mockFile0.toURL();
      mockFile0.setWritable(true, false);
      mockFile1.setReadable(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T8RRz]$Q3YOIjGXG6|\"");
      mockFile0.toURL();
      MockFile mockFile2 = new MockFile("http://xml.org/sax/properties/declaration-handler");
      try { 
        sAXReader0.read((File) mockFile2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl1.getSystemId();
      locatorImpl2.setSystemId("p$(%iHnl/[7n");
      locatorImpl1.getSystemId();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl2);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      locatorImpl1.getColumnNumber();
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(boolean0);
      
      InputSource inputSource0 = new InputSource();
      inputSource0.getByteStream();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      dispatchHandler0.removeHandler((String) null);
      dispatchHandler0.addHandler((String) null, (ElementHandler) null);
      SAXReader sAXReader2 = new SAXReader(xMLFilterImpl0, false);
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader2.isStringInternEnabled());
      assertFalse(sAXReader2.isValidating());
      assertFalse(sAXReader2.isStripWhitespaceText());
      assertFalse(sAXReader2.isMergeAdjacentText());
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader2.isIgnoreComments());
      
      sAXReader0.setDefaultHandler((ElementHandler) null);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader1.getErrorHandler();
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertTrue(sAXReader1.isValidating());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.338123915578089
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl0);
      locator2Impl0.getSystemId();
      locatorImpl0.setSystemId("k2eUkDw\"H1:Vk");
      locator2Impl0.setSystemId("}5eWaOq:J|X=6Wr");
      locator2Impl0.getSystemId();
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl2);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.getColumnNumber();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("}5eWaOq:J|X=6Wr");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, "k2eUkDw\"H1:Vk");
      inputSource0.getByteStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: k2eUkDw\"H1:Vk Nested exception: no protocol: k2eUkDw\"H1:Vk
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setErrorHandler(handlerBase0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.472760947585117
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.getEntityResolver();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.isStringInternEnabled();
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getLineNumber();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl2.setLineNumber((-33));
      locatorImpl2.setColumnNumber((-33));
      locatorImpl2.getSystemId();
      locatorImpl1.getSystemId();
      locatorImpl2.setSystemId("p$(%iHnl/[n");
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl2);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      locatorImpl1.getSystemId();
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, " of document ");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      NamespaceStack namespaceStack3 = new NamespaceStack();
      NamespaceStack namespaceStack4 = new NamespaceStack();
      NamespaceStack namespaceStack5 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEntityResolver();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.isStringInternEnabled();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.dom4j.tree.FlyweightComment");
      String string0 = "Validation not supported for XMLReader: ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        MockFile.createTempFile("'Dhs`\"rG8", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[2];
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setEntityResolver(defaultHandler2_0);
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-120);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2736), (byte)117);
      StringReader stringReader0 = new StringReader("N9jb0=Q4");
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.3080502943468506
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.getContentHandler();
      sAXReader0.setIgnoreComments(true);
      int int0 = (-30);
      // Undeclared exception!
      try { 
        sAXReader0.read("/%,");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.markSupported();
      pushbackInputStream0.close();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte)0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream1);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0, 2525, 20);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      byteArrayInputStream1.markSupported();
      sequenceInputStream1.read(byteArray0, 0, 2525);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0, 0, (-846));
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "qh0bU6QET8D";
      EvoSuiteFile evoSuiteFile0 = null;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "set(int,Object) unsupported");
      MockFile.createTempFile("Aq}1k0 O>c CgUTW(", "qh0bU6QET8D");
      File file0 = MockFile.createTempFile("qh0bU6QET8D", "Aq}1k0 O>c CgUTW(");
      MockURL.getFtpExample();
      file0.getCanonicalPath();
      MockFile mockFile0 = new MockFile("set(int,Object) unsupported");
      URL uRL0 = file0.toURL();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /tmp/qh0bU6QET8D1Aq}1k0 O>c CgUTW( (No such file or directory) Nested exception: /tmp/qh0bU6QET8D1Aq}1k0 O>c CgUTW( (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.endPrefixMapping("'We.euf");
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      try { 
        sAXReader0.setProperty("Ua", documentFactory0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: Ua
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3594545031847076
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      File file0 = MockFile.createTempFile("Aq}1k0 O>c CgUTW(", "h0bU6QET8D");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Aq}1k0 O>c CgUTW(");
      MockFile.createTempFile("org.jaxen.function.RoundFunction", "Aq}1k0 O>c CgUTW(");
      MockFile.createTempFile("org.jaxen.expr.DefaultRelativeLocationPath", "h0bU6QET8D");
      MockURL.getFtpExample();
      file0.getCanonicalPath();
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/Fklc-^5wl]06mG.mk&HOl", "h0bU6QET8D");
      QName qName0 = QName.get("h0bU6QET8D", (Namespace) dOMNamespace0);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.addNamespace("Aq}1k0 O>c CgUTW(", "http://xml.org/sax/features/namespaces");
      NamespaceStack namespaceStack1 = new NamespaceStack();
      namespaceStack0.getNamespaceForPrefix("org.jaxen.expr.DefaultRelativeLocationPath");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMNamespace dOMNamespace1 = new DOMNamespace("http://xml.org/sax/features/use-locator2", "//tmp/Aq}1k0 O>c CgUTW(0/tmp/Y9^H)-01pWadmb({73V28934z");
      defaultDocumentFactory0.createQName("http://xml.org/sax/features/string-interning", (Namespace) dOMNamespace1);
      qName0.getQualifiedName();
      NamespaceStack namespaceStack2 = new NamespaceStack();
      NamespaceStack namespaceStack3 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack3.pop(",Bt{(plF(");
      PipedInputStream pipedInputStream0 = new PipedInputStream(350);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "qh0bU6QET8D";
      String string1 = "Aq}1k0 O>c CgUTW(";
      File file0 = MockFile.createTempFile("Aq}1k0 O>c CgUTW(", "qh0bU6QET8D");
      String string2 = "//tmp/Fklc-^5wl]06mG.mk&HOl";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile.createTempFile("//tmp/Fklc-^5wl]06mG.mk&HOl", "Aq}1k0 O>c CgUTW(");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Aq}1k0 O>c CgUTW(");
      File file0 = MockFile.createTempFile("Aq}1k0 O>c CgUTW(", "qh0bU6QET8D");
      file0.getCanonicalPath();
      File file1 = MockFile.createTempFile("//tmp/Fklc-^5wl]06mG.mk&HOl", "Aq}1k0 O>c CgUTW(");
      file0.setWritable(false, false);
      file1.getCanonicalPath();
      StringReader stringReader0 = new StringReader("qh0bU6QET8D");
      try { 
        sAXReader0.read((Reader) stringReader0, "qh0bU6QET8D");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/qh0bU6QET8D : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setEncoding("org.dom4j.tree.AbstractDocumentType");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)78;
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      QName qName0 = namespaceStack0.getAttributeQName("//tmp/vB>7 lo>+&!~kxI06mG.mk&HOl", "HrZs&>^VH]*si", (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName.get("//tmp/jj0ZU6QE0TQD0jj0ZU6QE0TQD", namespace0);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createElement(qName0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      MockURL.getFtpExample();
      sAXReader0.getDispatchHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.removeHandler((String) null);
      sAXReader0.getDispatchHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      ElementStack elementStack1 = new ElementStack();
      Element[] elementArray0 = new Element[7];
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler0.getModifiedElement();
      elementArray0[0] = null;
      Class<String> class0 = String.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        beanMetaData0.getQName((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.bean.BeanMetaData", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      NamespaceStack namespaceStack3 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      namespace0.getName();
      namespaceStack2.getAttributeQName("K", "//tmp/Y9^H)-01pWadmb({73V28934z", "K");
      Namespace.get("org.jaxen.pattern.Pattern", "9t?#m{fd|mcd*Y}g");
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.jaxen.pattern.Pattern", "V!#hFo");
      QName.get("K", (Namespace) dOMNamespace0);
      namespaceStack2.pop("org.jaxen.pattern.Pattern");
      QName qName0 = defaultDocumentFactory0.createQName("9t?#m{fd|mcd*Y}g", (Namespace) null);
      namespaceStack0.push("//tmp/vB>7 lo>+&!~kxI06mG.mk&HOl", (String) null);
      namespaceStack1.pop((String) null);
      Namespace namespace1 = Namespace.get("//tmp/vB>7 lo>+&!~kxI06mG.mk&HOl");
      QName.get("org.jaxen.pattern.Pattern", namespace1, (String) null);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createElement(qName0);
      Object object0 = new Object();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1, true);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader1.setDefaultHandler(sAXModifyElementHandler0);
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader1.isValidating());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("p~8lEE#]_yR'L");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("p~8lEE#]_yR'L", "p~8lEE#]_yR'L");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      HandlerBase handlerBase0 = new HandlerBase();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, false);
      sAXReader1.setValidation(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("']");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("']", "]xik,fghX/");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      MockFile.createTempFile("org.jaxen.pattern.Pattern", "qj0bU6QETQD");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      NamespaceStack namespaceStack3 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      namespace0.getName();
      String string0 = "ceiling";
      Namespace namespace1 = Namespace.get("ceiling", "ceiling");
      DOMNamespace dOMNamespace0 = new DOMNamespace("q{%,o,^{/z'", "g3");
      QName qName0 = QName.get("ceiling", namespace1);
      QName qName1 = defaultDocumentFactory0.createQName("ceiling", namespace1);
      qName0.getQualifiedName();
      NamespaceStack namespaceStack4 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack2.pop("T4u;)_!z!>P=[yDY");
      namespaceStack4.getDefaultNamespace();
      QName.get((String) null, (Namespace) null, "//tmp/Aq}1k0 O>c CgUTW(0qh0bU6QET8D");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createElement(qName1);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("//tmp/vB>7 lo>+&!~kxI06mG.mk&HOl", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //tmp/vB>7 lo>+&!~kxI06mG.mk&HOl not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      pipedOutputStream0.flush();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "//t/jj0ZU6QE0TQD0jj0ZU6QE0TD");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
