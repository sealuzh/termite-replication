/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 16:28:11 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.controller.StructuredMenuItemHolder;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.MultipleGradientPaint;
import java.awt.RadialGradientPaint;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Rectangle2D;
import java.awt.image.ImageObserver;
import java.net.InetAddress;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.help.BackAction;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFCIDSystemInfo;
import org.apache.fop.pdf.PDFCMap;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFICCStream;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.tilesources.BingAerialTileSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)90;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "G{uyy&rr[sT-RD/MH");
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("G{uyy&rr[sT-RD/MH", false);
      jCheckBoxMenuItem0.getAccelerator();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getAction();
      JButton jButton0 = new JButton((Action) null);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, (byte) (-18), "West", (byte) (-91));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1739007122539244
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 13;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setMonth(13);
      jDayChooser0.setMonth(273);
      jDayChooser0.setMaxDayCharacters(4);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "day";
      JTree jTree0 = new JTree();
      PDFCIDSystemInfo pDFCIDSystemInfo0 = new PDFCIDSystemInfo("}M8v0-p:u<:iy^!eR(", "day", 273);
      PDFCMap pDFCMap0 = new PDFCMap("day", pDFCIDSystemInfo0);
      boolean boolean0 = false;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDay((-802));
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-2384), threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2134624707571344
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.setSelectableDateRange(date1, date0);
      jDayChooser1.updateUI();
      jDayChooser1.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1345606492920375
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "Windows";
      stringArray0[2] = "Windows";
      KeyStroke.getKeyStroke("Windows");
      KeyStroke.getKeyStroke("Windows");
      BackAction backAction0 = new BackAction((Object) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = new StyleContext();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(0);
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.windowText;
      jDayChooser0.setSundayForeground(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.20553360339967
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-1437625606));
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      pDFDocumentGraphics2D0.getDeviceConfiguration();
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      jDayChooser0.createImage((-1437625606), 1081);
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      structuredMenuItemHolder0.getMenuItem();
      PDFResources pDFResources0 = new PDFResources((-1437625606));
      PDFICCStream pDFICCStream0 = new PDFICCStream();
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFICCStream0, 12283, (-1437625606));
      PDFDocument pDFDocument0 = new PDFDocument((String) null);
      FontInfo fontInfo0 = new FontInfo();
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, fontInfo0, pDFDocument0, pDFPage0, "ISO-8859-1", "aJf,m(ver=dF", 0.0F);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1345640533967067
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(true);
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      JMenuItem jMenuItem0 = new JMenuItem("AMOUNT_OF_VISIBLE_MENU_ITEMS", 16);
      Component component0 = Box.createVerticalGlue();
      KeyEvent keyEvent0 = new KeyEvent(component0, (-2653), 0L, 151, 29, 'u');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      KeyEvent keyEvent1 = null;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.128690880730071
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.infoText;
      systemColor0.darker();
      JButton[] jButtonArray0 = new JButton[3];
      jDayChooser0.getSelectedDay();
      jButtonArray0[0] = null;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jButtonArray0[1] = (JButton) jDayChooser_DecoratorButton0;
      JButton jButton0 = jDayChooser0.selectedDay;
      jButtonArray0[2] = null;
      jDayChooser0.days = jButtonArray0;
      Color.getColor("Ch*&6dY:79pq5ZAE\"", 0);
      // Undeclared exception!
      try { 
        jDayChooser0.setDay(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setRequestFocusEnabled(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(49.8, 411.8533, (-681.430033), (-681.430033));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1607.8024F);
      Color[] colorArray0 = new Color[1];
      colorArray0[0] = null;
      jDayChooser0.getSundayForeground();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      RadialGradientPaint radialGradientPaint0 = null;
      try {
        radialGradientPaint0 = new RadialGradientPaint(rectangle2D_Double0, floatArray0, colorArray0, multipleGradientPaint_CycleMethod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Colors and fractions must have equal size
         //
         verifyException("java.awt.MultipleGradientPaint", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear(40);
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2296990694828316
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 13;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setMonth(13);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1094, (-779L), 683, 13, '(');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      int int1 = 160;
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setDay(160);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-1), threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MouseEvent mouseEvent0 = new MouseEvent(jMonthChooser0, (-2672), (-416L), 3982, 8968, (-2672), (-2672), true);
      mouseEvent0.getModifiersEx();
      mouseEvent0.setSource((Object) null);
      jMonthChooser0.dispatchEvent(mouseEvent0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.getDayPanel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(568);
      int int0 = 27;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 27, "JDayChooser");
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.200814946179121
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-20));
      jDayChooser0.setDayBordersVisible(true);
      MenuElement[] menuElementArray0 = new MenuElement[9];
      jDayChooser0.updateUI();
      JInternalFrame jInternalFrame0 = new JInternalFrame("14", true, true, false);
      KeyEvent keyEvent0 = new KeyEvent(jInternalFrame0, (-20), 0L, (-20), 35, 'N');
      keyEvent0.setSource("14");
      InputEvent.getModifiersExText(35);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.keyPressed(keyEvent0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jInternalFrame0, 35, (-20), 35, 1219, 'z', menuElementArray0, menuSelectionManager0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent("14", (-20), "day", 1219);
      assertEquals("day", actionEvent0.getActionCommand());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1962302574649577
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Metal";
      stringArray0[1] = "Windows";
      stringArray0[2] = "n4L";
      stringArray0[3] = "Metal";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(5);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jPanel0.requestFocus(false);
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, (byte)110);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.drawWeeks();
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      Locale locale0 = jDayChooser0.locale;
      ComponentOrientation.getOrientation(locale0);
      Locale locale1 = Locale.JAPANESE;
      ComponentOrientation.getOrientation(locale1);
      jDayChooser0.applyComponentOrientation(componentOrientation0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3329), (-284), (-3329), (-44), 30);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isValidateRoot();
      jDayChooser0.drawWeeks();
      jDayChooser0.initDecorations();
      jDayChooser0.drawWeeks();
      boolean boolean1 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.169980761415707
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ContainerListener containerListener2 = AWTEventMulticaster.add(containerListener0, containerListener1);
      AWTEventMulticaster.remove(containerListener2, containerListener2);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.repaint(1861L);
      jDayChooser0.getLocale();
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      pDFDocumentGraphics2D0.getDeviceConfiguration();
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      structuredMenuItemHolder0.getMenuItem();
      JDayChooser jDayChooser0 = new JDayChooser();
      Instant instant0 = MockInstant.ofEpochSecond((-2841L), (long) 16);
      Timestamp.from(instant0);
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.096688477532829
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.updateUI();
      InputEvent.getModifiersExText(35);
      jDayChooser0.setDayBordersVisible(false);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      // Undeclared exception!
      try { 
        AWTKeyStroke.getAWTKeyStroke("q/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String formatted incorrectly
         //
         verifyException("java.awt.AWTKeyStroke", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1677452551206233
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[5];
      floatArray0[1] = 964.42F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1112.1696F;
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAncestorListeners();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "Windows";
      stringArray0[2] = "Windows";
      KeyStroke.getKeyStroke("Windows");
      KeyStroke.getKeyStroke((String) null);
      KeyStroke.getKeyStroke("Windows");
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(".text");
      jCheckBoxMenuItem0.getAccelerator();
      BackAction backAction0 = new BackAction((Object) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = new StyleContext();
      StyleContext styleContext1 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      LabelView labelView0 = new LabelView(element0);
      Font font0 = labelView0.getFont();
      jDayChooser0.setFont(font0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1511723430428846
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-20));
      jDayChooser0.setDayBordersVisible(true);
      MenuElement[] menuElementArray0 = new MenuElement[9];
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      pDFDocumentGraphics2D0.getDeviceConfiguration();
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      structuredMenuItemHolder0.getMenuItem();
      menuElementArray0[2] = (MenuElement) null;
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      basicTreeUI0.getCollapsedIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null, false);
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem0;
      BackAction backAction0 = new BackAction(structuredMenuItemHolder0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1608966978625985
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBackground();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      Cursor cursor0 = null;
      try {
        cursor0 = new Cursor(210);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal cursor type
         //
         verifyException("java.awt.Cursor", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1617876752317735
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "Windows";
      stringArray0[2] = "Windows";
      KeyStroke.getKeyStroke("Windows");
      KeyStroke.getKeyStroke("Windows");
      BackAction backAction0 = new BackAction((Object) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(10022);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2083131288810907
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Metal";
      stringArray0[1] = "Windows";
      stringArray0[3] = "n4L";
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      Component component0 = Box.createVerticalGlue();
      KeyEvent keyEvent0 = new KeyEvent(component0, 3, 0L, 151, 8, 'D');
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.09672226321896
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Metal";
      stringArray0[1] = "Windows";
      stringArray0[2] = "n4L";
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1699680061509725
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "Windows";
      stringArray0[2] = "Windows";
      KeyStroke.getKeyStroke("Windows");
      KeyStroke.getKeyStroke("Windows");
      KeyStroke.getKeyStroke("");
      KeyStroke.getKeyStroke("cL12");
      Object object0 = new Object();
      BackAction backAction0 = new BackAction(object0);
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1338874196203252
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-20));
      jDayChooser0.setDayBordersVisible(true);
      MenuElement[] menuElementArray0 = new MenuElement[9];
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      pDFDocumentGraphics2D0.getDeviceConfiguration();
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      structuredMenuItemHolder0.getMenuItem();
      menuElementArray0[2] = (MenuElement) null;
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(true);
      pDFDocumentGraphics2D1.getDeviceConfiguration();
      StructuredMenuHolder structuredMenuHolder1 = new StructuredMenuHolder();
      StructuredMenuItemHolder structuredMenuItemHolder1 = new StructuredMenuItemHolder();
      structuredMenuItemHolder0.getMenuItem();
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      basicTreeUI0.getCollapsedIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null, true);
      KeyStroke.getKeyStroke("28");
      BackAction backAction0 = new BackAction((Object) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1511723430428846
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-20));
      jDayChooser0.setDayBordersVisible(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      pDFDocumentGraphics2D0.getDeviceConfiguration();
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      StructuredMenuItemHolder structuredMenuItemHolder1 = new StructuredMenuItemHolder();
      structuredMenuItemHolder1.getMenuItem();
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(true);
      pDFDocumentGraphics2D0.getDeviceConfiguration();
      StructuredMenuHolder structuredMenuHolder1 = new StructuredMenuHolder();
      StructuredMenuItemHolder structuredMenuItemHolder2 = new StructuredMenuItemHolder();
      structuredMenuItemHolder2.getMenuItem();
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      basicTreeUI0.getCollapsedIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null, true);
      KeyStroke.getKeyStroke("day");
      Character character0 = new Character(':');
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, 9999);
      BackAction backAction0 = new BackAction(keyStroke0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(90, color0.getGreen());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1677452551206233
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      MockZonedDateTime.now();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      basicTreeUI0.getCollapsedIcon();
      SchemeMode schemeMode0 = new SchemeMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1700536362046745
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-20));
      jDayChooser0.setDayBordersVisible(true);
      MenuElement[] menuElementArray0 = new MenuElement[9];
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      pDFDocumentGraphics2D0.getDeviceConfiguration();
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      structuredMenuItemHolder0.getMenuItem();
      menuElementArray0[2] = (MenuElement) null;
      PDFResources pDFResources0 = new PDFResources((-20));
      PDFICCStream pDFICCStream0 = new PDFICCStream();
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFICCStream0, 16, (-1392));
      PDFDocument pDFDocument0 = new PDFDocument("day");
      FontInfo fontInfo0 = new FontInfo();
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFPage0, "#.BBrDq", "x", 12283);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      jDayChooser0.isDayBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1759);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1701419978689667
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.contains((-2517), (-2517));
      MockDate mockDate0 = new MockDate();
      mockDate0.getTime();
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      date0.after(mockDate0);
      jDayChooser0.setMaxSelectableDate(date0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2, 1766, 2, 2, 'h');
      jDayChooser0.updateUI();
      jDayChooser0.keyTyped(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockZonedDateTime.now();
      Character character0 = Character.valueOf('e');
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, 46);
      KeyStroke.getKeyStroke(1766, 4612);
      BackAction backAction0 = new BackAction(keyStroke0);
      int int0 = 33;
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket((InetAddress) null, 48, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.097469316004617
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener2);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setBounds(100, 22, 26, 22);
      Locale locale0 = Locale.PRC;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      pDFDocumentGraphics2D0.getDeviceConfiguration();
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      structuredMenuItemHolder0.getMenuItem();
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      basicTreeUI0.getExpandedIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("AMOUNT_OF_VISIBLE_MENU_ITEMS", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "AMOUNT_OF_VISIBLE_MENU_ITEMS");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setBounds(247, 247, (-849), (-568));
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.133766650651363
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-20));
      jDayChooser0.setDayBordersVisible(true);
      MenuElement[] menuElementArray0 = new MenuElement[9];
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      pDFDocumentGraphics2D0.getDeviceConfiguration();
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      structuredMenuItemHolder0.getMenuItem();
      menuElementArray0[2] = (MenuElement) null;
      PDFResources pDFResources0 = new PDFResources((-20));
      PDFICCStream pDFICCStream0 = new PDFICCStream();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      FontInfo fontInfo0 = new FontInfo();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isDayBordersVisible();
      int int0 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, int0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1601316145219656
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getPreferredSize();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.updateUI();
      assertTrue(jDayChooser2.isDayBordersVisible());
      
      InputEvent.getModifiersExText(3803);
      jDayChooser2.setDayBordersVisible(false);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      MetalToolBarUI metalToolBarUI1 = new MetalToolBarUI();
      metalToolBarUI1.getFloatingColor();
      jDayChooser2.setWeekdayForeground((Color) null);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1963276499836986
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.infoText;
      systemColor0.darker();
      Color.getColor("Ch*&6dY:79pq5ZAE\"", 0);
      jDayChooser0.setDay(0);
      BrowseMode browseMode0 = new BrowseMode();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      jDayChooser0.addHierarchyBoundsListener(hierarchyBoundsListener1);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.remove((Component) jPanel0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setMaxDayCharacters((byte) (-107));
      jDayChooser0.setMaxDayCharacters(100);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2649503795588584
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-20));
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.updateUI();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JInternalFrame jInternalFrame0 = new JInternalFrame("14", true, true, false);
      KeyEvent keyEvent0 = new KeyEvent(jInternalFrame0, 164, 0L, (-20), 35, 'N');
      keyEvent0.setSource("14");
      InputEvent.getModifiersExText(35);
      MockDate mockDate0 = new MockDate((-20), 65533, 48, (-1528), 7, 32);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.updateUI();
      jDayChooser0.setMinSelectableDate(mockDate0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.291137334814102
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 41, 43, (byte) (-107), (-5204), ')');
      keyEvent0.consume();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (byte)110, 43, 1094, 41, ')');
      jDayChooser0.keyPressed(keyEvent1);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDay(160);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(41, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, 3153L, timeUnit0);
      ActionEvent actionEvent0 = new ActionEvent(keyEvent1, 41, "day", 43);
      jDayChooser0.isDecorationBackgroundVisible();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2741506863550462
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      int int0 = 771;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 771);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1337304777448702
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.init();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      JYearChooser jYearChooser0 = new JYearChooser();
      assertEquals(2014, jYearChooser0.getValue());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      systemColor0.getColorSpace();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-849);
      floatArray0[1] = (float) 247;
      floatArray0[2] = 2632.309F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-849);
      floatArray0[6] = (float) 247;
      floatArray0[7] = 2632.309F;
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "Windows";
      stringArray0[2] = "Windows";
      KeyStroke.getKeyStroke("Windows");
      KeyStroke.getKeyStroke("Windows");
      BackAction backAction0 = new BackAction((Object) null);
      FontInfo fontInfo0 = new FontInfo();
      PDFResources pDFResources0 = new PDFResources(30);
      PDFCIDSystemInfo pDFCIDSystemInfo0 = new PDFCIDSystemInfo((String) null, "", 43);
      PDFCMap pDFCMap0 = new PDFCMap("av]s?*N$CYl`%TLc3", pDFCIDSystemInfo0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFCMap0, 18, 10028);
      PDFDocument pDFDocument0 = new PDFDocument("KSCms-UHC-HW-H");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      FontInfo fontInfo1 = pDFDocumentGraphics2D0.getFontInfo();
      PDFDocument pDFDocument1 = new PDFDocument("Zh;u%LM)>");
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo1, pDFDocument1, pDFPage0, (String) null, "@OE:l", 18);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.133742703431037
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.ROOT;
      jDayChooser0.setDecorationBackgroundVisible(false);
      locale0.getDisplayVariant();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getDay();
      int int0 = 3371;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(3371);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[5];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 964.42F;
      floatArray0[2] = 0.0F;
      JTree jTree0 = new JTree();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      JTree jTree1 = new JTree();
      BingAerialTileSource bingAerialTileSource0 = new BingAerialTileSource();
      Image image0 = bingAerialTileSource0.getAttributionImage();
      defaultTreeCellRenderer1.checkImage(image0, (ImageObserver) jTree0);
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree1, defaultTreeCellRenderer1);
      defaultTreeCellEditor0.getBorderSelectionColor();
      ActionEvent actionEvent0 = new ActionEvent("a>", (-1982), (String) null, 32);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.0586049119161527
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)90;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "G{uyy&rr[sT-RD/MH");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
