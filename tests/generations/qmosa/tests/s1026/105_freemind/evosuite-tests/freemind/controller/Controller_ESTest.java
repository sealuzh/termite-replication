/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 17:46:23 GMT 2019
 */

package freemind.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.controller.Controller;
import freemind.main.FreeMindMain;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.ItemListener;
import java.util.Collection;
import javax.help.DefaultHelpModel;
import javax.help.HelpSet;
import javax.help.JHelp;
import javax.help.JHelpContentViewer;
import javax.help.plaf.basic.BasicContentViewerUI;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Controller.getCommonJColorChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      jCheckBoxMenuItem0.isBorderPainted();
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem();
      jCheckBoxMenuItem1.getMultiClickThreshhold();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[6];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("freemind.modes.mindmapmode.actions.RemoveArrowLinkAction");
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      JMenu jMenu0 = new JMenu("freemind.modes.mindmapmode.actions.RemoveArrowLinkAction");
      menuElementArray0[2] = (MenuElement) jMenu0;
      menuElementArray0[3] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[4] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[5] = (MenuElement) jCheckBoxMenuItem0;
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jCheckBoxMenuItem0, (-333), (-333), 12, 0, 12, (-754), 0, (-333), false, menuElementArray0, menuSelectionManager0);
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden(menuDragMouseEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JCheckBoxMenuItem cannot be cast to java.awt.Window
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultHelpModel defaultHelpModel0 = new DefaultHelpModel((HelpSet) null);
      JHelpContentViewer jHelpContentViewer0 = new JHelpContentViewer();
      JHelpContentViewer jHelpContentViewer1 = new JHelpContentViewer();
      JHelp jHelp0 = new JHelp(defaultHelpModel0);
      jHelp0.getGraphics();
      JHelpContentViewer jHelpContentViewer2 = jHelp0.getContentViewer();
      HelpSet helpSet0 = new HelpSet();
      BasicContentViewerUI basicContentViewerUI0 = new BasicContentViewerUI(jHelpContentViewer2);
      Color color0 = Color.pink;
      try { 
        Controller.showCommonJColorChooserDialog(jHelpContentViewer1, "B", color0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultHelpModel defaultHelpModel0 = new DefaultHelpModel((HelpSet) null);
      Boolean boolean0 = new Boolean("");
      Boolean boolean1 = new Boolean("");
      MenuSelectionManager.defaultManager();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("W~omLAmf7C");
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      ItemListener itemListener1 = AWTEventMulticaster.add(itemListener0, itemListener0);
      AWTEventMulticaster.remove(itemListener1, itemListener1);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, itemListener1);
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext1);
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.getInsets();
      Style style0 = jTextPane0.getLogicalStyle();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument1.setParagraphAttributes(3, 3, style0, true);
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.getInsets();
      Style style0 = jTextPane0.getLogicalStyle();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument1.setParagraphAttributes(1367, 3, style0, true);
      JTextPane jTextPane1 = new JTextPane(defaultStyledDocument0);
      Collection collection0 = Controller.getPropertyChangeListeners();
      assertNotNull(collection0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SchemeMode schemeMode0 = new SchemeMode();
      schemeMode0.getController();
      Controller.CloseAction controller_CloseAction0 = null;
      try {
        controller_CloseAction0 = new Controller.CloseAction((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$CloseAction", e);
      }
  }
}
