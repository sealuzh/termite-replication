/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 18:18:57 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Proxy;
import java.net.SocketException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.DBObjectPoolConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7111835171758907
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.info();
      Object[] objectArray0 = new Object[0];
      quickServer0.run();
      quickServer0.setStoreObjects(objectArray0);
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServerConfig0.getAdvancedSettings();
      quickServerConfig0.setName("-yv~^WMaou");
      quickServer0.configQuickServer(quickServerConfig0);
      quickServer0.setMaxConnection((-560L));
      theClient0.setServer(quickServer0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis((-545L));
      theClient0.getSocket();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.getSocketChannel();
      theClient0.getTimeoutMsg();
      theClient0.getServer();
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.052754235510318
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(4);
      mockSocket0.setPerformancePreferences((-973), 4, 125);
      mockSocket0.bind(mockInetSocketAddress0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setSocket(mockSocket0);
      theClient0.setTimeoutMsg("?zWl]Rz<D)T3Jg");
      theClient0.getServer();
      theClient0.setMaxAuthTryMsg("?zWl]Rz<D)T3Jg");
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      theClient0.getSocketChannel();
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      theClient0.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      System.setCurrentTimeMillis((-3698L));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      Object[] objectArray0 = new Object[0];
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.configQuickServer(quickServerConfig0);
      quickServer0.setMaxConnection((-560L));
      quickServerConfig0.getDBObjectPoolConfig();
      quickServer0.setDBObjectPoolConfig((DBObjectPoolConfig) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      theClient0.setServer(quickServer0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getSocket();
      theClient0.getClientBinaryHandler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unparsedEntityDecl(");
      theClient0.getClientExtendedEventHandler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "955(");
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      System.setCurrentTimeMillis((-818L));
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis((-545L));
      theClient0.getSocket();
      theClient0.toString();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.getSocketChannel();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("g:&#|) i6:|QYQU#D", 0);
      quickServer0.getQSAdminServerPort();
      quickServer0.getSecure();
      quickServer0.setMaxAuthTry(9877);
      quickServer0.startService();
      quickServer0.setMaxAuthTry(0);
      theClient0.setServer(quickServer0);
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      MockSocket mockSocket0 = new MockSocket();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ", Event: ");
      QuickServer quickServer0 = new QuickServer(", Event: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      quickServer0.setClientObjectHandler((String) null);
      quickServer0.setRawCommunicationMaxLength((-1));
      theClient0.setServer(quickServer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.toString();
      theClient0.setTimeout((-3147));
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      theClient0.getAuthenticator();
      System.setCurrentTimeMillis((-3147));
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      System.setCurrentTimeMillis(100L);
      theClient0.getAuthenticator();
      System.setCurrentTimeMillis((-1));
      theClient0.getClientObjectHandler();
      assertEquals((-3147), theClient0.getTimeout());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)25;
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getMaxAuthTryMsg();
      TheClient theClient1 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getClientWriteHandler();
      theClient1.getMaxAuthTryMsg();
      theClient0.getClientEvent();
      theClient1.getClientObjectHandler();
      assertTrue(theClient1.getCommunicationLogging());
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      Data data0 = new Data();
      data0.setLastAsked("(");
      theClient0.setClientData(data0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientData();
      CommandHandler commandHandler1 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      nonBlockingClientHandler0.run();
      theClient0.getClientExtendedEventHandler();
      try { 
        commandHandler1.gotConnected(nonBlockingClientHandler0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getAuthenticator();
      theClient0.setMaxConnectionMsg("");
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      commandHandler0.closingConnection(nonBlockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:14>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setServer((QuickServer) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientEvent();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEvent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientBinaryHandler();
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(374L);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setTrusted(true);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:7>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler0);
      boolean boolean0 = theClient0.getTrusted();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-2504));
      theClient0.getTrusted();
      theClient0.setTrusted(false);
      int int0 = theClient0.getTimeout();
      assertEquals((-2504), int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2597682094192684
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setTimeout((-1775));
      theClient0.getClientEventHandler();
      TheClient theClient1 = new TheClient();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getClientBinaryHandler();
      theClient1.setClientEventHandler((ClientEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      Integer integer0 = new Integer((-1775));
      theClient0.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxAuthTry();
      assertEquals((-1775), theClient0.getTimeout());
      
      theClient1.getClientWriteHandler();
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      CommandHandler commandHandler0 = new CommandHandler();
      TheClient theClient0 = new TheClient();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientCommandHandler();
      CommandHandler commandHandler1 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler1.closingConnection(blockingClientHandler0);
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler1.lostConnection(nonBlockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-1-ID:2>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler1);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setServer((QuickServer) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(1);
      int int0 = theClient0.getTimeout();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      theClient0.setServer(quickServer0);
      theClient0.setMaxAuthTry(1445);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(1445, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.436976292599276
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTry(3554);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTry(4408);
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      theClient0.getAuthenticator();
      theClient0.setMaxConnectionMsg("Where options include:\n");
      theClient0.getMaxConnectionMsg();
      theClient0.getClientAuthenticationHandler();
      theClient0.setTimeout(125);
      TheClient theClient1 = new TheClient();
      theClient1.setTrusted(false);
      theClient1.getServer();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getAuthenticator();
      TheClient theClient2 = new TheClient();
      theClient1.getClientBinaryHandler();
      theClient2.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient2.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient2.getClientBinaryHandler();
      theClient0.setMaxAuthTry(3554);
      assertEquals(125, theClient0.getTimeout());
      
      theClient1.getClientBinaryHandler();
      theClient1.getClientWriteHandler();
      theClient1.getClientWriteHandler();
      theClient2.getClientObjectHandler();
      assertFalse(theClient2.getTrusted());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("e8,dyh;tvl#)y^f=");
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.129966420524349
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setMaxAuthTryMsg("setObjectPoolConfig");
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxAuthTryMsg("2B9g{ WD5f@b{");
      theClient0.getClientEventHandler();
      TheClient theClient1 = new TheClient();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getClientBinaryHandler();
      theClient1.setClientEvent(clientEvent0);
      TheClient theClient2 = new TheClient();
      TheClient theClient3 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      Integer integer0 = new Integer(0);
      TheClient theClient4 = new TheClient();
      theClient4.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      int int0 = theClient4.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientWriteHandler();
      theClient2.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis(40L);
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.434635057597813
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("ydkMzPGs&C6|T");
      theClient0.setMaxAuthTry((-1966));
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxAuthTryMsg("ydkMzPGs&C6|T");
      theClient0.getClientEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getTimeout();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.getClientWriteHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      assertEquals((-1966), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      boolean boolean0 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(9877);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("5$\f8]K3t");
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.setSocketChannel(socketChannel0);
      // Undeclared exception!
      try { 
        socketChannel0.shutdownInput();
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }
}
