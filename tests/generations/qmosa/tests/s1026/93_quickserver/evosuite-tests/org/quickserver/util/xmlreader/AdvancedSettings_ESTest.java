/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 17:17:55 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(45);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(45, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-282));
      advancedSettings0.setPerformancePreferencesConnectionTime((-282));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals((-282), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-2115));
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-2115), advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1945366875886965
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(29);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-161));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientIdentifier();
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("", string0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.664210713480864
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(14);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.setPerformancePreferencesBandwidth((-27));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientIdentifier("\t<charset>");
      advancedSettings0.setByteBufferSize((-27));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketSendBufferSize((-7));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize(987);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientIdentifier("*!oYJ8R{R-5ks");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.toXML("byJ\u0002DZK^pH");
      assertEquals("*!oYJ8R{R-5ks", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.7015322058162416
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1135);
      advancedSettings0.setPerformancePreferencesBandwidth(1135);
      advancedSettings0.setPerformancePreferencesConnectionTime(14);
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(1833);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesLatency(14);
      advancedSettings0.setPerformancePreferencesBandwidth(14);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientIdentifier("</backlog>\n");
      advancedSettings0.setByteBufferSize(14);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.toXML("{");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientIdentifier("</max-threads-for-nio-write>\n");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("</max-threads-for-nio-write>\n");
      advancedSettings0.setClientIdentifier("</backlog>\n");
      assertEquals("</backlog>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.626916081775054
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize(2652);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(2);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("</backlog>\n");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getByteBufferSize();
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5825234156796895
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-958));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setByteBufferSize((-932));
      advancedSettings0.setClientSocketSendBufferSize((-932));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(7);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("Do;_");
      advancedSettings0.setClientSocketSendBufferSize((-932));
      advancedSettings0.setMaxThreadsForNioWrite(55);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(7, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6454371383635378
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setSocketLinger(1054);
      advancedSettings0.setSocketLinger(4986);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setClientSocketSendBufferSize(1054);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setSocketLinger(2740);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientIdentifier("");
      assertEquals(10, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4872648055203896
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass(",q]Lxi+");
      advancedSettings0.setClientSocketSendBufferSize(1190);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1190);
      assertEquals(1190, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6902535776209735
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(1054);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setClientSocketSendBufferSize(1054);
      advancedSettings0.setSocketLinger(2759);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("</client-socket-traffic-class>\n");
      assertEquals(2759, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("k");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // k
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.691735059102455
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(1054);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(1054);
      advancedSettings0.setSocketLinger(2759);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(1054);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("</client-socket-traffic-class>\n");
      assertEquals("</client-socket-traffic-class>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("ypH)4Y86THIi#t#LS4+");
      advancedSettings0.setClientSocketSendBufferSize(2254);
      advancedSettings1.setClientSocketTcpNoDelay(false);
      advancedSettings1.setSocketLinger((-1107));
      advancedSettings0.getSocketLinger();
      advancedSettings1.setClientSocketTcpNoDelay(false);
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("F$'U_y#u,sE-c%MkDJE");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // F$'U_y#u,sE-c%MkDJE
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.976592899728664
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("\t<client-socket-send-buffer-size>");
      advancedSettings0.setClientIdentifier("MfePU");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("dGvS");
      advancedSettings0.setClientIdentifier("MfePU");
      advancedSettings0.setClientIdentifier("M(epWqGU3{:~Jc*3K|$");
      advancedSettings0.setClientIdentifier(",d'`'nLmE.9^X`#HWG");
      assertEquals(",d'`'nLmE.9^X`#HWG", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5544967596194863
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(1054);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setClientSocketSendBufferSize(1054);
      advancedSettings0.setSocketLinger(2759);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.toXML(")Z");
      advancedSettings0.setClientIdentifier("</client-socket-traffic-class>\n");
      assertEquals(2759, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4328450228196603
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize((-392));
      advancedSettings1.setPerformancePreferencesLatency((-2962));
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.toXML("");
      advancedSettings1.getClientSocketReceiveBufferSize();
      assertEquals((-2962), advancedSettings1.getPerformancePreferencesLatency());
      
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2183004874823533
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("6l(BuX|'FT9@:ljQ5");
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      boolean boolean0 = advancedSettings0.getDebugNonBlockingMode();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertFalse(boolean0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(boolean0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getCharset();
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getBacklog();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, int0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(7);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setDebugNonBlockingMode(false);
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setBacklog((-1069));
      assertEquals(0, advancedSettings2.getBacklog());
      
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      AdvancedSettings advancedSettings6 = new AdvancedSettings();
      AdvancedSettings advancedSettings7 = new AdvancedSettings();
      AdvancedSettings advancedSettings8 = new AdvancedSettings();
      AdvancedSettings advancedSettings9 = new AdvancedSettings();
      AdvancedSettings advancedSettings10 = new AdvancedSettings();
      AdvancedSettings advancedSettings11 = new AdvancedSettings();
      AdvancedSettings advancedSettings12 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings12.getCharset());
      assertEquals(65536, advancedSettings12.getByteBufferSize());
      assertEquals(0, advancedSettings12.getPerformancePreferencesLatency());
      assertTrue(advancedSettings12.getUseDirectByteBuffer());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings12.getClientIdentifier());
      assertEquals(10, advancedSettings12.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings12.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings12.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings12.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings12.getSocketLinger());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setSocketLinger(1054);
      advancedSettings0.setClientSocketTrafficClass("[]<]%~OZG0z");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(1054);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(1054);
      assertEquals(1054, advancedSettings1.getClientSocketReceiveBufferSize());
      
      advancedSettings2.setClientSocketTcpNoDelay(false);
      boolean boolean0 = advancedSettings2.getClientSocketTcpNoDelay();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      AdvancedSettings advancedSettings6 = new AdvancedSettings();
      AdvancedSettings advancedSettings7 = new AdvancedSettings();
      AdvancedSettings advancedSettings8 = new AdvancedSettings();
      AdvancedSettings advancedSettings9 = new AdvancedSettings();
      AdvancedSettings advancedSettings10 = new AdvancedSettings();
      AdvancedSettings advancedSettings11 = new AdvancedSettings();
      AdvancedSettings advancedSettings12 = new AdvancedSettings();
      AdvancedSettings advancedSettings13 = new AdvancedSettings();
      AdvancedSettings advancedSettings14 = new AdvancedSettings();
      AdvancedSettings advancedSettings15 = new AdvancedSettings();
      AdvancedSettings advancedSettings16 = new AdvancedSettings();
      AdvancedSettings advancedSettings17 = new AdvancedSettings();
      advancedSettings17.setByteBufferSize(0);
      assertEquals(65536, advancedSettings17.getByteBufferSize());
      
      AdvancedSettings advancedSettings18 = new AdvancedSettings();
      AdvancedSettings advancedSettings19 = new AdvancedSettings();
      AdvancedSettings advancedSettings20 = new AdvancedSettings();
      AdvancedSettings advancedSettings21 = new AdvancedSettings();
      AdvancedSettings advancedSettings22 = new AdvancedSettings();
      AdvancedSettings advancedSettings23 = new AdvancedSettings();
      AdvancedSettings advancedSettings24 = new AdvancedSettings();
      assertEquals(0, advancedSettings24.getPerformancePreferencesLatency());
      assertTrue(advancedSettings24.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings24.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings24.getClientIdentifier());
      assertEquals(0, advancedSettings24.getBacklog());
      assertFalse(advancedSettings24.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings24.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings24.getSocketLinger());
      assertEquals(0, advancedSettings24.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings24.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.383761246557698
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("&La_iJ*");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize(37);
      advancedSettings0.toXML("");
      assertEquals(37, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(true);
      boolean boolean0 = advancedSettings0.getDebugNonBlockingMode();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      
      advancedSettings0.setByteBufferSize(1);
      assertEquals(1, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("XG=)ha_PIG0FKjupAPb");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // XG=)ha_PIG0FKjupAPb
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, int0);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("[M>0");
      advancedSettings0.setQSObjectPoolMaker("[M>0");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("[M>0", string0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.428531408798452
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("MfePU");
      advancedSettings0.setClientIdentifier("MfePU");
      advancedSettings0.setClientIdentifier("e/H=QgIg{A#z8;d");
      advancedSettings0.setClientIdentifier("MfePU");
      advancedSettings0.setClientIdentifier("ob w%2Le<FduIa");
      advancedSettings0.setClientIdentifier("e/H=QgIg{A#z8;d");
      advancedSettings0.setClientIdentifier("d");
      advancedSettings0.setClientIdentifier("MfePU");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      assertEquals("MfePU", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(10);
      assertEquals(10, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertNotNull(string0);
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }
}
