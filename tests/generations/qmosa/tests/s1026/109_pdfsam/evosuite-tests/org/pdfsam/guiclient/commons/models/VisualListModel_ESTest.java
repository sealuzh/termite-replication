/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 18:19:47 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.AWTEventMulticaster;
import java.awt.RenderingHints;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentListener;
import java.awt.event.ComponentListener;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowFocusListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.Kernel;
import java.awt.image.ShortLookupTable;
import java.awt.image.renderable.ParameterBlock;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.text.DateFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import javax.media.jai.CollectionOp;
import javax.media.jai.OperationRegistry;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DropMode;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JLayeredPane;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import javax.swing.event.ListDataEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2405522453899263
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey1 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      renderingHints0.clone();
      System.setCurrentTimeMillis(0L);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey2 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0035148943012864
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndex(1);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-527);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndex(1);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7265167556076593
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.addAllElements((-2472), (Collection<VisualPageListItem>) null);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bj7m");
      Stack<Object> stack0 = new Stack<Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      visualListModel0.data = null;
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.setData(visualPageListItemArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      visualListModel1.clearData();
      visualListModel1.moveDownIndexes(intArray0);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[6] = (-1);
      visualListModel0.getElements();
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      visualListModel1.reverseElements(intArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-2472), 0, (-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -6
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0928838823470586
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[14];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-4775);
      intArray0[1] = (-4775);
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 255;
      visualListModel0.moveUpIndexes(intArray0);
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      AWTEventMulticaster.remove((ActionListener) jComboBox0, (ActionListener) jComboBox0);
      jComboBox0.removeActionListener((ActionListener) null);
      jComboBox0.revalidate();
      visualListModel0.addElement((VisualPageListItem) null);
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4775
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4540524077680197
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      visualListModel0.setData(visualPageListItemArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addElement(visualPageListItemArray0[1]);
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[20];
      intArray0[0] = 1;
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel1.setData(vector0);
      intArray0[8] = 1;
      visualListModel1.moveDownIndex((-329));
      visualListModel1.moveUpIndex(1);
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel1.moveUpIndex((-329));
      visualListModel1.rotateClockwiseElements(intArray0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndex(1);
      visualListModel0.moveUpIndex(1);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.873029116491111
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      visualListModel0.addElement(visualPageListItemArray0[1]);
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = (-2365);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[9];
      intArray0[1] = (-2365);
      intArray0[2] = (-2365);
      intArray0[3] = (-2365);
      intArray0[4] = (-2365);
      intArray0[5] = (-2365);
      intArray0[6] = (-2365);
      intArray0[7] = (-2365);
      intArray0[8] = (-2365);
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2365
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8873025075425423
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.removeElements(1, 1, true);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8699145896246425
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.removeElements(1, 1, false);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DropMode.values();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getSources();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      ParameterBlock parameterBlock1 = new ParameterBlock(vector0, vector0);
      OperationRegistry operationRegistry0 = new OperationRegistry();
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "", parameterBlock1);
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = 1;
      visualListModel0.moveUpIndex(1);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 65535;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey1 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 65535
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3526517037151287
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      visualListModel0.moveUpIndexes(intArray0);
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>(visualPageListItemArray0);
      jComboBox0.revalidate();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>();
      ParameterBlock parameterBlock1 = new ParameterBlock();
      Vector<Object> vector0 = new Vector<Object>();
      ParameterBlock parameterBlock2 = new ParameterBlock(vector0);
      parameterBlock2.getParameters();
      JComboBox<Object> jComboBox2 = new JComboBox<Object>();
      JComboBox<Object> jComboBox3 = new JComboBox<Object>(vector0);
      jComboBox3.setVisible(true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      assertNotSame(visualListModel1, visualListModel0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DropMode[] dropModeArray0 = DropMode.values();
      Object[][] objectArray0 = new Object[9][6];
      objectArray0[1] = (Object[]) dropModeArray0;
      objectArray0[2] = (Object[]) dropModeArray0;
      objectArray0[3] = (Object[]) dropModeArray0;
      objectArray0[4] = (Object[]) dropModeArray0;
      objectArray0[6] = (Object[]) dropModeArray0;
      objectArray0[7] = (Object[]) dropModeArray0;
      objectArray0[8] = (Object[]) dropModeArray0;
      Stack<Object> stack0 = new Stack<Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      stack1.push((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack1);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1497925668968243
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.subList(1, 1, true);
      visualListModel0.moveUpIndex(1);
      visualListModel0.subList(1, 1);
      visualListModel0.moveDownIndex((-449));
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL(uRL0, "", uRLStreamHandler0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      int int0 = (-1353);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1281));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1281
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.359747399048139
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.getElements();
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Stack<Object> stack0 = new Stack<Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      visualListModel0.data = null;
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      visualListModel1.reverseElements(intArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(0, (-1), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener2 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener1);
      AWTEventMulticaster.remove(mouseWheelListener2, mouseWheelListener2);
      jComboBox0.addMouseWheelListener((MouseWheelListener) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 2008;
      intArray0[1] = (-941);
      intArray0[2] = 0;
      intArray0[3] = (-4775);
      intArray0[4] = 6;
      intArray0[5] = (-781);
      intArray0[6] = 3812;
      intArray0[7] = 6;
      visualListModel0.moveUpIndexes(intArray0);
      jComboBox0.revalidate();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.873029116491111
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      visualListModel0.addElementAt((VisualPageListItem) null, (-1285));
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = visualPageListItemArray0[1];
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-3235);
      intArray0[1] = (-1285);
      intArray0[2] = (-3235);
      intArray0[3] = (-1285);
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -3235
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.878675371892228
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.removeElements(1, 1, false);
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.92967840055467
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      int[] intArray0 = new int[3];
      visualListModel0.moveDownIndexes(intArray0);
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      visualListModel0.undeleteElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener1);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      visualListModel0.addElement((VisualPageListItem) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      int[] intArray0 = new int[1];
      visualListModel0.addElement((VisualPageListItem) null);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.243138630046909
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      renderingHints0.clone();
      System.setCurrentTimeMillis(0L);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey1 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.925353930867566
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      jComboBox0.addMouseWheelListener((MouseWheelListener) null);
      int[] intArray0 = new int[26];
      intArray0[0] = 2008;
      intArray0[1] = (-941);
      intArray0[2] = 0;
      intArray0[3] = (-4775);
      jComboBox0.getPropertyChangeListeners("v(YfvZH+4sOwu");
      intArray0[4] = 6;
      intArray0[5] = (-806);
      intArray0[6] = 3812;
      intArray0[7] = 6;
      visualListModel0.moveUpIndexes(intArray0);
      jComboBox0.revalidate();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray1 = new int[1];
      visualListModel0.moveDownIndexes(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      Boolean boolean0 = Boolean.FALSE;
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.clone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      linkedHashSet0.spliterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean.valueOf(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      System.setCurrentTimeMillis(2114L);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      JComboBox<Integer> jComboBox1 = new JComboBox<Integer>();
      jComboBox1.getPrototypeDisplayValue();
      jComboBox1.getComponentPopupMenu();
      jComboBox0.setComponentPopupMenu((JPopupMenu) null);
      visualListModel0.removeListDataListener(jComboBox1);
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.prependAllElements(vector0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-1), 35, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -2147483648
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.data = null;
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      DropMode.values();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      int int0 = (-3429);
      // Undeclared exception!
      try { 
        visualListModel0.subList(91, (-3429), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7275737911350801
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.parallelStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-18);
      visualListModel1.moveUpIndexes(intArray0);
      Vector<VisualPageListItem> vector0 = visualListModel1.data;
      DefaultComboBoxModel<VisualPageListItem> defaultComboBoxModel0 = new DefaultComboBoxModel<VisualPageListItem>(vector0);
      defaultComboBoxModel0.addElement((VisualPageListItem) null);
      defaultComboBoxModel0.addElement((VisualPageListItem) null);
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>(defaultComboBoxModel0);
      jComboBox0.revalidate();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector1 = parameterBlock0.getParameters();
      JComboBox<Object> jComboBox2 = new JComboBox<Object>();
      JComboBox<Object> jComboBox3 = new JComboBox<Object>(vector1);
      jComboBox3.setVisible(true);
      try { 
        visualListModel1.moveDownIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -17
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stack<Object> stack0 = new Stack<Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, false);
      assertNotNull(collection0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = visualPageListItemArray0[0];
      visualPageListItemArray0[3] = null;
      int[] intArray0 = new int[1];
      intArray0[0] = (-9);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement(visualPageListItemArray0[1]);
      visualListModel0.updateElementAt((-332), visualPageListItemArray0[1]);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3074153952359477
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      visualListModel0.undeleteElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.removeElements(intArray0, true);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey1 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.873029116491111
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElementAt((VisualPageListItem) null, (-3235));
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualPageListItemArray0[1] = visualPageListItemArray0[0];
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-3235);
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -3235
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1377734006731925
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DropMode.values();
      Stack<Object> stack0 = new Stack<Object>();
      int[] intArray0 = new int[6];
      intArray0[0] = (-781);
      intArray0[1] = (-1);
      intArray0[2] = 3812;
      intArray0[3] = (-4775);
      intArray0[4] = (-781);
      intArray0[5] = (-4775);
      visualListModel0.moveUpIndexes(intArray0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>(stack1);
      jComboBox0.revalidate();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.getParameters();
      JComboBox<Object> jComboBox2 = new JComboBox<Object>();
      JComboBox<Object> jComboBox3 = new JComboBox<Object>(stack0);
      jComboBox3.setVisible(false);
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray1 = new int[1];
      intArray1[0] = (-4775);
      try { 
        visualListModel0.rotateClockwiseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4775
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1485);
      int int1 = 2093;
      DropMode.values();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Stack<Object> stack0 = new Stack<Object>();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>(stack0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      jComboBox0.getPreferredSize();
      visualListModel0.addListDataListener(jComboBox0);
      OperationRegistry operationRegistry0 = OperationRegistry.getThreadSafeOperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      HashMap<RenderingHints.Key, DropMode> hashMap0 = new HashMap<RenderingHints.Key, DropMode>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "", parameterBlock0, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove(mouseWheelListener1, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, mouseWheelListener1);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.removeSources();
      ParameterBlock parameterBlock1 = new ParameterBlock();
      parameterBlock1.getParameters();
      visualListModel0.addElement((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3175456484876826
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.subList(1, 1, true);
      visualListModel0.moveUpIndex(1);
      visualListModel0.removeElementAt(1, true);
      visualListModel0.subList((-3916), 1);
      visualListModel0.moveDownIndex(1);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL(uRL0, "", uRLStreamHandler0);
      StringBuffer stringBuffer0 = new StringBuffer(125);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      int int0 = (-1353);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1281));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1281
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.parallelStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-18);
      visualListModel1.moveUpIndexes(intArray0);
      Vector<VisualPageListItem> vector0 = visualListModel1.data;
      DefaultComboBoxModel<VisualPageListItem> defaultComboBoxModel0 = new DefaultComboBoxModel<VisualPageListItem>(vector0);
      defaultComboBoxModel0.addElement((VisualPageListItem) null);
      defaultComboBoxModel0.addElement((VisualPageListItem) null);
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>(defaultComboBoxModel0);
      jComboBox0.revalidate();
      visualListModel0.addElement((VisualPageListItem) null);
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -18
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8212565066006587
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElementAt((VisualPageListItem) null, (-9));
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8160305906940475
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, (-1));
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      VisualListModel visualListModel1 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = visualPageListItemArray0[0];
      visualListModel1.getValidElements();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualPageListItemArray0[4] = null;
      visualListModel1.setData(visualPageListItemArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 5;
      visualListModel0.removeElements(intArray0, false);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel0.elementChanged(visualPageListItemArray0[3]);
      visualListModel1.getSize();
      try { 
        visualListModel1.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2287462131058793
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey1 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      renderingHints0.clone();
      System.setCurrentTimeMillis(0L);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey2 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.243138630046909
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey1 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      renderingHints0.clone();
      System.setCurrentTimeMillis(0L);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey2 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2405522453899263
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey1 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      renderingHints0.clone();
      System.setCurrentTimeMillis(0L);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey2 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8907965840134402
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualPageListItemArray0[8] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-3235));
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[4];
      visualPageListItemArray1[0] = null;
      visualPageListItemArray1[1] = visualPageListItemArray1[0];
      visualPageListItemArray1[2] = null;
      visualPageListItemArray1[3] = null;
      visualListModel0.setData(visualPageListItemArray1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-3235);
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3235
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      visualListModel0.updateElementAt((-2940), (VisualPageListItem) null);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0);
      assertNotNull(collection0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1372);
      visualListModel0.removeElements(958, (-1372), false);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      DropMode dropMode0 = DropMode.USE_SELECTION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key1, visualListModel0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(1378, (short)0, 1022);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 1022
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      LinkedHashSet<VisualPageListItem> linkedHashSet1 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet1.stream();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet1.add((VisualPageListItem) null);
      Boolean boolean0 = new Boolean(true);
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.getElements();
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance((-1858));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener0);
      jComboBox0.addInputMethodListener((InputMethodListener) null);
      Object object0 = new Object();
      JComboBox<Integer> jComboBox1 = new JComboBox<Integer>();
      visualListModel0.addListDataListener(jComboBox0);
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3423901693012243
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.addAllElements((-423), (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance((-281));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(1);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      int int0 = 768;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, 768, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1472;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DropMode.values();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key1);
      visualListModel0.removeElements((-1485), 2093, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      visualListModel0.getValidElements();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(0, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)16;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W2[k%+B\"][E+ZI)Eq\"");
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      Stack<Object> stack0 = new Stack<Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      stack1.push((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-12);
      int int1 = 91;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-888);
      shortArray0[1] = (short)34;
      shortArray0[2] = (short) (-1592);
      shortArray0[3] = (short)93;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(91, shortArray0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      Object object0 = new Object();
      DropMode dropMode0 = DropMode.INSERT;
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-816));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.prependAllElements(linkedHashSet0);
      int int0 = (-4310);
      byte[] byteArray0 = null;
      byte[] byteArray1 = null;
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable((-4310), (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ByteLookupTable", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener2 = AWTEventMulticaster.add(mouseWheelListener1, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener3 = AWTEventMulticaster.remove(mouseWheelListener2, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, mouseWheelListener3);
      MouseWheelListener mouseWheelListener4 = AWTEventMulticaster.remove(mouseWheelListener3, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, mouseWheelListener4);
      AWTEventMulticaster.add(mouseWheelListener2, mouseWheelListener4);
      MouseWheelListener mouseWheelListener5 = AWTEventMulticaster.remove(mouseWheelListener4, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener6 = AWTEventMulticaster.add(mouseWheelListener1, mouseWheelListener4);
      MouseWheelListener mouseWheelListener7 = AWTEventMulticaster.add((MouseWheelListener) null, mouseWheelListener6);
      MouseWheelListener mouseWheelListener8 = AWTEventMulticaster.add(mouseWheelListener4, mouseWheelListener3);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, mouseWheelListener6);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add(mouseWheelListener5, (MouseWheelListener) null);
      AWTEventMulticaster.add(mouseWheelListener4, mouseWheelListener8);
      AWTEventMulticaster.remove(mouseWheelListener7, mouseWheelListener4);
      visualListModel0.rotateClockwiseElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      int int0 = (-1783);
      byte[] byteArray0 = null;
      byte[][] byteArray1 = new byte[6][6];
      byteArray1[0] = null;
      byteArray1[2] = byteArray1[0];
      byteArray1[3] = byteArray1[0];
      byteArray1[3] = null;
      byteArray1[5] = null;
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable((-1783), byteArray1[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ByteLookupTable", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      CharArrayWriter charArrayWriter3 = new CharArrayWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1524));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener2 = AWTEventMulticaster.remove(mouseWheelListener1, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener3 = AWTEventMulticaster.add((MouseWheelListener) null, mouseWheelListener2);
      MouseWheelListener mouseWheelListener4 = AWTEventMulticaster.add((MouseWheelListener) null, mouseWheelListener3);
      MouseWheelListener mouseWheelListener5 = AWTEventMulticaster.remove(mouseWheelListener1, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener6 = AWTEventMulticaster.add(mouseWheelListener2, (MouseWheelListener) null);
      AWTEventMulticaster.remove(mouseWheelListener6, mouseWheelListener3);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener7 = AWTEventMulticaster.remove(mouseWheelListener5, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener8 = AWTEventMulticaster.add((MouseWheelListener) null, mouseWheelListener2);
      MouseWheelListener mouseWheelListener9 = AWTEventMulticaster.add(mouseWheelListener6, mouseWheelListener5);
      MouseWheelListener mouseWheelListener10 = AWTEventMulticaster.remove(mouseWheelListener3, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener11 = AWTEventMulticaster.add(mouseWheelListener9, mouseWheelListener10);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener12 = AWTEventMulticaster.remove(mouseWheelListener2, mouseWheelListener9);
      AWTEventMulticaster.remove(mouseWheelListener8, mouseWheelListener12);
      AWTEventMulticaster.add(mouseWheelListener4, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, mouseWheelListener6);
      MouseWheelListener mouseWheelListener13 = AWTEventMulticaster.remove(mouseWheelListener3, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener14 = AWTEventMulticaster.add(mouseWheelListener12, mouseWheelListener6);
      AWTEventMulticaster.add((MouseWheelListener) null, mouseWheelListener14);
      AWTEventMulticaster.remove(mouseWheelListener8, (MouseWheelListener) null);
      AWTEventMulticaster.add(mouseWheelListener11, mouseWheelListener1);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add(mouseWheelListener7, mouseWheelListener1);
      AWTEventMulticaster.remove(mouseWheelListener13, (MouseWheelListener) null);
      int int0 = visualListModel0.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      visualListModel0.undeleteElements(intArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter0.close();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter((byte)0);
      charArrayWriter2.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      CharArrayWriter charArrayWriter3 = new CharArrayWriter();
      CharArrayWriter charArrayWriter4 = new CharArrayWriter();
      charArrayWriter2.append((CharSequence) null);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 709, 709);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      ParameterBlock parameterBlock1 = parameterBlock0.add((Object) pdfGraphics2D_HyperLinkKey0);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      Vector<Integer> vector0 = new Vector<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(vector0);
      ParameterBlock parameterBlock2 = new ParameterBlock();
      Vector<Object> vector1 = parameterBlock1.getSources();
      DefaultComboBoxModel<Object> defaultComboBoxModel1 = new DefaultComboBoxModel<Object>(vector1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultComboBoxModel0.removeListDataListener(jComboBox0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(defaultComboBoxModel0);
      jComboBox1.getFocusListeners();
      JComboBox<Object> jComboBox2 = new JComboBox<Object>();
      jComboBox2.setVisible(true);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 9999);
      assertNull(collection0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-52);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)89;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-1));
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 1343;
      visualListModel0.rotateClockwiseElements(intArray0);
      assertArrayEquals(new int[] {1343}, intArray0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>(stack0);
      visualListModel0.appendAllElements(hashSet0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      assertEquals(0, linkedHashSet0.size());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<Object> vector0 = new Vector<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParameterBlock parameterBlock0 = new ParameterBlock(vector0, vector0);
      parameterBlock0.getParameters();
      Stack<Object> stack0 = new Stack<Object>();
      ParameterBlock parameterBlock1 = new ParameterBlock(stack0);
      ParameterBlock parameterBlock2 = new ParameterBlock();
      ParameterBlock parameterBlock3 = parameterBlock2.add((Object) "@LK:]7_");
      ParameterBlock parameterBlock4 = parameterBlock1.setSource((Object) null, 119);
      ParameterBlock parameterBlock5 = parameterBlock3.set('C', 0);
      parameterBlock5.getParameters();
      Vector<Object> vector1 = parameterBlock2.getSources();
      ParameterBlock parameterBlock6 = new ParameterBlock(vector1);
      parameterBlock4.getParameters();
      Object[] objectArray0 = new Object[1];
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getElementAt(0);
      objectArray0[0] = null;
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(objectArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("@LK:]7_", "@LK:]7_");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // @LK:]7_
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DropMode[] dropModeArray0 = DropMode.values();
      Object[][] objectArray0 = new Object[9][6];
      objectArray0[1] = (Object[]) dropModeArray0;
      objectArray0[2] = (Object[]) dropModeArray0;
      objectArray0[3] = (Object[]) dropModeArray0;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      DropMode dropMode0 = DropMode.INSERT;
      JEditorPane jEditorPane0 = new JEditorPane("<h", "<h");
      jEditorPane0.getDropMode();
      DropMode.values();
      DropMode.values();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      visualListModel0.getElementAt(5199);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key1);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1557.7671983691));
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      JTree jTree0 = new JTree(hashtable0);
      DropMode dropMode1 = jTree0.getDropMode();
      // Undeclared exception!
      try { 
        renderingHints0.put("<h", dropMode1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.getSources();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      ParameterBlock parameterBlock1 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getParameters();
      Stack<Object> stack0 = new Stack<Object>();
      ParameterBlock parameterBlock2 = parameterBlock1.add((-296.3863828732));
      ParameterBlock parameterBlock3 = new ParameterBlock();
      ParameterBlock parameterBlock4 = new ParameterBlock();
      parameterBlock3.clone();
      parameterBlock4.removeParameters();
      parameterBlock4.shallowClone();
      vector0.add((Object) parameterBlock1);
      parameterBlock2.set(2177, 2177);
      parameterBlock4.removeSources();
      vector0.add((Object) parameterBlock0);
      ParameterBlock parameterBlock5 = parameterBlock4.set((Object) parameterBlock3, 1014);
      ParameterBlock parameterBlock6 = new ParameterBlock();
      ParameterBlock parameterBlock7 = parameterBlock1.setSource("`#4{]X}DbYU<0.y?(L", 1770);
      vector0.ensureCapacity(1770);
      Vector<Object> vector1 = parameterBlock3.getParameters();
      parameterBlock5.getParameters();
      vector1.add((Object) parameterBlock7);
      ParameterBlock parameterBlock8 = new ParameterBlock();
      parameterBlock8.add((double) 1014);
      parameterBlock8.set(14, 2041);
      parameterBlock8.addSource(vector1);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = 1770;
      intArray0[1] = 14;
      intArray0[2] = 2041;
      visualListModel0.reverseElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      visualListModel0.moveUpIndex(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      visualListModel0.moveDownIndex(0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(vector0);
      Vector<Object> vector1 = parameterBlock0.getSources();
      vector1.stream();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector1, vector1);
      Vector<Object> vector2 = parameterBlock1.getParameters();
      ParameterBlock parameterBlock2 = new ParameterBlock(vector0, vector0);
      ParameterBlock parameterBlock3 = parameterBlock0.add((-626.3712F));
      parameterBlock1.getParameters();
      ParameterBlock parameterBlock4 = new ParameterBlock(vector0, vector2);
      ParameterBlock parameterBlock5 = new ParameterBlock();
      ParameterBlock parameterBlock6 = new ParameterBlock(vector2);
      ParameterBlock parameterBlock7 = parameterBlock6.add((-1019));
      ParameterBlock parameterBlock8 = new ParameterBlock();
      ParameterBlock parameterBlock9 = (ParameterBlock)parameterBlock8.clone();
      parameterBlock7.getSources();
      parameterBlock9.clone();
      ParameterBlock parameterBlock10 = new ParameterBlock();
      parameterBlock9.removeSources();
      ParameterBlock parameterBlock11 = new ParameterBlock(vector0);
      parameterBlock11.addSource(parameterBlock7);
      parameterBlock11.add(3350L);
      parameterBlock2.add((long) (-1019));
      Vector<Object> vector3 = new Vector<Object>();
      ParameterBlock parameterBlock12 = new ParameterBlock(vector1, vector1);
      ParameterBlock parameterBlock13 = new ParameterBlock(vector0, vector3);
      Vector<Object> vector4 = new Vector<Object>();
      ParameterBlock parameterBlock14 = new ParameterBlock(vector4);
      ParameterBlock parameterBlock15 = new ParameterBlock();
      parameterBlock15.removeSources();
      parameterBlock3.getParameters();
      System.setCurrentTimeMillis((byte)116);
      System.setCurrentTimeMillis((byte)116);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex((byte)116);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, true);
      int int0 = Integer.MIN_VALUE;
      int int1 = 2884;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(Integer.MIN_VALUE, 2884, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -2147483648
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      Boolean boolean0 = Boolean.FALSE;
      linkedHashSet0.clone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      linkedHashSet0.spliterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean.valueOf(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      System.setCurrentTimeMillis(2114L);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener2 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener1);
      AWTEventMulticaster.remove(mouseWheelListener2, mouseWheelListener2);
      MouseWheelListener mouseWheelListener3 = AWTEventMulticaster.add(mouseWheelListener2, mouseWheelListener2);
      MouseWheelListener mouseWheelListener4 = AWTEventMulticaster.remove(mouseWheelListener3, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener5 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener3);
      MouseWheelListener mouseWheelListener6 = AWTEventMulticaster.remove(mouseWheelListener2, (MouseWheelListener) null);
      AWTEventMulticaster.remove(mouseWheelListener6, mouseWheelListener2);
      MouseWheelListener mouseWheelListener7 = AWTEventMulticaster.remove(mouseWheelListener4, mouseWheelListener5);
      MouseWheelListener mouseWheelListener8 = AWTEventMulticaster.add(mouseWheelListener6, mouseWheelListener7);
      AWTEventMulticaster.remove(mouseWheelListener4, mouseWheelListener2);
      MouseWheelListener mouseWheelListener9 = AWTEventMulticaster.add(mouseWheelListener8, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener10 = AWTEventMulticaster.add(mouseWheelListener8, mouseWheelListener6);
      MouseWheelListener mouseWheelListener11 = AWTEventMulticaster.add(mouseWheelListener10, mouseWheelListener3);
      AWTEventMulticaster.add(mouseWheelListener11, mouseWheelListener9);
      AWTEventMulticaster.remove((MouseWheelListener) null, mouseWheelListener8);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove(mouseWheelListener8, (MouseWheelListener) null);
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      AWTEventMulticaster.remove(mouseWheelListener9, mouseWheelListener8);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.addAllElements(108, (Collection<VisualPageListItem>) priorityQueue0);
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(0, 0, false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      int[] intArray0 = new int[1];
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)108;
      byteArray0[4] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(0, (int) (byte)122, false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, true);
      int int0 = 2884;
      BufferedImage bufferedImage0 = new BufferedImage(5, 2884, 5);
      visualListModel0.removeElements(5, 2884, false);
      RenderingHints renderingHints0 = null;
      ColorConvertOp colorConvertOp0 = new ColorConvertOp((RenderingHints) null);
      colorConvertOp0.filter(bufferedImage0, bufferedImage0);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(5);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 2884);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 2884
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArrayWriter1.write(charArray0);
      charArrayWriter1.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        charArrayWriter2.write("", (-2836), (-1816));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(530, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 530
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.getSources();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      ParameterBlock parameterBlock1 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock1.getParameters();
      Stack<Object> stack0 = new Stack<Object>();
      parameterBlock1.add((-296.3863828732));
      ParameterBlock parameterBlock2 = new ParameterBlock();
      ParameterBlock parameterBlock3 = new ParameterBlock();
      String string0 = "`#4{]X}DbYU<0.y?(L";
      ParameterBlock parameterBlock4 = new ParameterBlock(vector0);
      int int0 = 2177;
      parameterBlock2.clone();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(2177, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2177
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1321);
      visualListModel0.elementsChanged();
      int int1 = 766;
      int int2 = (-1644);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-1644), (-1644), (-1644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -1644
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)26;
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.subList(3331, (int) (byte)0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(3331) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.getSources();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      ParameterBlock parameterBlock1 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock1.getParameters();
      Stack<Object> stack0 = new Stack<Object>();
      ParameterBlock parameterBlock2 = new ParameterBlock();
      ParameterBlock parameterBlock3 = new ParameterBlock();
      ParameterBlock parameterBlock4 = new ParameterBlock(vector0);
      vector0.add((Object) parameterBlock4);
      ParameterBlock parameterBlock5 = parameterBlock3.set((Object) parameterBlock2, 1014);
      ParameterBlock parameterBlock6 = new ParameterBlock(stack0);
      parameterBlock1.setSource("@LK:]7_", 1770);
      vector0.ensureCapacity(2473);
      Vector<Object> vector1 = parameterBlock2.getParameters();
      parameterBlock5.getParameters();
      ParameterBlock parameterBlock7 = new ParameterBlock();
      parameterBlock7.add((double) 1014);
      parameterBlock7.addSource(vector1);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 122, true);
      assertNull(collection0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DropMode[] dropModeArray0 = DropMode.values();
      Object[][] objectArray0 = new Object[9][6];
      objectArray0[1] = (Object[]) dropModeArray0;
      objectArray0[2] = (Object[]) dropModeArray0;
      objectArray0[3] = (Object[]) dropModeArray0;
      objectArray0[4] = (Object[]) dropModeArray0;
      objectArray0[3] = (Object[]) dropModeArray0;
      objectArray0[3] = (Object[]) dropModeArray0;
      objectArray0[4] = (Object[]) dropModeArray0;
      objectArray0[8] = (Object[]) dropModeArray0;
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        visualListModel0.subList(1645, (-1864), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1645) > toIndex(-1864)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DropMode[] dropModeArray0 = DropMode.values();
      Object[][] objectArray0 = new Object[9][6];
      objectArray0[1] = (Object[]) dropModeArray0;
      objectArray0[2] = (Object[]) dropModeArray0;
      objectArray0[3] = (Object[]) dropModeArray0;
      objectArray0[4] = (Object[]) dropModeArray0;
      objectArray0[3] = (Object[]) dropModeArray0;
      objectArray0[6] = (Object[]) dropModeArray0;
      objectArray0[7] = (Object[]) dropModeArray0;
      objectArray0[8] = (Object[]) dropModeArray0;
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        visualListModel0.subList(1645, (-1858), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1645) > toIndex(-1858)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<Object> vector0 = new Vector<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(vector0);
      Vector<Object> vector1 = parameterBlock0.getSources();
      vector1.stream();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector1, vector1);
      Vector<Object> vector2 = parameterBlock1.getParameters();
      ParameterBlock parameterBlock2 = new ParameterBlock(vector0, vector0);
      parameterBlock0.add((-625.1525F));
      parameterBlock1.getParameters();
      ParameterBlock parameterBlock3 = new ParameterBlock(vector0, vector2);
      ParameterBlock parameterBlock4 = new ParameterBlock();
      ParameterBlock parameterBlock5 = new ParameterBlock(vector2);
      ParameterBlock parameterBlock6 = parameterBlock5.add((-1019));
      ParameterBlock parameterBlock7 = new ParameterBlock();
      ParameterBlock parameterBlock8 = (ParameterBlock)parameterBlock7.clone();
      parameterBlock6.getSources();
      ParameterBlock parameterBlock9 = new ParameterBlock();
      parameterBlock8.removeSources();
      ParameterBlock parameterBlock10 = new ParameterBlock(vector0);
      parameterBlock10.add(3347L);
      parameterBlock2.add((long) (-1019));
      Vector<Object> vector3 = new Vector<Object>();
      ParameterBlock parameterBlock11 = new ParameterBlock(vector0, vector3);
      ParameterBlock parameterBlock12 = new ParameterBlock(vector0);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-1019), 1693, true);
      assertNull(collection0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DropMode[] dropModeArray0 = DropMode.values();
      Object[][] objectArray0 = new Object[9][6];
      objectArray0[1] = (Object[]) dropModeArray0;
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-2593));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-2593)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, mouseWheelListener1);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener2 = AWTEventMulticaster.add(mouseWheelListener1, mouseWheelListener1);
      AWTEventMulticaster.remove(mouseWheelListener2, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove(mouseWheelListener2, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener3 = AWTEventMulticaster.add(mouseWheelListener2, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener4 = AWTEventMulticaster.add(mouseWheelListener3, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, mouseWheelListener2);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      MouseWheelListener mouseWheelListener5 = AWTEventMulticaster.add(mouseWheelListener4, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, mouseWheelListener3);
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      AWTEventMulticaster.remove(mouseWheelListener1, (MouseWheelListener) null);
      AWTEventMulticaster.add(mouseWheelListener5, (MouseWheelListener) null);
      AWTEventMulticaster.add(mouseWheelListener2, (MouseWheelListener) null);
      jComboBox0.addMouseWheelListener((MouseWheelListener) null);
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener2 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(mouseWheelListener2, mouseWheelListener2);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster0, mouseWheelListener2);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add(mouseWheelListener0, (MouseWheelListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove(mouseWheelListener2, mouseWheelListener2);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster2, (MouseWheelListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove(mouseWheelListener2, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster4, mouseWheelListener2);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster4, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((AdjustmentListener) aWTEventMulticaster5, (AdjustmentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster5, (MouseWheelListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster10, (AdjustmentListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster7, (MouseWheelListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster9, (AdjustmentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster12, (MouseWheelListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster1, (AdjustmentListener) aWTEventMulticaster8);
      AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster4, (MouseWheelListener) aWTEventMulticaster13);
      AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster6, (MouseWheelListener) aWTEventMulticaster4);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster4);
      ListDataEvent listDataEvent0 = new ListDataEvent(aWTEventMulticaster14, 11, (-3916), 11);
      AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster0, (MouseWheelListener) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter0.close();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter((byte)0);
      charArrayWriter2.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      CharArrayWriter charArrayWriter3 = new CharArrayWriter();
      CharArrayWriter charArrayWriter4 = new CharArrayWriter();
      charArrayWriter2.append((CharSequence) null);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 709, 709);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }
}
