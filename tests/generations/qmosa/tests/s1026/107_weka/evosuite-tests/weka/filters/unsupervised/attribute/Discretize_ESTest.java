/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 16:45:01 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.299429391468317
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 6052;
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else if (format.attribute(i).isNumeric())", 6052);
      discretize0.m_FindNumBins = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 2);
      instances0.setClass(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      attribute0.setWeight(2.0);
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2427276237316462
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = new Attribute("Upper limit has not been specified", 0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("]|0LZ.Lp2$", arrayList0, 0);
      SystemInUtil.addInputLine("integer");
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      Range range0 = new Range();
      discretize0.m_NumBins = 1;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.138715642136252
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else if (format.attribute(i).isNumeric())", 6052);
      discretize0.m_FindNumBins = true;
      discretize0.setMakeBinary(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("9Ev?\u0000kDK'y-J/#", arrayList0, 77);
      UnaryOperator.identity();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      attribute0.value(3);
      Instances instances1 = new Instances("else if (format.attribute(i).isNumeric())", arrayList0, 6052);
      attribute0.addRelation(instances1);
      Discretize discretize1 = new Discretize();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.deleteWithMissing(2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize1.setInputFormat(instances1);
      discretize1.batchFinished();
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      // Undeclared exception!
      try { 
        discretize1.input(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8217005778876232
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("(-inf--1299.305532],(-1299.305532-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      
      double[] doubleArray2 = discretize0.getCutPoints(0);
      assertArrayEquals(new double[] {(-1299.3055322594903), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      String string1 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      Instances instances0 = new Instances("S#}QF`h", arrayList0, 1584);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, String> function0 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function0);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Instance, Integer> function2 = unaryOperator0.andThen((Function<? super Instance, ? extends Integer>) function1);
      Function<Object, SparseInstance> function3 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, SparseInstance> function4 = unaryOperator1.andThen((Function<? super String, ? extends SparseInstance>) function3);
      function2.compose((Function<? super String, ? extends Instance>) function4);
      UnaryOperator.identity();
      UnaryOperator<Instance> unaryOperator3 = UnaryOperator.identity();
      Function<Object, SparseInstance> function5 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.compose((Function<? super Integer, ? extends Instance>) function5);
      unaryOperator3.andThen((Function<? super Instance, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super SparseInstance, ? extends Instance>) unaryOperator3);
      instances0.replaceAll(unaryOperator0);
      discretize0.getMakeBinary();
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0810337311425013
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      Attribute attribute0 = new Attribute("1^R1&W@uuMEq");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0, (boolean[]) null);
      instances0.lastIndexOf("real");
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      discretize0.setMakeBinary(true);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "1^R1&W@uuMEq");
      Discretize discretize1 = new Discretize();
      discretize0.batchFinished();
      discretize0.findNumBins(0);
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      // Undeclared exception!
      try { 
        discretize1.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0660708377143053
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      Attribute attribute0 = new Attribute("%yfJnd");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "integer");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "%yfJnd");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      arrayList0.add(attribute0);
      attribute0.value((-638));
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      DenseInstance denseInstance0 = new DenseInstance((-1299.3055322594903), doubleArray0);
      denseInstance0.setMissing(attribute0);
      discretize0.input(denseInstance0);
      System.setCurrentTimeMillis(3754L);
      org.evosuite.runtime.Random.setNextRandom(1751);
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("@end");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "numeric");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.listIterator();
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      discretize0.setInvertSelection(true);
      discretize0.getBinRangesString(2320);
      Locale.getISOCountries();
      boolean boolean0 = discretize0.getInvertSelection();
      assertTrue(boolean0);
      
      String string0 = discretize0.makeBinaryTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9910042766327036
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else if (format.attribute(i).isNumeric())", 6052);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      discretize0.m_FindNumBins = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(2);
      arrayList0.add(attribute0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) attribute0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate1.and(predicate2);
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      Predicate<Object> predicate6 = predicate4.or(predicate1);
      Predicate<Object> predicate7 = predicate1.and(predicate5);
      Predicate<Object> predicate8 = predicate4.or(predicate1);
      predicate4.or(predicate5);
      Predicate<Object> predicate9 = predicate3.or(predicate5);
      Predicate.isEqual((Object) predicate2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte) (-23);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      predicate0.or(predicate9);
      Predicate<Object> predicate10 = predicate4.negate();
      predicate6.and(predicate5);
      predicate10.or(predicate8);
      Predicate<Object> predicate11 = predicate0.or(predicate2);
      predicate7.or(predicate11);
      predicate3.negate();
      Discretize.main((String[]) null);
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2013265917));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.125363130044135
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Jend");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.listIterator();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Jend");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "date");
      arrayList0.add(attribute0);
      attribute0.value((-638));
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      instances0.lastIndexOf("real");
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.deleteWithMissing((-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      DenseInstance denseInstance0 = new DenseInstance((-1299.3055322594903), doubleArray0);
      discretize0.input(denseInstance0);
      discretize0.getBinRangesString(0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.431259504143956
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else if (format.attribute(i).isNumeric())", 6028);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      discretize0.m_FindNumBins = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("9v?WkDK'y-J/#", arrayList0, 77);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      attribute0.setWeight(2.0);
      Instances instances1 = new Instances(instances0, 2);
      Properties properties0 = new Properties();
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      discretize0.calculateCutPoints();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter1.getFilter(2631);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2631
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0627299875428027
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = new double[9];
      Attribute attribute0 = new Attribute("%yfJnd");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ").\n");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "%yfJnd");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      arrayList0.add(attribute0);
      attribute0.value((-638));
      Instances instances0 = new Instances(").\n", arrayList0, 3);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      DenseInstance denseInstance0 = new DenseInstance((-601.418677578694), doubleArray0);
      discretize0.input(denseInstance0);
      org.evosuite.runtime.Random.setNextRandom(1715);
      discretize0.convertInstance(denseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.420995494679436
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 6028;
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else if (format.attribute(i).isNumeric())", 6028);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      discretize0.m_FindNumBins = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("9v?8WkDK'y-J/#", arrayList0, 77);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      discretize0.setInputFormat(instances0);
      MockRandom mockRandom0 = new MockRandom();
      discretize0.calculateCutPoints();
      Instances instances1 = new Instances(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(77);
      instances1.add((Instance) sparseInstance0);
      Instances instances2 = new Instances(instances0, 3);
      discretize0.setInputFormat(instances1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute1 = new Attribute("9v?8WkDK'y-J/#", 2);
      arrayList0.add(attribute1);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8147201890239515
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemInUtil.addInputLine("KKs_tAO'ru08s/y");
      Discretize discretize0 = new Discretize("KKs_tAO'ru08s/y");
      discretize0.toString();
      Filter filter0 = Filter.makeCopy(discretize0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KKs_tAO'ru08s/y");
      discretize0.m_UseBinNumbers = true;
      discretize0.getCutPoints(1127);
      discretize0.setOutputFormat();
      discretize0.getOptions();
      discretize0.listOptions();
      discretize0.getUseBinNumbers();
      // Undeclared exception!
      try { 
        filter0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setMakeBinary(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      Instances instances0 = new Instances("S#}QF`h", arrayList0, 1584);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, String> function0 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function0);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Instance, Integer> function2 = unaryOperator0.andThen((Function<? super Instance, ? extends Integer>) function1);
      Function<Object, SparseInstance> function3 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, SparseInstance> function4 = unaryOperator1.andThen((Function<? super String, ? extends SparseInstance>) function3);
      function2.compose((Function<? super String, ? extends Instance>) function4);
      Attribute attribute0 = new Attribute(".arff", (-1431655763));
      arrayList0.add(attribute0);
      UnaryOperator.identity();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      UnaryOperator<Instance> unaryOperator3 = UnaryOperator.identity();
      Function<Object, SparseInstance> function5 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.compose((Function<? super Integer, ? extends Instance>) function5);
      unaryOperator3.andThen((Function<? super Instance, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super SparseInstance, ? extends Instance>) unaryOperator3);
      instances0.replaceAll(unaryOperator0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.798534689126567
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("$Revision: 9028 $");
      linkedList1.add("$Revision: 9028 $");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      linkedList2.add(" Wi6L2f?");
      linkedList0.add("$Revision: 9028 $");
      linkedList2.add("$Revision: 9028 $");
      linkedList2.add("pfuv#G@<~R$w");
      linkedList2.containsAll(linkedList0);
      Object object0 = new Object();
      linkedList2.remove(object0);
      linkedList1.spliterator();
      Discretize discretize0 = new Discretize(" Wi6L2f?");
      discretize0.setInvertSelection(true);
      discretize0.getBinRangesString(93);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      
      String string0 = discretize0.invertSelectionTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4831094592697656
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 6028;
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else if (format.attribute(i).isNumeric())", 6028);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      discretize0.m_FindNumBins = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("9v?8WkDK'y-J/#", arrayList0, 77);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      discretize0.setInputFormat(instances0);
      MockRandom mockRandom0 = new MockRandom();
      discretize0.calculateCutPoints();
      Range range0 = new Range();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0634804805501226
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else if (format.attribute(i).isNumeric())", 6028);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      discretize0.m_FindNumBins = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("9v?8WkDK'y-J/#", arrayList0, 77);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      Instances instances1 = new Instances(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(77);
      instances1.add((Instance) sparseInstance0);
      instances1.toSummaryString();
      Instances instances2 = new Instances(instances0, 3);
      discretize0.setInputFormat(instances1);
      arrayList0.ensureCapacity(4);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      protectedProperties0.values();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setInputFormat(instances1);
      discretize0.batchFinished();
      System.setCurrentTimeMillis(2);
      org.evosuite.runtime.Random.setNextRandom(4);
      discretize0.input(sparseInstance0);
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0392209249799707
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(true);
      discretize0.setFindNumBins(true);
      discretize0.listOptions();
      discretize0.m_UseEqualFrequency = true;
      Filter.makeCopy(discretize0);
      discretize0.binsTipText();
      discretize0.getOptions();
      discretize0.globalInfo();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else if (format.attribute(i).isNumeric())", 6052);
      discretize0.m_FindNumBins = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.m_UseEqualFrequency = true;
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 2);
      instances0.setClass(attribute0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bin number optimization in conjunction with equal-frequency binning not implemented.
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1033997406036247
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      Attribute attribute0 = new Attribute("%yfJnd");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "integer");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ").\n");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "%yfJnd");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      arrayList0.add(attribute0);
      attribute0.value((-638));
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      DenseInstance denseInstance0 = new DenseInstance((-1299.3055322594903), doubleArray0);
      discretize0.input(denseInstance0);
      org.evosuite.runtime.Random.setNextRandom(1751);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4123374860214275
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else if (format.attribute(i).isNumeric())", 6052);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      discretize0.m_FindNumBins = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("9Ev?WkDK'y-J/#", arrayList0, 77);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Instance, ? extends Integer>) function0);
      instances0.replaceAll(unaryOperator0);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      attribute0.setWeight(2.0);
      Instances instances1 = new Instances(instances0, 2);
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-3);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      Attribute attribute0 = new Attribute("%yfJnd");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "integer");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "%yfJnd");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      arrayList0.add(attribute0);
      attribute0.value((-638));
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.createFolder(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile2);
      discretize0.setInputFormat(instances0);
      discretize0.isOutputFormatDefined();
      System.setCurrentTimeMillis(3754L);
      org.evosuite.runtime.Random.setNextRandom(1751);
      boolean boolean0 = discretize0.input((Instance) null);
      assertFalse(discretize0.isNewBatch());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5035870903352846
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-1219.788919083302);
      doubleArray0[3] = 1244.180584998752;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("-R <col1,col2-col4,...>", linkedList0, (-340));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute.typeToString(3121);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.add("@end");
      linkedList1.sort(comparator0);
      attribute0.isInRange(0.0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 3121);
      Discretize discretize1 = new Discretize("string");
      discretize0.setInputFormat(instances0);
      String[] stringArray0 = new String[5];
      arrayList0.add(attribute0);
      stringArray0[0] = "@end";
      linkedList1.add("@relation");
      stringArray0[1] = ")tk";
      stringArray0[2] = "@end";
      stringArray0[4] = "string";
      linkedList1.toArray(stringArray0);
      discretize1.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.428715181307695
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-3);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      Attribute attribute0 = new Attribute("%yfJnd");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "integer");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "%yfJnd");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      arrayList0.add(attribute0);
      attribute0.value((-638));
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.createFolder(evoSuiteFile1);
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile2);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '%yfJnd' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4302827696284752
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("elseif (format.attribute(i).isNumeric())", 6028);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      discretize0.m_FindNumBins = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("9v?WkDK'y-J/#", arrayList0, 77);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      attribute0.setWeight(2.0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1611);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1611
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.toString((-1717986916), 125);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("0", arrayList0, protectedProperties0);
      attribute0.isInRange(0.0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(82);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) binarySparseInstance1);
      Predicate<Object> predicate1 = predicate0.negate();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "@end");
      protectedProperties0.store((Writer) stringWriter1, "fNC5zmVC57'8fnM8");
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) attribute0);
      predicate2.or(predicate1);
      linkedList0.removeIf(predicate2);
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances1, 1);
      discretize0.setInputFormat(instances2);
      arrayList1.add(attribute0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "'B1of2'";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize1.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1087844374950713
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = new double[9];
      Attribute attribute0 = new Attribute("%yfJnd");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ").\n");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "%yfJnd");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      arrayList0.add(attribute0);
      attribute0.value((-638));
      Instances instances0 = new Instances(").\n", arrayList0, 3);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      arrayList0.trimToSize();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      DenseInstance denseInstance0 = new DenseInstance((-601.418677578694), doubleArray0);
      discretize0.input(denseInstance0);
      org.evosuite.runtime.Random.setNextRandom(1715);
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.385544868886597
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-1219.788919083302);
      doubleArray0[2] = 4.5;
      doubleArray0[3] = 1242.0;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("-R <col1,col2-col4,...>", linkedList0, (-340));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      attribute0.isInRange(4.5);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 3121);
      Discretize discretize1 = new Discretize("string");
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@end";
      stringArray0[1] = ")tk";
      Discretize discretize2 = new Discretize();
      discretize0.calculateCutPoints();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.067648843266804
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.toString((-1717986916), 125);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString((-1717986916));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("unknown(-1717986916)", linkedList0, protectedProperties0);
      attribute0.isInRange((-0.1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "0");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.or(predicate1);
      linkedList0.removeIf(predicate1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("0", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances0);
      arrayList0.add(attribute0);
      String[] stringArray0 = new String[0];
      linkedList0.toArray(stringArray0);
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7767190612918
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else if (format.attribute(i).isNumeric())", 6052);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("9Ev?WkDK'y-J/#", arrayList0, 77);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Instance, ? extends Integer>) function0);
      instances0.replaceAll(unaryOperator0);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      attribute0.setWeight(2.0);
      Instances instances1 = new Instances(instances0, 2);
      MockRandom mockRandom0 = new MockRandom(1);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        instances1.resampleWithWeights((Random) mockRandom0, (double[]) null, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8318229148670584
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else Df (format.attribute(i).isNemeric()z", 6052);
      discretize0.m_FindNumBins = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 2);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      attribute0.equals("else Df (format.attribute(i).isNemeric()z");
      attribute0.setWeight(2.0);
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.setDebug(true);
      MultiFilter multiFilter1 = new MultiFilter();
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("-R <col1,col2-col4,...>", linkedList3, (-340));
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList2.sort(comparator0);
      attribute0.isInRange(1242.0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 2);
      Discretize discretize0 = new Discretize("integer");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at integer
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("pfuv#G@<~R$w");
      Object object0 = new Object();
      linkedList0.remove(object0);
      linkedList1.spliterator();
      Discretize discretize0 = new Discretize("String should not finish with ");
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, int0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("HpH`VGq^Vx/?gf8$e", arrayList0, 6028);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      int int0 = 10;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range();
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hi(8B}1A");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1219.788919083302);
      doubleArray1[2] = 4.5;
      doubleArray1[3] = 1242.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1219.788919083302);
      doubleArray2[1] = 1242.0;
      doubleArray2[2] = (-1219.788919083302);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 1242.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 1242.0;
      doubleArray4[3] = 4.5;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 1242.0;
      doubleArray4[6] = 4.5;
      doubleArray4[7] = 4.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-1219.788919083302);
      doubleArray5[1] = 4.5;
      doubleArray5[2] = 1242.0;
      doubleArray5[3] = 1242.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 4.5;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 4.5;
      doubleArray6[3] = (-1219.788919083302);
      doubleArray6[4] = 2617.1334655;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 2617.1334655;
      doubleArray7[1] = 4.5;
      doubleArray7[2] = 1242.0;
      doubleArray7[3] = 2617.1334655;
      doubleArray7[4] = (-1.7976931348623157E308);
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize("Revision: ");
      Range range0 = new Range("");
      Discretize discretize1 = new Discretize("");
      double[][] doubleArray0 = new double[0][4];
      discretize1.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize1.getCutPoints((-1165));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1165
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      SparseInstance sparseInstance0 = new SparseInstance((-12.399159996520662), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.toString((-2918), 79);
      binarySparseInstance0.toString((-1717986916), 125);
      sparseInstance0.toStringNoWeight(3977);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.copy();
      binarySparseInstance2.deleteAttributeAt((-1717986916));
      DenseInstance denseInstance0 = new DenseInstance(125);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-12.399159996520662), doubleArray0);
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints((-907));
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = (-1299.3055322594903);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      String[] stringArray0 = new String[18];
      stringArray0[0] = "";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.710283334414665
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(30000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setMakeBinary(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      Instances instances0 = new Instances("PgOMH?W0D,:bU9D+3o1", arrayList0, 1584);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, String> function0 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function0);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Instance, Integer> function2 = unaryOperator0.andThen((Function<? super Instance, ? extends Integer>) function1);
      Function<Object, SparseInstance> function3 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, SparseInstance> function4 = unaryOperator1.andThen((Function<? super String, ? extends SparseInstance>) function3);
      function2.compose((Function<? super String, ? extends Instance>) function4);
      UnaryOperator.identity();
      UnaryOperator<Instance> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Instance, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super SparseInstance, ? extends Instance>) unaryOperator3);
      instances0.replaceAll(unaryOperator0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.5516188795892942
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOptions((String[]) null);
      discretize0.getRevision();
      discretize0.m_MakeBinary = false;
      discretize0.attributeIndicesTipText();
      discretize0.setOptions((String[]) null);
      Discretize.main((String[]) null);
      Discretize.main((String[]) null);
      discretize0.setMakeBinary(false);
      discretize0.getRevision();
      discretize0.useEqualFrequencyTipText();
      int int0 = (-773);
      discretize0.getBinRangesString((-773));
      discretize0.setUseBinNumbers(true);
      discretize0.globalInfo();
      discretize0.getOptions();
      int int1 = (-2245);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-2245));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3252768361197096
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = true;
      discretize0.setDesiredWeightOfInstancesPerInterval((-2128.112));
      discretize0.m_IgnoreClass = true;
      discretize0.listOptions();
      discretize0.makeBinaryTipText();
      discretize0.setMakeBinary(true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.7976931348623157E308);
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      doubleArray0[1] = (-1.7976931348623157E308);
      String[] stringArray0 = discretize0.getOptions();
      Discretize discretize1 = new Discretize("fl");
      int[] intArray0 = new int[2];
      intArray0[0] = (-1952257859);
      intArray0[1] = (-1610);
      discretize1.setAttributeIndicesArray(intArray0);
      discretize1.setUseBinNumbers(true);
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      double double0 = 1391.9834068972743;
      SparseInstance sparseInstance0 = new SparseInstance(1391.9834068972743, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.toString((-1717986916), 125);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = null;
      try {
        binarySparseInstance2 = new BinarySparseInstance((-1717986916));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize("ny");
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add(" Wi6L2f?");
      linkedList2.add("pfuv#G@<~R$w");
      Object object0 = new Object();
      linkedList1.spliterator();
      Discretize discretize0 = new Discretize("String should not finish with ");
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize("'FE_Mu8e");
      discretize0.getInvertSelection();
      discretize0.setOutputFormat();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1374.78922429697));
      discretize0.setDesiredWeightOfInstancesPerInterval(1715.0399645102);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'FE_Mu8e";
      stringArray0[1] = "'FE_Mu8e";
      stringArray0[2] = "'FE_Mu8e";
      stringArray0[3] = "'FE_Mu8e";
      stringArray0[4] = "'FE_Mu8e";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize("-Y");
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      MultiFilter multiFilter0 = new MultiFilter();
      SystemInUtil.addInputLine("ZQe");
      multiFilter0.toString();
      MultiFilter multiFilter1 = new MultiFilter();
      discretize0.useBinNumbersTipText();
      System.setCurrentTimeMillis((-662L));
      int int0 = 56;
      // Undeclared exception!
      try { 
        multiFilter0.getFilter(56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize("+");
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-117.37286111);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1441.0584708877);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1691.2368778894197);
      doubleArray1[7] = 1445.05197647;
      doubleArray0[0] = doubleArray1;
      String[] stringArray0 = discretize0.getOptions();
      Filter filter0 = Filter.makeCopy(discretize0);
      try { 
        Filter.filterFile(filter0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2081.663883896636), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, doubleArray0);
      binarySparseInstance1.copy();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(601.9181130482981, doubleArray0, (int[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize("'B1of2'");
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4.5;
      doubleArray0[3] = 1242.0;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("-R <col1,col2-col4,...>", linkedList0, (-340));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 3121);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      Range range0 = new Range(".bsi");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "G%{#Mt=2no[F</pDz/d";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@end";
      stringArray0[3] = "string";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "string";
      stringArray0[6] = ".arff";
      stringArray0[7] = ".bsi";
      stringArray0[8] = ".bsi";
      Discretize discretize0 = new Discretize("@relation");
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("Gu<>)%$");
      discretize0.globalInfo();
      Range range0 = new Range("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      StringWriter stringWriter0 = new StringWriter();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate3.negate();
      predicate1.negate();
      Filter.makeCopy((Filter) null);
      Filter.makeCopy((Filter) null);
      Discretize discretize0 = new Discretize("dg+RWvnl&gGY?}{");
      discretize0.setDesiredWeightOfInstancesPerInterval(1.0);
      try { 
        Filter.filterFile(discretize0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.toString((-1717986916), 125);
      binarySparseInstance0.isMissing((-1717986916));
      Discretize discretize0 = new Discretize("\nOptions:\n\n");
      int[] intArray0 = new int[6];
      intArray0[0] = 125;
      intArray0[1] = (-1717986916);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z`Fd$6#i bi");
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1299.3055322594903);
      double double0 = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      binarySparseInstance0.toString((-1717986916), 125);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = null;
      try {
        binarySparseInstance2 = new BinarySparseInstance((-1717986916));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Instance, ? extends Integer>) function0);
      UnaryOperator.identity();
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1299.3055322594903);
      SparseInstance sparseInstance0 = new SparseInstance((-12.399159996520662), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      int int0 = (-2918);
      binarySparseInstance0.copy();
      int int1 = 79;
      binarySparseInstance0.toString((-2918), 79);
      binarySparseInstance0.toString((-1717986916), 113);
      sparseInstance0.toStringNoWeight(3977);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-12.399159996520662), doubleArray0);
      Discretize discretize0 = new Discretize("VS0Y,");
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1219.788919083302);
      doubleArray0[2] = 4.5;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[9];
      stringArray0[3] = "d";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // null
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b&\"Ds+i1.2cl1*");
      Discretize discretize0 = new Discretize();
      discretize0.m_DefaultCols = "b&\"Ds+i1.2cl1*";
      discretize0.setBins(68);
      assertEquals(68, discretize0.getBins());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DenseInstance denseInstance0 = new DenseInstance(125);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.findNumBins(19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      MultiFilter multiFilter0 = new MultiFilter();
      SystemInUtil.addInputLine("A");
      try { 
        Filter.batchFilterFile(multiFilter0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -D
         // \tTurns on output of debugging information.
         // -F <classname [options]>
         // \tA filter to apply (can be specified multiple times).
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1299.3055322594903);
      doubleArray0[1] = (-1299.3055322594903);
      doubleArray0[2] = (-1299.3055322594903);
      doubleArray0[3] = (-1299.3055322594903);
      doubleArray0[4] = (-1299.3055322594903);
      doubleArray0[5] = (-1299.3055322594903);
      doubleArray0[6] = (-1299.3055322594903);
      SparseInstance sparseInstance0 = new SparseInstance((-1299.3055322594903), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      denseInstance0.toStringNoWeight(10);
      // Undeclared exception!
      try { 
        denseInstance0.insertAttributeAt((-1717986916));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't insert attribute: index out of range
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "-O";
      Discretize discretize0 = new Discretize("-O");
      discretize0.setAttributeIndices("-O");
      discretize0.setOutputFormat();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 4;
      SparseInstance sparseInstance0 = new SparseInstance(4, doubleArray0, intArray0, (-2683));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.308293844984404
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("else if (format.attribute(i).isNumeric())", 6028);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      int int0 = 77;
      Instances instances0 = new Instances("9v?8vWkD&KO'y-J/#", arrayList0, 77);
      SystemInUtil.addInputLine("|3.zjs^N");
      discretize0.setInputFormat(instances0);
      discretize0.setFindNumBins(true);
      Range range0 = new Range();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      SparseInstance sparseInstance0 = new SparseInstance((-12.399159996520662), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.toString((-2918), 125);
      binarySparseInstance0.toString((-1717986916), 125);
      sparseInstance0.toStringNoWeight(125);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.copy();
      binarySparseInstance2.deleteAttributeAt((-1717986916));
      DenseInstance denseInstance0 = new DenseInstance(125);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-12.399159996520662), doubleArray0);
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints((-907));
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }
}
