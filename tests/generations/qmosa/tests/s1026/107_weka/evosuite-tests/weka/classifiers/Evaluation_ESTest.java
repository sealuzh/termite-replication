/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 17:42:48 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Properties;
import java.util.Random;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CorrelationAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 496;
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "D0<0H-<N7YQDlAh");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      int int1 = (-2606);
      CharBuffer charBuffer0 = CharBuffer.allocate(109);
      // Undeclared exception!
      try { 
        charBuffer0.get(2145338309);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.776582536380537
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      instances0.toArray();
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2206);
      intArray0[1] = 528;
      SMO sMO0 = new SMO();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.matthewsCorrelationCoefficient((-1127281206));
      evaluation0.falsePositiveRate(888);
      evaluation0.trueNegativeRate((-1));
      evaluation0.confusionMatrix();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5783257529170927
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("_$Yln");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumDate(1121);
      evaluation0.areaUnderROC(7);
      ZeroR zeroR0 = new ZeroR();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom(288L);
      mockRandom0.longs();
      instances0.resampleWithWeights((Random) mockRandom0);
      MultiScheme multiScheme0 = new MultiScheme();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      evaluation0.unweightedMacroFmeasure();
      org.evosuite.runtime.Random.setNextRandom((-1994981129));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6968005000595399
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-6.0), (-162.435071488006));
      evaluation0.addNumericTrainClass(1.5, (-364.87413661));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.761282365888583
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 743.9;
      doubleArray0[3] = (double) (-1);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[2] = (-2);
      intArray0[4] = 352;
      evaluation0.useNoPriors();
      intArray0[5] = (-1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      evaluation1.meanPriorAbsoluteError();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.numFalseNegatives((-2316));
      evaluation1.numTruePositives((-2));
      evaluation0.sizeOfPredictedRegions();
      evaluation1.toSummaryString();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6007624033913315
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(489);
      Stacking stacking0 = new Stacking();
      evaluation1.truePositiveRate(18);
      textDirectoryLoader0.getStructure();
      evaluation1.precision(2605);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      evaluation1.weightedTrueNegativeRate();
      evaluation0.numFalseNegatives((-436));
      evaluation1.numTruePositives(898);
      evaluation0.sizeOfPredictedRegions();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.548108622689311
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      capabilities0.disableAll();
      SMO sMO0 = new SMO();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 1000.0;
      int[] intArray0 = new int[7];
      intArray0[1] = (-1);
      intArray0[2] = 1;
      intArray0[3] = 3022;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(1000.0, doubleArray0, intArray0, (-1));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.numFalseNegatives(1);
      evaluation0.numTruePositives(352);
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      evaluation0.getHeader();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.205091089269522
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(8);
      evaluation0.numFalsePositives((-28));
      evaluation0.precision((-28));
      evaluation0.toClassDetailsString("setAutoBuild");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      DenseInstance denseInstance0 = new DenseInstance(708);
      double double0 = evaluation0.m_MissingClass;
      MockRandom mockRandom0 = new MockRandom((-3108L));
      mockRandom0.longs();
      MockRandom mockRandom1 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom1);
      MultiScheme multiScheme0 = new MultiScheme();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      evaluation0.unweightedMacroFmeasure();
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7982008951665915
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add(bayesNet0);
      linkedHashSet0.add(bayesNet0);
      linkedHashSet0.add(bayesNet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.removeAll(linkedHashSet0);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      evaluation0.numFalseNegatives(20);
      linkedHashSet0.clear();
      evaluation0.truePositiveRate(782);
      bayesNet0.measureDivergence();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      Filter.makeCopy(filter0);
      evaluation0.numTrueNegatives(782);
      evaluation0.toSummaryString("kernelTipText", true);
      evaluation0.weightedRecall();
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4211117548515646
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SMO sMO0 = new SMO();
      SMO sMO1 = (SMO)AbstractClassifier.makeCopy(sMO0);
      sMO1.setDebug(false);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      AbstractClassifier.makeCopies(sMO1, 0);
      multilayerPerceptron0.setDebug(false);
      multilayerPerceptron0.setGUI(false);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      SparseInstance sparseInstance0 = new SparseInstance(1336);
      evaluation0.unweightedMicroFmeasure();
      try { 
        evaluation0.updateStatsForClassifier((double[]) null, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3494589439830973
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(119);
      J48 j48_0 = new J48();
      evaluation0.toMatrixString("@data");
      evaluation0.numFalsePositives((-1995138716));
      evaluation0.precision((-904));
      evaluation0.toClassDetailsString("@data");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      DenseInstance denseInstance0 = new DenseInstance(119);
      evaluation0.truePositiveRate((-1995138716));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, denseInstance0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.035336244516708
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision((byte)87);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedPrecision();
      MockRandom mockRandom0 = new MockRandom((byte)87);
      mockRandom0.longs();
      instances0.resampleWithWeights((Random) mockRandom0);
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.weightedTruePositiveRate();
      evaluation0.matthewsCorrelationCoefficient(84);
      evaluation0.matthewsCorrelationCoefficient((byte)87);
      evaluation0.confusionMatrix();
      evaluation0.weightedAreaUnderPRC();
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.520253907619258
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SMO sMO0 = new SMO();
      AbstractClassifier.makeCopy(sMO0);
      sMO0.setDebug(true);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.capabilities();
      sMO0.getCapabilities();
      testInstances0.setClassIndex(1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.toClassDetailsString("@relation");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      LibSVMLoader libSVMLoader4 = new LibSVMLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", vector0, 0);
      binarySparseInstance0.setMissing(attribute0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3137085980039775
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(8);
      evaluation0.numFalsePositives(13);
      evaluation0.precision(13);
      evaluation0.toClassDetailsString("setAutoBuild");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      DenseInstance denseInstance0 = new DenseInstance(708);
      evaluation0.rootMeanPriorSquaredError();
      CostMatrix costMatrix0 = new CostMatrix(42);
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.rootMeanSquaredError();
      SparseInstance sparseInstance0 = new SparseInstance(1336);
      evaluation0.areaUnderROC(456);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.mergeInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue((-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6727547966053267
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SMO sMO0 = new SMO();
      Classifier classifier0 = AbstractClassifier.makeCopy(sMO0);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      classifier0.getCapabilities();
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassIndex(4);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte)123;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (byte) (-14);
      doubleArray0[4] = (double) (byte) (-115);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.355301898872868
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) randomSubSpace0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      linkedHashSet0.removeIf(predicate3);
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add(bayesNet0);
      LinkedHashSet<BayesNet> linkedHashSet1 = new LinkedHashSet<BayesNet>();
      linkedHashSet1.add(bayesNet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.removeAll(linkedHashSet1);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      CorrelationAttributeEval correlationAttributeEval1 = new CorrelationAttributeEval();
      correlationAttributeEval1.listOptions();
      correlationAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      vector0.add(".libsvm");
      Attribute attribute0 = new Attribute((String) null, vector0, 76);
      vector0.add("relational");
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      int int0 = 484;
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1390));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1390
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.listOptions();
      serializedClassifier0.getCapabilities();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.340234055942502
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)1;
      evaluation0.m_SumKBInfo = 5.0;
      byteArray0[3] = (byte)1;
      evaluation0.KBRelativeInformation();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(629.94125, doubleArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Attribute attribute0 = new Attribute("% Matrix elements\n", vector0, 33);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      binarySparseInstance1.setMissing(attribute0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.updatePriors(binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8621334903849154
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SMO sMO0 = new SMO();
      Classifier classifier0 = AbstractClassifier.makeCopy(sMO0);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      classifier0.getCapabilities();
      sMO0.setC(2);
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassIndex(4);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFPriorEntropy();
      evaluation1.falseNegativeRate(2);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking1 = new Stacking();
      ZeroR zeroR0 = new ZeroR();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      zeroR0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      try { 
        evaluation0.evaluateModelOnce(4150.44, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4150
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5959494368808653
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SMO sMO0 = new SMO();
      sMO0.setDebug(false);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setDebug(false);
      multilayerPerceptron0.setGUI(false);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(1);
      evaluation0.weightedFMeasure();
      evaluation0.numFalseNegatives(2441);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6874048978155178
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SMO sMO0 = new SMO();
      Classifier classifier0 = AbstractClassifier.makeCopy(sMO0);
      sMO0.setDebug(true);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.capabilities();
      classifier0.getCapabilities();
      testInstances0.setClassIndex(1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setClassIndex(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      Evaluation evaluation2 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.numTrueNegatives(1);
      AllFilter allFilter1 = new AllFilter();
      try { 
        CostMatrix.parseMatlab("Fo");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.544312946665827
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SMO sMO0 = new SMO();
      Classifier classifier0 = AbstractClassifier.makeCopy(sMO0);
      sMO0.setDebug(true);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.capabilities();
      classifier0.getCapabilities();
      testInstances0.setClassIndex(1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.toClassDetailsString();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      String string0 = evaluation0.toClassDetailsString("weka.classifiers.Evaluatio");
      assertEquals("weka.classifiers.Evaluatio\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.makeDistribution(0.0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6954957472042036
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("_$Yln");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumDate(1121);
      evaluation0.areaUnderROC(7);
      ZeroR zeroR0 = new ZeroR();
      evaluation0.weightedAreaUnderPRC();
      AbstractClassifier.runClassifier(zeroR0, testInstances0.DEFAULT_WORDS);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      ZeroR zeroR1 = new ZeroR();
      zeroR1.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      try { 
        evaluation0.evaluateModelOnce(0.01, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2469);
      doubleArray0[1] = (double) 25;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-115);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-5);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      evaluation0.updateMargins(doubleArray0, 3, 25);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 10.0);
      evaluation0.getHeader();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.726754443075023
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SMO sMO0 = new SMO();
      sMO0.setDebug(false);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      sMO0.getCapabilities();
      testInstances0.setClassIndex(2);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@relation");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      String string0 = evaluation0.toClassDetailsString("numClassAttributeValues");
      assertEquals("numClassAttributeValues\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      LibSVMLoader libSVMLoader4 = new LibSVMLoader();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1836.931769865);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Attribute attribute0 = new Attribute(" ", vector0, 1);
      vector0.add("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n");
      String string1 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string1);
      
      evaluation0.truePositiveRate(2);
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.trueNegativeRate(4);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1864177737120682
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(496);
      Stacking stacking0 = new Stacking();
      evaluation0.truePositiveRate(18);
      textDirectoryLoader0.getStructure();
      evaluation0.precision(2605);
      double double0 = evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.weightedAreaUnderROC();
      double double2 = evaluation0.weightedPrecision();
      assertEquals(double2, double1, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(18);
      mockRandom0.longs();
      instances0.resampleWithWeights((Random) mockRandom0);
      MultiScheme multiScheme0 = new MultiScheme();
      double double3 = evaluation0.weightedTruePositiveRate();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.matthewsCorrelationCoefficient(2605);
      assertEquals(0.0, double4, 0.01);
      
      evaluation0.falsePositiveRate(108);
      double double5 = evaluation0.trueNegativeRate(26);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@relation";
      stringArray0[1] = "debugTipText";
      stringArray0[2] = "debugTipText";
      stringArray0[4] = "debugTipText";
      stringArray0[5] = ".bsi";
      stringArray0[6] = "@data";
      instances0.stream();
      stringArray0[7] = ".bsi";
      stringArray0[8] = "@data";
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      SMO sMO0 = new SMO();
      double[] doubleArray0 = new double[0];
      Instance instance0 = null;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "debugTipText");
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0953521276386664
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      J48 j48_0 = new J48();
      evaluation0.rootRelativeSquaredError();
      double[] doubleArray0 = new double[8];
      Evaluation.k_MarginResolution = (-156);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[4] = (-2191.29);
      doubleArray0[5] = (double) (-2);
      evaluation0.setNumericPriorsFromBuffer();
      Utils.SMALL = (-2461.81737);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 7.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7.0, doubleArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.636633807417215
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setGUI(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "periodicPruningTipText";
      stringArray0[1] = " ";
      stringArray0[2] = "synopsis";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".arff";
      stringArray0[5] = " ";
      stringArray0[6] = " ";
      testInstances0.setNumRelationalDate(2);
      evaluation0.numTruePositives((-587));
      double double0 = evaluation0.numTrueNegatives(2);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.falsePositiveRate(490);
      double double2 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Version.MINOR = (-1805);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      MultiScheme multiScheme0 = new MultiScheme();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking1 = new Stacking();
      Stacking stacking2 = new Stacking();
      ZeroR zeroR0 = new ZeroR();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      zeroR0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-2.0);
      objectArray0[1] = (Object) stacking2;
      objectArray0[2] = (Object) databaseLoader0;
      objectArray0[3] = (Object) stacking2;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) stacking2;
      objectArray0[8] = (Object) testInstances0;
      try { 
        evaluation0.crossValidateModel((Classifier) stacking1, instances0, (-1), (Random) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6419921232892527
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SMO sMO0 = new SMO();
      SMO sMO1 = (SMO)AbstractClassifier.makeCopy(sMO0);
      sMO1.setDebug(false);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.capabilities();
      sMO1.getCapabilities();
      testInstances0.setClassIndex(2);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.toClassDetailsString("@relation");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      evaluation0.toSummaryString(false);
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      LibSVMLoader libSVMLoader4 = new LibSVMLoader();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1836.931769865);
      doubleArray0[1] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1334);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", vector0, 1);
      binarySparseInstance0.setMissing(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SMO sMO2 = new SMO();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      evaluation0.kappa();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2696938985259805
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(8);
      evaluation0.numFalsePositives(13);
      evaluation0.precision(13);
      evaluation0.toClassDetailsString("setAutoBuild");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      int int0 = 708;
      LibSVMLoader libSVMLoader4 = new LibSVMLoader();
      LibSVMLoader libSVMLoader5 = new LibSVMLoader();
      LibSVMLoader libSVMLoader6 = new LibSVMLoader();
      LibSVMLoader libSVMLoader7 = new LibSVMLoader();
      DenseInstance denseInstance0 = new DenseInstance(13);
      evaluation0.truePositiveRate(3);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval(0);
      Instance instance0 = null;
      evaluation0.SFSchemeEntropy();
      Attribute attribute0 = new Attribute("w/", (String) null);
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute(".libsvm", "!`Zq](<n}[Pck)F@;", (-1457654536));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'q'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9108549984603074
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "@data");
      double double0 = evaluation0.numFalseNegatives(489);
      Stacking stacking0 = new Stacking();
      double double1 = evaluation1.truePositiveRate(18);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      textDirectoryLoader0.getStructure();
      double double2 = evaluation1.precision(2605);
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation1.weightedAreaUnderPRC();
      double double4 = evaluation1.weightedAreaUnderROC();
      double double5 = evaluation1.weightedPrecision();
      assertEquals(double5, double4, 0.01);
      
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[0];
      evaluation1.getClassPriors();
      double double6 = evaluation0.weightedTruePositiveRate();
      assertEquals(double6, double3, 0.01);
      
      double double7 = evaluation1.falseNegativeRate(98);
      assertEquals(double7, double0, 0.01);
      assertEquals(0.0, double7, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      Stacking stacking1 = new Stacking();
      ZeroR zeroR0 = new ZeroR();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      TestInstances testInstances1 = new TestInstances();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      double double0 = evaluation0.precision(2680);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      double double1 = evaluation0.truePositiveRate((-1));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.avgCost();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hjQ";
      stringArray0[1] = "seedTipText";
      multilayerPerceptron0.setGUI(false);
      stringArray0[2] = "synopsis";
      stringArray0[3] = "N";
      stringArray0[4] = "UbR{W{F=Ca7F74A3";
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1902.009894486207));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1902
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.091934165660664
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking1 = new Stacking();
      ZeroR zeroR0 = new ZeroR();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "viW[sj7*";
      stringArray0[1] = ".dat";
      AbstractClassifier.runClassifier(stacking1, stringArray0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      zeroR0.getCapabilities();
      try { 
        evaluation0.evaluateModelOnce(4150.44, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4150
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassNames = null;
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2884010444704397
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) randomSubSpace0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate3.or(predicate0);
      linkedHashSet0.stream();
      linkedHashSet0.removeIf(predicate3);
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add((BayesNet) null);
      LinkedHashSet<BayesNet> linkedHashSet1 = new LinkedHashSet<BayesNet>();
      linkedHashSet1.add(bayesNet0);
      linkedHashSet1.add(bayesNet0);
      instances0.removeAll(linkedHashSet1);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      CorrelationAttributeEval correlationAttributeEval1 = new CorrelationAttributeEval();
      correlationAttributeEval1.listOptions();
      correlationAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Attribute attribute0 = new Attribute((String) null, vector0, 76);
      vector0.add("relational");
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(484);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 484
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.446371916216561
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[5];
      String string0 = evaluation1.getRevision();
      assertEquals("9101", string0);
      
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (double) (byte) (-79);
      doubleArray0[2] = (double) (byte) (-79);
      doubleArray0[3] = 10.0;
      Utils.log2 = (-79.0);
      doubleArray0[4] = Double.NaN;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 22.0);
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      
      double double1 = evaluation0.m_Correct;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.equals((Object) null);
      evaluation0.weightedMatthewsCorrelation();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1963029825642364
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 25;
      evaluation0.falsePositiveRate(25);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[7];
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add(bayesNet0);
      linkedHashSet0.add(bayesNet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.removeAll(linkedHashSet0);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      correlationAttributeEval0.setOptions(stringArray0);
      int int1 = 255;
      PipedReader pipedReader0 = new PipedReader(255);
      evaluation0.priorEntropy();
      evaluation0.KBInformation();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2789815671528735
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      J48 j48_0 = new J48();
      evaluation0.toMatrixString(".arff");
      evaluation0.numFalsePositives(13);
      evaluation0.precision(13);
      evaluation0.toClassDetailsString("|6%1");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      DenseInstance denseInstance0 = new DenseInstance(25);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.pctUnclassified();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-10.0);
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (-10.0);
      doubleArray0[3] = (-3528.075722374229);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "debugTipText";
      stringArray0[2] = "debugTipText";
      stringArray0[6] = "debugTipText";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@data";
      instances0.stream();
      stringArray0[7] = "@data";
      stringArray0[8] = "@data";
      evaluation0.meanAbsoluteError();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(3894.52202092, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.mergeInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      Stacking stacking1 = new Stacking();
      ZeroR zeroR0 = new ZeroR();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      zeroR0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5733753312104386
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      int int0 = 1121;
      evaluation0.areaUnderROC(3486);
      KStar kStar0 = new KStar();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString(" = ");
      double double0 = evaluation1.m_ClassPriorsSum;
      evaluation0.weightedTrueNegativeRate();
      evaluation0.KBInformation();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      evaluation1.numTruePositives(7);
      // Undeclared exception!
      try { 
        pipedInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.InputStream", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure(11);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedRecall();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5574502480119636
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(25);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add(bayesNet0);
      linkedHashSet0.add(bayesNet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.removeAll(linkedHashSet0);
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      double double1 = evaluation0.numFalseNegatives(20);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (byte) (-6));
      double double2 = evaluation0.m_Correct;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.equals((Object) null);
      double double3 = evaluation0.incorrect();
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation0.truePositiveRate((byte)123);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6058004766484264
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      capabilities0.disableAll();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      SMO sMO0 = new SMO();
      testInstances0.setClassType(2);
      sMO0.getCapabilities();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      evaluation0.errorRate();
      TestInstances testInstances2 = new TestInstances();
      TestInstances testInstances3 = new TestInstances();
      Instances instances1 = testInstances1.getData();
      Evaluation evaluation1 = new Evaluation(instances1);
      Instances instances2 = new Instances(instances0, (-2));
      evaluation0.avgCost();
      instances1.equalHeadersMsg(instances2);
      testInstances0.clone();
      capabilities0.toString();
      SMO sMO1 = new SMO();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      evaluation0.kappa();
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation1.weightedTrueNegativeRate();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.725099995223359
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Version.MINOR = (-1805);
      evaluation0.numFalseNegatives(496);
      Stacking stacking0 = new Stacking();
      evaluation1.truePositiveRate(18);
      textDirectoryLoader0.getStructure();
      double double0 = evaluation1.precision(2605);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.weightedAreaUnderPRC();
      MockRandom mockRandom0 = new MockRandom(18);
      mockRandom0.longs();
      instances0.resampleWithWeights((Random) mockRandom0);
      MultiScheme multiScheme0 = new MultiScheme();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      double double3 = evaluation0.m_TotalCost;
      double double4 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.38360153573551
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setWordSeparators("getWeightThreshold");
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setReset(true);
      testInstances0.setWordSeparators("getNumRuns");
      multilayerPerceptron0.setGUI(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "periodicPruningTipText";
      stringArray0[1] = " ";
      stringArray0[2] = "synopsis";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".arff";
      stringArray0[5] = " ";
      stringArray0[6] = " ";
      testInstances0.setNumRelationalDate(2);
      evaluation0.precision(1);
      double double0 = evaluation0.weightedAreaUnderPRC();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6031192709911521
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation2.crossValidateModel((Classifier) serializedClassifier0, instances0, (-1170), (Random) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.668514388252492
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add(bayesNet0);
      linkedHashSet0.add(bayesNet0);
      linkedHashSet0.add(bayesNet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.removeAll(linkedHashSet0);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      evaluation0.numFalseNegatives(20);
      evaluation0.truePositiveRate(782);
      evaluation0.relativeAbsoluteError();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "@relation";
      Object object0 = new Object();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.crossValidateModel((Classifier) bayesNet0, instances0, 782, (Random) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2469);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byteArray0[4] = (byte) (-6);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      Object object0 = new Object();
      MultiScheme multiScheme0 = new MultiScheme();
      MockRandom mockRandom0 = new MockRandom((-2469));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-6);
      objectArray0[1] = (Object) textDirectoryLoader0;
      objectArray0[2] = (Object) instances0;
      objectArray0[3] = (Object) evaluation0;
      objectArray0[4] = (Object) evaluation0;
      objectArray0[5] = (Object) mockRandom0;
      objectArray0[6] = (Object) (-2469.0);
      objectArray0[7] = objectArray0[2];
      objectArray0[8] = (Object) mockRandom0;
      try { 
        evaluation0.crossValidateModel((Classifier) multiScheme0, instances0, 1346, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6563446768362113
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add(bayesNet0);
      evaluation0.truePositiveRate((-2288));
      evaluation0.numFalseNegatives(25);
      evaluation0.truePositiveRate(25);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString("]Imji,TN", true);
      evaluation0.weightedFalsePositiveRate();
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = 'J';
      charArray0[2] = '';
      charArray0[3] = 'M';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-771), charArray0, 1665);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.677018125225026
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      J48 j48_0 = new J48();
      evaluation0.rootRelativeSquaredError();
      evaluation0.truePositiveRate(116);
      evaluation0.weightedFalsePositiveRate();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.178235655793613
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumClass = 1636.0;
      double[] doubleArray0 = new double[4];
      textDirectoryLoader0.getDirectory();
      doubleArray0[0] = (double) 25;
      doubleArray0[1] = (double) 25;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@relation";
      stringArray0[1] = "jJ&#/QMeL@";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@data";
      stringArray0[4] = ".bsi";
      stringArray0[3] = ".arff";
      stringArray0[6] = "@relation";
      stringArray0[7] = "@relation";
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation1.m_PriorEstimator;
      evaluation1.m_PriorEstimator = null;
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
      assertEquals(0.0, evaluation0.correct(), 0.01);
      
      double double1 = evaluation1.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.correct();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.919083947576048
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(489);
      Stacking stacking0 = new Stacking();
      evaluation1.truePositiveRate(18);
      textDirectoryLoader0.getStructure();
      double double0 = evaluation1.precision(2605);
      double double1 = evaluation1.weightedAreaUnderPRC();
      double double2 = evaluation1.weightedAreaUnderROC();
      double double3 = evaluation1.weightedPrecision();
      assertEquals(double3, double1, 0.01);
      
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[0];
      evaluation1.evaluateModel((Classifier) stacking0, instances0, objectArray0);
      double double4 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation0.trueNegativeRate(108);
      assertEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9336659648258319
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add(bayesNet0);
      LinkedHashSet<BayesNet> linkedHashSet1 = new LinkedHashSet<BayesNet>();
      linkedHashSet1.add(bayesNet0);
      instances0.removeAll(linkedHashSet1);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      CorrelationAttributeEval correlationAttributeEval1 = new CorrelationAttributeEval();
      correlationAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      correlationAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      int int0 = 2236;
      PipedReader pipedReader0 = new PipedReader(2236);
      evaluation0.priorEntropy();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.listOptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".arff", instances0, protectedProperties0);
      evaluation0.areaUnderPRC(1);
      try { 
        CostMatrix.parseMatlab("integer");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      String string0 = "debugTipText";
      int int0 = 1;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(499, charArray0, 10021);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.1036847696879692
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SMO sMO0 = new SMO();
      Classifier classifier0 = AbstractClassifier.makeCopy(sMO0);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      classifier0.getCapabilities();
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassIndex(4);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFPriorEntropy();
      StringReader stringReader0 = new StringReader("weka/core/Capabilities.props");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 2480);
      evaluation0.KBMeanInformation();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.210285894464327
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 25;
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      J48 j48_0 = new J48();
      evaluation0.toClassDetailsString();
      evaluation0.numFalsePositives(25);
      evaluation0.precision(25);
      evaluation0.toClassDetailsString("5}L+xN-)=Ol");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      try { 
        libSVMLoader3.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.149485942672959
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      J48 j48_0 = new J48();
      evaluation0.toCumulativeMarginDistributionString();
      int int0 = 13;
      evaluation0.numFalsePositives(13);
      evaluation0.precision(13);
      evaluation0.toClassDetailsString("|6%1");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      try { 
        libSVMLoader2.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[7];
      textDirectoryLoader0.getDirectory();
      doubleArray0[1] = (double) 25;
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6476363055057814
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.numFalseNegatives(25);
      evaluation0.truePositiveRate(1665);
      evaluation0.numFalseNegatives(3751);
      double double0 = evaluation0.truePositiveRate(1665);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toSummaryString("listOptions", false);
      assertEquals("listOptions\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation1.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '[';
      charArray0[3] = '6';
      charArray0[4] = '\'';
      charArray0[5] = 'Z';
      charArray0[6] = 'I';
      charArray0[7] = 'M';
      charArray0[8] = '';
      String string1 = evaluation1.num2ShortID(3751, charArray0, 26);
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals("                      '8[M", string1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setGUI(true);
      String[] stringArray0 = new String[8];
      AbstractClassifier.runClassifier(costSensitiveClassifier0, stringArray0);
      multilayerPerceptron0.setGUI(false);
      String string0 = Evaluation.makeOptionString(costSensitiveClassifier0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2469);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      Vector<String> vector0 = new Vector<String>(100, 13);
      Attribute attribute0 = new Attribute("TrpsDD5", vector0, (byte)1);
      instances0.sort(attribute0);
      double double0 = evaluation0.truePositiveRate((-1412));
      double double1 = evaluation0.precision((-696));
      assertEquals(double1, double0, 0.01);
      
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      double double2 = evaluation0.totalCost();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.036893068595587
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(496);
      Stacking stacking0 = new Stacking();
      evaluation1.truePositiveRate(18);
      textDirectoryLoader0.getStructure();
      evaluation1.precision(2605);
      evaluation1.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      double double0 = evaluation1.m_Unclassified;
      MockRandom mockRandom0 = new MockRandom(18);
      mockRandom0.longs();
      ConverterUtils.DataSource.read(".arff");
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation1.weightedTruePositiveRate();
      evaluation0.matthewsCorrelationCoefficient(2605);
      evaluation0.matthewsCorrelationCoefficient(27);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 27;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3112881430321695
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(25);
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte)55;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 1539, (byte)123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.3655934560029954
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      char[] charArray0 = new char[0];
      CharBuffer.wrap(charArray0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedPrecision();
      MockRandom mockRandom1 = new MockRandom(120L);
      LongStream longStream0 = mockRandom1.longs();
      instances0.resampleWithWeights((Random) mockRandom1);
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) textDirectoryLoader0;
      objectArray0[1] = (Object) longStream0;
      objectArray0[1] = (Object) instances0;
      objectArray0[3] = (Object) mockRandom1;
      objectArray0[4] = (Object) textDirectoryLoader0;
      try { 
        evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.converters.TextDirectoryLoader cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 25;
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add(bayesNet0);
      linkedHashSet0.add(bayesNet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.removeAll(linkedHashSet0);
      doubleArray0[0] = 0.0;
      try { 
        evaluation0.evaluateModel((Classifier) bayesNet0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSqrErr = (double) (-2469);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2469);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.776171210175013
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(false);
      evaluation1.SFMeanEntropyGain();
      evaluation0.numFalseNegatives(18);
      int int0 = 1665;
      evaluation0.truePositiveRate(25);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking1 = new Stacking();
      Stacking stacking2 = new Stacking();
      ZeroR zeroR0 = new ZeroR();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      zeroR0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.7522559082425455
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      capabilities0.disableAll();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.errorRate();
      TestInstances testInstances2 = new TestInstances();
      TestInstances testInstances3 = new TestInstances();
      Instances instances1 = testInstances1.getData();
      Evaluation evaluation1 = new Evaluation(instances1);
      Instances instances2 = new Instances(instances0, (-2));
      double double1 = evaluation0.avgCost();
      assertEquals(double1, double0, 0.01);
      
      instances1.equalHeadersMsg(instances2);
      testInstances0.clone();
      capabilities0.toString();
      SMO sMO1 = new SMO();
      evaluation1.numTruePositives((-2));
      double double2 = evaluation1.numTrueNegatives(2747);
      double double3 = evaluation1.KBRelativeInformation();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.falsePositiveRate(1);
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation1.trueNegativeRate(1);
      assertEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.6031518896517856
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(8);
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      evaluation0.numFalseNegatives((-1127281206));
      evaluation1.truePositiveRate(753);
      textDirectoryLoader0.getStructure();
      evaluation1.precision((-1132887178));
      double double1 = evaluation0.m_SumClass;
      evaluation1.falseNegativeRate((-941));
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation2.m_Incorrect;
      evaluation1.meanPriorAbsoluteError();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      assertEquals("Get the number of folds used for cross-validation.", cVParameterSelection0.numFoldsTipText());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.633414980143744
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SMO sMO0 = new SMO();
      SMO sMO1 = (SMO)AbstractClassifier.makeCopy(sMO0);
      sMO1.setDebug(false);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Capabilities capabilities1 = sMO1.getCapabilities();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.toClassDetailsString("@relation");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      evaluation0.toClassDetailsString("numClassAttributeValues");
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      LibSVMLoader libSVMLoader4 = new LibSVMLoader();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[2] = 969.4449303958788;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 969.4449303958788;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1150);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 3390.27865453699);
      evaluation1.falsePositiveRate(0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.equals(capabilities1);
      evaluation1.SFEntropyGain();
      double double1 = evaluation1.meanPriorAbsoluteError();
      assertEquals(Double.POSITIVE_INFINITY, evaluation1.meanPriorAbsoluteError(), 0.01);
      
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertNotEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.6031518896517856
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(8);
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      evaluation0.numFalseNegatives((-1127281206));
      int int0 = 782;
      evaluation1.truePositiveRate((-1127281206));
      textDirectoryLoader0.getStructure();
      evaluation1.precision(113);
      double double1 = evaluation0.m_SumClass;
      evaluation1.falseNegativeRate((-941));
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.m_TotalCoverage = 136.6386454025864;
      evaluation2.SFMeanSchemeEntropy();
      CostMatrix costMatrix0 = new CostMatrix(20);
      CostMatrix costMatrix1 = null;
      try {
        costMatrix1 = new CostMatrix((-1127281206));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.4851178457193015
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.capabilities();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      String string0 = evaluation0.toClassDetailsString("weka.classifiers.Evaluation");
      assertEquals("weka.classifiers.Evaluation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedPrecision();
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.weightedTruePositiveRate();
      evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Only missing values in the training data!", arrayList0, 100);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.9528619678411343
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 25;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(210);
      evaluation0.trueNegativeRate(117);
      evaluation0.setNumericPriorsFromBuffer();
      ArffLoader arffLoader0 = new ArffLoader();
      int[] intArray0 = new int[2];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      intArray0[1] = 25;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 25);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      Evaluation.makeOptionString(classifier0, true);
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      zeroR0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      TestInstances.forCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        ConverterUtils.DataSource.read("d#\"GYS6T1b@{#y");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.249982638871596
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      capabilities0.disableAll();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      evaluation0.errorRate();
      TestInstances testInstances2 = new TestInstances();
      TestInstances testInstances3 = new TestInstances();
      Instances instances1 = testInstances1.getData();
      Evaluation evaluation1 = new Evaluation(instances1);
      Instances instances2 = new Instances(instances0, (-2));
      evaluation0.avgCost();
      instances1.equalHeadersMsg(instances2);
      testInstances0.clone();
      capabilities0.toString();
      evaluation1.truePositiveRate(0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.207181681604017
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.numFalsePositives(3635);
      evaluation0.precision(84);
      evaluation0.toClassDetailsString("$/omZ5@");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      LibSVMLoader libSVMLoader3 = new LibSVMLoader();
      DenseInstance denseInstance0 = new DenseInstance(13);
      evaluation0.truePositiveRate((-2));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(612);
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation1.updateStatsForPredictor((-516.308569022305), denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-1665);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1665);
      doubleArray0[1] = (double) (-1665);
      doubleArray0[2] = (double) (-1665);
      doubleArray0[3] = (double) (-1665);
      doubleArray0[4] = (double) (-1665);
      doubleArray0[5] = (double) (-1665);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2206);
      intArray0[1] = 523;
      SMO sMO0 = new SMO();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 523;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (-2625.521695);
      doubleArray0[7] = 1000.0;
      doubleArray0[8] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.619085894695714
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(1258);
      assertEquals(0.0, double0, 0.01);
      
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.m_SumErr;
      double double2 = evaluation0.numFalseNegatives((-1127281206));
      assertEquals(0.0, double2, 0.01);
      
      evaluation1.m_MaxTarget = (double) 1258;
      double double3 = evaluation1.truePositiveRate(753);
      assertEquals(0.0, double3, 0.01);
      
      textDirectoryLoader0.getStructure();
      double double4 = evaluation0.precision((-1132887178));
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation1.SFEntropyGain();
      StringReader stringReader0 = new StringReader("1");
      double double6 = evaluation1.falseNegativeRate(753);
      assertEquals(double6, double5, 0.01);
      assertEquals(0.0, double6, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.628949355021763
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(25);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.numFalseNegatives(25);
      evaluation0.truePositiveRate(1665);
      double double1 = evaluation0.numFalseNegatives(3751);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.truePositiveRate(100);
      assertEquals(0.0, double2, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toSummaryString("listOptions", true);
      assertEquals("listOptions\nTotal Number of Instances                0     \n", string0);
      
      double double3 = evaluation1.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double3, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'k';
      charArray0[2] = 'J';
      charArray0[3] = '6';
      charArray0[4] = '\'';
      charArray0[5] = 'Z';
      charArray0[6] = 'I';
      charArray0[7] = 'M';
      charArray0[8] = '';
      String string1 = evaluation1.num2ShortID(100, charArray0, 26);
      assertEquals("                       8kk", string1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      SMO sMO0 = new SMO();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7112725272475138
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@relation";
      Logistic logistic0 = new Logistic();
      Capabilities capabilities0 = logistic0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      PART pART0 = new PART();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-869.1429481062);
      doubleArray0[1] = 1000.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = 1000.0;
      doubleArray0[4] = 1000.0;
      doubleArray0[5] = 1000.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-773);
      intArray0[1] = (-923);
      intArray0[2] = 84;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = 475;
      intArray0[6] = 703;
      intArray0[7] = 124;
      intArray0[8] = 4;
      SparseInstance sparseInstance0 = new SparseInstance(1000.0, doubleArray0, intArray0, (-436));
      try { 
        evaluation0.evaluateModelOnce((Classifier) pART0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2206);
      intArray0[1] = 523;
      SMO sMO0 = new SMO();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setValueSparse(6, 4205.846668);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) bayesNet0, (Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.898901387026911
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      instances0.removeAll(linkedHashSet0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      evaluation0.numFalseNegatives(1);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.3775557186971445
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SMO sMO0 = new SMO();
      Classifier classifier0 = AbstractClassifier.makeCopy(sMO0);
      sMO0.setDebug(false);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      classifier0.getCapabilities();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-2143));
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.addNumericTrainClass(0.0, (-2380.6097));
      evaluation0.useNoPriors();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.recall(1665);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1665
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.426775702954569
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      double double0 = evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[5] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.numFalseNegatives(25);
      double double1 = evaluation0.truePositiveRate(1665);
      assertEquals(double1, double0, 0.01);
      
      evaluation0.addNumericTrainClass(0.0, (-2380.6097));
      double double2 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2469);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byteArray0[4] = (byte) (-6);
      evaluation0.useNoPriors();
      byteArray0[5] = (byte)55;
      byteArray0[7] = (byte) (-5);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation0.KBMeanInformation();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      doubleArray0[2] = 0.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 10.0);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.0960610842694885
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add(bayesNet0);
      linkedHashSet0.add(bayesNet0);
      linkedHashSet0.add(bayesNet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.removeAll(linkedHashSet0);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = evaluation0.numFalseNegatives(20);
      double double1 = evaluation0.truePositiveRate(782);
      evaluation0.relativeAbsoluteError();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "@relation";
      double double2 = evaluation0.numTruePositives(1438);
      assertEquals(double2, double0, 0.01);
      
      evaluation0.numTrueNegatives(492);
      double double3 = evaluation0.KBRelativeInformation();
      double double4 = evaluation0.falsePositiveRate(18);
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.8983671305014933
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      capabilities0.disableAll();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      SMO sMO0 = new SMO();
      testInstances0.setClassType(2);
      sMO0.getCapabilities();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1197.0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (byte) (-115);
      doubleArray0[3] = (double) (byte) (-115);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (byte) (-14);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 10.0);
      double double0 = evaluation0.m_Correct;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      boolean boolean0 = evaluation0.equals(testInstances1);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.214173924777526
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      evaluation1.errorRate();
      int int0 = 66;
      evaluation1.precision(66);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      LibSVMLoader libSVMLoader2 = new LibSVMLoader();
      try { 
        libSVMLoader2.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.118393165417918
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) randomSubSpace0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate3.or(predicate0);
      linkedHashSet0.removeIf(predicate3);
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add((BayesNet) null);
      LinkedHashSet<BayesNet> linkedHashSet1 = new LinkedHashSet<BayesNet>();
      linkedHashSet1.add(bayesNet0);
      linkedHashSet1.add(bayesNet0);
      instances0.removeAll(linkedHashSet1);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      CorrelationAttributeEval correlationAttributeEval1 = new CorrelationAttributeEval();
      correlationAttributeEval1.listOptions();
      correlationAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Attribute attribute0 = new Attribute((String) null, vector0, 76);
      vector0.add("relational");
      evaluation0.numFalseNegatives((-3));
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(2379);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2379
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "@data");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      J48 j48_0 = new J48();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "XX3JdAnoHb\"9&[)3B");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.5095282492574515
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(65);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numFalseNegatives(65);
      evaluation0.truePositiveRate(1665);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString();
      double double2 = evaluation1.recall(2);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.669437548207739
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2469);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation1.m_PriorEstimator;
      evaluation1.weightedFalsePositiveRate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.529607544849806
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.truePositiveRate(1);
      evaluation0.precision(1665);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      System.setCurrentTimeMillis(2331L);
      Classifier classifier0 = null;
      Evaluation.makeOptionString((Classifier) null, true);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.426775702954569
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.numFalseNegatives(25);
      double double0 = evaluation0.truePositiveRate(1665);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.addNumericTrainClass(25.0, (-2380.6097));
      double double1 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.6276525274058384
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(25);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add(bayesNet0);
      linkedHashSet0.add(bayesNet0);
      linkedHashSet0.add(bayesNet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.removeAll(linkedHashSet0);
      linkedHashSet0.add(bayesNet0);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double1 = evaluation0.numFalseNegatives(20);
      assertEquals(double1, double0, 0.01);
      
      linkedHashSet0.clear();
      evaluation0.truePositiveRate(782);
      bayesNet0.measureDivergence();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      Filter.makeCopy(filter0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".arff", linkedList0, 20);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("@attribute");
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.truePositiveRate(3537);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.numFalsePositives(3537);
      assertNotEquals(double4, double2, 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte byte0 = (byte)1;
      evaluation0.numFalseNegatives((byte)1);
      evaluation0.truePositiveRate((byte)1);
      try { 
        evaluation0.updateStatsForPredictor((-45.61), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("l\"y_:_l%<.K0t8y6");
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props");
      Enumeration enumeration0 = new AlphabeticTokenizer();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities0.enableDependency(capabilities_Capability0);
      Instances.main(testInstances0.DEFAULT_WORDS);
      instances0.setClass(attribute0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "hiddenLayersTipText";
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setGUI(false);
      AbstractClassifier.runClassifier(multilayerPerceptron0, stringArray0);
      multilayerPerceptron0.setGUI(false);
      String string0 = Evaluation.makeOptionString(multilayerPerceptron0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7389896102893403
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(1.0, 2.0);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.320811952555979
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      evaluation0.setDiscardPredictions(true);
      evaluation0.SFMeanEntropyGain();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":>B{Q_C^+M\"IT<{H";
      stringArray0[1] = "B8qJY>bw\"Cv";
      try { 
        evaluation1.crossValidateModel(":>B{Q_C^+M\"IT<{H", instances0, 1707, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: :>B{Q_C^+M\"IT<{H
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.0011441405939667
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 454;
      evaluation0.weightedFMeasure();
      int int1 = 103;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(454, (char[]) null, 103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.4463719162165605
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (double) (byte) (-79);
      doubleArray0[2] = (double) (byte) (-79);
      doubleArray0[3] = 10.0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      Instances.test(stringArray0);
      Utils.log2 = (-79.0);
      doubleArray0[4] = Double.NaN;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 22.0);
      double double0 = evaluation0.m_Correct;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.equals((Object) null);
      evaluation0.weightedMatthewsCorrelation();
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'V';
      charArray0[2] = '9';
      charArray0[3] = 'M';
      charArray0[4] = 'i';
      charArray0[5] = '5';
      charArray0[6] = 'D';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((byte) (-79), charArray0, (byte) (-79));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.078020118219339
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2469);
      doubleArray0[1] = (double) 25;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-2469), false, false);
      AbstractClassifier.runClassifier(simpleLogistic0, (String[]) null);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setGUI(true);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SMO sMO0 = new SMO();
      AbstractClassifier.makeCopy(sMO0);
      sMO0.setDebug(false);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      correlationAttributeEval0.getCapabilities();
      SMO sMO1 = new SMO();
      sMO0.setDebug(true);
      Evaluation.handleCostOption((String) null, 88);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.relationalValue((-3355));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.529529165203365
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.numFalseNegatives(25);
      evaluation0.truePositiveRate(1665);
      evaluation0.precision(5780);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      ArffLoader arffLoader0 = new ArffLoader();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      assertEquals("If set to true, classifier may output additional info to the console.", cVParameterSelection0.debugTipText());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      PipedReader pipedReader0 = null;
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setGUI(false);
      String string0 = Evaluation.makeOptionString((Classifier) null, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2206);
      intArray0[1] = 523;
      SMO sMO0 = new SMO();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setValueSparse(6, 4205.846668);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.5176594258768725
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[8];
      testInstances0.setNumRelationalDate(2);
      AbstractClassifier.runClassifier(costSensitiveClassifier0, stringArray0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2206);
      intArray0[1] = 528;
      SMO sMO0 = new SMO();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      sparseInstance0.mergeInstance(binarySparseInstance1);
      binarySparseInstance1.setValueSparse(6, 4205.846668);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance1, 2224.3568158632);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^p%Xs/&y{Z";
      try { 
        Evaluation.evaluateModel("^p%Xs/&y{Z", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name ^p%Xs/&y{Z.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "y&8oFj";
      stringArray0[1] = "classifiers";
      stringArray0[2] = "v'e^m\"]jW5<AKICmo#)";
      stringArray0[3] = "Converts all numeric attributes into binary attributes (apart from the class attribute, if set): if the value of the numeric attribute is exactly zero, the value of the new attribute will be zero. If the value of the numeric attribute is missing, the value of the new attribute will be missing. Otherwise, the value of the new attribute will be one. The new attributes will be nominal.";
      stringArray0[4] = "@V^S%Qp#:t14";
      stringArray0[5] = "tX*`YGOO4";
      Evaluation.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      iBk0.pruneToK((Instances) null, doubleArray0, 100);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Evaluation.handleCostOption("", 1005);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      SMO sMO0 = new SMO();
      PipedReader pipedReader0 = new PipedReader(120);
      CharBuffer charBuffer0 = CharBuffer.allocate(4853);
      char[] charArray0 = new char[0];
      charBuffer0.get(939);
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 2, 82);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        Evaluation.handleCostOption(".xml", 22);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SMO sMO0 = new SMO();
      AbstractClassifier.makeCopy(sMO0);
      sMO0.setDebug(false);
      LinkedHashSet<BayesNet> linkedHashSet0 = new LinkedHashSet<BayesNet>();
      BayesNet bayesNet0 = new BayesNet();
      linkedHashSet0.add(bayesNet0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "aside";
      stringArray0[1] = "u./pZze";
      stringArray0[2] = ".xml";
      try { 
        Evaluation.evaluateModel((Classifier) sMO0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SMO:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \tTurning them off assumes that data is purely numeric, doesn't
         // \tcontain any missing values, and has a nominal class. Turning them
         // \toff also means that no header information will be stored if the
         // \tmachine is linear. Finally, it also assumes that no instance has
         // \ta weight equal to 0.
         // \t(default: checks on)
         // -C <double>
         // \tThe complexity constant C. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -L <double>
         // \tThe tolerance parameter. (default 1.0e-3)
         // -P <double>
         // \tThe epsilon for round-off error. (default 1.0e-12)
         // -M
         // \tFit logistic models to SVM outputs. 
         // -V <double>
         // \tThe number of folds for the internal
         // \tcross-validation. (default -1, use training data)
         // -W <double>
         // \tThe random number seed. (default 1)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "yNu[";
      stringArray0[1] = "{~e :";
      stringArray0[2] = "C. Atkeson and A. Moore and S. Schaal";
      stringArray0[3] = "C. Atkeson and A. Moore and S. Schaal";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.0778197834423267
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hjQ";
      stringArray0[1] = "seedTipText";
      stringArray0[2] = "synopsis";
      stringArray0[3] = "N";
      stringArray0[4] = "UbR{W{F=Ca7F74A3";
      stringArray0[5] = "setC";
      AbstractClassifier.runClassifier(multilayerPerceptron0, stringArray0);
      String string0 = Evaluation.makeOptionString(multilayerPerceptron0, false);
      assertNotNull(string0);
  }
}
