/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 18:36:53 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.RuleStats;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("VHf", 23);
      attribute0.setWeight(0.95);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2580);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2580;
      doubleArray0[1] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      instances0.add((Instance) denseInstance0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute1 = new Attribute("AzeXb^g&'", protectedProperties2);
      properties0.keys();
      Attribute attribute2 = new Attribute("numeric", 0);
      Attribute attribute3 = attribute0.copy("real");
      attribute3.indexOfValue("string");
      attribute1.addStringValue(attribute2, 3);
      Attribute attribute4 = new Attribute("@end", (List<String>) null, 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 4.0, (-1278.073413472414));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("VHf", 23);
      attribute0.setWeight(0.95);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2580);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute1 = new Attribute("@data", 1);
      DenseInstance denseInstance0 = new DenseInstance(2580);
      instances0.add((Instance) denseInstance0);
      attribute0.setStringValue("real");
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      Attribute attribute2 = new Attribute("AzeXb^g&'", protectedProperties3);
      properties0.keys();
      Attribute attribute3 = new Attribute("numeric", 0);
      Attribute attribute4 = attribute0.copy("real");
      attribute4.value(2);
      attribute2.addStringValue(attribute3, 84);
      Attribute attribute5 = new Attribute("@end", (List<String>) null, 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute3);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      jRip_NumericAntd0.covers(denseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 4.0, (-1278.073413472414));
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.355825830420688
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "cXbV#FE:Fv";
      stringArray0[0] = "\nThe rule doesn't cover: ";
      stringArray0[3] = "\nThe rule doesn't cover: ";
      stringArray0[4] = ">9`~D1)]p{#bSr";
      stringArray0[5] = "\nThe rule doesn't cover: ";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel", arrayList0, 70);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 70;
      doubleArray0[1] = (double) 70;
      DenseInstance denseInstance0 = new DenseInstance(70, doubleArray0);
      instances0.add((Instance) denseInstance0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.minNoTipText();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.size();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.setOptimizations((-3149));
      jRip0.minNoTipText();
      int int0 = jRip0.getOptimizations();
      assertEquals((-3149), int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("VHf", 23);
      attribute0.setWeight(0.95);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2580);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute("q}b*w21i#ud~jII'6n", (List<String>) null, protectedProperties1);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      DenseInstance denseInstance0 = new DenseInstance(2);
      instances0.add((Instance) denseInstance0);
      Attribute attribute2 = new Attribute("q}b*w21i#ud~jII'6n", protectedProperties0);
      arrayList0.add(attribute2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      properties0.values();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "q}b*w21i#ud~jII'6n";
      objectArray0[1] = (Object) protectedProperties1;
      mockPrintWriter0.print((float) 1);
      objectArray0[2] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "date", objectArray0);
      protectedProperties1.list(printWriter0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 5383.9, 948.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("VHf", 23);
      attribute0.setWeight(0.95);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2580);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute1 = new Attribute(".arff", (List<String>) null, protectedProperties0);
      DenseInstance denseInstance0 = new DenseInstance(2580);
      instances0.add((Instance) denseInstance0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      Attribute attribute2 = new Attribute(",AzeX*^_g&'~", protectedProperties3);
      properties0.keys();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      protectedProperties3.values();
      mockPrintWriter0.print(1522.0F);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "real", (Object[]) null);
      protectedProperties0.list(printWriter0);
      jRip_NominalAntd0.splitData(instances0, 2, 0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("VHf", 11);
      attribute0.setWeight(0.95);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2580);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute("q}b*w21i#ud~j_I'6n", (List<String>) null, protectedProperties1);
      Attribute attribute2 = new Attribute("Whether to contain fully the child balls.", (String) null);
      arrayList0.add(attribute2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      properties0.values();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(1);
      byteArrayOutputStream1.reset();
      byteArrayOutputStream1.reset();
      AbstractClassifier.makeCopy(inputMappedClassifier0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.stream();
      JRip jRip1 = new JRip();
      try { 
        jRip1.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[8];
      intArray0[1] = 116;
      intArray0[4] = (-642);
      intArray0[5] = 4;
      intArray0[6] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-0.4375), intArray0, 5);
      boolean boolean0 = jRip0.getUsePruning();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getMinNo();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip0.setDebug(true);
      jRip0.getOptions();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("BDYl2D*P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BDYl2D*P not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2848957549012434
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      attribute0.value(68);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      attribute0.value((-45));
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = decisionTable0.m_theInstances;
      try { 
        jRip0.rulesetForOneClass(1, (Instances) null, 4, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassOrder classOrder0 = new ClassOrder();
      ClassOrder classOrder1 = new ClassOrder();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "rV5HtV";
      stringArray0[1] = "Fm?A4YG;q";
      stringArray0[2] = "-E";
      stringArray0[3] = "\tThe seed of randomization\n\t(Default: 1)";
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances1 = decisionTable0.m_theInstances;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances2 = bayesNet0.m_Instances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances3 = new Instances("@data", arrayList0, 3);
      try { 
        jRip0.rulesetForOneClass(5, (Instances) null, (-1506.3693184428), 1749.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      properties0.keySet();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Instances instances0 = new Instances("", arrayList0, 25);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1727.2714855731292);
      Attribute attribute0 = new Attribute("@data", "", protectedProperties3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      Random.setNextRandom((-68));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8720520186532996
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances1 = decisionTable0.m_theInstances;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances2 = bayesNet0.m_Instances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances3 = new Instances(".arff", arrayList0, 5);
      try { 
        jRip0.rulesetForOneClass(4, instances3, 4, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "cXbV#FE:Fv";
      stringArray0[0] = "\nThe rule doesn't cover: ";
      stringArray0[3] = "\nThe rule doesn't cover: ";
      stringArray0[4] = ">9`~D1)]p{#bSr";
      stringArray0[5] = "\nThe rule doesn't cover: ";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel", arrayList0, 70);
      JRip jRip0 = new JRip();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArrayOutputStream0.reset();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(70);
      ByteArrayOutputStream byteArrayOutputStream2 = new ByteArrayOutputStream(37);
      byteArrayOutputStream1.close();
      byteArrayOutputStream2.reset();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      DecisionTable decisionTable0 = new DecisionTable();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.stream();
      JRip jRip1 = new JRip();
      try { 
        jRip1.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(2146);
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("S", "S", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      jRip_NominalAntd0.value = 3103.1835;
      jRip_NominalAntd0.covers(sparseInstance0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      Attribute.typeToString(attribute0);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2146;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2942.106420546074, doubleArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Attribute attribute1 = new Attribute("");
      Attribute attribute2 = new Attribute(")%g{HlPQ+xf-", 4);
      jRip0.toString();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jRip0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      predicate3.or(predicate3);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate7);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate5.or(predicate8);
      predicate8.or(predicate9);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate8);
      Predicate<Object> predicate12 = predicate4.and(predicate11);
      predicate7.and(predicate4);
      predicate3.and(predicate0);
      predicate12.or(predicate8);
      predicate8.negate();
      Predicate<Object> predicate13 = predicate6.and(predicate2);
      predicate4.negate();
      predicate0.test(predicate13);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      predicate10.negate();
      predicate1.negate();
      predicate2.negate();
      arrayList0.clear();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Number of iterations to be performed.", 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("Number of iterations to be performed. <= NaN", string0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-368.71364567);
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      decisionTable0.m_classPriorCounts = null;
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.setUsePruning(false);
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances1 = decisionTable0.m_theInstances;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances2 = bayesNet0.m_Instances;
      try { 
        jRip0.rulesetForOneClass(13.34183542841111, (Instances) null, 1654.4452765337, 94.08217504296421);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(2096);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "yh10cMcDJ9yw~:j`^";
      stringArray0[1] = "";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2096;
      doubleArray0[1] = (double) 2096;
      doubleArray0[2] = (double) 2;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.0, doubleArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      System.setCurrentTimeMillis(2);
      Attribute attribute0 = new Attribute((String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jRip0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      predicate3.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.or(predicate3);
      Predicate<Object> predicate8 = predicate5.and(predicate7);
      Predicate<Object> predicate9 = predicate0.and(predicate8);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate9);
      Predicate<Object> predicate12 = predicate4.and(predicate11);
      predicate3.and(predicate0);
      predicate12.or(predicate9);
      Predicate<Object> predicate13 = predicate9.negate();
      predicate6.and(predicate2);
      predicate4.negate();
      predicate5.test(predicate1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      predicate10.negate();
      predicate6.negate();
      predicate11.and(predicate13);
      Predicate.isEqual((Object) jRip0);
      arrayList0.removeIf(predicate11);
      arrayList0.clear();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Number of iterations to be performed.", linkedList0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances0 = new Instances("\tThe seed of randomization\n\t(Default: 1)", arrayList0, 62);
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      jRip_NumericAntd0.splitData(instances1, 0, 6.0);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[2];
      intArray0[1] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3.9115595952047433), intArray0, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance1);
      binarySparseInstance0.setMissing(2);
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(1115.0, doubleArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance2);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance(binarySparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1.0));
      jRip_RipperRule0.hasAntds();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Collection<String> collection0 = null;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, locale_FilteringMode1);
      arrayList0.parallelStream();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange((String) null, (-969.884372228638));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassOrder classOrder0 = new ClassOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.size();
      KDTree kDTree0 = new KDTree();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(2098);
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "yh10cMcDJ9yw~:j`^";
      stringArray0[1] = "";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2098;
      doubleArray0[1] = (double) 2098;
      doubleArray0[2] = (double) 2;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.0, doubleArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Utils.SMALL = 2098.0;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      arrayList0.add("yh10cMcDJ9yw~:j`^");
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Attribute attribute1 = new Attribute(">", arrayList0, protectedProperties1);
      jRip_NominalAntd0.getAttr();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("19;kp'$4Ls", linkedList0, protectedProperties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "string");
      Attribute attribute1 = new Attribute("integer", protectedProperties0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties0.computeIfPresent(attribute1, biFunction0);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute2 = new Attribute("string", 3);
      attribute2.setWeight(0);
      Attribute.typeToString(attribute2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string");
      Attribute.typeToString(attribute2);
      Instances instances0 = new Instances("Objective function value is NaN!", arrayList0, 1406);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@end");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute3 = new Attribute(";K<N@}/SlKm", (List<String>) null, protectedProperties0);
      Attribute[] attributeArray0 = new Attribute[0];
      linkedList0.toArray(attributeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "numeric");
      attribute0.copy("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 4, 1);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable1.m_majority = (double) 1;
      Instances instances0 = decisionTable0.m_dtInstances;
      double[] doubleArray0 = new double[27];
      doubleArray0[0] = (double) 1;
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      SystemInUtil.addInputLine("C7J-];*leo&TQ");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      DenseInstance denseInstance0 = new DenseInstance(2580);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      protectedProperties3.keys();
      Attribute attribute0 = new Attribute(",AzeX*^-g&'~", protectedProperties3);
      properties0.keys();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      protectedProperties3.values();
      mockPrintWriter0.print(1522.0F);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "real", (Object[]) null);
      printWriter0.printf((Locale) null, "", (Object[]) null);
      protectedProperties0.list(printWriter0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals("8118", string0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3.9115595952047433), intArray0, 1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[4];
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      doubleArray0[2] = (double) 4;
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2, doubleArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      binarySparseInstance3.setMissing(attribute0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance4);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(2, intArray0, 2);
      // Undeclared exception!
      try { 
        binarySparseInstance4.attributeSparse(613);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jRip0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate3.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate2);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate7);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate4.or(predicate8);
      Predicate<Object> predicate10 = predicate8.or(predicate9);
      Predicate<Object> predicate11 = predicate4.negate();
      Predicate<Object> predicate12 = predicate8.negate();
      Predicate<Object> predicate13 = predicate2.and(predicate12);
      predicate13.test(predicate2);
      predicate13.and(predicate5);
      Predicate<Object> predicate14 = predicate3.and(predicate0);
      predicate13.or(predicate8);
      Predicate<Object> predicate15 = predicate6.and(predicate2);
      predicate14.negate();
      Predicate<Object> predicate16 = predicate7.negate();
      predicate11.and(predicate16);
      predicate9.negate();
      predicate1.negate();
      predicate10.negate();
      predicate12.and(predicate5);
      predicate15.negate();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("\nGrowing and prunin- Replace ...", 88);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      DenseInstance denseInstance0 = new DenseInstance(88);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 88
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6612568465993487
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("a?p8#]'~", "Sk");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      attribute0.addRelation((Instances) null);
      jRip_NominalAntd0.accu = (double) 0;
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      
      jRip_NominalAntd0.cover = (double) 1;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.getRevision();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jRip_RipperRule0.hasAntds();
      jRip0.setCheckErrorRate(false);
      jRip0.seedTipText();
      jRip0.getCheckErrorRate();
      CoverTree coverTree0 = new CoverTree();
      jRip0.getOptions();
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode1);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      SystemInUtil.addInputLine((String) null);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("D");
      arrayList3.add(locale_LanguageRange0);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      arrayList4.ensureCapacity(3948);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      arrayList3.add(locale_LanguageRange0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null, locale_FilteringMode2);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayLanguage(locale1);
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList5, (Collection<String>) list0, locale_FilteringMode0);
      ArrayList<String> arrayList6 = new ArrayList<String>(2);
      ArrayList<Attribute> arrayList7 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("D", arrayList7, 1);
      try { 
        jRip0.rulesetForOneClass(2, instances0, 1, 0.5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ez";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "Ez";
      stringArray0[3] = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("   * Returns only the toString() method.\n");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode1);
      Locale locale0 = new Locale("", "Ez");
      Locale locale1 = new Locale("");
      locale1.getUnicodeLocaleKeys();
      Locale.forLanguageTag("   * Returns only the toString() method.\n");
      locale1.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList3, locale_FilteringMode2);
      Locale.lookup(linkedList0, list2);
      arrayList0.iterator();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode3);
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      arrayList5.ensureCapacity(17);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList4, (Collection<String>) list1, locale_FilteringMode4);
      JRip jRip0 = new JRip();
      jRip0.toString();
      Attribute attribute0 = new Attribute("   * Returns only the toString() method.\n", list0, (-4053));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("a?p8#]'~", "Sk");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      attribute0.addRelation((Instances) null);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1903.266), doubleArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Attribute attribute1 = new Attribute("relational", (List<String>) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute1);
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = (-1670);
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, intArray0, 1);
      boolean boolean1 = jRip_NominalAntd1.covers(binarySparseInstance1);
      assertTrue(boolean1 == boolean0);
      
      double double1 = jRip_NominalAntd0.getCover();
      assertEquals(double1, double0, 0.01);
      
      String string0 = jRip_NominalAntd1.toString();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals("relational = ", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, "#~S(w", 14);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttrValue();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip0.foldsTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(317);
      // Undeclared exception!
      try { 
        binarySparseInstance0.setValue(attribute0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute neither nominal nor string!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3.9115595952047433), intArray0, 1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip_NominalAntd0.covers(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[4];
      jRip_NominalAntd0.copy();
      binarySparseInstance0.s_numericAfterDecimalPoint = 4;
      doubleArray0[2] = (double) 1;
      binarySparseInstance0.s_numericAfterDecimalPoint = 4;
      binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(4, doubleArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      // Undeclared exception!
      try { 
        binarySparseInstance0.equalHeadersMsg(binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.values();
      Instances instances0 = decisionTable0.m_theInstances;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      decisionTable0.getEvaluationMeasure();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Evaluation evaluation0 = decisionTable0.m_evaluation;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(5);
      ByteArrayOutputStream byteArrayOutputStream2 = new ByteArrayOutputStream(5);
      byteArrayOutputStream2.reset();
      DecisionTable decisionTable3 = new DecisionTable();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("measureNumRules");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3129809585039767
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      String[] stringArray0 = new String[1];
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      String[] stringArray1 = jRip0.getOptions();
      assertEquals(11, stringArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-612.698928048);
      doubleArray0[1] = (-612.698928048);
      doubleArray0[2] = (-612.698928048);
      doubleArray0[3] = (-612.698928048);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-612.698928048), doubleArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Attribute attribute0 = new Attribute((String) null, linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, double0, 0.01);
      
      SparseInstance sparseInstance0 = new SparseInstance(5087);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      double double1 = jRip_NominalAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.values();
      Instances instances0 = decisionTable0.m_dtInstances;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      decisionTable0.getEvaluationMeasure();
      DecisionTable decisionTable1 = new DecisionTable();
      Evaluation evaluation0 = decisionTable0.m_evaluation;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(5);
      ByteArrayOutputStream byteArrayOutputStream2 = new ByteArrayOutputStream(5);
      byteArrayOutputStream2.reset();
      DecisionTable decisionTable2 = new DecisionTable();
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(3, (Instances) null, (-1678.218), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3.9115595952047433), intArray0, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      attribute0.equalsMsg(binarySparseInstance3);
      binarySparseInstance1.setValueSparse(0, (-1356.38));
      binarySparseInstance0.setMissing(2);
      binarySparseInstance2.s_numericAfterDecimalPoint = 2;
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance4.copy();
      binarySparseInstance4.copy();
      binarySparseInstance1.setMissing(attribute0);
      jRip0.checkErrorRateTipText();
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(2);
      assertEquals(2, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("dR");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      jRip0.setMinNo(2);
      jRip0.setMinNo(4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accu = (double) 1;
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(4.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Objective function value is NaN!", arrayList0, 1406);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = jRip0.getOptimizations();
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, int0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode1);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("D");
      arrayList2.add((Locale.LanguageRange) null);
      Locale.LanguageRange.parse("D");
      arrayList0.add(locale_LanguageRange0);
      arrayList2.add(locale_LanguageRange0);
      arrayList2.ensureCapacity(3966);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      arrayList2.add(locale_LanguageRange0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode2);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) list0, locale_FilteringMode0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      int int0 = jRip0.getFolds();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, int0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jRip0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      Predicate<Object> predicate6 = predicate3.or(predicate4);
      Predicate<Object> predicate7 = predicate2.negate();
      predicate0.negate();
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate8.or(predicate1);
      Predicate<Object> predicate10 = predicate2.negate();
      Predicate<Object> predicate11 = predicate0.and(predicate10);
      ClassOrder classOrder0 = new ClassOrder();
      predicate3.test(predicate1);
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate12 = predicate11.or(predicate6);
      Predicate<Object> predicate13 = predicate7.negate();
      Predicate<Object> predicate14 = predicate12.negate();
      Predicate<Object> predicate15 = predicate3.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate16 = predicate15.or(predicate11);
      Predicate<Object> predicate17 = predicate16.negate();
      Predicate<Object> predicate18 = predicate8.and(predicate2);
      predicate3.negate();
      predicate7.test(predicate1);
      predicate12.and(predicate9);
      predicate13.negate();
      predicate12.negate();
      predicate14.and(predicate17);
      predicate18.negate();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attribute attribute0 = new Attribute("Number of iterations to be performed.", 2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertFalse(jRip0.getDebug());
      assertEquals(" => Number of iterations to be performed.=", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("D");
      arrayList2.add(locale_LanguageRange0);
      Locale.LanguageRange.parse("D");
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayList3.ensureCapacity(3966);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null, locale_FilteringMode3);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList4, (Collection<String>) list1, locale_FilteringMode0);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("D", arrayList5, 1);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassOrder classOrder0 = new ClassOrder();
      JRip jRip0 = new JRip();
      ClassOrder classOrder1 = new ClassOrder();
      Predicate.isEqual((Object) classOrder0);
      ClassOrder classOrder2 = new ClassOrder();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.clear();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ez";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "Ez";
      stringArray0[3] = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("   * Returns only the toString() method.\n");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode1);
      Locale locale0 = new Locale("", "Ez");
      Locale locale1 = new Locale("");
      locale1.getUnicodeLocaleKeys();
      locale1.getUnicodeLocaleKeys();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.iterator();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("F7ATb?;!DbUUgheU", arrayList3, 1186);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      arrayList0.parallelStream();
      arrayList1.trimToSize();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList4, locale_FilteringMode2);
      ArrayList<String> arrayList5 = new ArrayList<String>(1160);
      assertFalse(arrayList5.equals((Object)arrayList0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jRip0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate.isEqual((Object) predicate2);
      predicate2.negate();
      SparseInstance sparseInstance0 = new SparseInstance(7);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances1 = decisionTable0.m_theInstances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.setFolds(37);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[4] = "@relation";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      DenseInstance denseInstance0 = new DenseInstance(2580);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(",AzeX*^_g&'~", protectedProperties3);
      properties0.keys();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      protectedProperties3.values();
      mockPrintWriter0.print(1522.0F);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "real", (Object[]) null);
      printWriter0.printf((Locale) null, "", (Object[]) null);
      protectedProperties0.list(printWriter0);
      jRip0.enumerateMeasures();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier3 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("D");
      jRip0.getUsePruning();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayList3.ensureCapacity(3966);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null, locale_FilteringMode3);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList4, (Collection<String>) list1, locale_FilteringMode0);
      ArrayList<String> arrayList5 = new ArrayList<String>(2);
      assertTrue(arrayList5.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ": ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "{";
      stringArray0[4] = "";
      stringArray0[5] = "[N4{S";
      JRip.main(stringArray0);
      String string0 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
      
      String string1 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string1);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      PART pART0 = new PART();
      AbstractClassifier.makeCopies(simpleLogistic0, 10);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("Number of all possble ondtions = ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of all possble ondtions =  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ez";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "Ez";
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Y. Freund and R. E. Schapire");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = null;
      // Undeclared exception!
      try { 
        predicate0.and((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.882110387485166
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("VHf", 11);
      attribute0.setWeight(0.95);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2580);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute("q}b*w21i#ud~j_I'6n", (List<String>) null, protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      properties0.values();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "q}b*w21i#ud~j_I'6n";
      objectArray0[1] = (Object) protectedProperties1;
      mockPrintWriter0.print((float) 1);
      objectArray0[2] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "date", objectArray0);
      protectedProperties1.list(printWriter0);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 5383.9, 948.0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1, instancesArray0.length);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      jRip0.globalInfo();
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ez";
      stringArray0[2] = "Ez";
      stringArray0[3] = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("   * Returns only the toString() method.\n");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode1);
      Locale locale0 = new Locale("", "Ez");
      Locale locale1 = new Locale("");
      locale1.getExtension('l');
      locale1.getUnicodeLocaleKeys();
      locale1.getUnicodeLocaleKeys();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("\noldDL: ", arrayList1, 1186);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      arrayList0.add("): the dl = ");
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("\noldDL:  <= NaN", string0);
      
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(1L);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-2845), false, false);
      PART pART0 = new PART();
      AbstractClassifier.runClassifier(pART0, (String[]) null);
      Classifier[] classifierArray0 = AbstractClassifier.makeCopies(simpleLogistic0, 10);
      assertEquals(10, classifierArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jRip0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate3);
      predicate3.negate();
      predicate4.and(predicate2);
      predicate1.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.or(predicate3);
      predicate3.test(predicate2);
      Predicate<Object> predicate8 = predicate5.and(predicate7);
      Predicate<Object> predicate9 = predicate0.and(predicate8);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate0);
      predicate1.or(predicate10);
      predicate9.negate();
      Predicate<Object> predicate11 = predicate1.and(predicate3);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate9.test(predicate1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      predicate11.negate();
      predicate9.or(predicate11);
      predicate1.and(predicate12);
      arrayList0.removeIf(predicate9);
      arrayList0.clear();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip0.getTechnicalInformation();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jRip0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate3);
      Predicate<Object> predicate8 = predicate7.and(predicate1);
      Predicate<Object> predicate9 = predicate7.or(predicate0);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate6.and(predicate0);
      Predicate.isEqual((Object) predicate2);
      predicate11.and(predicate0);
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate4.and(predicate8);
      ClassOrder classOrder1 = new ClassOrder();
      Predicate<Object> predicate14 = predicate7.or(predicate4);
      predicate10.and(predicate8);
      predicate9.and(predicate0);
      predicate5.negate();
      Predicate<Object> predicate15 = predicate10.and(predicate13);
      predicate15.negate();
      predicate13.or(predicate10);
      predicate15.negate();
      Predicate<Object> predicate16 = predicate12.negate();
      predicate16.negate();
      predicate16.or(predicate9);
      predicate16.or(predicate2);
      predicate14.negate();
      predicate7.negate();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      ArrayList<String> arrayList1 = new ArrayList<String>(0);
      long long0 = jRip0.getSeed();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jRip0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate2.and(predicate3);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate7.or(predicate2);
      Predicate.isEqual((Object) predicate6);
      predicate8.and(predicate1);
      predicate4.or(predicate8);
      ClassOrder classOrder1 = new ClassOrder();
      jRip0.setDebug(false);
      predicate1.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate2);
      predicate9.or(predicate3);
      predicate6.negate();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1654.4452765337, doubleArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(binarySparseInstance0);
      ArrayList<String> arrayList0 = new ArrayList<String>(88);
      assertTrue(arrayList0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip0 = new JRip();
      String string0 = jRip0.debugTipText();
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Whether debug information is output to the console.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "K";
      stringArray0[1] = "N%(D?FCf2";
      stringArray0[2] = "-P";
      stringArray0[3] = "phTVdzl(H";
      jRip0.setMinNo((-1248.132163));
      stringArray0[4] = "";
      stringArray0[5] = "\"aH35e%F|U}<V[SjF6C";
      stringArray0[6] = "$";
      jRip0.globalInfo();
      stringArray0[7] = "N%(D?FCf2";
      stringArray0[8] = "weka.classifiers.rules.JRip$RipperRule";
      jRip0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      decisionTable0.m_classPriorCounts = null;
      double[] doubleArray0 = new double[28];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 4;
      Evaluation evaluation0 = decisionTable0.m_evaluation;
      decisionTable0.m_evaluation = null;
      doubleArray0[2] = (double) 4;
      doubleArray0[5] = 1654.4452765337;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 1;
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      jRip0.setOptions(stringArray0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      RuleStats ruleStats0 = new RuleStats();
      attribute0.equalsMsg(ruleStats0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAccu();
      jRip0.getRevision();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("1j;kp'$4Ls", linkedList0, protectedProperties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "string");
      Attribute attribute1 = new Attribute("date");
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.setWeight(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string");
      jRip0.setOptimizations((-72));
      Instances instances0 = new Instances("Objective function value is NaN!", arrayList0, 1406);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@attribute");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute2 = new Attribute("nominal", 60);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      attribute1.copy("string");
      Attribute attribute3 = new Attribute("1j;kp'$4Ls", linkedList0, 4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute3);
      jRip_NumericAntd0.splitData(instances0, 2061.3120105, (-1278.073413472414));
      assertEquals((-72), jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable0.m_majority = 3887.34;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (double) 2;
      jRip0.optimizationsTipText();
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 3;
      Filter filter0 = decisionTable0.m_disTransform;
      assertNull(filter0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      properties0.keySet();
      jRip_NominalAntd0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.getRevision();
      JRip jRip1 = new JRip();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Object object0 = new Object();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        protectedProperties2.computeIfAbsent((Object) null, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[28];
      doubleArray0[15] = 1654.4452765337;
      CoverTree coverTree0 = new CoverTree();
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      jRip0.getCheckErrorRate();
      CoverTree coverTree1 = new CoverTree();
      jRip0.usePruningTipText();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ez";
      stringArray0[2] = "Ez";
      stringArray0[3] = "+";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("   * Returs only the toString() mehod.\n");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode1);
      Locale locale0 = new Locale("+", "Ez");
      Locale locale1 = new Locale("+");
      locale1.getUnicodeLocaleAttributes();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.lookup(linkedList1, list1);
      Locale.forLanguageTag("   * Returs only the toString() mehod.\n");
      locale1.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList3, locale_FilteringMode2);
      Locale locale2 = Locale.JAPAN;
      arrayList0.iterator();
      locale2.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      ArrayList<String> arrayList5 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList5, locale_FilteringMode0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.stream();
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate.isEqual((Object) "Old rule: ");
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "Old rule: ");
      predicate3.or(predicate6);
      Predicate<Object> predicate7 = predicate2.negate();
      predicate4.and(predicate7);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate.isEqual((Object) "Username:");
      predicate0.or(predicate7);
      predicate4.and(predicate7);
      ClassOrder classOrder1 = new ClassOrder();
      Predicate.isEqual((Object) predicate2);
      predicate5.negate();
      predicate3.or(predicate8);
      predicate5.negate();
      predicate0.and(predicate2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate9 = predicate1.or(predicate8);
      arrayList0.removeIf(predicate9);
      arrayList0.clear();
      Attribute attribute0 = new Attribute("Random correction code");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3.9115595952047433), intArray0, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      attribute0.equalsMsg(binarySparseInstance3);
      binarySparseInstance1.setValueSparse(0, (-1356.38));
      binarySparseInstance0.setMissing(2);
      binarySparseInstance2.s_numericAfterDecimalPoint = 2;
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance4.copy();
      binarySparseInstance1.setMissing(attribute0);
      jRip0.checkErrorRateTipText();
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(2);
      assertFalse(binarySparseInstance5.equals((Object)binarySparseInstance4));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ez";
      stringArray0[2] = "Ez";
      stringArray0[3] = "E";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("   * Returs only the toString() mehod.\n");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode1);
      Locale locale0 = new Locale("E", "Ez");
      Locale locale1 = new Locale("E");
      locale1.getUnicodeLocaleAttributes();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.lookup(linkedList1, list1);
      Locale.forLanguageTag("   * Returs only the toString() mehod.\n");
      locale1.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList3, locale_FilteringMode2);
      Locale locale2 = Locale.JAPAN;
      arrayList0.iterator();
      locale2.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      ArrayList<String> arrayList5 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList5, locale_FilteringMode0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.stream();
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("19;ukp'$4Ls", linkedList0, protectedProperties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "string");
      Attribute attribute1 = new Attribute("date");
      protectedProperties0.propertyNames();
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string");
      Instances instances0 = new Instances("Objective function value is NaN!", arrayList0, 1406);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@attribute");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "numeric");
      Attribute attribute2 = new Attribute("date", 60);
      jRip0.getCheckErrorRate();
      Attribute attribute3 = new Attribute("19;ukp'$4Ls", linkedList0, 4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute3);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      jRip_NumericAntd0.splitData(instances0, (-1278.073413472414), (byte)79);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.8599481574305257
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "cXbV#FE:Fv";
      stringArray0[0] = "\nThe rule doesn't cover: ";
      stringArray0[3] = "\nThe rule doesn't cover: ";
      stringArray0[4] = ">9`~D1)]p{#bSr";
      stringArray0[5] = "\nThe rule doesn't cover: ";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel", arrayList0, 70);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.minNoTipText();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.size();
      jRip_RipperRule0.prune(instances0, false);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.size();
      jRip_RipperRule1.copy();
      jRip_RipperRule0.size();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      jRip_RipperRule0.copy();
      jRip_RipperRule3.covers((Instance) null);
      JRip.RipperRule jRip_RipperRule4 = jRip0.new RipperRule();
      jRip_RipperRule4.copy();
      try { 
        jRip_RipperRule4.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      Utils.SMALL = 1304.069124;
      jRip0.listOptions();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ez";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "Ez";
      stringArray0[3] = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("   * Returns only the toString() method.\n");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode1);
      Locale locale0 = new Locale("", "Ez");
      Locale locale1 = new Locale("");
      locale1.getUnicodeLocaleKeys();
      locale1.getUnicodeLocaleKeys();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.iterator();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayList2.ensureCapacity(1186);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) set0, locale_FilteringMode3);
      JRip jRip0 = new JRip();
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }
}
