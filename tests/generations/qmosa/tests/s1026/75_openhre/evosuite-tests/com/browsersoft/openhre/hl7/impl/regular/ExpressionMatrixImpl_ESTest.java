/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 05:15:30 GMT 2020
 */

package com.browsersoft.openhre.hl7.impl.regular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.browsersoft.openhre.hl7.api.config.HL7Segment;
import com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;
import com.browsersoft.openhre.hl7.api.regular.MessageTracerHandler;
import com.browsersoft.openhre.hl7.impl.config.HL7MessageGroupImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7MessageSegmentImpl;
import com.browsersoft.openhre.hl7.impl.parser.HL7CheckerStateImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionElementMapperImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionElementMapperItemImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionMatrixImpl;
import com.browsersoft.openhre.hl7.impl.regular.MessageTracerImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExpressionMatrixImpl_ESTest extends ExpressionMatrixImpl_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5921245198372675
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      assertNotNull(expressionImpl0);
      assertEquals(0, expressionImpl0.getNumberOfElementTypes());
      assertEquals(0, expressionImpl0.size());
      
      String string0 = expressionMatrixImpl0.toString();
      assertEquals("MATRIX\n-----------------------\n | \n\nCONNECTIONS\n-----------------------\n", string0);
      assertNotNull(string0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl();
      assertNotNull(hL7MessageGroupImpl0);
      assertEquals("", hL7MessageGroupImpl0.getAdditional());
      assertFalse(hL7MessageGroupImpl0.isRequired());
      assertEquals(0, hL7MessageGroupImpl0.size());
      assertEquals(0, hL7MessageGroupImpl0.getType());
      assertFalse(hL7MessageGroupImpl0.isRepeatable());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      assertNotNull(hL7MessageSegmentImpl0);
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      assertNotNull(hL7CheckerStateImpl0);
      assertFalse(hL7CheckerStateImpl0.isSeriousError());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldPosition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
      
      HL7Segment hL7Segment0 = hL7CheckerStateImpl0.getActualSegment();
      assertNull(hL7Segment0);
      assertFalse(hL7CheckerStateImpl0.isSeriousError());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldPosition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
      
      hL7MessageSegmentImpl1.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      String string1 = hL7MessageSegmentImpl1.toString();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string1);
      assertNotNull(string1);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      String string2 = hL7MessageSegmentImpl0.toString();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string2);
      assertNotNull(string2);
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      expressionMatrixImpl0.creatMatrix(1431);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      String string3 = hL7MessageSegmentImpl0.toString();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string3);
      assertNotNull(string3);
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      HL7Segment hL7Segment1 = hL7MessageSegmentImpl1.getSegment();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7Segment1);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      String string4 = expressionMatrixImpl0.toString();
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      expressionMatrixImpl0.setValue(0, 1409, (-2561));
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      expressionMatrixImpl0.setValue(1223, 1223, 0);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      MessageTracerImpl messageTracerImpl1 = new MessageTracerImpl();
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl0));
      assertNotNull(messageTracerImpl1);
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl1.getMapper();
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl0));
      assertNotSame(messageTracerImpl1, messageTracerImpl0);
      assertNull(expressionElementMapper0);
      
      String string5 = expressionMatrixImpl0.outNoStandardConnections(true, (ExpressionElementMapper) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      String string6 = expressionMatrixImpl0.toString();
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      int int1 = expressionMatrixImpl0.getValue((-1), 94);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      int int2 = expressionMatrixImpl0.getNumberOfNodes();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      int int3 = expressionMatrixImpl0.getNumberOfNodes();
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6724362915299429
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl();
      assertNotNull(hL7MessageGroupImpl0);
      assertFalse(hL7MessageGroupImpl0.isRequired());
      assertEquals(0, hL7MessageGroupImpl0.getType());
      assertFalse(hL7MessageGroupImpl0.isRepeatable());
      assertEquals(0, hL7MessageGroupImpl0.size());
      assertEquals("", hL7MessageGroupImpl0.getAdditional());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      assertNotNull(hL7MessageSegmentImpl0);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      HL7MessageGroupImpl hL7MessageGroupImpl1 = new HL7MessageGroupImpl();
      assertFalse(hL7MessageGroupImpl1.equals((Object)hL7MessageGroupImpl0));
      assertNotNull(hL7MessageGroupImpl1);
      assertEquals(0, hL7MessageGroupImpl1.size());
      assertEquals(0, hL7MessageGroupImpl1.getType());
      assertFalse(hL7MessageGroupImpl1.isRepeatable());
      assertFalse(hL7MessageGroupImpl1.isRequired());
      assertEquals("", hL7MessageGroupImpl1.getAdditional());
      
      String string0 = hL7MessageSegmentImpl0.toString();
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string0);
      assertNotNull(string0);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      String string1 = hL7MessageSegmentImpl1.toString();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string1);
      assertNotNull(string1);
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      assertNotNull(hL7CheckerStateImpl0);
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
      assertFalse(hL7CheckerStateImpl0.isSeriousError());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldPosition());
      
      HL7Segment hL7Segment0 = hL7CheckerStateImpl0.getActualSegment();
      assertNull(hL7Segment0);
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
      assertFalse(hL7CheckerStateImpl0.isSeriousError());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldPosition());
      
      hL7MessageSegmentImpl1.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      hL7MessageSegmentImpl0.setRequired(true);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      expressionMatrixImpl0.creatMatrix(589);
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      String string2 = hL7MessageSegmentImpl1.toString();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string2);
      assertNotNull(string2);
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      String string3 = hL7MessageSegmentImpl0.toString();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"true\"", string3);
      assertNotNull(string3);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      HL7Segment hL7Segment1 = hL7MessageSegmentImpl1.getSegment();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7Segment1);
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      String string4 = expressionMatrixImpl0.toString();
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      int int1 = expressionMatrixImpl0.getValue(65, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      expressionMatrixImpl0.setValue(1222, 1411, 1406);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      expressionMatrixImpl0.setValue(0, 76, 67);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper0);
      
      ExpressionElementMapper expressionElementMapper1 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper1);
      
      String string5 = expressionMatrixImpl0.outNoStandardConnections(true, (ExpressionElementMapper) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("0 --- \u008D ---> 67\n", string5);
      assertNotNull(string5);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      String string6 = expressionMatrixImpl0.outNoStandardConnections(true, (ExpressionElementMapper) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("0 --- \u008D ---> 67\n", string6);
      assertNotNull(string6);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      int int2 = expressionMatrixImpl0.getValue(2198, (-697));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl();
      assertNotNull(expressionElementMapperImpl0);
      assertEquals(0, expressionElementMapperImpl0.size());
      
      // Undeclared exception!
      try { 
        expressionMatrixImpl0.outNoStandardConnections(false, expressionElementMapperImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6860865502251383
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      assertNotNull(expressionImpl0);
      assertEquals(0, expressionImpl0.getNumberOfElementTypes());
      assertEquals(0, expressionImpl0.size());
      
      HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl();
      assertNotNull(hL7MessageGroupImpl0);
      assertFalse(hL7MessageGroupImpl0.isRequired());
      assertEquals("", hL7MessageGroupImpl0.getAdditional());
      assertEquals(0, hL7MessageGroupImpl0.size());
      assertEquals(0, hL7MessageGroupImpl0.getType());
      assertFalse(hL7MessageGroupImpl0.isRepeatable());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      assertNotNull(hL7MessageSegmentImpl0);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      assertNotNull(hL7CheckerStateImpl0);
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldPosition());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
      assertFalse(hL7CheckerStateImpl0.isSeriousError());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
      
      HL7Segment hL7Segment0 = hL7CheckerStateImpl0.getActualSegment();
      assertNull(hL7Segment0);
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldPosition());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
      assertFalse(hL7CheckerStateImpl0.isSeriousError());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
      
      hL7MessageSegmentImpl1.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      String string0 = hL7MessageSegmentImpl1.toString();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string0);
      assertNotNull(string0);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      expressionMatrixImpl0.creatMatrix(1431);
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      String string1 = hL7MessageSegmentImpl0.toString();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string1);
      assertNotNull(string1);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      
      HL7Segment hL7Segment1 = hL7MessageSegmentImpl1.getSegment();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7Segment1);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      
      String string2 = expressionMatrixImpl0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      expressionMatrixImpl0.setValue(0, 1409, (-2561));
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      expressionMatrixImpl0.setValue(0, 1, 0);
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      MessageTracerImpl messageTracerImpl1 = new MessageTracerImpl();
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl0));
      assertNotNull(messageTracerImpl1);
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl1.getMapper();
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl0));
      assertNotSame(messageTracerImpl1, messageTracerImpl0);
      assertNull(expressionElementMapper0);
      
      String string3 = expressionMatrixImpl0.outNoStandardConnections(false, (ExpressionElementMapper) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0 --- B ---> 0\n0 --- \u05C2 ---> -2561\n", string3);
      assertNotNull(string3);
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      ExpressionElementMapper expressionElementMapper1 = messageTracerImpl1.getMapper();
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl0));
      assertNotSame(messageTracerImpl1, messageTracerImpl0);
      assertNull(expressionElementMapper1);
      
      ExpressionMatrixImpl expressionMatrixImpl1 = new ExpressionMatrixImpl();
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotNull(expressionMatrixImpl1);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      
      int int1 = expressionMatrixImpl1.addNewNode();
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertTrue(int1 == int0);
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals(0, int1);
      assertEquals(1, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      
      int int2 = expressionMatrixImpl0.getValue(1367, (-586));
      assertFalse(expressionMatrixImpl0.equals((Object)expressionMatrixImpl1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(expressionMatrixImpl0, expressionMatrixImpl1);
      assertEquals((-1), int2);
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int3 = expressionMatrixImpl0.addNewNode();
      assertFalse(expressionMatrixImpl0.equals((Object)expressionMatrixImpl1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertNotSame(expressionMatrixImpl0, expressionMatrixImpl1);
      assertEquals(1, int3);
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7267720320570337
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl();
      assertNotNull(hL7MessageGroupImpl0);
      assertFalse(hL7MessageGroupImpl0.isRequired());
      assertFalse(hL7MessageGroupImpl0.isRepeatable());
      assertEquals(0, hL7MessageGroupImpl0.getType());
      assertEquals("", hL7MessageGroupImpl0.getAdditional());
      assertEquals(0, hL7MessageGroupImpl0.size());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      assertNotNull(hL7MessageSegmentImpl0);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      String string0 = hL7MessageSegmentImpl0.toString();
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string0);
      assertNotNull(string0);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      
      HL7Segment hL7Segment0 = hL7MessageSegmentImpl1.getSegment();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7Segment0);
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl2 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotNull(hL7MessageSegmentImpl2);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      hL7MessageSegmentImpl0.setID("|x/g|->m");
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertEquals("|x/g|->m", hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      String string1 = hL7MessageSegmentImpl2.toString();
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string1);
      assertNotNull(string1);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      expressionMatrixImpl0.creatMatrix((-1115));
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals((-1115), expressionMatrixImpl0.getNumberOfElements());
      
      hL7MessageSegmentImpl2.setRequired(false);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      hL7MessageSegmentImpl0.setRequired(true);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertEquals("|x/g|->m", hL7MessageSegmentImpl0.getID());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      hL7MessageSegmentImpl2.setRequired(false);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      expressionMatrixImpl0.creatMatrix(797);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      String string2 = hL7MessageSegmentImpl0.toString();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"|x/g|->m\" repeatable =\"false\" required =\"true\"", string2);
      assertNotNull(string2);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertEquals("|x/g|->m", hL7MessageSegmentImpl0.getID());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      String string3 = hL7MessageSegmentImpl2.toString();
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string3);
      assertNotNull(string3);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      HL7Segment hL7Segment1 = hL7MessageSegmentImpl0.getSegment();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNull(hL7Segment1);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertEquals("|x/g|->m", hL7MessageSegmentImpl0.getID());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      hL7MessageSegmentImpl2.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      String string4 = expressionMatrixImpl0.toString();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int1 = expressionMatrixImpl0.getValue(0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      expressionMatrixImpl0.setValue((-1), (-1), (-1));
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      expressionMatrixImpl0.setValue(0, 0, (-1115));
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper0);
      
      String string5 = expressionMatrixImpl0.outNoStandardConnections(true, (ExpressionElementMapper) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int2 = expressionMatrixImpl0.addNewNode();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.692628007303166
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      assertNotNull(expressionImpl0);
      assertEquals(0, expressionImpl0.size());
      assertEquals(0, expressionImpl0.getNumberOfElementTypes());
      
      HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl();
      assertNotNull(hL7MessageGroupImpl0);
      assertEquals(0, hL7MessageGroupImpl0.size());
      assertEquals(0, hL7MessageGroupImpl0.getType());
      assertFalse(hL7MessageGroupImpl0.isRequired());
      assertEquals("", hL7MessageGroupImpl0.getAdditional());
      assertFalse(hL7MessageGroupImpl0.isRepeatable());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      assertNotNull(hL7MessageSegmentImpl0);
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      HL7MessageGroupImpl hL7MessageGroupImpl1 = new HL7MessageGroupImpl();
      assertFalse(hL7MessageGroupImpl1.equals((Object)hL7MessageGroupImpl0));
      assertNotNull(hL7MessageGroupImpl1);
      assertEquals("", hL7MessageGroupImpl1.getAdditional());
      assertFalse(hL7MessageGroupImpl1.isRepeatable());
      assertEquals(0, hL7MessageGroupImpl1.getType());
      assertEquals(0, hL7MessageGroupImpl1.size());
      assertFalse(hL7MessageGroupImpl1.isRequired());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      
      String string0 = hL7MessageSegmentImpl1.toString();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string0);
      assertNotNull(string0);
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      
      String string1 = expressionMatrixImpl0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("MATRIX\n-----------------------\n | \n\nCONNECTIONS\n-----------------------\n", string1);
      assertNotNull(string1);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      expressionMatrixImpl0.creatMatrix(1431);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      String string2 = hL7MessageSegmentImpl0.toString();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string2);
      assertNotNull(string2);
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      HL7Segment hL7Segment0 = hL7MessageSegmentImpl0.getSegment();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNull(hL7Segment0);
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      String string3 = expressionMatrixImpl0.toString();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      int int1 = expressionMatrixImpl0.addNewNode();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      int int2 = expressionMatrixImpl0.getValue(0, 1431);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      expressionMatrixImpl0.setValue(0, 793, (-1166));
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      expressionMatrixImpl0.setValue((-1), (-941), 773);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper0);
      
      String string4 = expressionMatrixImpl0.outNoStandardConnections(false, (ExpressionElementMapper) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("0 --- \u035A ---> -1166\n", string4);
      assertNotNull(string4);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6643285088648099
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      assertNotNull(expressionImpl0);
      assertEquals(0, expressionImpl0.size());
      assertEquals(0, expressionImpl0.getNumberOfElementTypes());
      
      HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl();
      assertNotNull(hL7MessageGroupImpl0);
      assertEquals(0, hL7MessageGroupImpl0.getType());
      assertFalse(hL7MessageGroupImpl0.isRepeatable());
      assertFalse(hL7MessageGroupImpl0.isRequired());
      assertEquals("", hL7MessageGroupImpl0.getAdditional());
      assertEquals(0, hL7MessageGroupImpl0.size());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      assertNotNull(hL7MessageSegmentImpl0);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      HL7MessageGroupImpl hL7MessageGroupImpl1 = new HL7MessageGroupImpl();
      assertFalse(hL7MessageGroupImpl1.equals((Object)hL7MessageGroupImpl0));
      assertNotNull(hL7MessageGroupImpl1);
      assertFalse(hL7MessageGroupImpl1.isRequired());
      assertEquals(0, hL7MessageGroupImpl1.size());
      assertEquals(0, hL7MessageGroupImpl1.getType());
      assertFalse(hL7MessageGroupImpl1.isRepeatable());
      assertEquals("", hL7MessageGroupImpl1.getAdditional());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      assertNotNull(hL7CheckerStateImpl0);
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldPosition());
      assertFalse(hL7CheckerStateImpl0.isSeriousError());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
      
      HL7Segment hL7Segment0 = hL7CheckerStateImpl0.getActualSegment();
      assertNull(hL7Segment0);
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldPosition());
      assertFalse(hL7CheckerStateImpl0.isSeriousError());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
      
      hL7MessageSegmentImpl1.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      String string0 = hL7MessageSegmentImpl1.toString();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string0);
      assertNotNull(string0);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      expressionMatrixImpl0.creatMatrix(1431);
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      String string1 = hL7MessageSegmentImpl0.toString();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string1);
      assertNotNull(string1);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      HL7Segment hL7Segment1 = hL7MessageSegmentImpl0.getSegment();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNull(hL7Segment1);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      String string2 = expressionMatrixImpl0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      expressionMatrixImpl0.setValue(0, 773, 793);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      expressionMatrixImpl0.setValue(0, 0, 773);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper0);
      
      String string3 = expressionMatrixImpl0.outNoStandardConnections(false, (ExpressionElementMapper) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionElementMapper expressionElementMapper1 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper1);
      
      ExpressionMatrixImpl expressionMatrixImpl1 = new ExpressionMatrixImpl();
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotNull(expressionMatrixImpl1);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      
      int int1 = expressionMatrixImpl1.addNewNode();
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertTrue(int1 == int0);
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals(0, int1);
      assertEquals(1, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      
      int int2 = expressionMatrixImpl0.getValue(852, 773);
      assertFalse(expressionMatrixImpl0.equals((Object)expressionMatrixImpl1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(expressionMatrixImpl0, expressionMatrixImpl1);
      assertEquals((-1), int2);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(1431, expressionMatrixImpl0.getNumberOfElements());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5728527541100994
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      assertNotNull(hL7MessageSegmentImpl0);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl1);
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      hL7MessageSegmentImpl0.setRequired(true);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      assertNotNull(hL7CheckerStateImpl0);
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldPosition());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
      assertFalse(hL7CheckerStateImpl0.isSeriousError());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
      
      HL7Segment hL7Segment0 = hL7CheckerStateImpl0.getActualSegment();
      assertNull(hL7Segment0);
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldPosition());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
      assertFalse(hL7CheckerStateImpl0.isSeriousError());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
      
      hL7MessageSegmentImpl1.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      expressionMatrixImpl0.creatMatrix(589);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      String string0 = hL7MessageSegmentImpl1.toString();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string0);
      assertNotNull(string0);
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl();
      assertNotNull(expressionElementMapperItemImpl0);
      assertNull(expressionElementMapperItemImpl0.getID());
      assertEquals(0, expressionElementMapperItemImpl0.getType());
      
      String string1 = expressionElementMapperItemImpl0.toString();
      assertNull(string1);
      assertNull(expressionElementMapperItemImpl0.getID());
      assertEquals(0, expressionElementMapperItemImpl0.getType());
      
      HL7Segment hL7Segment1 = expressionElementMapperItemImpl0.getSegment();
      assertNull(hL7Segment1);
      assertNull(expressionElementMapperItemImpl0.getID());
      assertEquals(0, expressionElementMapperItemImpl0.getType());
      
      hL7MessageSegmentImpl1.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      HL7Segment hL7Segment2 = hL7MessageSegmentImpl1.getSegment();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7Segment2);
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      
      int int1 = expressionMatrixImpl0.addNewNode();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      String string2 = expressionMatrixImpl0.toString();
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      int int2 = expressionMatrixImpl0.addNewNode();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      int int3 = expressionMatrixImpl0.getValue(65, 0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      expressionMatrixImpl0.setValue(1222, 1411, 1406);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      expressionMatrixImpl0.setValue(2, 76, 67);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper0);
      
      ExpressionElementMapper expressionElementMapper1 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper1);
      
      String string3 = expressionMatrixImpl0.outNoStandardConnections(true, (ExpressionElementMapper) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("2 --- \u008D ---> 67\n", string3);
      assertNotNull(string3);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      String string4 = expressionMatrixImpl0.outNoStandardConnections(true, (ExpressionElementMapper) null);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("2 --- \u008D ---> 67\n", string4);
      assertNotNull(string4);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      int int4 = expressionMatrixImpl0.getValue(2198, (-697));
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(589, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl();
      assertNotNull(expressionElementMapperImpl0);
      assertEquals(0, expressionElementMapperImpl0.size());
      
      String string5 = expressionElementMapperImpl0.toString();
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(0, expressionElementMapperImpl0.size());
      
      // Undeclared exception!
      try { 
        expressionMatrixImpl0.outNoStandardConnections(true, expressionElementMapperImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.344053234159679
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl();
      assertNotNull(hL7MessageGroupImpl0);
      assertFalse(hL7MessageGroupImpl0.isRequired());
      assertFalse(hL7MessageGroupImpl0.isRepeatable());
      assertEquals("", hL7MessageGroupImpl0.getAdditional());
      assertEquals(0, hL7MessageGroupImpl0.size());
      assertEquals(0, hL7MessageGroupImpl0.getType());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      assertNotNull(hL7MessageSegmentImpl0);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      String string0 = hL7MessageSegmentImpl0.toString();
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string0);
      assertNotNull(string0);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      HL7Segment hL7Segment0 = hL7MessageSegmentImpl1.getSegment();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7Segment0);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      HL7Segment hL7Segment1 = hL7MessageSegmentImpl1.getSegment();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7Segment1);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl2 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl2);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      
      hL7MessageSegmentImpl0.setID("|x/g|->m");
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertEquals("|x/g|->m", hL7MessageSegmentImpl0.getID());
      
      String string1 = hL7MessageSegmentImpl2.toString();
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string1);
      assertNotNull(string1);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      
      expressionMatrixImpl0.creatMatrix((-969));
      assertEquals((-969), expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      hL7MessageSegmentImpl2.setRequired(false);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      
      hL7MessageSegmentImpl1.setRequired(false);
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl2));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl2);
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      hL7MessageSegmentImpl2.setRequired(false);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      
      hL7MessageSegmentImpl2.setRequired(false);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      
      expressionMatrixImpl0.creatMatrix(797);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      
      String string2 = hL7MessageSegmentImpl0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertEquals("segment id=\"|x/g|->m\" repeatable =\"false\" required =\"false\"", string2);
      assertNotNull(string2);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertEquals("|x/g|->m", hL7MessageSegmentImpl0.getID());
      
      String string3 = hL7MessageSegmentImpl2.toString();
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string3);
      assertNotNull(string3);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      
      HL7Segment hL7Segment2 = hL7MessageSegmentImpl0.getSegment();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertNull(hL7Segment2);
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertEquals("|x/g|->m", hL7MessageSegmentImpl0.getID());
      
      hL7MessageSegmentImpl2.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      
      int int1 = expressionMatrixImpl0.getValue(0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      
      expressionMatrixImpl0.setValue((-1), (-1), (-1));
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      expressionMatrixImpl0.setValue(0, 0, 67);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper0);
      
      expressionMatrixImpl0.setValue(0, 67, 887);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      
      int int2 = expressionMatrixImpl0.getNumberOfNodes();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      
      int int3 = expressionMatrixImpl0.getValue(67, (-1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      
      String string4 = expressionMatrixImpl0.toString();
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      
      int int4 = expressionMatrixImpl0.addNewNode();
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(1, int4);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.468060203499046
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int0 = expressionMatrixImpl0.getNumberOfElements();
      assertEquals(0, int0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int1 = expressionMatrixImpl0.addNewNode();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      String string0 = expressionMatrixImpl0.toString();
      assertEquals("MATRIX\n-----------------------\n | \n0| \n\nCONNECTIONS\n-----------------------\n", string0);
      assertNotNull(string0);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int2 = expressionMatrixImpl0.getNumberOfElements();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int3 = expressionMatrixImpl0.addNewNode();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int4 = expressionMatrixImpl0.getValue(1863, 0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      expressionMatrixImpl0.creatMatrix(33);
      assertEquals(33, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      
      ExpressionMatrixImpl expressionMatrixImpl1 = new ExpressionMatrixImpl();
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotNull(expressionMatrixImpl1);
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      
      int int5 = 12450;
      expressionMatrixImpl0.creatMatrix(12450);
      assertFalse(expressionMatrixImpl0.equals((Object)expressionMatrixImpl1));
      assertNotSame(expressionMatrixImpl0, expressionMatrixImpl1);
      assertEquals(12450, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      
      String string1 = expressionMatrixImpl1.toString();
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals("MATRIX\n-----------------------\n | \n\nCONNECTIONS\n-----------------------\n", string1);
      assertNotNull(string1);
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      
      String string2 = expressionMatrixImpl1.toString();
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals("MATRIX\n-----------------------\n | \n\nCONNECTIONS\n-----------------------\n", string2);
      assertNotNull(string2);
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      
      // Undeclared exception!
      expressionMatrixImpl0.addNewNode();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2493920911768415
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl();
      assertNotNull(hL7MessageGroupImpl0);
      assertFalse(hL7MessageGroupImpl0.isRequired());
      assertFalse(hL7MessageGroupImpl0.isRepeatable());
      assertEquals(0, hL7MessageGroupImpl0.getType());
      assertEquals("", hL7MessageGroupImpl0.getAdditional());
      assertEquals(0, hL7MessageGroupImpl0.size());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      assertNotNull(hL7MessageSegmentImpl0);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      String string0 = hL7MessageSegmentImpl0.toString();
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string0);
      assertNotNull(string0);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      
      HL7Segment hL7Segment0 = hL7MessageSegmentImpl1.getSegment();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7Segment0);
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      HL7Segment hL7Segment1 = hL7MessageSegmentImpl1.getSegment();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7Segment1);
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl2 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotNull(hL7MessageSegmentImpl2);
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      
      hL7MessageSegmentImpl0.setID("|x/gh->m");
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertEquals("|x/gh->m", hL7MessageSegmentImpl0.getID());
      
      String string1 = hL7MessageSegmentImpl2.toString();
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string1);
      assertNotNull(string1);
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      
      expressionMatrixImpl0.creatMatrix((-1115));
      assertEquals((-1115), expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      hL7MessageSegmentImpl2.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      
      hL7MessageSegmentImpl2.setRequired(false);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      
      hL7MessageSegmentImpl0.setRequired(true);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      assertEquals("|x/gh->m", hL7MessageSegmentImpl0.getID());
      
      hL7MessageSegmentImpl2.setRequired(false);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      
      expressionMatrixImpl0.creatMatrix(797);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      String string2 = expressionMatrixImpl0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      String string3 = hL7MessageSegmentImpl2.toString();
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string3);
      assertNotNull(string3);
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      
      HL7Segment hL7Segment2 = hL7MessageSegmentImpl0.getSegment();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertNull(hL7Segment2);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      assertEquals("|x/gh->m", hL7MessageSegmentImpl0.getID());
      
      hL7MessageSegmentImpl2.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int1 = expressionMatrixImpl0.getValue(0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      expressionMatrixImpl0.setValue((-1), (-1), (-1));
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      expressionMatrixImpl0.setValue(0, 0, 67);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper0);
      
      String string4 = expressionMatrixImpl0.toString();
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int2 = expressionMatrixImpl0.getValue(0, 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(67, int2);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7804687864780901
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      int int0 = expressionMatrixImpl0.getNumberOfElements();
      assertEquals(0, int0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      int int1 = expressionMatrixImpl0.addNewNode();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      String string0 = expressionMatrixImpl0.toString();
      assertEquals("MATRIX\n-----------------------\n | \n0| \n\nCONNECTIONS\n-----------------------\n", string0);
      assertNotNull(string0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int2 = expressionMatrixImpl0.getNumberOfElements();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int3 = expressionMatrixImpl0.addNewNode();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      
      int int4 = expressionMatrixImpl0.getValue(1863, 0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals((-1), int4);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      
      expressionMatrixImpl0.creatMatrix(3058);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(3058, expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionMatrixImpl expressionMatrixImpl1 = new ExpressionMatrixImpl();
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotNull(expressionMatrixImpl1);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      
      expressionMatrixImpl1.creatMatrix((-802));
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals((-802), expressionMatrixImpl1.getNumberOfElements());
      
      int int5 = expressionMatrixImpl1.getValue((-802), 563);
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals((-1), int5);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals((-802), expressionMatrixImpl1.getNumberOfElements());
      
      expressionMatrixImpl0.setValue((-802), (-743), (-1195));
      assertFalse(expressionMatrixImpl0.equals((Object)expressionMatrixImpl1));
      assertNotSame(expressionMatrixImpl0, expressionMatrixImpl1);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(3058, expressionMatrixImpl0.getNumberOfElements());
      
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      expressionMatrixImpl1.setValue(4573, 61, (-2554));
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals((-802), expressionMatrixImpl1.getNumberOfElements());
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper0);
      
      ExpressionElementMapper expressionElementMapper1 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper1);
      
      boolean boolean0 = false;
      String string1 = expressionMatrixImpl0.outNoStandardConnections(false, (ExpressionElementMapper) null);
      assertFalse(expressionMatrixImpl0.equals((Object)expressionMatrixImpl1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(expressionMatrixImpl0, expressionMatrixImpl1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(3058, expressionMatrixImpl0.getNumberOfElements());
      
      // Undeclared exception!
      expressionMatrixImpl0.outNoStandardConnections(false, (ExpressionElementMapper) null);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7704034040001457
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      int int0 = expressionMatrixImpl0.getNumberOfElements();
      assertEquals(0, int0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      int int1 = expressionMatrixImpl0.addNewNode();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      String string0 = expressionMatrixImpl0.toString();
      assertEquals("MATRIX\n-----------------------\n | \n0| \n\nCONNECTIONS\n-----------------------\n", string0);
      assertNotNull(string0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int2 = expressionMatrixImpl0.addNewNode();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int3 = expressionMatrixImpl0.addNewNode();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(2, int3);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int4 = expressionMatrixImpl0.getValue(2500, 0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals((-1), int4);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      expressionMatrixImpl0.creatMatrix((-1));
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals((-1), expressionMatrixImpl0.getNumberOfElements());
      
      ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl();
      assertNotNull(expressionElementMapperItemImpl0);
      assertEquals(0, expressionElementMapperItemImpl0.getType());
      assertNull(expressionElementMapperItemImpl0.getID());
      
      expressionElementMapperItemImpl0.setType((-2065));
      assertEquals((-2065), expressionElementMapperItemImpl0.getType());
      assertNull(expressionElementMapperItemImpl0.getID());
      
      ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl();
      assertNotNull(expressionElementMapperImpl0);
      assertEquals(0, expressionElementMapperImpl0.size());
      
      expressionElementMapperImpl0.addItem(expressionElementMapperItemImpl0);
      assertEquals((-2065), expressionElementMapperItemImpl0.getType());
      assertNull(expressionElementMapperItemImpl0.getID());
      assertEquals(1, expressionElementMapperImpl0.size());
      
      expressionElementMapperImpl0.addItem(expressionElementMapperItemImpl0);
      assertEquals((-2065), expressionElementMapperItemImpl0.getType());
      assertNull(expressionElementMapperItemImpl0.getID());
      assertEquals(2, expressionElementMapperImpl0.size());
      
      String string1 = expressionElementMapperImpl0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, expressionElementMapperImpl0.size());
      
      expressionElementMapperImpl0.removeItem(0);
      assertEquals(1, expressionElementMapperImpl0.size());
      
      expressionElementMapperImpl0.removeItem(65);
      assertEquals(1, expressionElementMapperImpl0.size());
      
      String string2 = expressionMatrixImpl0.outNoStandardConnections(false, expressionElementMapperImpl0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals((-1), expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionElementMapperImpl0.size());
      
      expressionMatrixImpl0.setValue(2, 1048576, 1);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals((-1), expressionMatrixImpl0.getNumberOfElements());
      
      expressionMatrixImpl0.setValue(0, (-1), 1769);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals((-1), expressionMatrixImpl0.getNumberOfElements());
      
      expressionMatrixImpl0.setValue(2500, 1769, 1861);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals((-1), expressionMatrixImpl0.getNumberOfElements());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6174462069525877
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int0 = expressionMatrixImpl0.getNumberOfElements();
      assertEquals(0, int0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int1 = expressionMatrixImpl0.addNewNode();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      String string0 = expressionMatrixImpl0.toString();
      assertEquals("MATRIX\n-----------------------\n | \n0| \n\nCONNECTIONS\n-----------------------\n", string0);
      assertNotNull(string0);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int2 = expressionMatrixImpl0.addNewNode();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int3 = expressionMatrixImpl0.addNewNode();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(2, int3);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int4 = expressionMatrixImpl0.getValue(2500, 0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals((-1), int4);
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int5 = 3058;
      expressionMatrixImpl0.creatMatrix(3058);
      assertEquals(3058, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(3, expressionMatrixImpl0.getNumberOfNodes());
      
      ExpressionMatrixImpl expressionMatrixImpl1 = new ExpressionMatrixImpl();
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotNull(expressionMatrixImpl1);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      
      ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl();
      assertNotNull(expressionElementMapperItemImpl0);
      assertEquals(0, expressionElementMapperItemImpl0.getType());
      assertNull(expressionElementMapperItemImpl0.getID());
      
      expressionElementMapperItemImpl0.setType((-2065));
      assertNull(expressionElementMapperItemImpl0.getID());
      assertEquals((-2065), expressionElementMapperItemImpl0.getType());
      
      ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl();
      assertNotNull(expressionElementMapperImpl0);
      assertEquals(0, expressionElementMapperImpl0.size());
      
      expressionElementMapperImpl0.addItem(expressionElementMapperItemImpl0);
      assertNull(expressionElementMapperItemImpl0.getID());
      assertEquals((-2065), expressionElementMapperItemImpl0.getType());
      assertEquals(1, expressionElementMapperImpl0.size());
      
      expressionElementMapperItemImpl0.setID("MATRIX\n-----------------------\n | \n0| \n\nCONNECTIONS\n-----------------------\n");
      assertEquals("MATRIX\n-----------------------\n | \n0| \n\nCONNECTIONS\n-----------------------\n", expressionElementMapperItemImpl0.getID());
      assertEquals((-2065), expressionElementMapperItemImpl0.getType());
      
      expressionElementMapperImpl0.addItem(expressionElementMapperItemImpl0);
      assertEquals("MATRIX\n-----------------------\n | \n0| \n\nCONNECTIONS\n-----------------------\n", expressionElementMapperItemImpl0.getID());
      assertEquals((-2065), expressionElementMapperItemImpl0.getType());
      assertEquals(2, expressionElementMapperImpl0.size());
      
      String string1 = expressionMatrixImpl1.outNoStandardConnections(false, expressionElementMapperImpl0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      assertEquals(2, expressionElementMapperImpl0.size());
      
      String string2 = expressionElementMapperImpl0.toString();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, expressionElementMapperImpl0.size());
      
      int int6 = 1048576;
      int int7 = expressionMatrixImpl1.addNewNode();
      assertTrue(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertTrue(int7 == int0);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals(0, int7);
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl1.getNumberOfNodes());
      
      expressionElementMapperImpl0.removeItem(7);
      assertEquals(2, expressionElementMapperImpl0.size());
      
      String string3 = expressionElementMapperImpl0.toString();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, expressionElementMapperImpl0.size());
      
      expressionElementMapperImpl0.removeItem(65);
      assertEquals(2, expressionElementMapperImpl0.size());
      
      expressionElementMapperImpl0.setItem((-851), expressionElementMapperItemImpl0);
      assertEquals("MATRIX\n-----------------------\n | \n0| \n\nCONNECTIONS\n-----------------------\n", expressionElementMapperItemImpl0.getID());
      assertEquals((-2065), expressionElementMapperItemImpl0.getType());
      assertEquals(2, expressionElementMapperImpl0.size());
      
      String string4 = expressionMatrixImpl1.outNoStandardConnections(false, expressionElementMapperImpl0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(2, expressionElementMapperImpl0.size());
      
      String string5 = expressionMatrixImpl1.toString();
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals("MATRIX\n-----------------------\n | \n0| \n\nCONNECTIONS\n-----------------------\n", string5);
      assertNotNull(string5);
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl1.getNumberOfNodes());
      
      // Undeclared exception!
      try { 
        expressionMatrixImpl0.outNoStandardConnections(false, expressionElementMapperImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4184836619456564
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      MessageTracerImpl messageTracerImpl1 = new MessageTracerImpl();
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl0));
      assertNotNull(messageTracerImpl1);
      
      MessageTracerHandler messageTracerHandler0 = messageTracerImpl0.getHandler();
      assertFalse(messageTracerImpl0.equals((Object)messageTracerImpl1));
      assertNotSame(messageTracerImpl0, messageTracerImpl1);
      assertNull(messageTracerHandler0);
      
      messageTracerImpl1.setHandler((MessageTracerHandler) null);
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl0));
      assertNotSame(messageTracerImpl1, messageTracerImpl0);
      
      MessageTracerHandler messageTracerHandler1 = messageTracerImpl0.getHandler();
      assertFalse(messageTracerImpl0.equals((Object)messageTracerImpl1));
      assertNotSame(messageTracerImpl0, messageTracerImpl1);
      assertNull(messageTracerHandler1);
      
      messageTracerImpl1.setHandler((MessageTracerHandler) null);
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl0));
      assertNotSame(messageTracerImpl1, messageTracerImpl0);
      
      MessageTracerImpl messageTracerImpl2 = new MessageTracerImpl();
      assertFalse(messageTracerImpl2.equals((Object)messageTracerImpl0));
      assertFalse(messageTracerImpl2.equals((Object)messageTracerImpl1));
      assertNotNull(messageTracerImpl2);
      
      MessageTracerHandler messageTracerHandler2 = messageTracerImpl0.getHandler();
      assertFalse(messageTracerImpl0.equals((Object)messageTracerImpl2));
      assertFalse(messageTracerImpl0.equals((Object)messageTracerImpl1));
      assertNotSame(messageTracerImpl0, messageTracerImpl2);
      assertNotSame(messageTracerImpl0, messageTracerImpl1);
      assertNull(messageTracerHandler2);
      
      messageTracerImpl2.setHandler((MessageTracerHandler) null);
      assertFalse(messageTracerImpl2.equals((Object)messageTracerImpl0));
      assertFalse(messageTracerImpl2.equals((Object)messageTracerImpl1));
      assertNotSame(messageTracerImpl2, messageTracerImpl0);
      assertNotSame(messageTracerImpl2, messageTracerImpl1);
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl0.getMapper();
      assertFalse(messageTracerImpl0.equals((Object)messageTracerImpl2));
      assertFalse(messageTracerImpl0.equals((Object)messageTracerImpl1));
      assertNotSame(messageTracerImpl0, messageTracerImpl2);
      assertNotSame(messageTracerImpl0, messageTracerImpl1);
      assertNull(expressionElementMapper0);
      
      MessageTracerImpl messageTracerImpl3 = new MessageTracerImpl();
      assertFalse(messageTracerImpl3.equals((Object)messageTracerImpl0));
      assertFalse(messageTracerImpl3.equals((Object)messageTracerImpl1));
      assertFalse(messageTracerImpl3.equals((Object)messageTracerImpl2));
      assertNotNull(messageTracerImpl3);
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      assertNotNull(hL7MessageSegmentImpl0);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      HL7Segment hL7Segment0 = hL7MessageSegmentImpl0.getSegment();
      assertNull(hL7Segment0);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertNull(hL7MessageSegmentImpl0.getID());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      hL7MessageSegmentImpl1.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int1 = expressionMatrixImpl0.getValue(0, (-1113));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      expressionMatrixImpl0.setValue((-1), (-1), 2789);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      MessageTracerImpl messageTracerImpl4 = new MessageTracerImpl();
      assertFalse(messageTracerImpl4.equals((Object)messageTracerImpl3));
      assertFalse(messageTracerImpl4.equals((Object)messageTracerImpl1));
      assertFalse(messageTracerImpl4.equals((Object)messageTracerImpl0));
      assertFalse(messageTracerImpl4.equals((Object)messageTracerImpl2));
      assertNotNull(messageTracerImpl4);
      
      ExpressionMatrixImpl expressionMatrixImpl1 = new ExpressionMatrixImpl();
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotNull(expressionMatrixImpl1);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      
      expressionMatrixImpl1.setValue(2789, 2789, 108);
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      
      ExpressionElementMapper expressionElementMapper1 = messageTracerImpl1.getMapper();
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl2));
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl0));
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl4));
      assertFalse(messageTracerImpl1.equals((Object)messageTracerImpl3));
      assertNotSame(messageTracerImpl1, messageTracerImpl2);
      assertNotSame(messageTracerImpl1, messageTracerImpl0);
      assertNotSame(messageTracerImpl1, messageTracerImpl4);
      assertNotSame(messageTracerImpl1, messageTracerImpl3);
      assertNull(expressionElementMapper1);
      
      MessageTracerImpl messageTracerImpl5 = new MessageTracerImpl();
      assertFalse(messageTracerImpl5.equals((Object)messageTracerImpl0));
      assertFalse(messageTracerImpl5.equals((Object)messageTracerImpl2));
      assertFalse(messageTracerImpl5.equals((Object)messageTracerImpl4));
      assertFalse(messageTracerImpl5.equals((Object)messageTracerImpl3));
      assertFalse(messageTracerImpl5.equals((Object)messageTracerImpl1));
      assertNotNull(messageTracerImpl5);
      
      ExpressionElementMapper expressionElementMapper2 = messageTracerImpl5.getMapper();
      assertFalse(messageTracerImpl5.equals((Object)messageTracerImpl0));
      assertFalse(messageTracerImpl5.equals((Object)messageTracerImpl2));
      assertFalse(messageTracerImpl5.equals((Object)messageTracerImpl4));
      assertFalse(messageTracerImpl5.equals((Object)messageTracerImpl3));
      assertFalse(messageTracerImpl5.equals((Object)messageTracerImpl1));
      assertNotSame(messageTracerImpl5, messageTracerImpl0);
      assertNotSame(messageTracerImpl5, messageTracerImpl2);
      assertNotSame(messageTracerImpl5, messageTracerImpl4);
      assertNotSame(messageTracerImpl5, messageTracerImpl3);
      assertNotSame(messageTracerImpl5, messageTracerImpl1);
      assertNull(expressionElementMapper2);
      
      String string0 = expressionMatrixImpl1.outNoStandardConnections(true, (ExpressionElementMapper) null);
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
      
      int int2 = expressionMatrixImpl1.getValue(33, 755);
      assertFalse(expressionMatrixImpl1.equals((Object)expressionMatrixImpl0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(expressionMatrixImpl1, expressionMatrixImpl0);
      assertEquals((-1), int2);
      assertEquals(0, expressionMatrixImpl1.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl1.getNumberOfElements());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.557560461656866
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      String string0 = expressionMatrixImpl0.toString();
      assertEquals("MATRIX\n-----------------------\n | \n0| \n\nCONNECTIONS\n-----------------------\n", string0);
      assertNotNull(string0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int1 = expressionMatrixImpl0.addNewNode();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      
      String string1 = expressionMatrixImpl0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("MATRIX\n-----------------------\n | \n0| \n1| \n\nCONNECTIONS\n-----------------------\n", string1);
      assertNotNull(string1);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      
      expressionMatrixImpl0.setValue(1, 583, 1);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      
      expressionMatrixImpl0.setValue(671088640, (-3417), 1);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      
      int int2 = expressionMatrixImpl0.getValue(671088640, 1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      
      String string2 = expressionMatrixImpl0.outNoStandardConnections(false, (ExpressionElementMapper) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
      
      int int3 = expressionMatrixImpl0.getValue(778, (-378));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(2, expressionMatrixImpl0.getNumberOfNodes());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      expressionMatrixImpl0.creatMatrix(28);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(28, expressionMatrixImpl0.getNumberOfElements());
      
      int int0 = expressionMatrixImpl0.getNumberOfElements();
      assertEquals(28, int0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(28, expressionMatrixImpl0.getNumberOfElements());
      
      int int1 = expressionMatrixImpl0.addNewNode();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(28, expressionMatrixImpl0.getNumberOfElements());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7267720320570337
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      assertNotNull(expressionMatrixImpl0);
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      assertEquals(0, expressionMatrixImpl0.getNumberOfElements());
      
      HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl();
      assertNotNull(hL7MessageGroupImpl0);
      assertFalse(hL7MessageGroupImpl0.isRequired());
      assertFalse(hL7MessageGroupImpl0.isRepeatable());
      assertEquals("", hL7MessageGroupImpl0.getAdditional());
      assertEquals(0, hL7MessageGroupImpl0.size());
      assertEquals(0, hL7MessageGroupImpl0.getType());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      assertNotNull(hL7MessageSegmentImpl0);
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      String string0 = hL7MessageSegmentImpl0.toString();
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string0);
      assertNotNull(string0);
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotNull(hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      
      HL7Segment hL7Segment0 = hL7MessageSegmentImpl1.getSegment();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7Segment0);
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      HL7Segment hL7Segment1 = hL7MessageSegmentImpl1.getSegment();
      assertFalse(hL7MessageSegmentImpl1.equals((Object)hL7MessageSegmentImpl0));
      assertNotSame(hL7MessageSegmentImpl1, hL7MessageSegmentImpl0);
      assertNull(hL7Segment1);
      assertFalse(hL7MessageSegmentImpl1.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl1.getType());
      assertNull(hL7MessageSegmentImpl1.getID());
      assertFalse(hL7MessageSegmentImpl1.isRequired());
      
      hL7MessageSegmentImpl0.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertNull(hL7MessageSegmentImpl0.getID());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      
      HL7MessageSegmentImpl hL7MessageSegmentImpl2 = new HL7MessageSegmentImpl();
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotNull(hL7MessageSegmentImpl2);
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      hL7MessageSegmentImpl0.setID("|x/g|->m");
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertFalse(hL7MessageSegmentImpl0.isRequired());
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertEquals("|x/g|->m", hL7MessageSegmentImpl0.getID());
      
      String string1 = hL7MessageSegmentImpl2.toString();
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string1);
      assertNotNull(string1);
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      expressionMatrixImpl0.creatMatrix((-1115));
      assertEquals((-1115), expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      hL7MessageSegmentImpl2.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      hL7MessageSegmentImpl2.setRequired(false);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      hL7MessageSegmentImpl0.setRequired(true);
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      assertEquals("|x/g|->m", hL7MessageSegmentImpl0.getID());
      
      hL7MessageSegmentImpl2.setRequired(false);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      expressionMatrixImpl0.creatMatrix(797);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      String string2 = expressionMatrixImpl0.toString();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(0, expressionMatrixImpl0.getNumberOfNodes());
      
      String string3 = hL7MessageSegmentImpl2.toString();
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertEquals("segment id=\"null\" repeatable =\"false\" required =\"false\"", string3);
      assertNotNull(string3);
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      HL7Segment hL7Segment2 = hL7MessageSegmentImpl0.getSegment();
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl1));
      assertFalse(hL7MessageSegmentImpl0.equals((Object)hL7MessageSegmentImpl2));
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl1);
      assertNotSame(hL7MessageSegmentImpl0, hL7MessageSegmentImpl2);
      assertNull(hL7Segment2);
      assertFalse(hL7MessageSegmentImpl0.isRepeatable());
      assertEquals(1, hL7MessageSegmentImpl0.getType());
      assertTrue(hL7MessageSegmentImpl0.isRequired());
      assertEquals("|x/g|->m", hL7MessageSegmentImpl0.getID());
      
      hL7MessageSegmentImpl2.setSegment((HL7Segment) null);
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl0));
      assertFalse(hL7MessageSegmentImpl2.equals((Object)hL7MessageSegmentImpl1));
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl0);
      assertNotSame(hL7MessageSegmentImpl2, hL7MessageSegmentImpl1);
      assertFalse(hL7MessageSegmentImpl2.isRequired());
      assertFalse(hL7MessageSegmentImpl2.isRepeatable());
      assertNull(hL7MessageSegmentImpl2.getID());
      assertEquals(1, hL7MessageSegmentImpl2.getType());
      
      int int0 = expressionMatrixImpl0.addNewNode();
      assertEquals(0, int0);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int1 = expressionMatrixImpl0.getValue(0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      expressionMatrixImpl0.setValue((-1), (-1), (-1));
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      assertNotNull(messageTracerImpl0);
      
      expressionMatrixImpl0.setValue(0, 0, 67);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      ExpressionElementMapper expressionElementMapper0 = messageTracerImpl0.getMapper();
      assertNull(expressionElementMapper0);
      
      String string4 = expressionMatrixImpl0.outNoStandardConnections(true, (ExpressionElementMapper) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
      
      int int2 = expressionMatrixImpl0.getValue(0, 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(67, int2);
      assertEquals(797, expressionMatrixImpl0.getNumberOfElements());
      assertEquals(1, expressionMatrixImpl0.getNumberOfNodes());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2033083203626729
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      expressionMatrixImpl0.getNumberOfElements();
      expressionMatrixImpl0.addNewNode();
      expressionMatrixImpl0.toString();
      expressionMatrixImpl0.getNumberOfElements();
      expressionMatrixImpl0.getValue(1863, 0);
      expressionMatrixImpl0.creatMatrix(3058);
      ExpressionMatrixImpl expressionMatrixImpl1 = new ExpressionMatrixImpl();
      expressionMatrixImpl1.creatMatrix((-802));
      expressionMatrixImpl0.creatMatrix(0);
      expressionMatrixImpl0.addNewNode();
      expressionMatrixImpl1.creatMatrix((-1));
      expressionMatrixImpl1.toString();
      expressionMatrixImpl0.creatMatrix(3058);
      expressionMatrixImpl0.addNewNode();
      // Undeclared exception!
      expressionMatrixImpl0.toString();
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.255529673224127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      expressionMatrixImpl0.getNumberOfElements();
      expressionMatrixImpl0.addNewNode();
      expressionMatrixImpl0.toString();
      expressionMatrixImpl0.addNewNode();
      expressionMatrixImpl0.addNewNode();
      expressionMatrixImpl0.getValue(1863, 0);
      expressionMatrixImpl0.creatMatrix(3058);
      expressionMatrixImpl0.addNewNode();
      ExpressionMatrixImpl expressionMatrixImpl1 = new ExpressionMatrixImpl();
      expressionMatrixImpl1.creatMatrix(3);
      expressionMatrixImpl1.creatMatrix(3982);
      // Undeclared exception!
      expressionMatrixImpl0.toString();
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2033083203626729
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      expressionMatrixImpl0.getNumberOfElements();
      expressionMatrixImpl0.addNewNode();
      expressionMatrixImpl0.toString();
      expressionMatrixImpl0.getNumberOfElements();
      expressionMatrixImpl0.addNewNode();
      expressionMatrixImpl0.getValue(1863, 0);
      expressionMatrixImpl0.creatMatrix(3058);
      ExpressionMatrixImpl expressionMatrixImpl1 = new ExpressionMatrixImpl();
      ExpressionMatrixImpl expressionMatrixImpl2 = new ExpressionMatrixImpl();
      expressionMatrixImpl2.creatMatrix(1);
      expressionMatrixImpl2.creatMatrix((-1));
      expressionMatrixImpl1.toString();
      expressionMatrixImpl0.addNewNode();
      // Undeclared exception!
      expressionMatrixImpl0.toString();
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6762349391347304
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      expressionMatrixImpl0.creatMatrix(1215);
      expressionMatrixImpl0.getValue(1932, 1215);
      ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl();
      expressionElementMapperImpl0.removeItem((-1));
      ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl();
      expressionElementMapperImpl0.addItem(expressionElementMapperItemImpl0);
      ExpressionElementMapperItemImpl expressionElementMapperItemImpl1 = new ExpressionElementMapperItemImpl();
      expressionElementMapperImpl0.setItem(2566, expressionElementMapperItemImpl0);
      expressionElementMapperImpl0.addItem(expressionElementMapperItemImpl0);
      expressionElementMapperImpl0.removeItem(2875);
      expressionElementMapperImpl0.removeItem(42);
      expressionMatrixImpl0.outNoStandardConnections(true, expressionElementMapperImpl0);
      expressionMatrixImpl0.outNoStandardConnections(false, expressionElementMapperImpl0);
      expressionMatrixImpl0.setValue(536870912, (-1), 2566);
      expressionMatrixImpl0.addNewNode();
      expressionMatrixImpl0.addNewNode();
      ExpressionElementMapperImpl expressionElementMapperImpl1 = new ExpressionElementMapperImpl();
      // Undeclared exception!
      try { 
        expressionMatrixImpl0.outNoStandardConnections(true, expressionElementMapperImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4681399390162087
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      MessageTracerImpl messageTracerImpl1 = new MessageTracerImpl();
      messageTracerImpl0.getHandler();
      messageTracerImpl1.setHandler((MessageTracerHandler) null);
      MessageTracerImpl messageTracerImpl2 = new MessageTracerImpl();
      messageTracerImpl0.getHandler();
      messageTracerImpl2.setHandler((MessageTracerHandler) null);
      messageTracerImpl0.getMapper();
      MessageTracerImpl messageTracerImpl3 = new MessageTracerImpl();
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      MessageTracerImpl messageTracerImpl4 = new MessageTracerImpl();
      expressionMatrixImpl0.addNewNode();
      expressionMatrixImpl0.getValue(0, 0);
      expressionMatrixImpl0.setValue(65, (-1), (-1));
      MessageTracerImpl messageTracerImpl5 = new MessageTracerImpl();
      expressionMatrixImpl0.setValue(560, (-1107), 67);
      messageTracerImpl5.getMapper();
      String string0 = expressionMatrixImpl0.outNoStandardConnections(false, (ExpressionElementMapper) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4241299173467734
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      expressionMatrixImpl0.addNewNode();
      expressionMatrixImpl0.getValue(37, 1);
      expressionMatrixImpl0.setValue(0, (-486), (-3397));
      MessageTracerImpl messageTracerImpl1 = new MessageTracerImpl();
      expressionMatrixImpl0.setValue(0, 0, 67);
      messageTracerImpl0.getMapper();
      messageTracerImpl1.getMapper();
      expressionMatrixImpl0.outNoStandardConnections(false, (ExpressionElementMapper) null);
      expressionMatrixImpl0.outNoStandardConnections(true, (ExpressionElementMapper) null);
      expressionMatrixImpl0.getValue(2564, (-6313));
      ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl();
      ExpressionMatrixImpl expressionMatrixImpl1 = new ExpressionMatrixImpl();
      expressionMatrixImpl1.outNoStandardConnections(true, (ExpressionElementMapper) null);
      String string0 = expressionMatrixImpl1.outNoStandardConnections(false, (ExpressionElementMapper) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      MessageTracerImpl messageTracerImpl1 = new MessageTracerImpl();
      messageTracerImpl0.getHandler();
      messageTracerImpl1.setHandler((MessageTracerHandler) null);
      MessageTracerImpl messageTracerImpl2 = new MessageTracerImpl();
      messageTracerImpl0.getHandler();
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      expressionMatrixImpl0.getValue(0, (-1111));
      expressionMatrixImpl0.setValue(1222, 1222, 1411);
      MessageTracerImpl messageTracerImpl3 = new MessageTracerImpl();
      expressionMatrixImpl0.setValue(67, (-1224), 67);
      messageTracerImpl1.getMapper();
      messageTracerImpl0.getMapper();
      expressionMatrixImpl0.outNoStandardConnections(true, (ExpressionElementMapper) null);
      messageTracerImpl0.getMapper();
      expressionMatrixImpl0.outNoStandardConnections(false, (ExpressionElementMapper) null);
      expressionMatrixImpl0.getValue(0, 1420);
      ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl();
      String string0 = expressionMatrixImpl0.outNoStandardConnections(true, expressionElementMapperImpl0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      expressionMatrixImpl0.creatMatrix((-30));
      expressionMatrixImpl0.getNumberOfNodes();
      expressionMatrixImpl0.getNumberOfElements();
      expressionMatrixImpl0.toString();
      // Undeclared exception!
      try { 
        expressionMatrixImpl0.addNewNode();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.browsersoft.openhre.hl7.impl.regular.ExpressionMatrixImpl", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      expressionMatrixImpl0.creatMatrix((-30));
      expressionMatrixImpl0.getNumberOfNodes();
      expressionMatrixImpl0.getNumberOfElements();
      expressionMatrixImpl0.toString();
      expressionMatrixImpl0.creatMatrix(1453);
      int int0 = expressionMatrixImpl0.getNumberOfElements();
      assertEquals(1453, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      MessageTracerImpl messageTracerImpl1 = new MessageTracerImpl();
      messageTracerImpl0.getHandler();
      messageTracerImpl1.setHandler((MessageTracerHandler) null);
      MessageTracerImpl messageTracerImpl2 = new MessageTracerImpl();
      messageTracerImpl0.getHandler();
      messageTracerImpl2.setHandler((MessageTracerHandler) null);
      messageTracerImpl0.getMapper();
      MessageTracerImpl messageTracerImpl3 = new MessageTracerImpl();
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      MessageTracerImpl messageTracerImpl4 = new MessageTracerImpl();
      messageTracerImpl4.getMapper();
      expressionMatrixImpl0.setValue(0, 0, 0);
      MessageTracerImpl messageTracerImpl5 = new MessageTracerImpl();
      expressionMatrixImpl0.setValue(67, 2260, 0);
      messageTracerImpl0.getMapper();
      expressionMatrixImpl0.outNoStandardConnections(true, (ExpressionElementMapper) null);
      int int0 = expressionMatrixImpl0.getValue(761, 777);
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4941751382893083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl();
      MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl();
      messageTracerImpl0.getMapper();
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl();
      HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl();
      HL7MessageGroupImpl hL7MessageGroupImpl1 = new HL7MessageGroupImpl();
      HL7MessageSegmentImpl hL7MessageSegmentImpl1 = new HL7MessageSegmentImpl();
      expressionMatrixImpl0.getValue((-843), 2875);
      ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl();
      expressionElementMapperImpl0.removeItem((-1265));
      ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl();
      expressionElementMapperImpl0.addItem(expressionElementMapperItemImpl0);
      expressionElementMapperImpl0.addItem(expressionElementMapperItemImpl0);
      expressionElementMapperImpl0.removeItem(1048576);
      expressionElementMapperImpl0.removeItem(2875);
      expressionMatrixImpl0.outNoStandardConnections(false, expressionElementMapperImpl0);
      expressionMatrixImpl0.outNoStandardConnections(false, (ExpressionElementMapper) null);
      expressionMatrixImpl0.setValue(51, 2982, 2875);
      expressionMatrixImpl0.addNewNode();
      expressionMatrixImpl0.addNewNode();
      ExpressionElementMapperImpl expressionElementMapperImpl1 = new ExpressionElementMapperImpl();
      String string0 = expressionMatrixImpl0.outNoStandardConnections(false, expressionElementMapperImpl0);
      assertEquals("", string0);
  }
}
