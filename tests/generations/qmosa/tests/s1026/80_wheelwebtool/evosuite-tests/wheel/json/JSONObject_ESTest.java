/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 18:34:52 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4482428339600277
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "`,d\"X%sgAwI";
      JSONObject jSONObject1 = jSONObject0.put("`,d\"X%sgAwI", true);
      jSONObject0.optLong("`,d\"X%sgAwI");
      jSONObject0.getBoolean("`,d\"X%sgAwI");
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      try { 
        jSONObject1.getJSONObject("co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"co\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.304860093255205
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "`,d\"X%sgAwI";
      JSONObject jSONObject1 = jSONObject0.put("`,d\"X%sgAwI", false);
      jSONObject0.optLong("`,d\"X%sgAwI");
      jSONObject0.getBoolean("`,d\"X%sgAwI");
      try { 
        jSONObject1.append("`,d\"X%sgAwI", "`,d\"X%sgAwI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[`,d\"X%sgAwI] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2363517877843337
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator1);
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      linkedList0.replaceAll(unaryOperator0);
      boolean boolean0 = new Boolean("");
      Double double0 = new Double(0.0);
      Double.max(Double.NaN, 0.0);
      double double1 = new Double(0.0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(double0);
      Double double2 = new Double(184.340033191);
      Double.isFinite(3880.54939);
      JSONObject jSONObject1 = jSONObject0.accumulate("", double2);
      jSONObject1.getDouble("");
      try { 
        jSONObject0.getString("mN4 (7,2yA]Vq?6ei");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mN4 (7,2yA]Vq?6ei\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.568413258053965
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      Predicate<Object> predicate5 = predicate3.negate();
      Boolean boolean0 = new Boolean("");
      Byte byte1 = new Byte((byte)90);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Double double0 = new Double((byte)90);
      Predicate.isEqual((Object) double0);
      predicate6.negate();
      Predicate<Object> predicate8 = predicate4.or(predicate1);
      predicate8.negate();
      predicate2.or(predicate8);
      Predicate<Object> predicate9 = predicate8.and(predicate5);
      predicate3.and(predicate5);
      Predicate<Object> predicate10 = predicate6.negate();
      Float float0 = new Float((float) (byte)90);
      predicate6.test(float0);
      Boolean boolean1 = new Boolean(false);
      predicate9.or(predicate0);
      predicate7.negate();
      Predicate<Object> predicate11 = predicate7.negate();
      predicate11.test(predicate9);
      predicate10.or(predicate7);
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
      
      jSONObject0.put("", 9);
      long long0 = jSONObject0.getLong("");
      assertEquals(9L, long0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6185093718745267
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-3165));
      Integer.toUnsignedLong((-3165));
      JSONObject jSONObject1 = jSONObject0.put("6l97# 6dH:Q>:,d@/", (Object) integer0);
      JSONObject.valueToString(jSONObject0);
      jSONObject1.getLong("6l97# 6dH:Q>:,d@/");
      jSONObject0.toString((-3165), (-3165));
      JSONObject jSONObject2 = jSONObject1.put("W ", (Collection) null);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.455394993624801
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Wp%jw&8R>yn& a DCb";
      Collection<JSONObject> collection0 = null;
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.accumulate("Wp%jw&8R>yn& a DCb", jSONArray0);
      Integer integer0 = new Integer((-370));
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(integer0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.090153454580311
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      hashMap0.clear();
      hashMap0.clear();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      Float float0 = new Float(603.3003F);
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(65, (-1152));
      String string1 = jSONObject0.toString();
      assertEquals("{}", string1);
      
      Integer integer0 = new Integer(65);
      JSONObject jSONObject1 = new JSONObject();
      Integer integer1 = Integer.valueOf((-414));
      jSONObject1.accumulate("{}", integer1);
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONObject", 0);
      jSONObject1.getInt("{}");
      boolean boolean0 = jSONObject2.optBoolean("getsubstring");
      assertFalse(boolean0);
      
      String string2 = jSONObject1.toString((-1152));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = jSONObject1.toString();
      assertFalse(string3.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.563809960838155
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float float0 = new Float(5267.15F);
      Float.sum(5267.15F, 949.19F);
      Float float1 = new Float(1610.32F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("UOuPp9Y;'%@P002Ys(", (Object) float1);
      String[] stringArray0 = new String[2];
      String string0 = "HXJ~eLF8X5Y";
      stringArray0[0] = "HXJ~eLF8X5Y";
      stringArray0[1] = "Mox9";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.optLong("UOuPp9Y;'%@P002Ys(");
      try { 
        jSONObject1.getBoolean("HXJ~eLF8X5Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HXJ~eLF8X5Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"\"";
      stringArray0[2] = "\"\"";
      hashMap1.keySet();
      String string0 = JSONObject.quote("Z{</");
      assertEquals("\"Z{<\\/\"", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.946472354355371
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Short.valueOf((short) (-1736));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("Ez", stringArray0);
      jSONObject0.optLong("UncRyaHdY'$5{g)C\"}e", (long) (short) (-1736));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = new Boolean("\n");
      jSONObject0.optInt("Null pointer");
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (Collection) linkedList0);
      String string0 = jSONObject0.optString("\n");
      jSONObject0.optInt("\n", 0);
      JSONObject.valueToString(jSONObject1, 0, 0);
      Double double0 = new Double(0);
      JSONObject jSONObject2 = jSONObject0.put("=`<}?1gjwX?O$hU_&", (-1736L));
      jSONObject2.remove("Ez");
      Float float0 = new Float((float) (short) (-1736));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5231606459393707
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.add("");
      Double double0 = new Double(0.0);
      Double double1 = new Double((-905.190951542666));
      Double.min(0.0, Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double1);
      Object object0 = JSONObject.NULL;
      jSONObject0.put("a^8L ?YvVzIX~A-kI", (Object) double1);
      jSONObject0.optLong("a^8L ?YvVzIX~A-kI");
      jSONObject0.optDouble("");
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7415496467675853
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.add("");
      Double double0 = new Double(0.0);
      Double.max(Double.NaN, 0.0);
      Double.min(0.0, (-223.454436));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(double0);
      assertEquals(3, jSONObject0.length());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Byte byte0 = new Byte((byte) (-70));
      String string0 = JSONObject.valueToString(linkedList1);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1148964290792045
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte)75);
      String[] stringArray0 = new String[12];
      String string0 = "";
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("Ex!ected a ',' o= ']");
      JSONObject jSONObject1 = jSONObject0.append("JSONAXrray[", boolean0);
      jSONObject0.put("JSONAXrray[", true);
      JSONArray jSONArray0 = new JSONArray();
      Byte byte1 = new Byte((byte)75);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      try { 
        jSONObject1.getJSONArray("JSONAXrray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONAXrray[\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double double0 = new Double(0.0);
      Long long0 = new Long(1L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate6 = predicate1.and(predicate3);
      Predicate<Object> predicate7 = predicate4.or(predicate6);
      predicate6.or(predicate0);
      Predicate<Object> predicate8 = predicate5.and(predicate4);
      predicate7.negate();
      Boolean boolean0 = new Boolean("");
      Predicate<Object> predicate9 = Predicate.isEqual((Object) boolean0);
      Predicate<Object> predicate10 = predicate9.or(predicate0);
      predicate10.test(predicate0);
      predicate8.test("");
      predicate0.and(predicate2);
      Predicate<Object> predicate11 = predicate2.negate();
      predicate11.and(predicate0);
      Byte byte0 = new Byte((byte)20);
      predicate10.test(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add((String) null);
      Double double1 = new Double((byte)20);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.089518822583464
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Short short0 = new Short((short)133);
      Short short1 = new Short((short)133);
      StringWriter stringWriter0 = new StringWriter(100);
      StringWriter stringWriter1 = new StringWriter(100);
      JSONObject.quote("*X=c\">~BO");
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      BiFunction<Object, Boolean, Boolean> biFunction0 = (BiFunction<Object, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(boolean0, biFunction0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("gz/' qOl$3'O`vT |", (Collection) linkedList0);
      jSONObject0.optLong("[:*?]Vcr-2Py3bad5v");
      jSONObject1.optString("gz/' qOl$3'O`vT |", "[:*?]Vcr-2Py3bad5v");
      try { 
        jSONObject1.get("wheel.json.JSONArray@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray@0000000002\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      hashMap0.put((Object) null, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      // Undeclared exception!
      try { 
        jSONObject0.toString(431);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5952629603288848
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(0.0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      predicate3.or(predicate0);
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      predicate6.or(predicate5);
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      predicate8.and(predicate2);
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate6.negate();
      predicate9.test(predicate4);
      Predicate<Object> predicate10 = predicate2.and(predicate7);
      predicate3.and(predicate6);
      Byte byte0 = new Byte((byte)41);
      predicate10.test(predicate1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String string0 = "";
      linkedList1.add("");
      Double double1 = new Double(0.0);
      Double.max(0.0, 0.0);
      JSONObject jSONObject0 = new JSONObject();
      Byte byte1 = new Byte((byte)41);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2114042811092958
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.append("JSONArray[", boolean0);
      Double double0 = new Double((-1.0));
      String string0 = "f2!5qPy$71(mF:AY[";
      double double1 = (-63.1);
      jSONObject0.put("", false);
      JSONObject.doubleToString((-63.1));
      jSONObject0.accumulate("", "f2!5qPy$71(mF:AY[");
      try { 
        jSONObject1.getJSONObject("i9e^ci/|4-+/=E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i9e^ci/|4-+/=E\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3401196061221263
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      Float.sum((-2581.5747F), (-1405.27F));
      Float.sum((-1.0F), (-3986.8447F));
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<JSONArray, Double> hashMap4 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Float float0 = new Float(2712.1504F);
      HashMap<Object, Boolean> hashMap5 = new HashMap<Object, Boolean>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('');
      JSONObject.valueToString(hashMap1);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "{}", 16, (-1604));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      HashMap<Integer, Short> hashMap2 = new HashMap<Integer, Short>();
      hashMap2.clear();
      HashMap<Integer, Short> hashMap3 = new HashMap<Integer, Short>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "~'o-2<K+i";
      stringArray0[1] = "PiJ";
      stringArray0[2] = " of ";
      stringArray0[3] = "3E?R,r&=#}?@+>n";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      try { 
        jSONObject0.accumulate((String) null, "PiJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Float.sum(0.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Boolean.logicalXor(false, true);
      Double.max(0.0, 0.0);
      HashMap<Double, Boolean> hashMap2 = new HashMap<Double, Boolean>();
      Double double0 = new Double(0.0);
      BiFunction<Double, Object, Boolean> biFunction0 = (BiFunction<Double, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyDouble() , any());
      hashMap2.compute(double0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0L);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      
      Boolean.valueOf("_<g}#AP?v4({:*>");
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Short.valueOf((short) (-1736));
      Double.max(Double.NaN, 333.1220275773072);
      Double double0 = new Double(Double.NaN);
      Double.isFinite(0.0);
      Double.isFinite((short) (-1736));
      Double.sum(0.0, 1311.60783408764);
      Double.max((-2619.9814), 0.0);
      Double.max(333.1220275773072, 0.0);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.168883850680045
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Short.valueOf((short) (-1736));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("Ez", stringArray0);
      String string0 = "UncRyaHdY'$5{g)C\"}e";
      jSONObject0.optLong("UncRyaHdY'$5{g)C\"}e", (long) (short) (-1736));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = new Boolean("\n");
      jSONObject0.optInt("Null pointer");
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (Collection) linkedList0);
      jSONObject0.optString("\n");
      jSONObject0.optInt("\n", 0);
      JSONObject.valueToString("Ez");
      jSONObject1.append("XC(P MPkTKJd+a", "{");
      Double double0 = new Double(0);
      JSONObject jSONObject2 = jSONObject0.put("=`<}?1gjwX?O$hU_&", (-1736L));
      jSONObject2.remove("Ez");
      Long long0 = new Long(0);
      jSONObject2.toString(0, 0);
      jSONObject2.toString();
      Integer integer0 = new Integer(10);
      JSONObject jSONObject3 = jSONObject1.accumulate("{\n\"java.lang.String@0000000006\": [],\n\"java.lang.String@0000000011\": java.lang.Long@0000000012,\n\"java.lang.String@0000000010\": [\"java.lang.String@0000000013\"]\n}", integer0);
      jSONObject3.put("istoString", (int) (short) (-1736));
      try { 
        jSONObject3.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4114603940580803
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float.sum(624.0F, 0.0F);
      Float float0 = new Float(1392.2623F);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Boolean boolean0 = new Boolean((String) null);
      JSONObject jSONObject1 = jSONObject0.put("U1l%#0%x6a%s~0?Dj", (Collection) linkedList0);
      jSONObject1.optInt("U1l%#0%x6a%s~0?Dj", 2);
      Float float1 = new Float((-334.16));
      JSONObject jSONObject2 = jSONObject1.putOpt("U1l%#0%x6a%s~0?Dj", "getdoubleToRawLongBits");
      Object object0 = JSONObject.NULL;
      String string0 = "4~\"&B%+";
      Double double0 = new Double(2495.0);
      jSONObject2.append("4~\"&B%+", double0);
      try { 
        jSONObject1.put((String) null, (long) 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.782345204105233
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      JSONObject jSONObject0 = new JSONObject((Object) "%");
      jSONObject0.isNull("");
      jSONObject0.optBoolean("%");
      jSONObject0.optString("Null pointer");
      Double double0 = new Double((-1596L));
      JSONObject jSONObject1 = jSONObject0.append("%", "");
      StringWriter stringWriter0 = new StringWriter(340);
      StringWriter stringWriter1 = stringWriter0.append('/');
      stringWriter1.append((CharSequence) "%");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("", (Collection) linkedList0);
      jSONObject1.optLong("Pega]@Y");
      assertEquals(5, jSONObject1.length());
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 32, 11);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4295976198950404
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Short short0 = new Short((short)123);
      Short.toUnsignedInt((short)123);
      Short.toUnsignedLong((short)123);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("iM!s%n3Vm|uF&", (Collection) linkedList0);
      Double double0 = new Double(234.293827);
      Double.isFinite(392.91651);
      JSONObject.valueToString(double0, 123, 92);
      Short short1 = new Short((short)13);
      JSONObject jSONObject2 = jSONObject1.append("] is not a JSONArray.", short1);
      JSONArray jSONArray0 = jSONObject2.optJSONArray("] is not a JSONArray.");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>(1);
      Float float0 = new Float(0.0);
      String string0 = "?V7 /A\\L!I5";
      hashMap0.put(float0, "?V7 /AL!I5");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8169148716163352
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "dou";
      stringArray0[1] = "dou";
      stringArray0[2] = "false";
      stringArray0[3] = "dou";
      stringArray0[4] = "dou";
      stringArray0[5] = "dou";
      stringArray0[7] = "dou";
      stringArray0[8] = "getgetNames";
      JSONObject jSONObject0 = new JSONObject("dou", stringArray0);
      jSONObject0.optDouble("D)MfM!bui");
      jSONObject0.optInt("dou");
      JSONObject jSONObject1 = jSONObject0.accumulate("z X ", "dou");
      Object object0 = new Object();
      jSONObject1.putOpt("dou", object0);
      JSONObject jSONObject2 = jSONObject0.put("dou", (Collection) null);
      jSONObject0.optLong("?A2Ae(5azYD*'7", (long) 0);
      JSONObject jSONObject3 = jSONObject2.put(")uvHZ3P@\\2ox/J|]b#", (Collection) null);
      try { 
        jSONObject3.getDouble("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dou\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1119905309582148
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double(940.4639129);
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((-2407.0908F));
      Float.sum((-2407.0908F), (-2407.0908F));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      String string0 = "\\2#+M0/}%MxTRzn";
      JSONObject jSONObject1 = jSONObject0.put("\u0002#+M0/}%MxTRzn", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("\u0002#+M0/}%MxTRzn");
      try { 
        jSONObject2.getJSONArray("\u0002#+M0/}%MxTRzn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\u0002#+M0/}%MxTRzn\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.425929408965059
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Short short0 = new Short((short)2);
      hashMap0.put((Integer) null, short0);
      Short short1 = new Short((short)2);
      Short short2 = hashMap0.getOrDefault((Object) null, short1);
      Double double0 = new Double(199.0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short.compare((short)2, (short) (-452));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("ke", (Collection) linkedList0);
      Short.toUnsignedInt((short)9);
      short short3 = (short) (-1734);
      Short short4 = new Short((short) (-1734));
      JSONObject.valueToString(short2, 787, (-2559));
      // Undeclared exception!
      try { 
        jSONObject0.toString((int) (short)2, 429);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5828234966151618
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      JSONObject jSONObject0 = new JSONObject((Object) "%");
      jSONObject0.optBoolean("%");
      Double double0 = new Double(1.0);
      JSONObject jSONObject1 = jSONObject0.append("", "%");
      StringWriter stringWriter0 = new StringWriter(115);
      stringWriter0.append((CharSequence) "");
      stringWriter0.append((CharSequence) "%");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Double.max(115, 1.0);
      Double.max(115.0, 115);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject(object0);
      JSONObject.valueToString(linkedList0, (-2888), (-2888));
      Double double1 = new Double(1.0);
      JSONObject.doubleToString(1104.595670814382);
      jSONObject1.putOpt("%", stringWriter0);
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0867504000822312
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Short.valueOf((short) (-1736));
      Double.max(0.0, (short) (-1736));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("\b");
      linkedList0.add("iscompare");
      Double double0 = new Double((-4608.8411));
      Double.max(1.0, (-4608.8411));
      Double.max(1.0, 2014.2100919);
      Double double1 = new Double((-1308.6661497));
      JSONObject jSONObject0 = new JSONObject((Object) "\b");
      jSONObject0.optJSONObject("\"\"");
      String string0 = JSONObject.valueToString(linkedList0, (-62473106), (-62473106));
      assertNotNull(string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3909713186946226
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = JSONObject.getNames((Object) "");
      Boolean.getBoolean("NEsVXdM");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = new JSONObject(long0, stringArray0);
      jSONObject1.isNull("<4j8");
      String string1 = "Null pointer";
      Long.getLong("");
      JSONObject jSONObject2 = new JSONObject("Null pointer", stringArray0);
      String string2 = "o3E};=m";
      jSONObject2.optString("o3E};=m");
      Double double0 = new Double((-1596L));
      try { 
        Integer.valueOf("getcopyValueOf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getcopyValueOf\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.226017731838283
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Short.valueOf((short) (-1736));
      String string0 = "\\b";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "YeX4u";
      JSONObject jSONObject0 = new JSONObject("Ez", stringArray0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject.valueToString("YeX4u");
      Float float0 = new Float((double) (short) (-1736));
      linkedList0.add(float0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.removeLastOccurrence("\"java.lang.String@0000000002\"");
      jSONObject0.put("\b", (Collection) linkedList0);
      int int0 = 1760;
      Integer integer0 = new Integer(1760);
      JSONObject jSONObject1 = jSONObject0.accumulate("\b", integer0);
      try { 
        jSONObject1.get("YeX4u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"YeX4u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3695925453395437
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Boolean.valueOf("Expected a ',' or ']'");
      JSONObject jSONObject1 = jSONObject0.put("{g?fG8COrXVp", (Object) byte0);
      jSONObject0.optInt("Expected a ',' or ']'");
      jSONObject0.optDouble(":_YA=Pak<;@3STJ");
      jSONObject1.optDouble("{g?fG8COrXVp", 0.0);
      jSONObject0.optString("G0H5T|p", (String) null);
      int int0 = new Byte((byte)90);
      assertEquals((byte)90, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6332004508871008
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Short short0 = new Short((short)3341);
      hashMap0.put((Integer) null, short0);
      Short.compare((short)2716, (short)2716);
      Short short1 = new Short((short)3341);
      hashMap0.getOrDefault((Object) null, short1);
      Double double0 = new Double(199.0);
      Double.max(199.0, 1611.0);
      Double.max((-1.0), Double.NaN);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-2905), (-2905));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("]L.a");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ]L.a
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8169780883071533
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      JSONObject jSONObject0 = new JSONObject((Object) "%");
      jSONObject0.optBoolean("%");
      Double double0 = new Double(1.0);
      JSONObject jSONObject1 = jSONObject0.append("", "%");
      StringWriter stringWriter0 = new StringWriter(128);
      stringWriter0.append('m');
      stringWriter0.append((CharSequence) "%");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject2.optBoolean("0");
      Short short0 = new Short((short) (-1734));
      JSONObject.valueToString(short0, 45, 768);
      jSONObject0.toString((-935), 45);
      jSONObject1.opt((String) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject1.put("TF]]:#", object0);
      jSONObject3.put("1", 1.0);
      assertEquals(6, jSONObject1.length());
      assertEquals(6, jSONObject3.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float.sum(624.0F, 0.0F);
      Float float0 = new Float(1392.2623F);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Boolean.logicalXor(false, false);
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Short, Boolean> hashMap2 = new HashMap<Short, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Float float1 = new Float(0.0);
      Float float2 = new Float(1.0);
      hashMap0.putIfAbsent(float2, (String) null);
      Boolean boolean1 = new Boolean(false);
      Double double0 = new Double(0.0);
      jSONObject1.optDouble((String) null, 1420.28165809);
      jSONObject1.optString("19vrl3f5XD_bQ&f7e", ".");
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0573914109752764
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Float.sum(0.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Boolean.logicalXor(true, true);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      assertEquals(2, jSONObject1.length());
      
      String string0 = JSONObject.valueToString(hashMap1, 2147483645, 12);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      String string0 = "toL";
      String string1 = hashMap0.put((Float) null, (String) null);
      stringArray0[0] = "toL";
      stringArray0[5] = "nojoi";
      stringArray0[3] = "UOuPp9Y;'%@P002Ys(";
      try { 
        jSONObject0.put(string1, (Object) "toL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3288274798399655
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "toL";
      Float float0 = new Float(410.610272951);
      hashMap0.put(float0, "o-;>/tuqS@(*");
      stringArray0[1] = "joi";
      Float float1 = new Float(Double.NaN);
      Float.max((-1119.9778F), 2324.2458F);
      try { 
        jSONObject0.put("toL", (Object) float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.670792086347495
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte byte0 = (byte)90;
      Byte byte1 = new Byte((byte)90);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Boolean boolean0 = Boolean.TRUE;
      Function<String, String> function0 = Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ? extends String>) unaryOperator1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.replaceAll(unaryOperator1);
      linkedList0.add("getiterator");
      Double.max((-2866.4818528112983), (-2866.4818528112983));
      JSONObject jSONObject0 = new JSONObject(unaryOperator2);
      try { 
        jSONObject0.put((String) null, (-2866.4818528112983));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.062263833459799
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("");
      Double double0 = new Double((-1338.3436505744));
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.putOpt((String) null, (Object) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("", (Object) null);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.529125680436155
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      JSONObject jSONObject0 = new JSONObject((Object) "%");
      jSONObject0.isNull("");
      jSONObject0.optBoolean("%");
      jSONObject0.optString("Null pointer");
      Double double0 = new Double((-1596L));
      JSONObject jSONObject1 = jSONObject0.append("%", "");
      StringWriter stringWriter0 = new StringWriter(340);
      stringWriter0.append('/');
      Double double1 = new Double((-1596L));
      jSONObject1.optDouble("Null pointer", (double) 340);
      jSONObject1.optString("Missing value", "");
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      Boolean boolean0 = Boolean.TRUE;
      Double double0 = new Double((-1.0));
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply("zN:MW/bis;|T");
      unaryOperator0.apply("issplit");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function0 = unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator1);
      Function.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) function0);
      Short short0 = new Short((short)1847);
      Byte byte1 = new Byte((byte)90);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.007720773200323
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\b");
      String string0 = "i;FoCp$zW!=hJ7o%${f";
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Substring bounds error", "Substring bounds error");
      String string1 = "3etto:tRing";
      try { 
        jSONObject1.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7890981962247867
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte byte0 = (byte)90;
      Byte byte1 = new Byte((byte)90);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optDouble("getgetNames");
      JSONObject jSONObject1 = jSONObject0.accumulate("JSONArray[", "z X ");
      Object object1 = new Object();
      jSONObject1.optDouble("z X ", Double.NaN);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.optLong("] not found.");
      JSONObject jSONObject3 = jSONObject2.putOpt("Unterminated string", (Object) null);
      jSONObject3.put("", (Collection) null);
      jSONObject1.put("true", (Collection) null);
      try { 
        jSONObject3.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2204027690079418
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double(0.0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      Predicate<Object> predicate5 = predicate0.and(predicate3);
      Predicate<Object> predicate6 = predicate3.and(predicate4);
      predicate6.or(predicate1);
      predicate2.or(predicate3);
      Predicate<Object> predicate7 = predicate6.and(predicate1);
      predicate7.negate();
      predicate0.test(predicate4);
      Byte byte0 = new Byte((byte)28);
      predicate1.test(byte0);
      Predicate<Object> predicate8 = predicate2.or(predicate1);
      predicate8.negate();
      predicate8.and(predicate6);
      predicate5.and(predicate2);
      Byte byte1 = new Byte((byte) (-19));
      predicate7.test(predicate1);
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6V`PV r\"E";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.accumulate("6V`PV r\"E", (Object) null);
      try { 
        jSONObject1.getDouble("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float.sum(624.0F, 0.0F);
      Float float0 = new Float(1392.2623F);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Boolean.logicalXor(false, false);
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Short, Boolean> hashMap2 = new HashMap<Short, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      Float float1 = new Float(1.0);
      hashMap0.putIfAbsent(float1, (String) null);
      Boolean boolean1 = new Boolean(true);
      Double double0 = new Double(624.0F);
      jSONObject0.optDouble("P2^*AaUaOp+", (-1289.56802505987));
      jSONObject0.optString("isremoveLast", "] 4s not a nu~ber.");
      Byte byte0 = new Byte((byte)57);
      assertEquals((byte)57, (byte)byte0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5450604761110456
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      String string0 = null;
      stringArray0[0] = "toL";
      stringArray0[5] = "nojoi";
      stringArray0[2] = "UOuPp9Y;'%@P002Ys(";
      stringArray0[3] = "UOuPp9Y;'%@P002Ys(";
      jSONObject0.put("UOuPp9Y;'%@P002Ys(", (Object) "toL");
      String string1 = "Mox9";
      stringArray0[4] = "Mox9";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong("UOuPp9Y;'%@P002Ys(");
      try { 
        jSONObject1.getBoolean("UOuPp9Y;'%@P002Ys(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"UOuPp9Y;'%@P002Ys(\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4390972988258
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Short.valueOf((short) (-1736));
      String string0 = ":J";
      Boolean.valueOf("\n");
      Double double0 = new Double(0.0);
      Double.min((short) (-1736), (-1.0));
      Double double1 = new Double((-1736.0));
      JSONObject jSONObject0 = new JSONObject(double1);
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short)35);
      jSONObject0.put(":J", (Object) short0);
      String string1 = "getrotateRight";
      jSONObject0.optLong("isjoin");
      jSONObject0.optDouble("isjoin");
      try { 
        jSONObject0.getBoolean(":J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":J\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float.sum(0.0F, 5267.15F);
      Double.max(0.0F, (-1.0));
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<JSONArray, String> function2 = (Function<JSONArray, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.compose((Function<? super JSONArray, ? extends String>) function2);
      Function<String, String> function3 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function.identity();
      Function.identity();
      Double.sum(0.0F, 0.0F);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      Double double0 = new Double(0.0);
      linkedList0.removeLastOccurrence(double0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function3);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4983644943782495
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float((-11.473655320580107));
      jSONObject0.optString("JSON does not allow non-finite numbers.");
      jSONObject0.optInt("true", 9);
      Float float1 = new Float(0.0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", object0);
      Object object1 = JSONObject.NULL;
      jSONObject0.append("JSON does not allow non-finite numbers.", float0);
      JSONObject jSONObject2 = jSONObject1.put("] s not a Boolean.", (-2225L));
      jSONObject2.getString("] s not a Boolean.");
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      
      jSONObject0.opt("0");
      boolean boolean0 = jSONObject0.isNull("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.1205359500321657
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      JSONObject jSONObject0 = new JSONObject((Object) "%");
      jSONObject0.isNull("");
      jSONObject0.optBoolean("%");
      jSONObject0.optString("Null pointer");
      Double double0 = new Double((-1596L));
      JSONObject jSONObject1 = jSONObject0.append("%", "");
      StringWriter stringWriter0 = new StringWriter(320);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) "%");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      boolean boolean1 = new Boolean("");
      JSONObject.valueToString("Null pointer", 320, 320);
      jSONObject1.toString(32, (-1887));
      jSONObject0.opt("%");
      jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject0.accumulate("%", stringWriter1);
      jSONObject2.append("OKT<3_=w^AsW96!~np&", "Null pointer");
      jSONObject1.optDouble("ISFsOmu#X)@9*.");
      try { 
        jSONObject0.getInt("9j5@qC*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9j5@qC*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9323469378605727
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float.sum(0.0F, 5267.15F);
      Double double0 = new Double(0.0F);
      Double.isFinite(0.0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{}";
      stringArray0[2] = "g3u";
      stringArray0[3] = "g3u";
      stringArray0[4] = "g3u";
      stringArray0[5] = "g3u";
      JSONObject jSONObject0 = new JSONObject();
      Double double1 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Subs-ring bouSds error", double1);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Float float0 = new Float(1.0);
      linkedList1.parallelStream();
      linkedList1.add("gettoUpperCase");
      linkedList1.add("f>u.qoJ]RsjSzOLIT8 ");
      linkedList1.removeFirstOccurrence(float0);
      linkedList1.add("f>u.qoJ]RsjSzOLIT8 ");
      Double double0 = new Double(0.0);
      Double.max(0.0, (-1.0));
      Double.max(0.0, 0.0);
      JSONObject.doubleToString(Double.NaN);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertFalse(linkedList2.equals((Object)linkedList1));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6453336718798903
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      String[] stringArray0 = new String[8];
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optLong("", 0L);
      JSONObject jSONObject1 = jSONObject0.put("M(E-)[S_'mZ", (Object) stringArray0[0]);
      jSONObject1.optInt("getvalueOf");
      jSONObject0.optDouble("getvalueOf", 1.0);
      jSONObject0.optString("in", "getvalueOf");
      Byte byte1 = new Byte((byte)0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long long0 = new Long(1082L);
      JSONObject jSONObject2 = new JSONObject(long0, stringArray0);
      jSONObject2.put("co", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.1110942732940394
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float float0 = 5267.15F;
      Float.sum(0.0F, 5267.15F);
      Float float1 = new Float(5267.15F);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[1] = "";
      String string1 = "";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("", (Collection) null);
      jSONObject0.put("63c$[LQ", (Object) hashMap0);
      try { 
        jSONObject0.getLong("63c$[LQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"63c$[LQ\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.3755175277614935
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      hashMap0.clear();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<JSONArray, Double> hashMap3 = new HashMap<JSONArray, Double>();
      HashMap<Byte, Object> hashMap4 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Float float0 = new Float((-1.0F));
      HashMap<Object, Boolean> hashMap5 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Short short0 = new Short((short)538);
      jSONObject0.putOpt("0", short0);
      Collection<Integer> collection0 = null;
      jSONObject0.put("0", (Collection) null);
      String string0 = "?A2Ae(5azYD*'7";
      jSONObject0.optLong("0", (long) (short)538);
      String string1 = ")uvHZ3P@\\\\2ox/J|]b#";
      JSONTokener jSONTokener0 = new JSONTokener("0");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7760247186301696
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      JSONObject jSONObject0 = new JSONObject((Object) "%");
      jSONObject0.isNull("");
      jSONObject0.optBoolean("%");
      jSONObject0.optString("Null pointer");
      Double double0 = new Double((-1596L));
      JSONObject jSONObject1 = jSONObject0.append("%", "");
      StringWriter stringWriter0 = new StringWriter(340);
      StringWriter stringWriter1 = stringWriter0.append('/');
      stringWriter1.append((CharSequence) "%");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject0.put("", (Collection) linkedList0);
      JSONObject.valueToString("Null pointer", 110, 110);
      jSONObject0.append("%", jSONObject1);
      jSONObject2.has("%");
      jSONObject1.optJSONObject("istoString");
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.035104851516792
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("V");
      JSONObject jSONObject0 = new JSONObject((Object) "%");
      jSONObject0.isNull("V");
      jSONObject0.optBoolean("%");
      jSONObject0.optString("Null pointer");
      Double double0 = new Double((-1636L));
      JSONObject jSONObject1 = jSONObject0.append("%", "V");
      JSONObject.valueToString(double0);
      jSONObject0.optInt("n%,b&v=b}n-`6_y2$G", 1577);
      StringWriter stringWriter0 = new StringWriter(19);
      StringWriter stringWriter1 = stringWriter0.append('/');
      stringWriter1.append((CharSequence) "V");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONObject.valueToString("Null pointer", 110, 110);
      jSONObject0.append("%", jSONObject1);
      jSONObject1.has("V");
      jSONObject1.optJSONObject("istoString");
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7286730719154737
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      JSONObject jSONObject0 = new JSONObject((Object) "%");
      jSONObject0.isNull("");
      jSONObject0.optBoolean("%");
      jSONObject0.optString("Null pointer");
      Double double0 = new Double((-1596L));
      JSONObject jSONObject1 = jSONObject0.append("%", "");
      StringWriter stringWriter0 = new StringWriter(340);
      StringWriter stringWriter1 = stringWriter0.append('/');
      stringWriter1.append((CharSequence) "%");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject0.put("", (Collection) linkedList0);
      JSONObject.valueToString("Null pointer", 110, 110);
      jSONObject0.append("%", jSONObject1);
      try { 
        jSONObject2.getLong("&|gdNv$S6h`,r*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&|gdNv$S6h`,r*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.033243910169858
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Double.max(0.0, 0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("s)");
      linkedList0.add("h]S\"OwU% ,U;i,");
      linkedList0.add("\b");
      Double double0 = new Double((-303.0));
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object1);
      jSONObject0.accumulate("-Q0:", "-Q0:");
      try { 
        jSONObject0.append("-Q0:", "\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[-Q0:] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4098);
      String string0 = JSONObject.quote("/sA@#XH0OS");
      assertEquals("\"/sA@#XH0OS\"", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6735439389176303
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      Double double0 = new Double((-152.02265893394));
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.apply("issplit");
      UnaryOperator.identity();
      unaryOperator0.apply("TDxg8MJzK");
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator3);
      Short short0 = new Short((short)30);
      Byte byte0 = new Byte((byte)81);
      String string0 = JSONObject.quote("7q");
      assertEquals("\"7q\"", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.1583235235911027
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      String[] stringArray0 = new String[8];
      String string0 = "";
      stringArray0[0] = "";
      String string1 = "isjolin";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      boolean boolean0 = true;
      jSONObject0.put("", true);
      jSONObject0.put("isjolin", (double) (byte)90);
      try { 
        jSONObject0.getJSONObject("isjolin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isjolin\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Double double0 = new Double(940.7044723334539);
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((-2407.0908F));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      int int0 = 66;
      jSONArray0.optJSONObject(66);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      String string0 = "getsubstring";
      jSONObject0.optJSONArray("Z}-{RxTB/idi");
      Float float1 = new Float(0.0F);
      // Undeclared exception!
      try { 
        linkedList1.set(65, float1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0607559708445886
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Float float0 = new Float((-955.5452F));
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Boolean.logicalXor(true, true);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      String string0 = JSONObject.valueToString(jSONObject0, (-2759), 12);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float.sum(0.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.max(1.0F, 1.0F);
      Float.min(0.0F, 990.2367F);
      Short.toUnsignedLong((short) (-3681));
      Float float0 = new Float((-1177.62F));
      Float.min(1.0F, 11.4591F);
      Float.min((-1177.62F), 0.0F);
      Float.sum(1113.6488F, 1.0F);
      Float.isFinite(1.0F);
      Float.max(1.0F, 1.0F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7612118325115627
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = new Double(0.0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate1);
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate1);
      predicate0.and(predicate5);
      Predicate<Object> predicate6 = predicate5.or(predicate3);
      predicate2.and(predicate2);
      Predicate<Object> predicate7 = predicate5.negate();
      predicate7.test(predicate2);
      predicate7.test(predicate5);
      predicate6.and(predicate7);
      predicate4.and(predicate7);
      Byte byte0 = new Byte((byte)41);
      predicate0.test(predicate4);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("6V`PV r\"E");
      Double double1 = new Double((byte)41);
      Double.max(0.0, 6056.3576);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = new JSONArray();
      jSONObject0.put("6V`PV r\"E", 0.0);
      JSONObject jSONObject1 = jSONObject0.put("spl", (int) (byte)41);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Short.valueOf((short)2);
      double double0 = new Float(5267.15F);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("\b");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.poll();
      String string0 = JSONObject.quote("K]K(2!iGj/");
      assertEquals("\"K]K(2!iGj/\"", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "u]mOWW";
      stringArray0[1] = "u]mOWW";
      stringArray0[2] = ": ";
      stringArray0[3] = "u]mOWW";
      stringArray0[4] = "u]mOWW";
      stringArray0[5] = "u]mOWW";
      stringArray0[6] = "u]mOWW";
      stringArray0[7] = "u]mOWW";
      stringArray0[8] = "u]mOWW";
      JSONObject jSONObject0 = new JSONObject("u]mOWW", stringArray0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.87035157280872
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject.valueToString(jSONObject0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer(2637);
      JSONObject.testValidity(integer0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "issig valu(";
      stringArray0[3] = "";
      stringArray0[4] = "] is not a JSONObject.";
      stringArray0[5] = "^_y>XVuf|.YF9";
      stringArray0[6] = "dou";
      stringArray0[7] = "ismin";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7468721985154558
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      linkedList1.replaceAll(unaryOperator1);
      linkedList1.add("getiterator");
      double double0 = new Float((-2866.0793));
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      jSONObject0.put("getiterator", (Map) hashMap0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.006156210245708
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Short.valueOf((short) (-1736));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("Ez", stringArray0);
      jSONObject0.optLong("UncRyaHdY'$5{g)C\"}e", (long) (short) (-1736));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = new Boolean("\n");
      jSONObject0.optInt("Null pointer");
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (Collection) linkedList0);
      jSONObject0.optString("\n");
      jSONObject0.optInt("\n", 30);
      JSONObject.valueToString("Ez");
      Double double0 = new Double(1.0);
      jSONObject0.put("=`<}?1gjwX?O$hU_&", (-328L));
      jSONObject1.optDouble("%", (-1.0));
      JSONObject.valueToString(jSONObject1, (short) (-1736), (short) (-1736));
      Byte byte0 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.3245398593814373
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      Float.sum((-2581.5747F), (-1405.27F));
      Float.sum((-1.0F), (-3986.8447F));
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<JSONArray, Double> hashMap4 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Float float0 = new Float(2712.1504F);
      HashMap<Object, Boolean> hashMap5 = new HashMap<Object, Boolean>();
      HashMap<Object, Boolean> hashMap6 = new HashMap<Object, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap2);
      // Undeclared exception!
      jSONObject1.toString(3470, 3470);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.1047855113789806
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float.sum(0.0F, 5267.15F);
      Float float0 = new Float(5267.15F);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      String string0 = "is";
      stringArray0[1] = "is";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("is", (Collection) null);
      jSONObject0.put("is", (Object) hashMap0);
      jSONObject0.isNull("");
      JSONObject jSONObject2 = jSONObject1.put("", 2184L);
      jSONObject2.optString("");
      jSONObject2.optInt("", 2675);
      Float float1 = new Float(0.0);
      String string1 = "Sef>n?lSi0~{_U1*k";
      jSONObject1.put("Sef>n?lSi0~{_U1*k", (double) 5267.15F);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("java.lang.Long@0000000006");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Long@0000000006
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      float float0 = 0.0F;
      Float.sum(0.0F, 0.0F);
      Float.sum(0.0F, 1406.1438F);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      hashMap2.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      try { 
        jSONObject0.getLong("~|lUnZMGdEp~~6m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~|lUnZMGdEp~~6m\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1576770355110229
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.parallelStream();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add((String) null);
      Double double0 = new Double(1872.28808931);
      Double.max(0.0, 4027.55);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList2);
      try { 
        jSONObject0.getLong("F*dU/=HB>W+p/NI=x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F*dU/=HB>W+p/NI=x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8380061618097845
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      
      double double0 = jSONObject0.optDouble("istoString");
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = jSONObject0.optDouble("@", (-1458.71122805));
      assertEquals((-1458.71122805), double1, 0.01);
      
      int int1 = jSONObject0.optInt("t}4  (-HMa-''", 0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float((-1.0));
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.1420858749808476
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      short short0 = (short) (-1736);
      Short.valueOf((short) (-1736));
      String string0 = "Ez";
      String string1 = "\\n";
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("Ez", stringArray0);
      jSONObject0.optLong("UncRyaHdY'$5{g)C\"}e", (long) (short) (-1736));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = new Boolean("\n");
      jSONObject0.optInt("Ez");
      JSONObject jSONObject1 = jSONObject0.put("Ez", (Collection) linkedList0);
      jSONObject0.optString("\n");
      jSONObject0.optInt("\n", 0);
      JSONObject.valueToString("Ez");
      Double double0 = new Double(0);
      JSONObject jSONObject2 = jSONObject0.put("=`<}?1gjwX?O$hU_&", (-1736L));
      jSONObject2.remove("Ez");
      Long long0 = new Long(0);
      jSONObject2.toString(0, 0);
      jSONObject2.toString();
      Integer integer0 = new Integer(10);
      JSONObject jSONObject3 = jSONObject1.accumulate("{\"java.lang.String@0000000008\": java.lang.Long@0000000009}", integer0);
      try { 
        jSONObject3.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.930895740299377
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "dou";
      stringArray0[1] = "dou";
      stringArray0[2] = "] not found.";
      stringArray0[3] = "dou";
      stringArray0[4] = "dou";
      stringArray0[5] = "dou";
      stringArray0[7] = "dou";
      stringArray0[8] = "getgetNames";
      JSONObject jSONObject0 = new JSONObject("dou", stringArray0);
      jSONObject0.optDouble("D)MfM!bui");
      jSONObject0.optInt("dou");
      JSONObject jSONObject1 = jSONObject0.accumulate("z X ", "dou");
      jSONObject1.get("z X ");
      Object object0 = new Object();
      jSONObject1.putOpt("dou", object0);
      assertEquals(2, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject0.put("dou", (Collection) null);
      jSONObject0.optLong("?A2Ae(5azYD*'7", (long) 0);
      Byte byte0 = new Byte((byte)102);
      boolean boolean0 = jSONObject2.optBoolean("co");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9590960964240387
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ":t";
      stringArray0[4] = ":t";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Function<String, String> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super JSONArray, ? extends String>) function1);
      Function<String, String> function2 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      linkedList0.removeLastOccurrence(function2);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.apply(":t");
      unaryOperator2.apply(":t");
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Short short0 = new Short((short)46);
      JSONObject jSONObject0 = new JSONObject(unaryOperator2);
      try { 
        jSONObject0.getDouble(":t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "toL";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate1.and(predicate2);
      predicate2.or(predicate5);
      predicate5.or(predicate4);
      predicate5.and(predicate2);
      Predicate<Object> predicate6 = predicate1.negate();
      predicate6.test("toL");
      predicate0.test((Object) null);
      Predicate<Object> predicate7 = predicate2.and(predicate5);
      predicate3.and(predicate7);
      Predicate<Object> predicate8 = predicate7.and(predicate4);
      predicate2.and(predicate8);
      Byte byte0 = new Byte((byte)47);
      predicate0.test(predicate2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("toL");
      Double double0 = new Double((byte)41);
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject((Map) null);
      JSONArray jSONArray1 = jSONObject2.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string0 = "";
      stringArray0[1] = "";
      Integer integer0 = new Integer(92);
      Short short0 = new Short((short)115);
      BiFunction<Short, Object, Short> biFunction0 = (BiFunction<Short, Object, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, short0, biFunction0);
      String string1 = ",:]]}/\\\"[;=#";
      stringArray0[2] = ",:]]}/\"[;=#";
      HashMap<JSONObject, JSONObject> hashMap2 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",:]]}/\"[;=#", (Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (int) (short)115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5726694994129984
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator1);
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.add("is");
      Double double0 = new Double(0.0);
      Double.max(Double.NaN, 0.0);
      Double.min(0.0, (-223.454436));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(double0);
      Byte byte0 = new Byte((byte) (-70));
      jSONObject0.put("is", 46);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      hashMap0.clear();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<JSONArray, Double> hashMap3 = new HashMap<JSONArray, Double>();
      HashMap<Byte, Object> hashMap4 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Float float0 = new Float((-1.0F));
      boolean boolean0 = new Boolean(false);
      Boolean boolean1 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = jSONObject0.put("e", (Collection) linkedList0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double(1.0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.test(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.negate();
      predicate2.negate();
      UnaryOperator.identity();
      Double double1 = new Double(0.0);
      Double.min(0.0, 0.0);
      double double2 = new Float(0.0);
      Double double3 = new Double(1.0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(">#yh", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(746.3544F);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "d`_L,WaHG7sUV[b_R";
      stringArray0[2] = "`$fAd~7";
      stringArray0[3] = "get";
      stringArray0[4] = "DG:dtSEI0Mj";
      stringArray0[5] = "41";
      stringArray0[6] = "Expected a ',' or ']'";
      stringArray0[7] = "' and instead saw '";
      stringArray0[8] = "CJ;v)a4f*c>";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.668230917237904
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ": ";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.isNull(": ");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put(": ", 0L);
      jSONObject1.optString(": ");
      jSONObject0.optInt("java.lang.Long@0000000004", (-1995));
      double double0 = 0.0;
      Float float0 = new Float(0.0);
      String string0 = "Sef>n?lSi0~{_U1*k";
      jSONObject0.put(": ", 420.332065404107);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of : 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.065409756600348
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Long long0 = new Long(0L);
      Object object0 = JSONObject.NULL;
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      predicate2.test("8=49)n\"~LK6X");
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Double double0 = new Double(0L);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate1);
      boolean boolean0 = predicate4.test(object0);
      assertFalse(boolean0);
      
      predicate0.or(predicate5);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate6.test((Object) null);
      predicate0.or(predicate2);
      predicate6.negate();
      String string0 = JSONObject.doubleToString(831.988586);
      assertEquals("831.988586", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.669435108494575
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Long long0 = new Long(0L);
      Object object0 = JSONObject.NULL;
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      predicate0.and(predicate4);
      Predicate<Object> predicate5 = Predicate.isEqual(object0);
      predicate5.negate();
      boolean boolean0 = predicate5.test((Object) null);
      assertTrue(boolean0);
      
      predicate0.and(predicate5);
      predicate0.and(predicate3);
      Byte byte0 = new Byte((byte)41);
      predicate3.test(byte0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(": ");
      Double double0 = new Double(146.6610190856);
      Double.max(0.0, 146.6610190856);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      Long long0 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Object object0 = JSONObject.NULL;
      predicate0.test(object0);
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Double double0 = new Double(0L);
      Predicate<Object> predicate5 = Predicate.isEqual(object0);
      boolean boolean0 = predicate5.test(double0);
      assertFalse(boolean0);
      
      predicate4.or(predicate5);
      Float float0 = new Float((float) (byte)90);
      predicate4.test(float0);
      predicate0.or(predicate3);
      predicate1.negate();
      String string0 = JSONObject.doubleToString((byte)90);
      assertEquals("90", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.127213620306922
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("Ex!ected a ',' o= ']");
      JSONObject jSONObject1 = jSONObject0.append("JSONAXrray[", boolean0);
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte)75);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject1.getJSONArray("JSONAXrray[");
      JSONObject jSONObject3 = new JSONObject(boolean0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      Double double0 = new Double(1499.0);
      Double.max(1499.0, 0.0);
      JSONObject jSONObject4 = new JSONObject();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList0);
      assertEquals(1, jSONArray2.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.0868455255148795
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.060649125069464
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string0 = ":BK)[L^LdnMA^sHZKO+";
      stringArray0[1] = ":BK)[L^LdnMA^sHZKO+";
      Integer integer0 = new Integer(4160);
      Short short0 = new Short((short)115);
      Integer.getInteger(":BK)[L^LdnMA^sHZKO+", (int) (short)115);
      BiFunction<Short, Object, Short> biFunction0 = (BiFunction<Short, Object, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, short0, biFunction0);
      stringArray0[2] = "pvAL;$o";
      HashMap<JSONObject, JSONObject> hashMap2 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("pvAL;$o", (Map) hashMap0);
      try { 
        jSONObject0.getInt("pvAL;$o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pvAL;$o\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8532782310567952
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Boolean.valueOf(true);
      Boolean.logicalAnd(true, true);
      JSONObject.valueToString((Object) null, 4350, 4);
      Long long0 = new Long(4350);
      Long.compareUnsigned(4, 4);
      JSONObject.valueToString(long0, (-1307), 1025);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!_KM~DjB";
      stringArray0[1] = "G]";
      stringArray0[2] = "XB#${`4ps!64W*";
      stringArray0[3] = "pus";
      stringArray0[4] = "MpTRFuUn2E0s";
      stringArray0[5] = "Null key.";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getString("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.2921403156873117
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]s";
      stringArray0[1] = "Missing value";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      long long0 = jSONObject1.optLong("]s", (long) (byte) (-81));
      assertEquals((-81L), long0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.3865423445139866
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((-2407.0908F));
      Float.sum(0.0F, 5267.15F);
      Boolean.valueOf(": ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ": ";
      stringArray0[1] = ": ";
      stringArray0[2] = ": ";
      stringArray0[3] = ": ";
      stringArray0[4] = ": ";
      stringArray0[5] = ": ";
      stringArray0[6] = ": ";
      Double double0 = new Double(0.0);
      Double.min((-2407.0908F), 5267.15F);
      JSONObject jSONObject0 = new JSONObject(double0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put(": ", object0);
      // Undeclared exception!
      jSONObject1.toString(2978);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.8562122498445235
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean("");
      String string0 = "|";
      JSONObject jSONObject0 = new JSONObject((Object) "|");
      jSONObject0.isNull("");
      String string1 = "Null pointer";
      jSONObject0.remove("Null key.");
      jSONObject0.optString("Null pointer");
      jSONObject0.append("|", "");
      StringWriter stringWriter0 = new StringWriter(340);
      StringWriter stringWriter1 = stringWriter0.append('/');
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[3] = '/';
      stringWriter1.write(charArray0);
      stringWriter1.write(340);
      stringWriter1.flush();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "|");
      jSONObject0.optInt((String) null);
      jSONObject0.write(stringWriter2);
      // Undeclared exception!
      try { 
        stringWriter1.write(charArray0, 340, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.3261907246610147
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Boolean.logicalXor(false, true);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      jSONObject1.toString((-1686), 1914);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.5389392783691687
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Function<String, String> function0 = Function.identity();
      Function<JSONArray, String> function1 = (Function<JSONArray, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      function0.compose((Function<? super JSONArray, ? extends String>) function1);
      Function<String, String> function2 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      Function.identity();
      Double.sum((-1194.80988), (-1194.80988));
      linkedList0.removeLastOccurrence(function2);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super String, ? extends String>) function3);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.apply(":SG");
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator1);
      jSONObject0.toString((-1654), (-1654));
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Float.sum((-1.0F), 0.0F);
      Float.sum((-1.0F), 0.0F);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      boolean boolean0 = new Boolean(false);
      Boolean boolean1 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.934551794074474
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      hashMap0.clear();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      hashMap0.keySet();
      Boolean boolean0 = new Boolean(":t");
      Short short0 = new Short((short)61);
      Float float0 = new Float((float) (short)61);
      Float float1 = new Float((-1423.17818506827));
      JSONObject jSONObject0 = new JSONObject(float1);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = new Integer(114);
      BiFunction<Object, Object, Short> biFunction0 = (BiFunction<Object, Object, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(integer0, biFunction0);
      hashMap0.clear();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      Byte byte0 = new Byte((byte)109);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      Double double0 = new Double(1499.0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.retainAll(linkedList1);
      linkedList0.add((String) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      int int0 = jSONObject0.optInt("getgetBytes");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      HashMap<Integer, Short> hashMap2 = new HashMap<Integer, Short>(hashMap0);
      HashMap<Integer, Short> hashMap3 = new HashMap<Integer, Short>();
      hashMap0.clear();
      HashMap<Integer, Short> hashMap4 = new HashMap<Integer, Short>();
      Short short0 = new Short((short)2268);
      Short short1 = new Short((short) (-361));
      hashMap1.keySet();
      hashMap2.clear();
      HashMap<Integer, Short> hashMap5 = new HashMap<Integer, Short>(hashMap0);
      String string0 = JSONObject.quote("J-e^]b\"f");
      assertEquals("\"J-e^]b\\\"f\"", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short.valueOf((short) (-1736));
      Double.max((-1.7366958264366603), (short) (-1736));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\b");
      linkedList0.listIterator();
      linkedList0.toArray();
      JSONObject.quote("\b");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Byte byte0 = new Byte((byte) (-115));
      assertEquals((byte) (-115), (byte)byte0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Float.sum(0.0F, 0.0F);
      float float0 = new Float(0.0F);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      Float float1 = new Float(0.0F);
      HashMap<Object, Boolean> hashMap3 = new HashMap<Object, Boolean>();
      Boolean.logicalXor(true, true);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.optDouble("riq#CQY2X", 0.0);
      jSONObject0.optString("riq#CQY2X", (String) null);
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.1492392247440626
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      long long0 = jSONObject0.optLong((String) null, 112L);
      assertEquals(112L, long0);
      
      Double.min((-1162.389938673945), 0.0);
      String[] stringArray0 = new String[7];
      linkedList0.listIterator();
      stringArray0[0] = "UOuPp9Y;'%@P002Ys(";
      stringArray0[1] = "UOuPp9Y;'%@P002Ys(";
      stringArray0[2] = "isreplace";
      stringArray0[3] = "UOuPp9Y;'%@P002Ys(";
      long long1 = jSONObject0.optLong("[:*?]Vcr-2Py3bad5v");
      assertEquals(0L, long1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      Predicate<Object> predicate5 = predicate3.negate();
      predicate4.test("");
      predicate5.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate4.or(predicate1);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate2.or(predicate7);
      predicate7.and(predicate5);
      predicate3.and(predicate5);
      predicate0.negate();
      Float float0 = new Float(2140.6995F);
      predicate6.test(predicate0);
      Boolean boolean0 = new Boolean(true);
      predicate7.and(predicate0);
      predicate2.and(predicate7);
      Byte byte0 = new Byte((byte) (-19));
      Boolean boolean1 = Boolean.TRUE;
      predicate4.test(boolean1);
      Short short0 = new Short((short) (-26636));
      Byte byte1 = new Byte((byte)18);
      JSONObject.getNames((Object) predicate8);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8178944222085716
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Double.max(0.0F, (-1.0));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super JSONArray, ? extends String>) function1);
      unaryOperator1.compose((Function<? super String, ? extends String>) function0);
      linkedList0.removeLastOccurrence(linkedList1);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function2 = unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ? extends String>) function2);
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator3);
      Short short0 = new Short((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(function2);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.append((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      Float.sum((-2581.5747F), (-1405.27F));
      Float.sum((-1.0F), (-3986.8447F));
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      Float float0 = new Float((-1.0F));
      HashMap<Object, Boolean> hashMap4 = new HashMap<Object, Boolean>();
      Boolean.logicalXor(true, false);
      Boolean boolean0 = Boolean.FALSE;
      long long0 = jSONObject0.optLong("] is not a JSONArray.");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      hashMap1.clear();
      HashMap<Integer, Short> hashMap2 = new HashMap<Integer, Short>(hashMap1);
      try { 
        jSONObject0.get("&vc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&vc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.2734885332477166
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<JSONArray, String> function1 = (Function<JSONArray, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super JSONArray, ? extends String>) function1);
      Function.identity();
      Function<String, String> function2 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      linkedList0.removeLastOccurrence(function2);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function3);
      UnaryOperator.identity();
      UnaryOperator.identity();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject0.toString((int) (byte)102, (int) (byte)102);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Double double0 = new Double(0.0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      Predicate<Object> predicate6 = predicate2.or(predicate3);
      Predicate<Object> predicate7 = predicate5.and(predicate1);
      predicate7.negate();
      predicate0.test(predicate4);
      Predicate<Object> predicate8 = predicate4.negate();
      Byte byte0 = new Byte((byte)28);
      predicate1.test(byte0);
      Predicate<Object> predicate9 = predicate2.or(predicate1);
      predicate9.negate();
      Predicate<Object> predicate10 = predicate1.negate();
      predicate10.or(predicate1);
      predicate9.negate();
      Predicate<Object> predicate11 = predicate0.or(predicate1);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate8.negate();
      Float float0 = new Float((-2082.29571));
      Predicate<Object> predicate13 = Predicate.isEqual((Object) float0);
      Predicate<Object> predicate14 = predicate13.or(predicate6);
      Predicate<Object> predicate15 = predicate2.and(predicate14);
      predicate15.test(predicate12);
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      Float float1 = new Float((float) (byte)28);
      String string0 = JSONObject.valueToString(float1, (byte)28, (byte)28);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.2022413954579148
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply((String) null);
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super Boolean, ? extends String>) function1);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) function0);
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator1);
      Short short0 = new Short((short)0);
      Byte byte0 = new Byte((byte)90);
      Byte byte1 = new Byte((byte)9);
      JSONObject jSONObject0 = new JSONObject(byte1);
      jSONObject0.toString((int) (byte)9, 51);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      HashMap<Integer, Short> hashMap2 = new HashMap<Integer, Short>();
      hashMap2.clear();
      HashMap<Integer, Short> hashMap3 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Byte byte0 = new Byte((byte)44);
      HashMap<Integer, Short> hashMap4 = new HashMap<Integer, Short>();
      hashMap2.keySet();
      HashMap<Integer, Short> hashMap5 = new HashMap<Integer, Short>();
      hashMap1.clear();
      HashMap<Integer, Short> hashMap6 = new HashMap<Integer, Short>(hashMap0);
      assertTrue(hashMap6.equals((Object)hashMap3));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      predicate3.negate();
      predicate4.test("");
      Byte byte1 = new Byte((byte)90);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Double double0 = new Double(0.0);
      Predicate.isEqual((Object) double0);
      predicate5.negate();
      Predicate<Object> predicate7 = predicate4.or(predicate1);
      predicate7.negate();
      predicate2.or(predicate7);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate5.negate();
      Float float0 = new Float((float) (byte)90);
      predicate5.test(float0);
      Boolean boolean0 = new Boolean(false);
      predicate2.negate();
      Predicate<Object> predicate10 = predicate6.negate();
      predicate10.test(predicate8);
      predicate9.or(predicate6);
      predicate6.test(predicate10);
      Long long0 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String string0 = jSONObject0.toString((-2429), (-1877));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator1);
      Function<String, String> function2 = Function.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super JSONArray, ? extends String>) function3);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) function1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) function2);
      linkedList0.replaceAll(unaryOperator3);
      Double.max((-1.0), (-1811.933262467));
      linkedList0.add((String) null);
      Double.max((-1.0), (-1.0));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = null;
      JSONObject jSONObject0 = new JSONObject(unaryOperator3, stringArray0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(46);
      HashMap<Integer, Short> hashMap2 = new HashMap<Integer, Short>(hashMap1);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("MUG=rueCINNh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MUG=rueCINNh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      hashMap1.clear();
      HashMap<Integer, Short> hashMap2 = new HashMap<Integer, Short>();
      Short short0 = new Short((short)87);
      Short short1 = new Short((short)87);
      hashMap2.keySet();
      hashMap0.clear();
      HashMap<Integer, Short> hashMap3 = new HashMap<Integer, Short>(hashMap0);
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("getisNaN");
      jSONTokener0.skipTo('+');
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getisNaN
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Float.sum(0.0F, 5267.15F);
      Double.max(0.0F, (-1.0));
      Double double0 = new Double(0.0F);
      Double.isFinite(0.0F);
      Double.isFinite((-1548.9725434));
      Double.min(0.0, 0.0F);
      Double.sum(333.1220275773072, (-2210.0));
      Double.max(333.1220275773072, (-2210.0));
      Double.max(1.0, 0.0);
      Double.max((-1548.9725434), 487.187);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = new Integer((-1212));
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.2675632284814613
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "{";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.parallelStream();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double(0.0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate1.or(predicate0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate3);
      predicate6.or(predicate4);
      Predicate<Object> predicate7 = predicate0.or(predicate1);
      predicate7.and(predicate2);
      Predicate<Object> predicate8 = predicate6.negate();
      predicate8.test(predicate3);
      predicate8.test(predicate6);
      byte byte0 = (byte)41;
      predicate5.and(predicate8);
      Byte byte1 = new Byte((byte)41);
      predicate1.test(predicate5);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{&wCc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {&wCc
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      HashMap<Integer, Short> hashMap2 = new HashMap<Integer, Short>();
      hashMap2.clear();
      HashMap<Integer, Short> hashMap3 = new HashMap<Integer, Short>();
      Short short0 = new Short((short)2263);
      Short short1 = new Short((short) (-135));
      hashMap2.keySet();
      hashMap3.clear();
      HashMap<Integer, Short> hashMap4 = new HashMap<Integer, Short>(hashMap2);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      Float.sum((-1251.6289F), (-1251.6289F));
      Float.sum((-1052.9784F), (-1251.6289F));
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Float float0 = new Float((-1.0F));
      HashMap<Object, Boolean> hashMap4 = new HashMap<Object, Boolean>();
      Boolean.logicalXor(true, false);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      HashMap<Integer, Short> hashMap2 = new HashMap<Integer, Short>();
      hashMap0.clear();
      Short short0 = new Short((short)59);
      hashMap1.getOrDefault("", short0);
      hashMap1.entrySet();
      Short short1 = new Short((short)76);
      Short short2 = new Short((short)112);
      hashMap0.keySet();
      hashMap1.clear();
      HashMap<Integer, Short> hashMap3 = new HashMap<Integer, Short>(hashMap0);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.5726694994129984
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator1);
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.add("");
      Double double0 = new Double(0.0);
      Double.max(Double.NaN, 0.0);
      Double.min(0.0, (-223.454436));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(double0);
      Byte byte0 = new Byte((byte) (-70));
      jSONObject0.put("{}", 0L);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.189825561443943
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Boolean.valueOf("Expected a ',' or ']'");
      Double.max((-1.0), (-1.0));
      Double.max(0.0, Double.NaN);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optBoolean("] is not a Boolean.", true);
      Double double0 = new Double((-1100.4));
      jSONObject0.optDouble("32!5qPy$71(4F:Ar[", (-1100.4));
      jSONObject0.optString("", "cop");
      Byte byte1 = new Byte((byte)12);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(""));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.995989192932209
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      boolean boolean1 = new Boolean(false);
      jSONObject0.optString("Null pointer");
      jSONObject0.append("", "");
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[3] = '/';
      jSONObject0.optBoolean("", false);
      jSONObject0.optInt((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("QlI4B(+");
      long long0 = jSONObject0.optLong("");
      assertEquals(4, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((-1.0F));
      Float float1 = new Float(0.0F);
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[7];
      stringArray0[0] = ":J";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(":J");
      linkedList0.add("min");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.getBoolean(":J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":J\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ":t";
      Float.sum(3296.894F, 3296.894F);
      Float.min((-330.807F), (-3870.4656F));
      Short.toUnsignedLong((short)62);
      Float float0 = new Float((-490.03F));
      Float.min((-4312.169F), 3064.435F);
      Float.min((-330.807F), (-4312.169F));
      Float.min((-1989.145F), (-25.583076F));
      Float.min((-490.03F), (short)62);
      Float.sum(1126.9679F, (short)62);
      Float.sum(1146.24F, (-4312.169F));
      Float.min((-4312.169F), 62L);
      Float.isFinite((-2841.2727F));
      Float.max(233.23F, (-330.807F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.8171329228800834
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Float.sum(0.0F, 0.0F);
      Float float0 = new Float((-3538.1F));
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float(Double.NaN);
      JSONObject jSONObject1 = new JSONObject(float1);
      jSONObject1.names();
      Byte byte0 = new Byte((byte)21);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("] is not a JSONArray.");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("G$9x]9Sq_Rod;_qV");
      Double double0 = new Double(0.0F);
      linkedList0.retainAll(linkedList1);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("G$9x]9Sq_Rod;_qV");
      JSONArray jSONArray0 = new JSONArray();
      Byte byte1 = new Byte((byte)83);
      assertFalse(byte1.equals((Object)byte0));
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.03611166216486
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.apply("getgTQtClass");
      unaryOperator1.apply("6*cE8?we%? :d");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator2);
      Function.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator1);
      linkedList0.replaceAll(unaryOperator2);
      linkedList0.add("' and instead saw '");
      Double double0 = new Double(0.0);
      Double.max(Double.NaN, (-3697.2789));
      Byte byte0 = new Byte((byte)11);
      Byte.compare((byte)43, (byte)85);
      JSONObject jSONObject0 = new JSONObject(byte0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.2059077449341107
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.names();
      Byte byte1 = new Byte((byte)61);
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      hashMap0.keySet();
      HashMap<Integer, Short> hashMap2 = new HashMap<Integer, Short>();
      hashMap1.clear();
      HashMap<Integer, Short> hashMap3 = new HashMap<Integer, Short>(hashMap1);
      assertEquals(0, hashMap3.size());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.9296183423305251
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      HashMap<Integer, Short> hashMap2 = new HashMap<Integer, Short>();
      hashMap2.clear();
      HashMap<Integer, Short> hashMap3 = new HashMap<Integer, Short>();
      Short short0 = new Short((short) (-1));
      Short short1 = new Short((short) (-1));
      hashMap0.keySet();
      hashMap3.clear();
      HashMap<Integer, Short> hashMap4 = new HashMap<Integer, Short>(hashMap0);
      JSONObject.quote(",\n");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",\n";
      stringArray0[1] = "\",\n\"";
      stringArray0[2] = "&";
      stringArray0[3] = ",\n";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
