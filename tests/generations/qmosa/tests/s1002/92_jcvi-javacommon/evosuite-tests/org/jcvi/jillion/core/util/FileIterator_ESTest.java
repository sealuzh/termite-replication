/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 08:56:57 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URI;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5655961101968145
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQAiT{ZTTt/Z]", "&{Z~T");
      File file0 = MockFile.createTempFile("&{Z~T", "!rEQAiT{ZTTt/Z]", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      file0.setExecutable(false);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      file0.setReadable(false, true);
      mockFile0.setExecutable(true, true);
      MockFile.createTempFile("@JONI", "", (File) mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      MockFile mockFile1 = new MockFile(mockFile0, "!rEQAiT{ZTTt/Z]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!rEQAiT{ZTTt/Z]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&{Z~T");
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      fileIterator0.getNextFile();
      try { 
        MockFile.createTempFile("&{Z~T", "@JONI");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6915351307972712
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "!rEQT!iTWZT`tF/Z]");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/!rEQT!iTWZT`tF/Z]/ T_skf;H(5B]HtX/0%M-`Uk");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "!rEQT!iTWZT`tF/Z]");
      mockFile0.setExecutable(true, true);
      File file0 = MockFile.createTempFile(" T_skf;H(5B]HtX/", "%M-`Uk", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      File file1 = fileIterator0.getNextFile();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/!rEQT!iTWZT`tF/Z]/ T_skf;H(5B]HtX/0%M-`Uk");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator0.updateFileIterator(file1);
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.next();
      FileIterator.createNonRecursiveFileIteratorBuilder(file1);
      assertFalse(file1.canWrite());
      assertTrue(file1.equals((Object)file0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.51380644618107
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQAiT{ZTTt/Z]", "&{Z~T");
      File file0 = MockFile.createTempFile("&{Z~T", "!rEQAiT{ZTTt/Z]", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList1);
      linkedList1.add((FileFilter) multipleFileFilter1);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList0);
      file0.setReadOnly();
      mockFile0.renameTo(file0);
      mockFile0.setExecutable(true, true);
      file0.mkdir();
      MockFile mockFile1 = new MockFile("&{Z~T", "!rEQAiT{ZTTt/Z]");
      MockFile mockFile2 = new MockFile("&{Z~T", ".MK`");
      mockFile2.mkdir();
      MockFile.createTempFile("no more files", ".ldlZd)", (File) mockFile1);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.next();
      File file1 = fileIterator0.getNextFile();
      assertNull(file1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.7116114761098418
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQT!iTWZT`tF/Z]");
      mockFile0.mkdirs();
      mockFile0.mkdirs();
      MockFile mockFile1 = new MockFile("", "N:>PSR7G");
      mockFile0.deleteOnExit();
      MockFile mockFile2 = new MockFile("");
      mockFile1.mkdir();
      mockFile1.setReadable(true, false);
      URI uRI0 = mockFile1.toURI();
      MockFile mockFile3 = new MockFile(uRI0);
      mockFile3.deleteOnExit();
      mockFile2.renameTo(mockFile3);
      mockFile1.setExecutable(true, true);
      mockFile2.mkdir();
      MockFile mockFile4 = new MockFile(".MK`", "");
      mockFile4.mkdir();
      MockFile.createTempFile(".MK`", "", (File) mockFile2);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      File file0 = fileIterator0.next();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.57655450997497
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "<S)K4YEq9i/@(%";
      MockFile mockFile0 = new MockFile("!rEQT!iTWZT`tF/Z]");
      File file0 = MockFile.createTempFile("<S)K4YEq9i/@(%", "!rEQT!iTWZT`tF/Z]", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[6];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      file0.setReadable(false, true);
      MockFile mockFile1 = new MockFile("<S)K4YEq9i/@(%");
      mockFile1.setExecutable(true, false);
      MockFile.createTempFile("no mgre fCles", " T_skf;H(5B]HtX/", (File) mockFile1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      File file1 = fileIterator0.next();
      FileIterator.createDepthFirstFileIteratorBuilder(file1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(file1);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.436438998983134
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQT!iTWZT`tF/Z]");
      mockFile0.mkdirs();
      mockFile0.mkdirs();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".MK`/.MK`");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte) (-115);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile1 = new MockFile("", "N:>PSR7G");
      mockFile0.deleteOnExit();
      mockFile0.setWritable(false, false);
      MockFile mockFile2 = new MockFile("");
      mockFile1.mkdir();
      URI uRI0 = MockURI.aFTPURI;
      mockFile2.mkdir();
      mockFile1.setReadable(true, false);
      mockFile1.toURI();
      mockFile1.deleteOnExit();
      MockFile mockFile3 = new MockFile("");
      mockFile3.setReadable(false, false);
      mockFile3.deleteOnExit();
      mockFile2.renameTo(mockFile3);
      mockFile1.setExecutable(false, false);
      mockFile2.mkdir();
      MockFile mockFile4 = new MockFile(".MK`", "");
      mockFile0.mkdir();
      MockFile mockFile5 = new MockFile(".MK`", ".MK`");
      mockFile5.setWritable(true, false);
      URI uRI1 = MockURI.aHttpURI;
      mockFile5.mkdir();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5672096330550547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQAiT{ZTTt/Z]", "&{Z~T");
      File file0 = MockFile.createTempFile("&{Z~T", "!rEQAiT{ZTTt/Z]", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      file0.setReadable(false, true);
      mockFile0.setExecutable(true, true);
      MockFile.createTempFile("@JONI", "", (File) mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      MockFile mockFile1 = new MockFile(mockFile0, "!rEQAiT{ZTTt/Z]");
      mockFile1.setWritable(true);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder2.fileFilter(multipleFileFilter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!rEQAiT{ZTTt/Z]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&{Z~T");
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      fileIterator0.getNextFile();
      File file1 = MockFile.createTempFile("&{Z~T", "@JONI");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(file1);
      assertNotSame(fileIterator_FileIteratorBuilder3, fileIterator_FileIteratorBuilder1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.578646447967782
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "!rEQT!iTWZT`tF/Z]");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[9];
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      linkedList0.add(fileFilterArray0[1]);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[6] = (FileFilter) multipleFileFilter0;
      File file0 = MockFile.createTempFile("58SKx", "/+7hFp0'0iHj1&T?|i~", (File) mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      file0.setWritable(false, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.build();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!rEQT!iTWZT`tF/Z]");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      File file1 = fileIterator1.getNextFile();
      fileIterator0.getNextFile();
      FileIterator.createNonRecursiveFileIteratorBuilder(file1);
      fileIterator1.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      assertFalse(fileIterator_FileIteratorBuilder4.equals((Object)fileIterator_FileIteratorBuilder2));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.588015661350333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQT!iTWZT`tF/Z]");
      mockFile0.mkdirs();
      mockFile0.mkdirs();
      MockFile mockFile1 = new MockFile("", "N:>PSR7G");
      mockFile0.deleteOnExit();
      mockFile0.setWritable(false, false);
      MockFile mockFile2 = new MockFile("");
      mockFile1.mkdir();
      URI uRI0 = MockURI.aFTPURI;
      mockFile2.mkdir();
      mockFile1.setReadable(true, false);
      mockFile1.toURI();
      MockFile mockFile3 = new MockFile("");
      mockFile3.setReadable(false, false);
      mockFile3.deleteOnExit();
      mockFile2.renameTo(mockFile3);
      mockFile1.setExecutable(false, false);
      mockFile2.mkdir();
      MockFile mockFile4 = new MockFile(".MK`", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile3);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder3.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder4.equals((Object)fileIterator_FileIteratorBuilder2));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.getNextFile();
      File file0 = fileIterator0.next();
      assertEquals("home", file0.getName());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5700655906334795
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "!rEQT!iTWZT`tF/Z]");
      mockFile0.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/!rEQT!iTWZT`tF/Z]/ T_skf;H(5B]HtX/0%M-`Uk");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "!rEQT!iTWZT`tF/Z]");
      File file0 = MockFile.createTempFile(" T_skf;H(5B]HtX/", "%M-`Uk", (File) mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      File file1 = fileIterator0.getNextFile();
      fileIterator0.updateFileIterator(file1);
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      assertTrue(file0.equals((Object)file1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6621001511060314
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQT!iTWZT`tF/Z]", "<S)K4YEq9i/@(%");
      mockFile0.setExecutable(true, true);
      File file0 = MockFile.createTempFile("<S)K4YEq9i/@(%", "%M-`Uk", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-65);
      String string0 = " r'z-pf,}dMVTRq}\\u";
      File file1 = MockFile.createTempFile("%M-`Uk", string0, (File) mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(file1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.6527923431714533
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "!rEQT!iTWZT`tF/Z]");
      mockFile0.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/!rEQT!iTWZT`tF/Z]/ T_skf;H(5B]HtX/0%M-`Uk");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "!rEQT!iTWZT`tF/Z]");
      File file0 = MockFile.createTempFile(" T_skf;H(5B]HtX/", "%M-`Uk", (File) mockFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "%M-`Uk");
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
      
      File file1 = fileIterator0.next();
      File file2 = fileIterator0.getNextFile();
      fileIterator0.updateFileIterator(file2);
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      assertTrue(file0.equals((Object)file1));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.584705149014683
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("U`jGRz7`\"~ka$L@", "!rEQT!iTWZT`tF/Z]");
      mockFile0.deleteOnExit();
      File file0 = MockFile.createTempFile(" T_skf;H(5B]HtX/", "!rEQT!iTWZT`tF/Z]", (File) mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile(" T_skf;H(5B]HtX/", "!rEQT!iTWZT`tF/Z]");
      fileIterator0.hasNext();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator0.hasNext();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4772732336098775
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQT!iTWZT`tF/Z]", "<S)K4Yq9i/@(%");
      mockFile0.mkdirs();
      MockFile mockFile1 = new MockFile("<S)K4Yq9i/@(%", "<S)K4Yq9i/@(%");
      mockFile1.deleteOnExit();
      MockFile mockFile2 = new MockFile("<S)K4Yq9i/@(%");
      mockFile2.setReadable(true, false);
      mockFile0.setExecutable(true, false);
      File file0 = MockFile.createTempFile("<S)K4Yq9i/@(%", "<<<fWB[)^wgP6Ee)VP$", (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      fileIterator0.setUpInitialState(file0);
      assertEquals(0L, file0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5666575874192823
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "<S)K4YEq9i/@(%";
      MockFile mockFile0 = new MockFile("!rEQT!iTWZT`tF/Z]", "<S)K4YEq9i/@(%");
      File file0 = MockFile.createTempFile("<S)K4YEq9i/@(%", "%M-`Uk", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[6];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter6);
      fileIterator_FileIteratorBuilder0.build();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-1);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      // Undeclared exception!
      try { 
        fileIterator0.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3908903439523392
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.mkdirs();
      MockFile mockFile1 = new MockFile("");
      mockFile0.deleteOnExit();
      mockFile0.setWritable(false, false);
      MockFile mockFile2 = new MockFile("");
      mockFile1.mkdir();
      URI uRI0 = MockURI.aFTPURI;
      mockFile1.setReadable(true, false);
      URI uRI1 = MockURI.aFTPURI;
      mockFile1.setReadable(false, true);
      URI uRI2 = mockFile0.toURI();
      mockFile0.mkdirs();
      URI uRI3 = MockURI.URI("");
      URI uRI4 = MockURI.resolve(uRI3, uRI2);
      MockFile mockFile3 = new MockFile(uRI4);
      mockFile3.renameTo(mockFile1);
      mockFile3.setExecutable(false, true);
      mockFile3.mkdir();
      MockFile mockFile4 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile3);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      assertNotSame(fileIterator_FileIteratorBuilder1, fileIterator_FileIteratorBuilder0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.6262349030286853
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S6", "!rEQT!iTWZT`tF/Z]");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(false, true);
      mockFile0.mkdir();
      MockFile mockFile1 = new MockFile("%M-`Uk", "<<<fWB[)^wgP6Ee)VP$");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.updateFileIterator(mockFile1);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.spliterator();
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.setUpInitialState(mockFile0);
      File file0 = null;
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6088065199323753
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQAiT{ZTTt/Z]", "}<<YRz(yE85#3*t6");
      MockFile.createTempFile("}<<YRz(yE85#3*t6", "!rEQAiT{ZTTt/Z]", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.stream();
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter14 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter15 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.removeAll(linkedList0);
      linkedList0.push(multipleFileFilter0);
      MultipleFileFilter multipleFileFilter16 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter17 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter18 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter19 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter20 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter21 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter22 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter23 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter24 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.648107763603552
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      mockFile0.setExecutable(true, false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      fileIterator0.updateFileIterator(mockFile0);
      fileIterator1.setUpInitialState(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator1.iterator();
      // Undeclared exception!
      try { 
        fileIterator1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.452214863611805
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder2.build();
      fileIterator0.iterator();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      fileIterator0.iterator();
      fileIterator0.getNextFile();
      fileIterator0.iterator();
      File file0 = fileIterator1.next();
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      assertNotSame(fileIterator_FileIteratorBuilder3, fileIterator_FileIteratorBuilder0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.5398030721525346
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.spliterator();
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.getNextFile();
      fileIterator0.hasNext();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4790396227107716
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQT!iTWZT`tF/Z]");
      mockFile0.mkdirs();
      mockFile0.mkdirs();
      MockFile mockFile1 = new MockFile("");
      mockFile0.deleteOnExit();
      mockFile0.setWritable(false, false);
      MockFile mockFile2 = new MockFile("");
      mockFile1.mkdir();
      URI uRI0 = MockURI.aFTPURI;
      mockFile1.setReadable(true, false);
      URI uRI1 = MockURI.aFTPURI;
      mockFile1.setReadable(false, true);
      URI uRI2 = mockFile0.toURI();
      mockFile0.mkdirs();
      URI uRI3 = MockURI.URI("");
      URI uRI4 = MockURI.resolve(uRI3, uRI2);
      MockFile mockFile3 = new MockFile(uRI4);
      mockFile2.deleteOnExit();
      mockFile3.renameTo(mockFile1);
      mockFile3.setExecutable(false, true);
      mockFile3.mkdir();
      MockFile mockFile4 = new MockFile("!rEQT!iTWZT`tF/Z]", "!rEQT!iTWZT`tF/Z]");
      URI uRI5 = MockURI.aHttpURI;
      mockFile1.mkdir();
      MockFile mockFile5 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile5);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2853968236996516
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator0.spliterator();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[0];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder4.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder5.equals((Object)fileIterator_FileIteratorBuilder3));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4697846931481098
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQAiT{ZTTt/Z]", "}<<YRz(yE85#3*t6");
      MockFile.createTempFile("}<<YRz(yE85#3*t6", "!rEQAiT{ZTTt/Z]", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.stream();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter2);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter14 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter15 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter16 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.removeAll(linkedList0);
      linkedList0.push(multipleFileFilter0);
      MultipleFileFilter multipleFileFilter17 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter18 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter19 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter20 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter21 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter22 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter23 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter24 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter25 = new MultipleFileFilter(fileFilterArray0);
      assertFalse(multipleFileFilter25.equals((Object)multipleFileFilter17));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4395783683976435
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.521387661490451
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQAiT{ZTTt/Z]", "&{Z~T");
      File file0 = MockFile.createTempFile("&{Z~T", "!rEQAiT{ZTTt/Z]", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList1);
      linkedList1.add((FileFilter) multipleFileFilter2);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter14 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter15 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter16 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      linkedList2.push(multipleFileFilter0);
      MultipleFileFilter multipleFileFilter17 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter18 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter19 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter20 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter21 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter22 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter23 = new MultipleFileFilter(fileFilterArray0);
      fileIterator0.updateFileIterator(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      assertFalse(fileIterator_FileIteratorBuilder1.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7650491893256404
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "!rEQT!iTWZT`tF/Z]");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(false, false);
      File file0 = MockFile.createTempFile("{ro4", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer0);
      fileIterator0.updateFileIterator(mockFile0);
      assertTrue(fileIterator0.hasNext());
      
      fileIterator0.setUpInitialState(file0);
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8420905954707214
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQT!iTWZT`tF/Z]");
      mockFile0.setExecutable(true, true);
      mockFile0.mkdirs();
      mockFile0.mkdirs();
      MockFile mockFile1 = new MockFile("", "N:>PSR7G");
      mockFile0.deleteOnExit();
      mockFile0.setWritable(false, false);
      MockFile mockFile2 = new MockFile("");
      mockFile1.mkdir();
      URI uRI0 = MockURI.aFTPURI;
      mockFile2.mkdir();
      mockFile1.setReadable(true, false);
      MockURI.parseServerAuthority(uRI0);
      MockFile mockFile3 = new MockFile("");
      mockFile3.setReadable(false, false);
      mockFile3.deleteOnExit();
      mockFile2.renameTo(mockFile3);
      mockFile1.setExecutable(false, false);
      mockFile2.mkdir();
      MockFile mockFile4 = new MockFile(".MK`", "");
      MockFile mockFile5 = new MockFile(".MK`", ".MK`");
      mockFile5.setWritable(true, false);
      mockFile5.toURI();
      mockFile5.mkdir();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile3);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4466856169199285
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.3360791930213036
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!rEQAiT{ZTTt/Z]", "}<<YRz(yE85#3*t6");
      MockFile.createTempFile("}<<YRz(yE85#3*t6", "!rEQAiT{ZTTt/Z]", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.build();
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.stream();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter2);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter14 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter15 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter16 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.removeAll(linkedList0);
      linkedList0.push(multipleFileFilter0);
      MultipleFileFilter multipleFileFilter17 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter18 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter19 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter20 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter21 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter22 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter23 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter24 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter25 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter26 = new MultipleFileFilter(fileFilterArray0);
      assertFalse(multipleFileFilter26.equals((Object)multipleFileFilter16));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K7fVCW=ufO-/+GYf,");
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "K7fVCW=ufO-/+GYf,");
      mockFile0.setLastModified(0L);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }
}
