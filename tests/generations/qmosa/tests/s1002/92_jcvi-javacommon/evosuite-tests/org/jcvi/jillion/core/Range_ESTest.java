/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 08:57:25 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.0490654853076
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(2914L);
      Range range1 = Range.of(65535L);
      range1.startsBefore(range0);
      List<Range> list0 = range0.complement(range1);
      Long long0 = new Long(65535L);
      long long1 = 32777L;
      Range range2 = Range.of(32777L);
      Range range3 = Range.of(1L, 32777L);
      range0.equals(range2);
      Range.of(1L, 65535L);
      range0.isSubRangeOf(range3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.complementFrom(list0);
      // Undeclared exception!
      range3.forEach(consumer0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.8413914966994334
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854710273L);
      Long long0 = new Long(2256L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(32767L);
      Range.Builder range_Builder2 = new Range.Builder(871L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 285L;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 285L, 32767L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder3.copy();
      Range range1 = Range.of(4475L, 9223372036854710273L);
      range0.intersection(range1);
      Range range2 = range1.intersection(range0);
      Object object0 = new Object();
      range2.equals(object0);
      range1.complement(range0);
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder(range_CoordinateSystem0, 2256L, (-745L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.899329753677341
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854769533L);
      Range.of((-32768L), (-32768L));
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.equals(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      range2.intersection(range1);
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder1.contractEnd(9223372036854769533L);
      Range.Builder range_Builder4 = range_Builder3.copy();
      Range.Builder range_Builder5 = new Range.Builder(range_Builder0);
      long long1 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        range_Builder4.contractBegin(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.62029145844271
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2147483666L);
      boolean boolean0 = range0.equals((Object) null);
      Range range1 = Range.of(2147483666L, 2147483666L);
      boolean boolean1 = range0.startsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      Range.ofLength(2147483666L);
      Range range2 = Range.ofLength(2147483666L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(2147483666L);
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.025113244942478
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(9223372036854775553L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775553L);
      Range range2 = Range.of(range_CoordinateSystem0, (-175L), (-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.complement(range2);
      range1.spliterator();
      range1.equals((Object) null);
      range0.isSubRangeOf(range1);
      Range.of(range_CoordinateSystem0, (-1L), 286L);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.524941870944431
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 127L;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      Range.of(127L);
      Long long1 = new Long(65535L);
      long long2 = 32767L;
      Range range1 = Range.of(127L);
      Range.of(127L, 65535L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("hQGRd", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse hQGRd into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.994574212266081
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(2147483666L);
      range0.spliterator();
      Range range1 = Range.of(2147483666L, 2147483666L);
      Range range2 = Range.of((-1L));
      Range range3 = Range.of((-1L));
      List<Range> list0 = range3.complement(range1);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range range4 = range2.intersection(range3);
      range2.equals(range3);
      Range range5 = Range.of(2147483666L);
      List<Range> list2 = range3.complement(range5);
      assertTrue(list2.contains(range2));
      assertSame(range3, range4);
      
      Range range6 = Range.of(2147483666L);
      assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.809548926440312
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(9223372036854775553L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775553L, 9223372036854775553L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      range0.complementFrom(list2);
      range1.getEnd(range_CoordinateSystem0);
      Range.of(9223372036854775553L, 9223372036854775553L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-1555L), (-1555L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder((-1555L), (-1555L));
      range_Builder0.copy();
      Range range2 = Range.of((-2581L));
      // Undeclared exception!
      try { 
        range2.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2581 would make range [9223372036854775553 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.157688739026163
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(1L, 2914L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(2914L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of((-137L));
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertFalse(list1.equals((Object)list0));
      assertEquals(1, list1.size());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      List<Range> list2 = range2.complement(range1);
      List<Range> list3 = range2.complementFrom(list2);
      assertFalse(list3.contains(range2));
      
      long long1 = range1.getEnd(range_CoordinateSystem0);
      assertTrue(long1 == long0);
      
      Range range3 = Range.of(2914L, 2914L);
      assertSame(range3, range1);
      
      Range range4 = Range.of((-1L));
      range4.intersection(range0);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.7630758746602866
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(9223372036854775553L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775553L);
      range0.complement(range1);
      Object object0 = new Object();
      range0.equals(object0);
      Range range2 = Range.ofLength(0L);
      range2.endsBefore(range0);
      long long0 = 127L;
      long long1 = (-1232L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1232L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.041048303977226
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(1L, 2914L);
      range0.endsBefore(range0);
      Range range1 = Range.of(2914L);
      Long long0 = new Long(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      Range range2 = Range.of(range_CoordinateSystem0, 1306L, 32767L);
      Range.of(1L, 32767L);
      range0.iterator();
      range1.equals(range2);
      Range range3 = Range.ofLength(0L);
      range3.endsBefore(range0);
      Range range4 = Range.of(32767L);
      range4.complement(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.7335386790719363
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range0.equals(range1);
      Range.of((-3235L));
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(33L, 33L);
      long long0 = (-400L);
      Range.Builder range_Builder2 = new Range.Builder((-2147483648L), (-2147483648L));
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(2390L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.6478626658194577
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 4294967299L;
      long long1 = (-2168L);
      Range range0 = Range.of((-2168L), 4294967299L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range0.equals(range_Builder0);
      range0.intersection(range0);
      long long2 = 1235L;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(9223372036854775807L, 1235L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.810982796882201
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(9223372036854710273L);
      Long long0 = new Long((-1L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-745L));
      Range.Builder range_Builder2 = new Range.Builder(871L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 285L, 32767L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder2);
      Range range1 = Range.ofLength(9223372036854710273L);
      // Undeclared exception!
      try { 
        range1.complement(range0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.677167107084926
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-1696L));
      Object object0 = new Object();
      range0.equals((Object) null);
      long long0 = (-3235L);
      long long1 = (-1L);
      Range range1 = Range.of((-1L));
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(385L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6857705644858383
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.of(4294967299L, 4294967299L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 9223372034707292161L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967299L, 9223372034707292161L);
      Range range1 = Range.of((-1304L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.084621029694373
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854769533L);
      range0.isSubRangeOf(range0);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-489L), 32767L);
      range1.isSubRangeOf(range0);
      long long0 = 0L;
      Range range2 = Range.ofLength(9223372036854769533L);
      Range range3 = Range.of((-3217L), (-1L));
      Range range4 = range2.intersection(range0);
      range4.complement(range3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.7082591938153735
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-2147483648L), (-2147483648L));
      range_Builder0.contractEnd((-1249L));
      range_Builder0.shift((-2147483648L));
      Range.Builder range_Builder2 = range_Builder0.contractBegin((-32768L));
      Range.Builder range_Builder3 = new Range.Builder();
      Range range0 = Range.of((-32768L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder6 = new Range.Builder(453L, 3430L);
      Range.Builder range_Builder7 = new Range.Builder((-2147483648L), (-1249L));
      Range.Builder range_Builder8 = new Range.Builder();
      range_Builder6.copy();
      Range range1 = Range.of((-2147483648L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5861498929724394
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.equals((Object) null);
      Range range1 = Range.of(2147483647L);
      range1.intersection(range0);
      Long long0 = new Long(220L);
      long long1 = 9223372036854775807L;
      long long2 = (-80L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854770167L, (-80L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4415990625627835
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2147483647L, (-3235L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.9645034651304414
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 286L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(286L);
      Range range3 = Range.of(1L, 0L);
      range1.isSubRangeOf(range2);
      range0.endsBefore(range1);
      Range.ofLength(765L);
      Object object0 = new Object();
      range3.startsBefore(range1);
      Range.of(286L);
      Range range4 = range0.intersection(range1);
      range4.spliterator();
      Range.of(0L);
      range4.equals(range3);
      Range.ofLength(1661L);
      Range range5 = Range.of(0L);
      Range.ofLength(0L);
      range4.isSubRangeOf(range5);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.9903492695503573
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(820L, 4294967299L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(4294967299L);
      range0.equals(range_Builder2);
      Range.Builder range_Builder3 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = range_Builder1.shift(1660L);
      Range.Builder range_Builder6 = new Range.Builder(0L);
      range_Builder5.copy();
      range_Builder6.shift(1660L);
      Range.Builder range_Builder7 = new Range.Builder(0L);
      range_Builder7.shift((-345L));
      Range.Builder range_Builder8 = new Range.Builder(1660L);
      Range range1 = range_Builder8.build();
      range_Builder2.expandBegin(4294967299L);
      Range.Builder range_Builder9 = new Range.Builder();
      Range.of((-2147484026L));
      Range range2 = range1.intersection(range0);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.117645629412572
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(6250L);
      Range range1 = Range.of(6250L);
      range0.startsBefore(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      range_Builder0.expandBegin(665L);
      range_Builder0.expandEnd(4494L);
      range_Builder0.contractEnd(4494L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4494L, 6250L);
      Object object0 = new Object();
      range2.equals(object0);
      Range range3 = Range.ofLength(9223372036854710269L);
      Range range4 = Range.of((-1L), 127L);
      range4.intersection(range3);
      long long0 = 127L;
      Range.of(1L);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.908924451150387
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      long long0 = 2914L;
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1L, 2914L);
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range2 = Range.of(2914L);
      Long long1 = new Long(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 1271L, 32767L);
      range2.equals(range3);
      Range range4 = Range.ofLength(0L);
      Range range5 = Range.ofLength(1271L);
      range4.endsBefore(range5);
      Range range6 = Range.ofLength(127L);
      range6.asRange();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.of(127L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.925381690537601
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(2914L);
      Range range1 = Range.of(65535L);
      range0.complement(range1);
      Long long0 = new Long(65535L);
      long long1 = 32767L;
      Range range2 = Range.of(32767L);
      Range range3 = Range.of(1L, 32767L);
      range0.equals(range2);
      range0.intersection(range3);
      range0.isSubRangeOf(range3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range3.forEach(consumer0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.156646957297009
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 93L, 93L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.8822564868937848
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 127L;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      long long1 = (-3414L);
      Range range1 = Range.of((-3414L), 127L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      range0.complement(range1);
      long long2 = (-1166L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1166L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.216212418083071
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = 9223372036854769558L;
      Range range0 = Range.ofLength(9223372036854769558L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-175L);
      long long2 = 255L;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.8249523669538226
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.of(2147483666L, 2147483666L);
      Range range0 = Range.of((-1L));
      Range range1 = Range.of(2147483666L, 2147483666L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.intersection(range1);
      range0.equals(range1);
      Range range2 = Range.of(2147483666L);
      List<Range> list0 = range2.complementFrom(linkedList0);
      range1.complementFrom(list0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(2147483666L, 1241L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.756945675328559
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), (-46L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-32768L));
      Range.Builder range_Builder2 = new Range.Builder();
      Range.of((-1L), (-1L));
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder3.copy();
      Range.of((-1L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.617798746965039
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(9223372036854710273L);
      range0.equals("c_X']D5`JUue2f]MlSk");
      Range range1 = Range.of(220L);
      range1.intersection(range0);
      Long long0 = new Long((-3235L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-3235L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.6387753621937122
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.of(9223372036854710273L);
      Range range0 = Range.of((-32768L), 1L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), 2044L);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.802893123849505
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 286L);
      Range range1 = range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range0.endsBefore(range1);
      Range.of(1L, 0L);
      range0.endsBefore(range0);
      range_Builder0.copy();
      Range range2 = range1.asRange();
      // Undeclared exception!
      try { 
        range2.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.000907017448394
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.ofLength(2147483647L);
      Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd((-387L));
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range0 = Range.of((-387L));
      Range range1 = Range.of((-1777L));
      range0.intersection(range1);
      range0.equals(range1);
      Range.Builder range_Builder4 = range_Builder2.expandBegin(4294967295L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      // Undeclared exception!
      try { 
        Range.ofLength((-1777L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.9949707774189918
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 286L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.of(1L, 0L);
      range2.isSubRangeOf(range2);
      Range range3 = range2.asRange();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Long long0 = new Long(285L);
      range3.equals(range1);
      Range.ofLength(622L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.724271141253452
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 2040L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.145998322976767
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = 9223372036854775459L;
      Range range0 = Range.of(9223372036854775459L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.038727296087623
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Object object0 = new Object();
      range0.getEnd();
      Range range1 = Range.ofLength(255L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.expandEnd(1844L);
      Range range2 = Range.ofLength(706L);
      Range range3 = Range.of(820L);
      Long long0 = new Long(255L);
      Range range4 = Range.of(0L, 1844L);
      Range range5 = Range.ofLength(1843L);
      range1.endsBefore(range5);
      List<Range> list0 = range1.complement(range3);
      range0.complementFrom(list0);
      range4.equals(range5);
      range5.startsBefore(range2);
      Range.Builder range_Builder3 = range_Builder2.shift(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder3.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854773966 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4903088966462446
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range0 = Range.of(1L);
      range0.forEach(consumer0);
      Object object1 = new Object();
      Range range1 = Range.ofLength(1040L);
      boolean boolean0 = range0.equals(range1);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(boolean1 == boolean0);
      
      Range.of(1L);
      range1.forEach(consumer1);
      range0.startsBefore(range1);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.ofLength(1L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.ofLength(896L);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      
      Range range4 = Range.of(128L);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.986826556658937
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.equals("c_X']D5`JUue2f]MlSk");
      Range range1 = Range.of((-3235L));
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-2147483648L), (-3235L));
      Long long0 = new Long((-484L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder1.build();
      Range.ofLength(65535L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder3.expandBegin((-612L));
      Range.Builder range_Builder5 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder((-2167L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.5995009161940796
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 255L;
      Range.of(range_CoordinateSystem0, 127L, 255L);
      Range range0 = Range.of(127L, 255L);
      Range range1 = Range.of(255L);
      Range range2 = range0.intersection(range1);
      range0.equals(range2);
      long long1 = 1092L;
      Range.ofLength(127L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.971056370750703
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd((-387L));
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder1.contractBegin((-387L));
      Range range1 = Range.of((-387L));
      Range range2 = Range.of((-1777L));
      range1.intersection(range2);
      range0.equals(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.ofLength((-3228L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=4.0906646901463715
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      Range range0 = range_Builder0.build();
      range0.startsBefore(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range range1 = Range.of(2914L);
      Long long0 = new Long(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-489L), 32767L);
      boolean boolean0 = range1.isSubRangeOf(range2);
      assertTrue(boolean0);
      
      Range range3 = Range.ofLength(0L);
      Range range4 = Range.of(2914L, 2914L);
      Range range5 = range4.intersection(range0);
      assertTrue(range5.isEmpty());
      assertSame(range4, range1);
      
      range3.complement(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      range0.getEnd();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.4217490539107116
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 5038L;
      Range range0 = Range.of(5038L);
      Range range1 = Range.of(5038L);
      range0.intersection(range1);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(5038L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.8650591709057607
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      boolean boolean0 = range0.endsBefore(range0);
      Object object0 = new Object();
      boolean boolean1 = range0.isSubRangeOf(range0);
      assertTrue(boolean1);
      
      Range range1 = Range.of(127L);
      range0.startsBefore(range0);
      Range range2 = range0.intersection(range0);
      boolean boolean2 = range0.equals(range2);
      assertFalse(boolean2 == boolean0);
      
      Range range3 = Range.of(1952L);
      range3.complement(range2);
      Range range4 = range3.intersection(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range3.isEmpty());
      assertSame(range0, range2);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.709918671966503
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1091L;
      Range range0 = Range.of(range_CoordinateSystem0, 1091L, 1091L);
      Range range1 = Range.of(1L, 1091L);
      Range range2 = range0.intersection(range1);
      range2.equals((Object) null);
      long long1 = (-1254L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1254L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2081819478882956
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294967295L;
      Range.of(range_CoordinateSystem0, 6126504L, 9223372036854705787L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("`Ag");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.`Ag
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.6749145089602764
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.ofLength(820L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = Range.of(2147483647L);
      Range range3 = Range.ofLength(2147483647L);
      assertFalse(range3.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(164L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder4.expandBegin(2147483647L);
      boolean boolean0 = range2.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.860879476601457
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 286L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long1 = (-32768L);
      Range range1 = Range.of((-32768L), 9223372036854710273L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range0.equals((Object) null);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.934710942478714
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      Range range1 = Range.of((-3219L), (-3219L));
      Range range2 = range0.intersection(range1);
      range2.equals(",*y4FO;4\"q/");
      Range.ofLength(1092L);
      range1.complement(range0);
      List<Range> list0 = new LinkedList<Range>();
      Range range3 = range1.intersection(range2);
      range3.isEmpty();
      Range.of((-3219L));
      range3.complement(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.5839534122759407
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(1659L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      Range.of(4294967295L);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.8267826678613304
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder3.shift(9223372036854775807L);
      long long0 = 0L;
      Range.Builder range_Builder4 = range_Builder0.expandBegin(0L);
      Range.Builder range_Builder5 = new Range.Builder(1151L);
      Range range0 = Range.ofLength(9223372036854775807L);
      range_Builder3.copy();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder4);
      range_Builder5.build();
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(126L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.7513634864149594
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1L, 2914L);
      Range range2 = Range.ofLength(2211L);
      assertFalse(range2.isEmpty());
      
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range3 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder0);
      range_Builder4.expandBegin(2914L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertSame(range0, range3);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-3219L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-3219L), (-3219L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.78929534108284
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1350L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder1.contractEnd(1350L);
      Range.Builder range_Builder4 = range_Builder3.copy();
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range range0 = Range.of(1350L);
      Range range1 = Range.of(2147483647L);
      Range range2 = range1.intersection(range0);
      range2.equals(range_Builder0);
      assertTrue(range2.isEmpty());
      
      Range.Builder range_Builder6 = range_Builder2.expandBegin(1322L);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder6);
      Range.Builder range_Builder8 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder9 = new Range.Builder();
      Range.Builder range_Builder10 = new Range.Builder(772L);
      Range range3 = Range.of(1350L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.747786261191311
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      Range range1 = Range.of((-3219L), (-3219L));
      Range range2 = range0.intersection(range1);
      long long0 = 1L;
      Range.of((-3219L), 1L);
      range1.endsBefore(range2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.985277805472209
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      Range range0 = Range.of(1L, 2914L);
      Range range1 = Range.ofLength(2211L);
      range0.startsBefore(range1);
      Range.Builder range_Builder2 = new Range.Builder(1L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range2 = range_Builder3.build();
      assertTrue(range2.isEmpty());
      
      Range.Builder range_Builder4 = range_Builder3.expandEnd(665L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-1282L), 1399L);
      assertFalse(range3.isEmpty());
      
      Range.of((-818L), 2147483647L);
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      Range range4 = range_Builder4.build();
      assertNotSame(range4, range0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.9362525686218035
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = 9223372036854769533L;
      Range range0 = Range.ofLength(9223372036854769533L);
      long long1 = (-3235L);
      Range.of(1L);
      Range range1 = Range.of((-2147483648L), 2147483647L);
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2942L, (-3235L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.5547925871141897
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1350L);
      range_Builder0.shift(1350L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(1350L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(1350L, 2600L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder4.copy();
      Range range0 = Range.of((-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.742251952148701
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder3 = new Range.Builder(1151L);
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.equals((Object) null);
      range_Builder2.copy();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1033L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 1033L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5021473912774983
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(4294967299L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L);
      range0.equals(range_Builder0);
      Range range1 = Range.of(2102L);
      range1.intersection(range0);
      Long long0 = new Long((-4034L));
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(2102L, (-3977L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.941394209190986
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      range_Builder1.expandEnd(1L);
      range_Builder0.copy();
      range_Builder0.contractBegin((-32768L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1L, 2914L);
      range1.startsBefore(range1);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.expandBegin(14L);
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder3 = range_Builder0.expandBegin(1L);
      range_Builder0.expandBegin(1531L);
      range_Builder3.expandEnd(1L);
      boolean boolean0 = range0.endsBefore(range2);
      Range.Builder range_Builder4 = range_Builder0.expandEnd(621L);
      Range range3 = Range.of(14L);
      boolean boolean1 = range2.endsBefore(range3);
      assertFalse(boolean1 == boolean0);
      
      Range range4 = range_Builder4.build();
      assertNotSame(range4, range2);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.387263518740137
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-387L));
      range0.intersection(range0);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1777L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=4.209829291626602
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(9223372036854710273L);
      range0.equals("c_X']D5`JUue2f]MlSk");
      Range range1 = Range.of(220L);
      Range range2 = range1.intersection(range0);
      Long long0 = new Long((-3235L));
      Object object0 = new Object();
      range1.equals("c_X']D5`JUue2f]MlSk");
      Range range3 = Range.of(1513L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      Range range4 = range2.intersection(range0);
      range2.equals(object0);
      Range range5 = Range.of(9223372036854710273L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range5.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range0.complementFrom(linkedList0);
      Range.of((-43L), 220L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>(linkedList1);
      List<Range> list0 = range5.complementFrom(linkedList0);
      range3.complementFrom(list0);
      range4.asRange();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.981987341407728
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(738L);
      String string0 = range0.toString();
      assertEquals("[ 738 .. 738 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(739L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 738 .. 738 ]/0B", range_CoordinateSystem1);
      List<Range> list0 = range2.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      assertTrue(list2.contains(range2));
      
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(740L, long0);
      
      Range range3 = Range.ofLength(1856L);
      Range range4 = Range.of(1856L);
      Range range5 = Range.ofLength(255L);
      Range range6 = range5.intersection(range4);
      assertTrue(range6.isEmpty());
      assertNotSame(range5, range3);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.739152219367078
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(7230L, 7230L);
      Range.Builder range_Builder0 = new Range.Builder(3898L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder2.expandBegin(3898L);
      range0.equals(range_Builder3);
      Range range1 = Range.of(2873L);
      range0.intersection(range1);
      Long long0 = new Long((-4034L));
      long long1 = 689L;
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(689L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.736912161914414
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(255L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range1 = Range.of(255L, 255L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range range2 = range1.intersection(range0);
      range2.equals(consumer1);
      Range.of(255L);
      range1.complement(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.7541708987463647
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractEnd((-32768L));
      Range.Builder range_Builder2 = range_Builder0.contractEnd(1L);
      Range.Builder range_Builder3 = range_Builder2.copy();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      range_Builder3.contractBegin((-2235L));
      Range range0 = Range.of(127L);
      Range range1 = Range.of(186L);
      range1.intersection(range0);
      range1.equals(range0);
      Range.Builder range_Builder5 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.845955256752468
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = 843L;
      Range range0 = Range.of(843L, 843L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.iterator();
      range0.complement(range0);
      Range.parseRange("[ 844 .. 844 ]/RB");
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("XT]^8{K3%}Qftewe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse XT]^8{K3%}Qftewe into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.434779268650806
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.of((-9223372036854775808L));
      Range range0 = Range.of(1702L);
      Range range1 = Range.of(1921L);
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.6587081603579397
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(255L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 2147483666L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(256L, long0);
      
      long long1 = range0.getEnd();
      assertEquals(255L, long1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.7784881022850856
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1155L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      Range range2 = Range.of(0L);
      long long0 = range2.getBegin();
      assertEquals(0L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      Range range3 = range2.asRange();
      assertFalse(range3.isEmpty());
      assertNotSame(range3, range1);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd((-1822L));
      range_Builder1.expandBegin((-1822L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.9164516808867793
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(2147483666L);
      Range range1 = Range.of(2147483666L, 2147483666L);
      Range range2 = Range.of((-1L));
      List<Range> list0 = range2.complement(range1);
      range2.complementFrom(list0);
      range2.intersection(range0);
      Range range3 = Range.of(2147483666L);
      range2.complement(range3);
      Range.of((-1L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.753496388658808
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854769558L);
      Range range1 = Range.ofLength(3638L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
      
      Range.ofLength(9223372036854769558L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.7953400044782692
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 286L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-106L), 252L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.9669174323798795
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1L, 2914L);
      range1.startsBefore(range1);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.expandBegin(14L);
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder3 = range_Builder0.expandBegin(665L);
      range_Builder0.expandBegin(1531L);
      range_Builder3.expandEnd(665L);
      range_Builder0.expandEnd(621L);
      Range range3 = Range.ofLength(1L);
      Range.of(14L);
      range3.startsBefore(range1);
      boolean boolean0 = range3.startsBefore(range0);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of((-2810L));
      boolean boolean1 = range4.intersects(range2);
      assertFalse(boolean1 == boolean0);
      assertFalse(range4.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=4.07906671172931
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.of(820L);
      Range range0 = Range.ofLength(2147483644L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(820L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(820L);
      Range range2 = Range.ofLength(2147483644L);
      List<Range> list0 = range0.complement(range2);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.expandBegin(4494L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder2.copy();
      range2.asRange();
      Long long0 = new Long(2242L);
      Range range3 = range2.intersection(range0);
      boolean boolean0 = range1.intersects(range2);
      assertSame(range2, range3);
      assertFalse(boolean0);
      
      Range range4 = Range.ofLength(1465L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=4.067420510791365
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(820L);
      Range range1 = Range.ofLength(2147483644L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(820L);
      long long0 = 4494L;
      Range.Builder range_Builder2 = range_Builder1.expandEnd(820L);
      range1.complement(range0);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.expandBegin(4494L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder2.copy();
      range0.asRange();
      Long long1 = new Long(2242L);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=4.006389031659124
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      Range range1 = Range.of((-3219L), (-3219L));
      Range range2 = range0.intersection(range1);
      range2.equals(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.complement(range1);
      range1.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(range1);
      Range range3 = Range.of((-3219L));
      range1.intersection(range3);
      Range.of((-3219L));
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.complement(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      Range.of((-129L));
      Range.of((-22L), 1549L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 65535L, (-102L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.832719965242804
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1350L);
      range_Builder0.copy();
      range_Builder0.expandEnd(1350L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 2600L;
      Range.Builder range_Builder2 = new Range.Builder(1350L, 2600L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.copy();
      Range range0 = Range.of(357L, 1350L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1350L, 2600L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-323L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.927289678818903
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = range0.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(0L);
      range_Builder2.shift((-3166L));
      range_Builder1.expandBegin((-4315L));
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder2.copy();
      Range range2 = Range.of(1490L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 255L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.7382956754402574
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1490L, 1490L);
      Range.Builder range_Builder1 = new Range.Builder(1490L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.build();
      Range range0 = Range.of((-16L), 1659L);
      range_Builder2.shift(4042L);
      range_Builder0.expandBegin(738L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(0L);
      range_Builder4.copy();
      Range range1 = Range.of((-16L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3715041769679677
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2597L), (-2597L));
      long long0 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.314176458842242
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 9223372036854769558L;
      Range.ofLength(9223372036854769558L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-32768L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854769558L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854769558 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = (-3219L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854774988L, (-3219L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3219 would make range [9223372036854774988 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=4.090530478329837
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.of(820L);
      Range range0 = Range.ofLength(2147483644L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(2147483644L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(820L);
      range_Builder1.expandEnd(820L);
      Range range2 = Range.ofLength(2147483644L);
      List<Range> list0 = range0.complement(range2);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.expandBegin(9223372036854775807L);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775807L);
      range_Builder3.copy();
      range0.asRange();
      Long long0 = new Long((-1315L));
      Range range3 = range2.intersection(range1);
      Range.ofLength(51L);
      long long1 = range3.getLength();
      assertFalse(range1.isEmpty());
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.8430877723959695
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(255L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 2147483666L);
      Range range1 = Range.of((-1L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.667417696432669
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range.of(range_CoordinateSystem0, 0L, 1155L);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1714L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.632135539507866
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      range_Builder1.expandEnd(1159L);
      Range.ofLength(820L);
      Range.ofLength(0L);
      Long long0 = new Long((-2147483648L));
      Range.ofLength(9223372036854775016L);
      Range.ofLength(2051L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.6175513782678785
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(1832L);
      Range range1 = range0.intersection(range0);
      Range range2 = Range.ofLength(255L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range_Builder3.expandBegin(792L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range2.intersects(range0);
      assertTrue(boolean0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.6537694528177966
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(2147483666L);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.expandEnd(1718L);
      Range.Builder range_Builder2 = new Range.Builder(1718L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      long long0 = 2600L;
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(1718L, (-1390L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.4640341497709555
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.of(6126504L, 4294967295L);
      Range range0 = Range.of(4294967295L);
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.857958310075369
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = range0.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-32768L), 783L);
      range1.isSubRangeOf(range0);
      Range.ofLength(127L);
      Range.of((-32768L));
      long long0 = 349L;
      Long long1 = new Long(1L);
      Range.of(349L, 6126504L);
      Range.ofLength(1382L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.69193146107876
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.of(4294967299L, 4294967299L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 9223372034707292161L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-2147483648L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=4.085962183323864
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of((-387L));
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(2147483647L);
      range_Builder1.shift(2147483647L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range2);
      Range.Builder range_Builder4 = new Range.Builder(range2);
      range_Builder4.expandEnd(2147483647L);
      Range range3 = Range.ofLength(2057L);
      Range range4 = range3.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.isSubRangeOf(range4);
      Range.ofLength(2147483647L);
      range4.getBegin();
      Range range5 = Range.of((-738L), (-1L));
      range0.intersection(range5);
      // Undeclared exception!
      try { 
        range0.complement(range4);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.5412988746251517
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(2147483666L, 2147483666L);
      Range range1 = Range.of(2147483666L, 2147483666L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range2 = range0.intersection(range1);
      range0.equals(range1);
      List<Range> list0 = range2.complementFrom(linkedList0);
      range1.complementFrom(list0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(2147483666L, 1241L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.861067462625814
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.equals("c_X']D5`JUue2f]MlSk");
      range0.spliterator();
      range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-2147483648L), (-3235L));
      Range.Builder range_Builder2 = new Range.Builder((-2147483648L), (-400L));
      range_Builder0.contractEnd((-1249L));
      range_Builder2.shift((-3235L));
      Range.Builder range_Builder3 = range_Builder2.contractBegin((-32768L));
      Range.Builder range_Builder4 = new Range.Builder();
      Range.of((-32768L));
      Range.Builder range_Builder5 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder7 = new Range.Builder(453L, 3430L);
      range_Builder2.contractBegin((-681L));
      Range.Builder range_Builder8 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder9 = new Range.Builder(range_Builder8);
      range_Builder0.copy();
      Range.Builder range_Builder10 = null;
      try {
        range_Builder10 = new Range.Builder((-1249L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.7743670557607367
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.of(2147483666L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-128L), 1350L);
      Range.Builder range_Builder1 = new Range.Builder(2147483666L);
      long long0 = 2147483665L;
      range_Builder1.expandBegin(2147483665L);
      Range range1 = Range.of(439L);
      range0.equals(range1);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(439L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.3840782223121924
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-1L));
      Range range0 = range_Builder0.build();
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.8609075434234903
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1350L);
      range_Builder0.copy();
      range_Builder0.expandEnd(1350L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(1350L, 2600L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.copy();
      // Undeclared exception!
      try { 
        Range.of(2600L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.452418052566073
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2575L), (-2575L));
      long long0 = range0.getBegin();
      assertEquals((-2576L), long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2575L), (-2575L));
      assertTrue(range1.isEmpty());
      
      long long1 = new Long((-2575L));
      assertFalse(long1 == long0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.890770574300329
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854769533L);
      range0.iterator();
      long long0 = (-878L);
      range0.isSubRangeOf(range0);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.ofLength((-878L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=4.117080809782883
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 286L);
      Range range1 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(286L);
      Range range2 = Range.of(1L, 0L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      range2.getBegin();
      boolean boolean1 = range0.endsBefore(range1);
      assertFalse(boolean1 == boolean0);
      
      Range.ofLength(765L);
      Object object0 = new Object();
      range2.startsBefore(range1);
      Range range3 = Range.of(286L);
      assertFalse(range3.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 0L, 749L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range5 = Range.of(range_CoordinateSystem2, (-2292L), 1L);
      assertFalse(range5.isEmpty());
      
      List<Range> list0 = range0.complement(range2);
      Range.of(234L);
      List<Range> list1 = range4.complementFrom(list0);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.267114301907333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(9223372036854775807L);
      Object object0 = new Object();
      long long0 = 6126504L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.9358015394697636
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(1428L, 3327L);
      List<Range> list0 = range0.split(1428L);
      range0.complementFrom(list0);
      range0.complementFrom(list0);
      Range range1 = Range.of(1428L, 2914L);
      range0.intersection(range1);
      Range.ofLength(3849L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1428L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.9909648530286606
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854769545L);
      List<Range> list0 = range0.complement(range0);
      range0.complement(range0);
      range0.complementFrom(list0);
      Range range1 = range0.asRange();
      Range.of((-878L), 1L);
      // Undeclared exception!
      try { 
        range1.split(9223372036854769545L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -12527 would make range [9223372036854769545 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.830656010904793
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range0 = Range.of(2147516017L, 2147516017L);
      range0.split(2147516017L);
      range0.split(6126504L);
      Range.of((-168L));
      Range range1 = Range.of(6126504L);
      Range range2 = range0.intersection(range1);
      Range range3 = range0.intersection(range1);
      assertSame(range3, range2);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854710274L, 9223372036854710274L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.7403248176471577
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1490L, 1490L);
      range_Builder0.expandBegin(1490L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.of((-1L), 1659L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.shift(4042L);
      range_Builder0.expandBegin(738L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(0L);
      range_Builder4.copy();
      range_Builder4.copy();
      range_Builder4.copy();
      Range range1 = Range.of(6126503L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=4.063956530703648
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.of(820L);
      Range range0 = Range.ofLength(2147483644L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(820L);
      range_Builder1.expandEnd(820L);
      Range range2 = Range.ofLength(2147483644L);
      List<Range> list0 = range0.complement(range2);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.expandBegin(9223372036854775807L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.copy();
      range0.asRange();
      Long long0 = new Long((-1315L));
      Range range3 = range2.intersection(range1);
      Range.ofLength(51L);
      Range.of(51L);
      long long1 = range3.getLength();
      assertSame(range2, range0);
      assertTrue(range1.isEmpty());
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=4.116762467228659
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.of(9223372036848649304L);
      Range.of((-1229L));
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 9223372034707292155L, 9223372036854775111L);
      Range.Builder range_Builder2 = range_Builder0.shift(1451L);
      range_Builder2.build();
      Object object0 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, 1842L, 9223372034707292155L);
      Range.ofLength(9223372036854775111L);
      Range range2 = Range.of((-9223372036854775808L));
      Range range3 = range0.intersection(range2);
      range3.split(31477L);
      // Undeclared exception!
      try { 
        range1.split((-2401L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.3037208868785237
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1677L), 0L);
      range_Builder0.contractEnd((-1677L));
      Range range0 = range_Builder0.build();
      range0.getEnd();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.5523505846721872
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1350L);
      Range.Builder range_Builder1 = new Range.Builder(1350L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.expandBegin(2600L);
      range_Builder2.expandBegin(2600L);
      range_Builder2.copy();
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.427071343575012
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range0.split((-1624L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.8527272873403113
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      Range range1 = Range.of(127L, 127L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.endsBefore(range1);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Object object0 = new Object();
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(2162L);
      Range range3 = Range.of(127L);
      range2.startsBefore(range3);
      long long0 = 1139L;
      Range.ofLength(1139L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2341L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.781020942164507
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-175L), 255L);
      Range.of(255L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      range0.forEach(consumer0);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 6126504L;
      Range.of(range_CoordinateSystem1, 6126504L, 4294967295L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.8569070493154816
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      Range range1 = Range.of(127L, 127L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      boolean boolean0 = range1.isSubRangeOf(range0);
      Object object0 = new Object();
      range0.isEmpty();
      Range.of(127L);
      boolean boolean1 = range1.startsBefore(range0);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Range range2 = Range.ofLength(4294967295L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Range.of(4294967295L);
      Range range3 = Range.ofLength(992L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(0L);
      //  // Unstable assertion: assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.404101322986952
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range0 = Range.of(1503L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.559915148392848
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 9223372036848649304L;
      Range.of(9223372036848649304L);
      long long1 = 0L;
      Range range0 = Range.ofLength(9223372036848649304L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.941394209190986
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      range_Builder1.expandEnd(1L);
      range_Builder0.copy();
      range_Builder0.contractBegin((-32768L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1L, 2914L);
      range1.startsBefore(range1);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.expandBegin(14L);
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder3 = range_Builder0.expandBegin(1L);
      range_Builder0.expandBegin(1531L);
      range_Builder3.expandEnd(1L);
      boolean boolean0 = range0.endsBefore(range2);
      range_Builder0.expandEnd(621L);
      Range.of(14L);
      boolean boolean1 = range0.startsBefore(range1);
      assertTrue(boolean1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      Range range3 = range_Builder3.build();
      assertNotSame(range3, range2);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.977760422381135
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854769533L);
      List<Range> list0 = range0.complement(range0);
      range0.complement(range0);
      range0.asRange();
      Range range1 = Range.of((-878L), 1L);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range1.complementFrom(list1);
      //  // Unstable assertion: assertFalse(list2.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 0 .. 9223372036854769533 ]/SB", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.4878640037699413
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2597L), (-2597L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2597L), (-2597L));
      assertTrue(range1.isEmpty());
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2597L), long0);
      
      long long1 = range0.getEnd();
      assertEquals((-2598L), long1);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.785922025543337
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-3235L));
      Range range1 = Range.of((-1975L));
      range1.intersection(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(9557L, 9557L);
      Range.Builder range_Builder3 = new Range.Builder((-1975L), 4294967295L);
      range_Builder1.contractEnd((-128L));
      range0.complement(range1);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder2.shift(1L);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder((-3235L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.5549632353078353
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = Range.of(4294967295L);
      Long long0 = new Long((-1798L));
      Range.Builder range_Builder1 = new Range.Builder(286L);
      Range range1 = range_Builder0.build();
      range_Builder0.expandBegin(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range2 = Range.of(9223372036854769533L);
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.4759666519689185
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = 4294967299L;
      Range range0 = Range.of((-2168L));
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range0.intersection(range0);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(9223372036854775807L, 1235L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.346895128556114
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147473685L), (-2581L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=4.034684407807831
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854769533L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      range0.complement(range0);
      Range range1 = range0.asRange();
      range1.getLength();
      Range range2 = Range.of((-878L), 1L);
      List<Range> list1 = range2.complementFrom(list0);
      range2.complementFrom(list1);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.8845227996366885
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      Range range1 = Range.of((-3219L), (-3219L));
      Range range2 = range0.intersection(range1);
      range0.complement(range1);
      Object object0 = new Object();
      range0.isSubRangeOf(range2);
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertTrue(range2.isEmpty());
      
      Range range3 = Range.of(range_CoordinateSystem0, (-2581L), 1L);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(1L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(2904L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.4422069191086386
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      range0.isSubRangeOf(range0);
      range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2147483647L, (-3235L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.6804542249561676
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-2147483648L), (-3235L));
      Range.Builder range_Builder2 = new Range.Builder((-2147483648L), (-400L));
      range_Builder0.contractEnd((-1249L));
      range_Builder2.shift((-3235L));
      Range.Builder range_Builder3 = range_Builder2.contractBegin((-3235L));
      Range.Builder range_Builder4 = new Range.Builder();
      Range.of((-3235L));
      Range.Builder range_Builder5 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder7 = new Range.Builder(453L, 3430L);
      range_Builder2.contractBegin((-681L));
      Range.Builder range_Builder8 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder9 = new Range.Builder(range_Builder8);
      range_Builder0.copy();
      Range.Builder range_Builder10 = null;
      try {
        range_Builder10 = new Range.Builder((-1249L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = 1350L;
      Range.Builder range_Builder0 = new Range.Builder(1350L);
      range_Builder0.contractBegin(286L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1350L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.8210258669158494
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = 9223372036854710273L;
      Range.of(9223372036854710273L, 9223372036854710273L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2057L;
      Range range0 = Range.of(9223372036854710273L);
      Range range1 = Range.of((-32768L), 430L);
      long long2 = (-2022L);
      Range range2 = Range.of((-2022L), 2057L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      range2.complementFrom(list0);
      range1.isSubRangeOf(range0);
      Range range3 = Range.of(2057L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range3.getBegin(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.ofLength((-32760L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=4.021329928063299
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-387L));
      Range.Builder range_Builder3 = range_Builder2.contractEnd((-2235L));
      range_Builder0.copy();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.of((-387L));
      Range range1 = Range.of((-9223372036854775808L));
      range0.intersection(range1);
      boolean boolean0 = range1.equals(range_Builder4);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      Range.Builder range_Builder5 = new Range.Builder();
      Range range2 = Range.ofLength(2147483647L);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder8 = new Range.Builder(range_Builder6);
      range_Builder7.copy();
      Range.of((-387L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(1L, long0);
      assertSame(range0, range2);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.78991978027303
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = 9223372036854710273L;
      Range.of(9223372036854710273L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2057L;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 2057L);
      Range range1 = Range.of((-32768L), 430L);
      long long2 = (-2022L);
      Range.of((-2022L), 2057L);
      range1.isSubRangeOf(range0);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.763393936425376
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1350L);
      Range.Builder range_Builder1 = range_Builder0.shift(1350L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(1350L);
      Range.Builder range_Builder3 = new Range.Builder((-2147483648L), 1L);
      Range.Builder range_Builder4 = range_Builder0.contractEnd((-5465L));
      range_Builder1.copy();
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      long long0 = (-2777L);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder((-9223372036854774571L), 1350L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.9473658255908
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of(2147483666L);
      range0.spliterator();
      Range range1 = Range.of(2147483666L, 2147483666L);
      assertSame(range1, range0);
      
      range1.complement(range0);
      Range range2 = Range.of((-1L));
      Range range3 = Range.of(2147483666L, 2147483666L);
      List<Range> list0 = range3.complement(range1);
      range2.complementFrom(list0);
      range2.intersection(range3);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      Range range4 = Range.of(2147483666L);
      range3.complement(range4);
      Range.of((-1L));
      List<Range> list1 = range3.complement(range4);
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.4576633869013826
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2597L), 2510L);
      Range range0 = Range.of((-1272L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.7820867556642486
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(9223372036854710273L);
      Long long0 = new Long((-1L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-745L));
      Range.Builder range_Builder1 = new Range.Builder(871L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 285L;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 285L, 32767L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder2.copy();
      Range range1 = Range.of(4487L, 9223372036854710273L);
      range1.intersection(range0);
      range1.complement(range0);
      Range.Builder range_Builder4 = new Range.Builder((-745L), (-1L));
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(range_CoordinateSystem0, (-1L), (-745L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.598456044002096
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1350L);
      range_Builder0.copy();
      range_Builder0.expandEnd(1350L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(1350L, 2600L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.copy();
      Range range0 = Range.of((-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.of((-215L), (-215L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
