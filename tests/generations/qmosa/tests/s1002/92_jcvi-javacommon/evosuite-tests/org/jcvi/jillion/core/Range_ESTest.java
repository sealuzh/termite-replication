/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 03:32:28 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.541058868857433
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 127L);
      Range range1 = Range.of(2147483647L);
      range0.startsBefore(range1);
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of(1044L);
      Range.of((-3889L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-9223372036854775792L), (-3889L));
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(9223372036854773554L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5333776650488766
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range1.equals("");
      Object object1 = new Object();
      Object object2 = new Object();
      range1.complement(range0);
      range1.isSubRangeOf(range0);
      Long long0 = new Long((-2423L));
      Long long1 = new Long((-1838L));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate1.or(predicate2);
      Predicate.isEqual(object0);
      Object object3 = new Object();
      Predicate.isEqual((Object) range1);
      predicate1.or(predicate2);
      Range.of((-222L), 2065L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range2 = Range.of(2065L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.594528682511582
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = (-32768L);
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range1.equals((Object) null);
      range1.intersection(range0);
      range1.equals(range_CoordinateSystem0);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long1 = (-2147483648L);
      long long2 = 46L;
      Range.of(range_CoordinateSystem0, (-2147483648L), 46L);
      long long3 = (-908L);
      Range.of(138L);
      // Undeclared exception!
      try { 
        Range.ofLength((-75L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.72905604366232
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.of(1844L);
      range1.isSubRangeOf(range0);
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range1.getLength();
      Range range2 = Range.of(9223372036854775807L);
      List<Range> list0 = range2.complement(range1);
      range1.isSubRangeOf(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Object object1 = new Object();
      linkedList0.offerFirst(range0);
      predicate0.test(object1);
      linkedList0.removeIf(predicate0);
      range0.complementFrom(linkedList0);
      Range range3 = Range.ofLength(1L);
      range1.isEmpty();
      range3.getLength();
      range2.split(9223372036854775015L);
      linkedList0.add(range3);
      Range range4 = Range.of(9223372036854775015L, 9223372036854775015L);
      List<Range> list1 = range0.complementFrom(list0);
      range4.complementFrom(list1);
      range4.equals(range2);
      range3.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.425837468106008
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(4294965889L, 4294965889L);
      range0.spliterator();
      Range range1 = Range.of(2147483684L);
      range1.startsBefore(range0);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = Range.of(2147483684L);
      Range range3 = Range.of((-9223372036854775792L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-3262L), 2147483684L);
      boolean boolean1 = range4.equals(range3);
      boolean boolean2 = range4.endsBefore(range1);
      assertFalse(range4.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertSame(range1, range2);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.9015374067599717
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.ofLength(2147483684L);
      range0.intersects(range0);
      Range range1 = Range.of(2254L, 2254L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 801L, 2147483683L);
      range2.getEnd();
      range2.iterator();
      range0.endsBefore(range2);
      Range range3 = Range.ofLength(2147483683L);
      range1.startsBefore(range3);
      range2.getLength();
      Range range4 = Range.of((-311L));
      range3.complement(range2);
      range0.isSubRangeOf(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) range2);
      linkedList0.addFirst(range4);
      linkedList0.removeIf(predicate0);
      range1.complementFrom(linkedList0);
      Range range5 = Range.ofLength(2147483684L);
      range5.isEmpty();
      range1.split(2254L);
      // Undeclared exception!
      try { 
        Range.of(2147483683L, 2254L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.67590409755775
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      range0.intersects(range0);
      Range range1 = Range.of(2254L, 2254L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 801L, 1843L);
      range2.getEnd();
      range2.iterator();
      range0.endsBefore(range2);
      Range range3 = Range.of(801L);
      range1.startsBefore(range3);
      range2.getLength();
      Range range4 = Range.of(1843L, 1843L);
      range3.complement(range2);
      range0.isSubRangeOf(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) range2);
      linkedList0.addFirst(range4);
      linkedList0.removeIf(predicate0);
      range1.complementFrom(linkedList0);
      Range range5 = Range.ofLength(1844L);
      range5.isEmpty();
      List<Range> list0 = range1.split(2254L);
      Range.of(1843L, 2254L);
      range3.equals(range5);
      range0.complementFrom(list0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("?'#NH]1szs*yu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.?'#NH]1szs*yu
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5400192162534423
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range1.intersection(range0);
      range1.equals(range_CoordinateSystem0);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandBegin(689L);
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder4 = new Range.Builder(689L, 9223372036854775807L);
      range_Builder4.expandBegin(1L);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder((-32768L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.335874864977691
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(2692L, 2692L);
      Range range1 = Range.of(438L, 438L);
      range0.startsBefore(range1);
      Object object0 = new Object();
      range0.equals(range1);
      range1.isSubRangeOf(range0);
      Range.of((-773L), (-773L));
      Range range2 = Range.of((-773L));
      range1.isSubRangeOf(range2);
      long long0 = 1L;
      Range.of(438L, 438L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 824L, 2692L);
      range0.equals(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range3.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("?'#NH]1szs*yu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.?'#NH]1szs*yu
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.296168441288276
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 344L;
      long long1 = 4294967297L;
      Range range0 = Range.of(range_CoordinateSystem0, 344L, 4294967297L);
      Range range1 = Range.of((-3092L));
      range1.isEmpty();
      range1.intersects(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      // Undeclared exception!
      try { 
        Range.of(4294967297L, 344L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.237631231527424
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-438L));
      Range range1 = Range.of((-438L));
      Range range2 = Range.of((-438L));
      range1.isEmpty();
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals((Object) null);
      range1.equals(range2);
      long long0 = 1L;
      Range.ofLength(1L);
      Range.of((-3123L));
      range0.isSubRangeOf(range1);
      Range.of((-3123L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.31811176028111
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372036854775807L;
      Range range1 = Range.of((-32768L), (-32768L));
      Range range2 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.complement(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.221963927450628
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-438L));
      Range range1 = Range.of((-2699L));
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1);
      
      Object object0 = new Object();
      Object object1 = new Object();
      List<Range> list0 = range1.complement(range0);
      boolean boolean2 = range0.isSubRangeOf(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object3);
      boolean boolean3 = range1.isSubRangeOf(range0);
      assertTrue(boolean3 == boolean2);
      
      Object object4 = new Object();
      boolean boolean4 = range0.equals(list0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5883746607609175
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65536L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(65536L);
      range1.startsBefore(range0);
      range0.equals((Object) null);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object0);
      range1.isSubRangeOf(range0);
      Range range2 = Range.of((-2147483648L), 4294967295L);
      Range range3 = Range.of((-2050L));
      range1.startsBefore(range2);
      Range.of((-2147483648L));
      range2.endsBefore(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("ujV)kh0/=MnGp@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.ujV)kh0/=MnGp@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1017633596329928
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Object object1 = new Object();
      predicate0.test(object1);
      linkedList0.removeIf(predicate0);
      range0.split(9223372036854775015L);
      Range range1 = Range.of(9223372036854775015L, 9223372036854775015L);
      range1.equals(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.033464331808004
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775793L));
      Range range1 = Range.of((-9223372036854775793L));
      Range range2 = Range.of((-9223372036854775793L));
      range1.isEmpty();
      range2.intersects(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      range2.equals((Object) null);
      long long0 = (-776L);
      // Undeclared exception!
      try { 
        Range.ofLength((-270L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5669706680108053
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Range range2 = range1.intersection(range0);
      range1.equals(range_CoordinateSystem0);
      range0.complement(range2);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.shift(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      long long0 = 689L;
      range_Builder0.expandBegin(689L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.562397010761012
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = 65535L;
      long long1 = 3527L;
      Range range0 = Range.of(3527L);
      long long2 = (-1290L);
      range0.isSubRangeOf(range0);
      range0.isSubRangeOf(range0);
      range0.spliterator();
      range0.startsBefore(range0);
      range0.complement(range0);
      Range range1 = Range.of((-1290L));
      range1.spliterator();
      long long3 = 11000L;
      Range.Builder range_Builder0 = new Range.Builder(11000L);
      long long4 = 9223372036854775807L;
      Range range2 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range2.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1290 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9439119681799863
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 1844L;
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.of(127L);
      range0.startsBefore(range1);
      range0.equals(range1);
      range0.equals("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
      range0.isEmpty();
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-4853L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.394843492551638
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = (-9223372036854775798L);
      Range range0 = Range.of((-9223372036854775798L));
      Range range1 = Range.of((-9223372036854775798L));
      range0.spliterator();
      Range range2 = Range.of((-9223372036854775798L));
      range2.startsBefore(range0);
      range2.complement(range1);
      range0.equals(range1);
      range1.intersection(range0);
      range1.startsBefore(range2);
      range1.endsBefore(range2);
      Range.of((-9223372036854775798L));
      range1.complement(range2);
      range2.spliterator();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-311L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1082488105259443
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775807L));
      Range range1 = Range.of((-9223372036854775807L));
      range0.spliterator();
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.isSubRangeOf(range0);
      Long long0 = Long.valueOf((-9223372036854775807L));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      range0.equals("");
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775807L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2101922129424665
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = 65557L;
      Range range0 = Range.of(322L, 65557L);
      List<Range> list0 = range0.split(322L);
      Range.Builder range_Builder0 = new Range.Builder(322L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.196759677803175
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65536L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      String string0 = ":Pi/R5g}O@gbGW";
      range0.intersection(range1);
      Object object0 = new Object();
      range1.equals(range0);
      range1.isSubRangeOf(range0);
      long long0 = (-1705L);
      // Undeclared exception!
      try { 
        Range.of(65536L, (-1705L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.678833283883664
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.of(1844L);
      range1.isSubRangeOf(range0);
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range2 = Range.of(1844L);
      range0.isSubRangeOf(range1);
      range0.isSubRangeOf(range1);
      range2.complement(range1);
      Range range3 = range1.intersection(range2);
      Range.of(0L);
      range3.startsBefore(range1);
      Range.of((-1115L));
      range1.endsBefore(range2);
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.7092760083062695
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(2692L, 2692L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3631L, 3631L);
      Range range2 = Range.of(2147483647L, 4294967295L);
      Range range3 = range0.intersection(range2);
      Object object0 = new Object();
      Range range4 = Range.of(2147483647L);
      range2.equals(range4);
      range1.isSubRangeOf(range4);
      range0.getLength();
      range1.complement(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.ofLength(2147483647L);
      Range.of(range_CoordinateSystem0, 2692L, 2147483647L);
      range2.asRange();
      Range.of(range_CoordinateSystem0, (-1313L), 2644L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4240329612241576
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = 2692L;
      Range range0 = Range.of(2692L, 2692L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 438L;
      Range range1 = Range.of(438L, 438L);
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      range2.equals(object0);
      range1.isSubRangeOf(range0);
      range1.getLength();
      range0.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = Range.ofLength(1L);
      range3.getEnd();
      range0.getLength();
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2692L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2361367492153077
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range1.complement(range0);
      range1.isSubRangeOf(range0);
      range1.equals((Object) null);
      range1.equals("cC(");
      range1.getLength();
      range1.spliterator();
      long long1 = (-128L);
      Range.of(9223372036854775807L);
      long long2 = 14L;
      range0.getEnd();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, (-123L), (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.334167380188943
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(1027L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 0 .. 1026 ]/0B", range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.parseRange("[ 0 .. 1027 ]/SB");
      List<Range> list0 = range0.split(1027L);
      assertTrue(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 1027L, 1027L);
      String string0 = range2.toString(range_CoordinateSystem2);
      assertSame(range1, range0);
      assertEquals("[ 0 .. 1026 ]/0B", string0);
      assertFalse(range2.equals((Object)range3));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.6629311992498277
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), 32767L);
      Range range1 = Range.of(32767L, 32767L);
      Range range2 = range1.intersection(range0);
      range0.equals(range1);
      List<Range> list0 = range1.complement(range0);
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range0.isSubRangeOf(range2);
      Range.Builder range_Builder1 = range_Builder0.shift(2692L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder1.contractBegin(46L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range1.complementFrom(list0);
      Range.Builder range_Builder4 = new Range.Builder((-3219L), 46L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder5);
      Range.Builder range_Builder7 = new Range.Builder();
      Range.Builder range_Builder8 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder9 = new Range.Builder(range_Builder8);
      Range.Builder range_Builder10 = new Range.Builder(46L, 255L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854773118 would make range [2738 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.567720232564318
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-3219L), (-3219L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-2253L), 2147483647L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(1155L);
      range2.complementFrom(list0);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.495495022579157
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      Range range1 = Range.of((-3219L), (-3219L));
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range2.equals("cC(");
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      Range range3 = Range.of((-3219L));
      Range range4 = Range.of((-3219L));
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      Range range5 = Range.of(1L);
      assertFalse(range5.isEmpty());
      
      List<Range> list1 = range3.complement(range2);
      assertFalse(list1.isEmpty());
      
      boolean boolean2 = range1.endsBefore(range4);
      assertSame(range4, range3);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.342720685159394
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 139L, 139L);
      range0.equals(range_CoordinateSystem0);
      range0.getLength();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1L);
      range0.getLength();
      range1.equals((Object) null);
      Range.ofLength(139L);
      range0.complement(range1);
      long long0 = 2078L;
      Range.Builder range_Builder0 = new Range.Builder(2078L);
      range1.isSubRangeOf(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long1 = 9223372036854775017L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775017L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3226625974043356
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65537L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      long long0 = 354L;
      Long long1 = Long.valueOf(354L);
      range0.equals(long1);
      range0.equals(object0);
      Range range2 = range0.intersection(range1);
      range1.startsBefore(range2);
      range0.endsBefore(range2);
      Range.of(65537L);
      long long2 = (-9223372036854775798L);
      long long3 = 1157L;
      Range.Builder range_Builder1 = new Range.Builder(1157L);
      Range.Builder range_Builder2 = new Range.Builder(1157L);
      range2.isSubRangeOf(range0);
      long long4 = (-1365L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(514L, (-1365L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.118626888992665
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483654L, 9223372036854775807L);
      long long0 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.expandBegin(689L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5629650963574666
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(4294965889L, 4294965889L);
      range0.spliterator();
      range0.startsBefore(range0);
      range0.equals(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals("2aqvM.XmV+");
      range0.isSubRangeOf(range0);
      Range range1 = Range.of((-2147483648L), 1L);
      Range.of(1L);
      range0.isSubRangeOf(range1);
      Range.of(336L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2147483648L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.135252933942105
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range1.isSubRangeOf(range0);
      range1.isSubRangeOf(range1);
      range1.equals(range0);
      Range range2 = null;
      Range range3 = Range.ofLength(9223372036854775807L);
      Range range4 = range3.intersection(range0);
      range4.spliterator();
      Range range5 = null;
      // Undeclared exception!
      try { 
        range4.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.4476940666762816
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 139L;
      Range range0 = Range.of(range_CoordinateSystem0, 139L, 139L);
      long long1 = 0L;
      range0.equals(range_CoordinateSystem0);
      range0.getLength();
      Range range1 = Range.ofLength(0L);
      range0.getLength();
      range1.equals((Object) null);
      Range.ofLength(139L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(2078L);
      range1.isSubRangeOf(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775017L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.198437171478363
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = 4294965889L;
      Range range0 = Range.of(4294965889L, 4294965889L);
      range0.spliterator();
      Range range1 = Range.of(2147483684L);
      range1.startsBefore(range0);
      Range.of(4294965889L);
      Range range2 = null;
      // Undeclared exception!
      try { 
        range1.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.71351955513811
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(4294965889L);
      Range range1 = Range.of(2147483647L);
      range1.isSubRangeOf(range0);
      range1.equals(range0);
      range0.getLength();
      List<Range> list0 = range0.complement(range1);
      long long0 = 9223372036854775806L;
      Range range2 = Range.ofLength(9223372036854775806L);
      range2.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range2.isSubRangeOf(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.complementFrom(list0);
      range_Builder1.contractEnd(1L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3664100760763804
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775793L));
      Range range1 = Range.of((-9223372036854775793L));
      range1.isSubRangeOf(range0);
      range0.spliterator();
      range1.endsBefore(range0);
      range1.complement(range0);
      Range range2 = Range.of((-9223372036854775793L));
      long long0 = 2655L;
      Range.Builder range_Builder0 = new Range.Builder(2655L);
      range_Builder0.shift(2655L);
      Range range3 = range0.intersection(range2);
      range_Builder0.contractEnd((-2147483648L));
      range2.spliterator();
      // Undeclared exception!
      try { 
        range3.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.321080113076378
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 139L, 139L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range1.equals(":Pi/R5g}O@gbGW");
      Range range2 = range0.intersection(range0);
      range1.startsBefore(range2);
      range1.endsBefore(range0);
      range1.complement(range0);
      range2.spliterator();
      Range.Builder range_Builder1 = new Range.Builder(139L);
      Range.Builder range_Builder2 = new Range.Builder(139L);
      range0.isSubRangeOf(range0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(range_Builder2);
      long long0 = (-2286L);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder(597L, (-2286L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = 139L;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 139L, 139L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.414525693724283
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775793L));
      Range range1 = Range.of((-9223372036854775793L));
      range1.isSubRangeOf(range0);
      range0.spliterator();
      range1.endsBefore(range0);
      range1.complement(range0);
      Range range2 = Range.of((-9223372036854775793L));
      Range.Builder range_Builder0 = new Range.Builder(2655L);
      range_Builder0.shift(2655L);
      Range range3 = null;
      range_Builder0.contractEnd((-2147483648L));
      range2.spliterator();
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.464607261476765
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range0.complementFrom(list0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder5 = new Range.Builder(range_CoordinateSystem0, (-2342L), 941L);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder8 = new Range.Builder(65535L);
      Range.Builder range_Builder9 = new Range.Builder(range_Builder8);
      range_Builder7.expandBegin(941L);
      range_Builder5.expandEnd((-1L));
      Range.Builder range_Builder10 = new Range.Builder(range0);
      Range range1 = range_Builder10.build();
      Range range2 = range0.asRange();
      range2.getLength();
      range1.toString();
      range0.intersection(range0);
      Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("#7kZ\tC1pv,!n& u%]", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse #7kZ\tC1pv,!n& u%] into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.40459339850919
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(4294965889L, 4294965889L);
      range0.spliterator();
      Range range1 = Range.of(2147483684L);
      range1.startsBefore(range0);
      range1.equals(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals("2aqvM.XmV+");
      range0.isSubRangeOf(range1);
      Range.of((-2147483648L), 1L);
      Range range2 = Range.of((-2147483648L));
      range2.startsBefore(range0);
      Range.of((-2147483648L));
      range2.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("ujV)kh0/=MnGp@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.ujV)kh0/=MnGp@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.682885443522945
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(2692L, 2692L);
      range0.complement(range0);
      Range range1 = range0.intersection(range0);
      range1.spliterator();
      Range.of((-3220L));
      range0.equals(range1);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-644L), 595L);
      Range.of(130L);
      Range range3 = Range.of(9223372032559808513L);
      range3.equals(range1);
      range3.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.6201449879912673
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(0L, 2079L);
      long long0 = 1L;
      Range range1 = Range.of(0L, 1L);
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      range2.equals(range1);
      Range range3 = range0.intersection(range1);
      range2.startsBefore(range1);
      range3.endsBefore(range2);
      Range range4 = Range.of((-1843L));
      range4.complement(range2);
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(2079L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1843L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.239493573434634
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.of((-185L), 874L);
      Range.of(255L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.293057285585358
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 139L, 139L);
      Range range1 = Range.of(139L);
      range0.isSubRangeOf(range1);
      range0.intersects(range1);
      long long0 = (-1239L);
      range1.intersection(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1239L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.317750744017107
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(304L, 65567L);
      Range.Builder range_Builder0 = new Range.Builder(65567L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder();
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder5 = new Range.Builder(range_CoordinateSystem0, (-1L), 2147483646L);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder4);
      range_Builder2.contractEnd(0L);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder5);
      Range.Builder range_Builder8 = new Range.Builder(4294967295L);
      Range.Builder range_Builder9 = new Range.Builder(range_Builder5);
      range_Builder9.expandBegin((-1L));
      Range.Builder range_Builder10 = null;
      try {
        range_Builder10 = new Range.Builder(range_CoordinateSystem0, 4294967295L, (-4002L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.5339606487115756
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(0L, 0L);
      Range range2 = Range.ofLength(0L);
      boolean boolean0 = range1.intersects(range0);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(boolean1);
      
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range_Builder0.contractBegin(0L);
      Range range3 = range_Builder1.build();
      Range range4 = range_Builder0.build();
      range0.isEmpty();
      List<Range> list0 = range4.split(181L);
      assertTrue(list0.contains(range3));
      
      range4.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      Range.CoordinateSystem.values();
      boolean boolean2 = range0.intersects(range2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.444202655698682
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(304L, 65567L);
      List<Range> list0 = range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(65567L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range0.complementFrom(list0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder3.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(range_CoordinateSystem0, (-2342L), (-4002L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.4153524667773683
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate3.or(predicate1);
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-2053L), 0L);
      Range range2 = Range.of((-2053L));
      Range.of(273L);
      Range.of(9223372034707292143L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      assertNotSame(range1, range2);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.4195183524188435
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      Range range0 = Range.of((-3219L), (-3219L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.of((-2147483648L), (-2147483648L));
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-1716L), (-580L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem2, (-32768L), (-415L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(4294964136L);
      Range.Builder range_Builder4 = range_Builder2.expandEnd((-2147483648L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range_Builder4.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.6088794002558506
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range range1 = Range.ofLength(1L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range range2 = range_Builder3.build();
      Range range3 = range_Builder3.build();
      range3.isEmpty();
      // Undeclared exception!
      try { 
        range2.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.262448055261478
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      long long0 = 792L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1844L);
      Range range2 = Range.of(0L, 792L);
      Range range3 = range2.intersection(range1);
      Object object0 = new Object();
      Range range4 = Range.of(0L);
      range4.equals(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range3.toString(range_CoordinateSystem1);
      range1.isSubRangeOf(range2);
      range4.getLength();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3119315121639485
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = 65525L;
      Range.Builder range_Builder0 = new Range.Builder(65525L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      Long long1 = new Long(354L);
      range0.equals(long1);
      range0.startsBefore(range1);
      range0.endsBefore(range1);
      Range.of(65525L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.spliterator();
      long long2 = (-9223372036854775798L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-9223372036854775798L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1898227186238444
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range1.isSubRangeOf(range0);
      range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(2693L);
      range0.spliterator();
      Range.ofLength(9223372036854775807L);
      range_Builder0.expandEnd((-1L));
      range_Builder0.expandEnd(434L);
      long long0 = 3796L;
      // Undeclared exception!
      try { 
        Range.of(3796L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.1186268852431978
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range1.spliterator();
      range1.startsBefore(range0);
      Range range2 = Range.of(531L);
      range1.isSubRangeOf(range0);
      range2.isSubRangeOf(range1);
      Range range3 = Range.of(9223372036854775807L);
      Range range4 = Range.of(1044L);
      range4.endsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7519159690311215
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.0979446749710853
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(344L, 344L);
      assertFalse(range0.isEmpty());
      
      Range.ofLength(792L);
      Range range1 = Range.ofLength(65535L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(2225L, 9223372036854775669L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.002697432380181
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(2692L, 2692L);
      long long0 = 438L;
      Range range1 = Range.of(438L, 438L);
      range0.startsBefore(range1);
      Object object0 = new Object();
      range1.equals(object0);
      long long1 = (-773L);
      // Undeclared exception!
      try { 
        Range.of(2692L, (-773L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3348393120921385
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(2692L, 2692L);
      long long0 = 438L;
      Range range1 = Range.of(438L, 438L);
      range0.startsBefore(range1);
      Object object0 = new Object();
      range0.equals(range1);
      range1.isSubRangeOf(range0);
      Predicate.isEqual((Object) range0);
      String string0 = "";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate3.or(predicate0);
      Range range2 = Range.of(769L, 65535L);
      Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        range2.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.0161674104571183
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(2692L, 2692L);
      long long0 = 438L;
      range0.startsBefore(range0);
      Object object0 = new Object();
      range0.equals((Object) null);
      long long1 = (-773L);
      // Undeclared exception!
      try { 
        Range.of(2692L, (-773L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.646341268784397
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(1854L);
      Range range1 = Range.of(792L);
      range0.complement(range1);
      range0.intersection(range1);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(1854L, 2957L);
      range_Builder0.expandBegin(9223372036854774400L);
      Range.ofLength(2957L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-128L), 4294967295L);
      Range range2 = Range.of(32767L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-128L), (-128L));
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.210440842835696
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 127L;
      Range.of(range_CoordinateSystem0, (-128L), 127L);
      Range.of(127L);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.546082694113696
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1L);
      Range.ofLength(0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(4294967295L);
      Range.of(0L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range.Builder range_Builder2 = new Range.Builder(1L, 1L);
      Range.of(4294967295L);
      Range range2 = range_Builder2.build();
      range0.isEmpty();
      Range.of(1L, 9223372036854775231L);
      Range range3 = Range.of(1L, 1L);
      range3.split(1L);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("~W<F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.~W<F
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.256430792229425
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-18L), (-18L));
      Range.of(range_CoordinateSystem0, 1556L, 2956L);
      Range range0 = Range.of(0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.368446457842076
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1155L);
      Range range2 = Range.of(0L);
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      Range range3 = range2.asRange();
      assertNotSame(range3, range1);
      assertFalse(range3.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd((-1822L));
      range_Builder1.expandBegin((-1822L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.366261622364165
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(4294965889L);
      range0.spliterator();
      Range range1 = Range.of(4294965889L);
      range1.isSubRangeOf(range0);
      range1.spliterator();
      Range range2 = Range.ofLength(4294965889L);
      range0.endsBefore(range2);
      range1.complement(range2);
      Range range3 = Range.of(4294965889L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.shift(2655L);
      Range range4 = range3.intersection(range2);
      range_Builder0.contractEnd(0L);
      range4.spliterator();
      range1.startsBefore(range3);
      range2.complement(range1);
      range1.spliterator();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-3125L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.5805224671142586
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.spliterator();
      range1.startsBefore(range0);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range.of(531L);
      range1.isSubRangeOf(range0);
      range1.isSubRangeOf(range1);
      List<Range> list1 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      Range range2 = range0.intersection(range0);
      Range.of((-1115L));
      boolean boolean0 = range2.startsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range.of(1507L);
      range2.endsBefore(range0);
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range3 = range_Builder0.build();
      //  // Unstable assertion: assertSame(range1, range2);
      //  // Unstable assertion: assertSame(range3, range2);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.558144360966427
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(1854L);
      Range range1 = Range.of(792L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = range0.intersection(range1);
      range2.spliterator();
      range0.complementFrom(list0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.4349537380311332
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      Range range1 = Range.of((-3219L), (-3219L));
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range0.complement(range0);
      range1.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range2.isSubRangeOf(range1);
      range_Builder0.contractBegin(9223372036854775807L);
      long long0 = (-715L);
      Range.Builder range_Builder1 = range_Builder0.shift((-715L));
      range0.complement(range2);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder2.contractBegin(0L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range2.complementFrom(list0);
      Range.Builder range_Builder5 = new Range.Builder(0L, 10999L);
      Range.Builder range_Builder6 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder6);
      Range.Builder range_Builder8 = new Range.Builder(range_Builder6);
      Range.Builder range_Builder9 = null;
      try {
        range_Builder9 = new Range.Builder(10999L, 1830L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.409981463749506
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(4294965889L, 4294965889L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      Range range1 = Range.of(2147483684L);
      boolean boolean0 = range1.startsBefore(range0);
      range1.equals(range0);
      range1.intersects(range0);
      Object object0 = new Object();
      range0.equals(spliterator0);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(boolean1);
      
      Range.of(65568L);
      Range.of((-773L));
      boolean boolean2 = range1.endsBefore(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.4883049162178192
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(4294965889L, 4294965889L);
      range0.spliterator();
      Range range1 = Range.of(2147483684L);
      Range range2 = range0.intersection(range1);
      range1.intersects(range2);
      Object object0 = new Object();
      boolean boolean0 = range1.isSubRangeOf(range2);
      assertTrue(range2.isEmpty());
      
      Range.of(1044L);
      Range range3 = Range.of(4294965889L);
      boolean boolean1 = range3.endsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      range3.asRange();
      assertSame(range3, range0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3820347563818616
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-3219L);
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      Range range1 = Range.of((-3219L), (-3219L));
      Range range2 = range0.intersection(range1);
      range2.equals("cC(");
      range0.complement(range0);
      range1.spliterator();
      long long1 = 4294967295L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-3219L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.133966568907185
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1637L), (-1637L));
      Range.of((-1906L), 255L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 4294967295L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.432433599069037
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(2692L, 2692L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.complement(range0);
      range0.intersection(range0);
      Range range1 = Range.of(9223372036854772775L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(15L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.9283537338038963
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = 2692L;
      Range.of(2692L, 2692L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-861L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-861L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -862 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.464607261476766
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Range range2 = range1.intersection(range0);
      range2.complement(range0);
      range2.spliterator();
      long long0 = (-2147483648L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.9878137243556417
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 344L;
      Range.of(range_CoordinateSystem0, 344L, 4294967295L);
      Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("hWM7^TEu.16");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.hWM7^TEu.16
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.5110678503687107
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range1.equals("");
      Object object1 = new Object();
      Object object2 = new Object();
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Long long0 = new Long((-2423L));
      Long long1 = new Long((-1838L));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "can not parse ");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate0.or(predicate2);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate4.or(predicate3);
      Range range2 = Range.of((-2423L), 1498L);
      Range.of((-286L));
      Range range3 = Range.ofLength(9223372036854775807L);
      boolean boolean1 = range3.startsBefore(range1);
      assertFalse(range3.isEmpty());
      
      boolean boolean2 = range2.endsBefore(range0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.4117261644752674
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.getEnd(range_CoordinateSystem0);
      Range.ofLength(0L);
      Range.of(2240L);
      long long0 = (-3381L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.4196915447335585
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder();
      Range range2 = range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder5 = new Range.Builder(range_CoordinateSystem0, (-2342L), 941L);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder8 = new Range.Builder(65535L);
      Range.Builder range_Builder9 = new Range.Builder(range_Builder8);
      range_Builder7.expandBegin(941L);
      range_Builder5.expandEnd((-1L));
      Range.Builder range_Builder10 = new Range.Builder(range0);
      Range range3 = range_Builder10.build();
      range1.asRange();
      String string0 = range3.toString();
      //  // Unstable assertion: assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      Range range4 = range1.intersection(range0);
      //  // Unstable assertion: assertNotSame(range4, range3);
      //  // Unstable assertion: assertSame(range1, range2);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.39649286807547
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(2692L, 2692L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.of((-2147483648L), (-2513L));
      Range range1 = Range.of((-2147483648L));
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2513L), (-4002L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.3487945559416423
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.of(531L);
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-707L), (-581L));
      range0.split(2083L);
      Range.of((-1051L));
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 1385L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.3523195793454894
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.of(1844L);
      range1.isSubRangeOf(range0);
      Range.Builder range_Builder0 = new Range.Builder(792L);
      range0.spliterator();
      Range range2 = Range.of((-128L));
      Range.of(65535L);
      range2.startsBefore(range1);
      Range range3 = Range.of(65535L);
      range3.intersects(range2);
      range1.endsBefore(range3);
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.6095886869959894
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.of(792L);
      range1.isSubRangeOf(range0);
      range0.complement(range1);
      Range range2 = range0.intersection(range1);
      range2.spliterator();
      range1.spliterator();
      range0.intersects(range2);
      Range.Builder range_Builder0 = new Range.Builder(10L, 127L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandBegin(939L);
      range_Builder0.expandEnd(127L);
      Range range3 = range_Builder0.build();
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.295118786080946
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range1.isSubRangeOf(range0);
      range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(2693L, 9223372036854775807L);
      range0.spliterator();
      Range.ofLength(9223372036854775807L);
      range_Builder0.expandEnd((-1L));
      range_Builder0.expandEnd(434L);
      long long0 = 3796L;
      // Undeclared exception!
      try { 
        Range.of(3796L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.5255248674631416
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.spliterator();
      range1.startsBefore(range0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate0.and(predicate1);
      predicate1.or(predicate2);
      Range range2 = Range.of(65535L, 2147483647L);
      Range.of((-2260L));
      range0.isSubRangeOf(range2);
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.3449622597377577
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.of(1844L);
      range1.isSubRangeOf(range0);
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder(792L);
      range0.spliterator();
      long long0 = (-128L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(217L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.3071040555172213
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.shift(0L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range range0 = Range.of(0L, 3652L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      range_Builder0.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = range_Builder2.contractBegin((-3560L));
      range_Builder4.expandEnd(9223372036854775807L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.ofLength((-2257L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.352451830195875
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-3219L);
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      Range range1 = Range.of((-3219L), (-3219L));
      range0.intersection(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.of((-3219L), (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.44370064388096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775793L));
      Range range1 = Range.of((-9223372036854775793L));
      range1.isSubRangeOf(range0);
      range0.spliterator();
      range1.endsBefore(range0);
      range1.complement(range0);
      Range range2 = Range.of((-9223372036854775793L));
      long long0 = 2655L;
      Range.Builder range_Builder0 = new Range.Builder(2655L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range3 = null;
      Range range4 = range0.intersection(range2);
      long long1 = (-2147483648L);
      range_Builder0.contractEnd((-2147483648L));
      range4.getBegin();
      range2.spliterator();
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.5276417971805007
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.spliterator();
      range1.startsBefore(range0);
      Range.of(531L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      range1.isSubRangeOf(range1);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      Range range2 = range0.intersection(range0);
      Range range3 = range0.intersection(range2);
      Range range4 = Range.of((-1115L));
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      boolean boolean1 = range2.startsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Range.of(531L);
      range2.endsBefore(range0);
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
      range3.iterator();
      //  // Unstable assertion: assertSame(range3, range1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.021690510580773
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range1.isEmpty();
      range1.endsBefore(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.isEmpty();
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.of((-773L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.7254461462442
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-2274L));
      Range range1 = Range.of((-2274L));
      range1.spliterator();
      range0.startsBefore(range1);
      Range range2 = Range.of(304L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(0, list1.size());
      
      boolean boolean0 = range0.isSubRangeOf(range2);
      range0.isSubRangeOf(range1);
      range2.complement(range0);
      range2.intersection(range1);
      Range range3 = Range.of(304L);
      Range range4 = Range.of(65567L);
      boolean boolean1 = range4.isSubRangeOf(range4);
      assertFalse(boolean1 == boolean0);
      
      Range range5 = Range.of(279L);
      long long0 = range5.getBegin();
      assertEquals(279L, long0);
      
      range5.startsBefore(range3);
      range0.endsBefore(range4);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range6 = range2.intersection(range1);
      assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.15228744458052
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.of(531L);
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0140772805713656
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      List<Range> list0 = range0.split(1L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.2362437609902015
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.of(9223372036854775807L);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(428L, 2396L);
      Range.Builder range_Builder1 = new Range.Builder(1843L);
      Range.Builder range_Builder2 = range_Builder0.shift(2311L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder(range0);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder8 = new Range.Builder((-128L), (-128L));
      range_Builder4.expandBegin(3217L);
      Range.Builder range_Builder9 = null;
      try {
        range_Builder9 = new Range.Builder(3217L, (-1365L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.127386308124558
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1688L);
      long long0 = range0.getEnd();
      assertEquals(1688L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 3159L, 4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.08685802101327
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = 1239L;
      long long1 = 1407L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1239L, 1407L);
      long long2 = (-802L);
      Range.ofLength(1407L);
      // Undeclared exception!
      try { 
        range0.split((-802L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.374766185327296
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.of(4294965889L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1035L;
      Range.of(range_CoordinateSystem0, 1035L, 1035L);
      Range.of(4294965889L, 4294965889L);
      Range range0 = Range.of(1035L, 4294965889L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.551554542300038
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(2692L, 2692L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.of((-2147483648L), (-2475L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-2147483648L), (-2475L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(1L, 531L);
      Range.Builder range_Builder4 = range_Builder3.contractEnd((-2475L));
      Range.Builder range_Builder5 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder6 = new Range.Builder(1277L);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder4);
      range_Builder1.expandBegin(531L);
      range_Builder2.expandEnd((-2475L));
      assertSame(range0, range1);
      
      Range range2 = range_Builder3.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.1025712768045546
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = (-3219L);
      Range range0 = Range.of((-3219L), (-3219L));
      range0.spliterator();
      long long1 = 4294967295L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-3219L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.398438298248146
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "org.jci.jillion.core.Ranges";
      Range range0 = Range.of(438L, 3598L);
      Object object0 = new Object();
      range0.equals(range0);
      range0.isSubRangeOf(range0);
      Range.of((-65L), 4294967295L);
      Range range1 = Range.of(2693L);
      range0.isSubRangeOf(range1);
      Range.of((-65L));
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.4441166769125133
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 139L, 139L);
      Range range1 = Range.of(139L, 2254L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(139L, 139L);
      range2.isSubRangeOf(range3);
      Range.of((-1115L));
      // Undeclared exception!
      try { 
        Range.of(5265L, 792L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.5998823281131447
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775793L));
      Range range1 = Range.of((-9223372036854775793L));
      range1.isSubRangeOf(range0);
      range1.endsBefore(range0);
      range1.complement(range0);
      Range range2 = Range.of((-9223372036854775793L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString(range_CoordinateSystem0);
      Range.Builder range_Builder1 = range_Builder0.shift(2655L);
      Range range3 = null;
      range_Builder1.contractEnd((-689L));
      range_Builder0.contractEnd((-689L));
      range2.spliterator();
      Range.of(3770L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.941616952644222
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = (-2336L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2336L), (-2336L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      long long1 = (-802L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2336L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.2945673012118535
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = (-2336L);
      long long1 = 1407L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2336L), 1407L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      long long2 = (-802L);
      Range.ofLength(1407L);
      long long3 = (-3521L);
      // Undeclared exception!
      try { 
        range0.split((-802L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.175014765940686
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-2147483635L), (-2147483635L));
      Range.of((-32758L));
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.814359184750864
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-5210L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.3142609800981866
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.of(792L);
      Range.Builder range_Builder0 = new Range.Builder(1854L, 2957L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(9223372036854774400L);
      Range.Builder range_Builder2 = new Range.Builder((-1073L), (-182L));
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder1.build();
      Range range0 = Range.of((-182L), 9223372036854775277L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.636586113482695
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(304L);
      Range range1 = Range.of((-13L));
      range1.startsBefore(range0);
      Object object0 = new Object();
      range1.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      Long long0 = new Long((-2423L));
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate.isEqual((Object) predicate2);
      Object object3 = new Object();
      Predicate.isEqual(object3);
      predicate0.or(predicate1);
      Range range2 = Range.of((-1492L), 9223372036854771638L);
      Range range3 = Range.of(963L);
      boolean boolean1 = range1.startsBefore(range2);
      boolean boolean2 = range3.endsBefore(range0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.6412490994439253
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-438L));
      Range range1 = Range.of((-2699L));
      Range range2 = Range.of((-2699L), (-1981L));
      Range range3 = range0.intersection(range2);
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      Range.of(0L);
      range3.complement(range2);
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range1.isSubRangeOf(range2);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      long long0 = 4294967295L;
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(9223372036854773116L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.800469825176869
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.3419868673205837
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.ofLength(2147483647L);
      Range range0 = Range.of(1844L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 1L);
      // Undeclared exception!
      try { 
        Range.of((-802L), (-2253L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.232775904382101
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(1854L);
      range0.spliterator();
      long long0 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      long long1 = 3543L;
      Range.Builder range_Builder1 = range_Builder0.shift(3543L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(1854L);
      range_Builder1.contractBegin(792L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem0, 3543L, 1854L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.877585910557535
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2349L, 2349L);
      range0.getLength();
      long long0 = (-2147483648L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.9669434861893547
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(2147483684L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isEmpty();
      Object object0 = new Object();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      long long0 = range0.getLength();
      assertEquals(2147483684L, long0);
      
      Range range1 = Range.ofLength(2254L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.223530831983023
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2655L);
      Range.Builder range_Builder1 = range_Builder0.shift(2655L);
      range_Builder1.contractEnd((-2147483648L));
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-2147483648L));
      Range.of(3770L);
      range_Builder0.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder6 = new Range.Builder(133L, 9223372036854773163L);
      range_Builder0.expandBegin(9223372036854773163L);
      Range.Builder range_Builder7 = null;
      try {
        range_Builder7 = new Range.Builder(1843L, (-361L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.4939154234923677
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      Range range1 = Range.of((-3219L), (-3219L));
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range0.complement(range0);
      range1.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range2.isSubRangeOf(range1);
      long long0 = (-715L);
      Range.Builder range_Builder1 = range_Builder0.shift((-715L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder2.contractBegin(0L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range2.complementFrom(list0);
      Range.Builder range_Builder5 = new Range.Builder(0L, 10999L);
      Range.Builder range_Builder6 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder6);
      Range.Builder range_Builder8 = new Range.Builder();
      Range.Builder range_Builder9 = new Range.Builder(range_Builder6);
      Range.Builder range_Builder10 = null;
      try {
        range_Builder10 = new Range.Builder(10999L, 1830L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.5527613021262963
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-538L), (-538L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-538L), (-538L));
      range0.isSubRangeOf(range1);
      Long long0 = new Long((-2423L));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) range1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Object object0 = new Object();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate2.or(predicate3);
      Range range2 = Range.of(range_CoordinateSystem0, (-2423L), 9223372036854771638L);
      Range range3 = Range.of((-47L));
      range3.startsBefore(range0);
      Range.of(4294967295L);
      range2.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("13rJ!Jp^F{v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.13rJ!Jp^F{v
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.7737179750213112
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.of(139L);
      Range.Builder range_Builder0 = new Range.Builder(139L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-837L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.6826120407549525
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(304L);
      Range range1 = Range.of((-13L));
      range1.startsBefore(range0);
      Object object0 = new Object();
      range1.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.complement(range1);
      range1.isSubRangeOf(range0);
      Long long0 = new Long((-2423L));
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate.isEqual((Object) predicate2);
      Object object3 = new Object();
      Predicate.isEqual(object3);
      predicate0.or(predicate1);
      Range.of((-1492L), 9223372036854771638L);
      Range range2 = Range.of(963L);
      range1.isEmpty();
      range2.endsBefore(range0);
      long long1 = range1.getLength();
      assertEquals(1L, long1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(305L, long2);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.1907699694758564
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range1.equals("");
      Object object1 = new Object();
      Object object2 = new Object();
      range1.complement(range0);
      range1.isSubRangeOf(range0);
      Long long0 = new Long((-2423L));
      Long long1 = new Long((-1838L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long1);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      predicate1.negate();
      Object object3 = new Object();
      Predicate.isEqual(object3);
      Object object4 = new Object();
      Predicate.isEqual((Object) range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-2423L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2423 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.parseRange("^0.c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ^0.c into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1326L), (-383L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.2197813356553846
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(2692L, 2692L);
      Range range1 = Range.of(448L, 448L);
      Range range2 = range0.intersection(range1);
      range2.intersects(range1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) range2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.negate();
      Object object1 = new Object();
      Predicate.isEqual(object1);
      predicate1.or(predicate0);
      long long0 = (-619L);
      // Undeclared exception!
      try { 
        Range.of((-619L), (-2267L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.1995210668811094
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = 65567L;
      Range range0 = Range.of(304L, 65567L);
      Range.Builder range_Builder0 = new Range.Builder(65567L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder3.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_Builder1.contractEnd(1469L);
      Range.Builder range_Builder5 = new Range.Builder(range_CoordinateSystem0, (-2342L), (-2342L));
      Range.Builder range_Builder6 = new Range.Builder(range_Builder3);
      range_Builder1.contractEnd(1L);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder8 = null;
      try {
        range_Builder8 = new Range.Builder((-710L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.0758406137347563
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = 4294965889L;
      long long1 = 4294967297L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967297L, 4294967297L);
      Range range1 = Range.of(4294967297L);
      range1.isEmpty();
      Range range2 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.447859150496205
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.ofLength(1854L);
      Range range1 = Range.of(792L);
      range0.complement(range1);
      range0.intersection(range1);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(1854L, 2957L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(9223372036854774400L);
      Range.ofLength(2957L);
      long long0 = 4294967295L;
      range0.spliterator();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(2147483647L, 559L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.9252027641711082
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 139L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.0846407357230246
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 139L, 139L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 0L, 139L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-4216L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.9927824434428048
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(880L);
      Range.Builder range_Builder4 = new Range.Builder(880L);
      range_Builder3.expandEnd(880L);
      range_Builder1.expandEnd(1L);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      range_Builder4.expandEnd(1329L);
      Range range1 = Range.ofLength(263L);
      assertFalse(range1.isEmpty());
  }
}
