/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 09:36:48 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-61);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)4);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(65536, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4528358220593027
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      Nucleotide nucleotide0 = Nucleotide.Purine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec2.isGap(byteArray0, 2619);
      assertFalse(boolean0);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      nucleotide0.getBasesFor();
      nucleotide0.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.push(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getGappedOffsetFor(byteArray2, 871);
      defaultNucleotideCodec3.iterator(byteArray0);
      defaultNucleotideCodec1.getGapOffsets(byteArray1);
      List<Integer> list0 = defaultNucleotideCodec2.getGapOffsets(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)18}, byteArray1);
      assertTrue(list0.isEmpty());
      
      Nucleotide nucleotide1 = defaultNucleotideCodec1.decode(byteArray2, 0);
      assertEquals(Nucleotide.Purine, nucleotide1);
      assertEquals(5, byteArray2.length);
      
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.438233049119385
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec3.toString(byteArray1);
      assertEquals("-", string0);
      
      int int0 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray1, 0);
      assertEquals(0, int0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1309L, 9223372036854775807L);
      range0.getBegin(range_CoordinateSystem0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec4.isGap(byteArray1, 15);
      assertFalse(boolean0);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec5.getUngappedOffsetFor(byteArray0, (-29));
      assertEquals((-29), int1);
      assertEquals(4, byteArray0.length);
      
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec6.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray2);
      
      int int2 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray1, (-1032));
      assertEquals(1, int2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      nucleotide0.getBasesFor();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      UnaryOperator<Nucleotide> unaryOperator0 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      Nucleotide nucleotide1 = Nucleotide.NotGuanine;
      linkedList1.add(nucleotide1);
      linkedList1.push(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range.of(10L, (long) (byte)10);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 322;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, (-1679));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-15);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-2091);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)9;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2574925476354286
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray1, (-1));
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Strong;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide2 = Nucleotide.Adenine;
      linkedList1.push(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getGappedOffsetFor(byteArray0, 1);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray1);
      defaultNucleotideCodec3.encode((-1), iterator0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-99);
      byteArray2[1] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray2);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.321742298345672
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      String string0 = defaultNucleotideCodec2.toString(byteArray0);
      assertEquals("CT", string0);
      
      int int0 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray1, 0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)18, (byte) (-32)}, byteArray1);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec3.isGap(byteArray0, 1444);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer.getInteger("Y:fs$gN<Yf-\"'E74");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2994036442406536
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 2619);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      linkedList1.push(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec3.iterator(byteArray0);
      defaultNucleotideCodec3.encode(1, iterator0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)14;
      Byte byte1 = new Byte((byte)14);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      nucleotide0.getBasesFor();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.304173121489747
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.isGap(byteArray0, (-1434));
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide2 = Nucleotide.Thymine;
      linkedList1.push(nucleotide2);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, 2619);
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((-4), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9545719411254527
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)0;
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 48);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)7;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[4] = (byte)0;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("-------", string0);
      
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertTrue(list0.contains(int0));
      
      Integer.getInteger("`7mVP]rh;{[(D`c+{");
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Predicate.isEqual((Object) "^9at$SVI");
      int int1 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)7);
      assertEquals(7, int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0541898818280737
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byteArray0[3] = (byte)7;
      Byte byte1 = new Byte((byte)0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      assertEquals(0, int0);
      
      Range range0 = Range.ofLength(0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (int) byte1);
      assertTrue(boolean0);
      
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedList1.removeAll(linkedList2);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      assertEquals(4, byteArray1.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4352883337547993
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte)32}, byteArray1);
      
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)84;
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1840700269);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)10;
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)10);
      assertEquals(10, int1);
      
      DefaultNucleotideCodec.values();
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      int int2 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, (-66));
      assertTrue(int2 == int0);
      assertEquals(5, byteArray2.length);
      assertEquals(0, int2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7666931543352224
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byteArray0[3] = (byte)7;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)7);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.232281288873765
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "~~-pgBIyD[l6");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("~~-pgBIyD[l6");
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      predicate0.test((Object) null);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate1.and(predicate4);
      Predicate<Object> predicate7 = predicate4.and(predicate1);
      Predicate<Object> predicate8 = predicate6.or(predicate7);
      Predicate<Object> predicate9 = predicate0.negate();
      Predicate<Object> predicate10 = predicate1.or(predicate5);
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate1.and(predicate10);
      predicate5.negate();
      predicate5.negate();
      predicate0.negate();
      predicate11.or(predicate12);
      predicate5.test(predicate12);
      Predicate<Object> predicate13 = predicate2.negate();
      Predicate.isEqual((Object) predicate10);
      predicate11.or(predicate3);
      predicate11.test(predicate9);
      predicate13.and(predicate6);
      predicate5.test("~~-pgBIyD[l6");
      Predicate<Object> predicate14 = predicate5.and(predicate11);
      predicate14.or(predicate9);
      predicate13.or(predicate10);
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray0, 9223372036854775807L);
      assertEquals(Nucleotide.Guanine, nucleotide1);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 7);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)29}, byteArray0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6951020624694584
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte1 = new Byte((byte)0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Byte.toUnsignedLong((byte)0);
      Range range0 = Range.ofLength((byte)0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      linkedList2.removeAll(linkedList3);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList2);
      defaultNucleotideCodec0.iterator(byteArray1, range0);
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2641986650850368
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray1, 1);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      linkedList0.push(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray2, 2619);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray1, 0);
      defaultNucleotideCodec1.iterator(byteArray0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList2.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(2852, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byte byte1 = (byte)14;
      Byte byte2 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      predicate4.or(predicate2);
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate0.and(predicate7);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate2.negate();
      predicate8.and(predicate5);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)1;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.254743795129733
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, (byte)10);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      linkedList0.push(nucleotide0);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (-171));
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)10;
      byteArray1[6] = (byte)10;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)10;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec3.iterator(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.encode(4240, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9397928111645655
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 3815);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(3815, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.733857589601352
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode((byte[]) null, 4294967295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[6] = (byte)0;
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1038975971603353
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.isGap(byteArray0, (-1434));
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      nucleotide1.getBasesFor();
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.Purine;
      nucleotide2.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide3 = Nucleotide.Amino;
      linkedList0.push(nucleotide3);
      int int0 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray1, (-171));
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-34)}, byteArray1);
      
      defaultNucleotideCodec3.iterator(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)15;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7896843142571908
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)8;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Range range0 = Range.of(1229L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 618
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8629593857614326
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 48);
      byteArray0[3] = (byte)7;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray1, (-1289L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1289
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.371736318180402
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec2.toString(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec4.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(255, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.240776521137783
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec2.toString(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of((long) (byte)0, (long) (byte)0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.276140809853051
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, (-1330));
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      linkedList0.push(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray1, 1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.iterator(byteArray1);
      Range range0 = Range.of((long) 0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec4.iterator(byteArray1, range0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(806617088, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1813390521565186
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      nucleotide1.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.Purine;
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      linkedList3.push(nucleotide2);
      int int0 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 1);
      assertEquals(0, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec2.encode(0, iterator0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-32)}, byteArray0);
      
      byte[] byteArray2 = defaultNucleotideCodec2.encode(nucleotide0);
      assertEquals(5, byteArray2.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Byte byte0 = new Byte((byte) (-22));
      Byte byte1 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Integer.getInteger("BITS_PER_GLYPH");
      predicate0.test((Object) null);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      Predicate<Object> predicate5 = predicate3.and(predicate1);
      predicate3.or(predicate5);
      Predicate<Object> predicate6 = predicate3.or(predicate1);
      predicate5.and(predicate1);
      Predicate<Object> predicate7 = predicate6.and(predicate3);
      predicate5.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      predicate3.and(predicate7);
      Predicate<Object> predicate9 = predicate4.or(predicate0);
      predicate9.or(predicate3);
      predicate6.or(predicate8);
      Range.of(2520L, 2520L);
      defaultNucleotideCodec0.isGap(byteArray0, (byte)14);
      Integer integer0 = new Integer((-1650));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, (-1650));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Byte byte0 = new Byte((byte) (-22));
      Byte byte1 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("BITS_PER_GLYPH");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      Predicate<Object> predicate9 = predicate1.and(predicate6);
      Predicate<Object> predicate10 = predicate1.and(predicate8);
      predicate4.negate();
      predicate4.test(predicate10);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate2.negate();
      Predicate<Object> predicate13 = predicate3.negate();
      Predicate<Object> predicate14 = predicate0.or(predicate13);
      predicate10.and(predicate14);
      predicate5.negate();
      predicate5.test("BITS_PER_GLYPH");
      predicate4.and(predicate9);
      predicate8.or(predicate7);
      predicate12.or(predicate11);
      Range.of((long) (byte)14, 2520L);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (-1650));
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1380));
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1380));
      assertEquals((-1380), int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3786245420563206
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)8;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (-430));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)6;
      byte byte0 = (byte) (-78);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.105426495394898
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      linkedList0.push(nucleotide0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 83);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(6, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1495187761408894
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)10;
      defaultNucleotideCodec0.isGap(byteArray0, 1);
      byteArray0[5] = (byte)0;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.add(nucleotide0);
      byteArray0[6] = (byte) (-102);
      Nucleotide nucleotide1 = Nucleotide.Gap;
      linkedList0.push(nucleotide1);
      linkedList0.parallelStream();
      int int0 = new Byte((byte)10);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(7, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-111);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 4L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 4 corresponds to encodedIndex 6  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)14;
      Byte byte1 = new Byte((byte)14);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.957872571327265
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)14);
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "~~-pgBIyD[l6");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("~~-pgBIyD[l6");
      Integer.toUnsignedString((int) (byte)14);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      predicate0.test((Object) null);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate4.and(predicate1);
      Predicate<Object> predicate9 = predicate7.or(predicate8);
      Predicate<Object> predicate10 = predicate7.negate();
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate1.and(predicate9);
      predicate5.negate();
      Predicate<Object> predicate13 = predicate5.negate();
      predicate0.negate();
      predicate11.or(predicate12);
      predicate5.test(predicate12);
      Predicate<Object> predicate14 = predicate2.negate();
      Predicate.isEqual((Object) predicate4);
      predicate11.or(predicate3);
      predicate11.test(predicate10);
      predicate14.and(predicate7);
      predicate6.test("~~-pgBIyD[l6");
      Predicate<Object> predicate15 = predicate5.and(predicate11);
      predicate14.or(predicate13);
      predicate15.or(predicate10);
      predicate14.or(predicate1);
      Integer integer0 = new Integer((byte)14);
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertTrue(list0.isEmpty());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4, (byte)29, (byte)46}, byteArray0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Byte byte0 = new Byte((byte) (-22));
      Byte byte1 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("BITS_PER_GLYPH");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      Predicate<Object> predicate9 = predicate1.and(predicate6);
      Predicate<Object> predicate10 = predicate1.and(predicate8);
      predicate4.negate();
      predicate4.test(predicate10);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate2.negate();
      Predicate<Object> predicate13 = predicate3.negate();
      Predicate<Object> predicate14 = predicate0.or(predicate13);
      predicate10.and(predicate14);
      predicate5.negate();
      predicate5.test("BITS_PER_GLYPH");
      predicate4.and(predicate9);
      predicate8.or(predicate7);
      predicate12.or(predicate11);
      Range.of((long) (byte)14, 2520L);
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0242293353858836
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)14);
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "~~-pgBIyD[l6");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.toUnsignedString((int) (byte)14);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate4.and(predicate1);
      Predicate<Object> predicate9 = predicate7.or(predicate8);
      Predicate<Object> predicate10 = predicate7.negate();
      Predicate<Object> predicate11 = predicate1.or(predicate6);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Object> predicate13 = predicate1.and(predicate11);
      predicate5.negate();
      Predicate<Object> predicate14 = predicate5.negate();
      predicate0.negate();
      predicate12.or(predicate13);
      predicate5.test(predicate13);
      Predicate<Object> predicate15 = predicate2.negate();
      Predicate.isEqual((Object) predicate11);
      predicate7.or(predicate15);
      predicate12.or(predicate3);
      predicate12.test(predicate10);
      predicate15.and(predicate7);
      predicate6.test("~~-pgBIyD[l6");
      Predicate<Object> predicate16 = predicate5.and(predicate12);
      predicate15.or(predicate14);
      predicate16.or(predicate10);
      predicate15.or(predicate11);
      Integer integer0 = new Integer((byte)14);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(4L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4, (byte)29, (byte)46}, byteArray0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1258388747281005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)14);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "~~-pgBIyD[l6");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("~~-pgBIyD[l6");
      Integer.toUnsignedString((int) (byte)14);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      predicate0.test((Object) null);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate4.and(predicate1);
      Predicate<Object> predicate9 = predicate7.or(predicate8);
      Predicate<Object> predicate10 = predicate7.negate();
      Predicate<Object> predicate11 = predicate1.or(predicate6);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Object> predicate13 = predicate1.and(predicate11);
      predicate5.negate();
      predicate5.negate();
      predicate0.negate();
      predicate12.or(predicate13);
      predicate5.test(predicate13);
      Predicate<Object> predicate14 = predicate2.negate();
      Predicate.isEqual((Object) predicate11);
      predicate12.or(predicate3);
      predicate12.test(predicate10);
      predicate14.and(predicate7);
      predicate6.test("~~-pgBIyD[l6");
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (-1456));
      assertFalse(boolean0);
      
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)29}, byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0574866708943733
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 7);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGapOffsets(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, 5);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.getUngappedOffsetFor((byte[]) null, (-1130));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Byte byte0 = new Byte((byte) (-22));
      Byte byte1 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_P:R_:LYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("BITS_P:R_:LYPH");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      predicate1.and(predicate6);
      Predicate<Object> predicate9 = predicate1.and(predicate8);
      predicate4.negate();
      predicate4.test(predicate9);
      Predicate<Object> predicate10 = predicate9.negate();
      Object object0 = new Object();
      predicate4.test(object0);
      predicate2.negate();
      Predicate.isEqual((Object) predicate10);
      Predicate<Object> predicate11 = predicate3.negate();
      Predicate<Object> predicate12 = predicate0.or(predicate11);
      Predicate<Object> predicate13 = predicate9.and(predicate12);
      predicate5.negate();
      predicate5.test("BITS_P:R_:LYPH");
      Predicate.isEqual((Object) predicate13);
      Predicate<Object> predicate14 = predicate7.and(predicate0);
      predicate14.negate();
      predicate11.test((Object) null);
      predicate4.and(predicate1);
      predicate2.or(predicate11);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-2345L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -2345
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "~~-pgBIyD[l6");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("~~-pgBIyD[l6");
      Integer.toUnsignedString((int) (byte)14);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      predicate0.test((Object) null);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate4.and(predicate1);
      Predicate<Object> predicate9 = predicate7.or(predicate8);
      Predicate<Object> predicate10 = predicate7.negate();
      Predicate<Object> predicate11 = predicate1.or(predicate6);
      Predicate<Object> predicate12 = predicate9.negate();
      predicate5.negate();
      Predicate<Object> predicate13 = predicate5.negate();
      predicate0.negate();
      predicate12.or(predicate8);
      predicate5.test(predicate1);
      Predicate<Object> predicate14 = predicate2.negate();
      Predicate.isEqual((Object) predicate11);
      predicate12.or(predicate3);
      predicate12.test(predicate10);
      predicate14.and(predicate7);
      predicate6.test("~~-pgBIyD[l6");
      Predicate<Object> predicate15 = predicate5.and(predicate12);
      predicate14.or(predicate13);
      predicate15.or(predicate10);
      predicate14.or(predicate11);
      Integer integer0 = new Integer((byte)14);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)14);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Byte byte0 = new Byte((byte) (-22));
      Byte byte1 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate0.or(predicate2);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate3);
      Integer.getInteger("BITS_PER_GLYPH");
      predicate3.or(predicate4);
      predicate0.test((Object) null);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate3.or(predicate6);
      Predicate<Object> predicate10 = predicate3.and(predicate7);
      Predicate<Object> predicate11 = predicate3.and(predicate9);
      predicate5.negate();
      predicate5.test(predicate11);
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate4.negate();
      predicate13.and(predicate7);
      predicate6.test("BITS_PER_GLYPH");
      predicate5.and(predicate10);
      predicate9.or(predicate8);
      predicate13.or(predicate12);
      Range.of((long) (byte)14, 2520L);
      defaultNucleotideCodec0.isGap(byteArray0, (-1650));
      Integer integer0 = new Integer((-1380));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.236699190112518
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      linkedList0.add(nucleotide0);
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      Nucleotide nucleotide1 = Nucleotide.Keto;
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.isGap(byteArray0, 1042);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      linkedList0.push(nucleotide0);
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray1, 7);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.encode(0, iterator0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.getNumberOfGapsUntil((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)77;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)5, (long) (byte)59);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Byte byte0 = new Byte((byte) (-22));
      Byte byte1 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Integer.getInteger("BITS_PER_GLYPH");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      Predicate<Object> predicate9 = predicate1.and(predicate6);
      Predicate<Object> predicate10 = predicate1.and(predicate8);
      predicate8.negate();
      predicate4.test(predicate10);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate2.negate();
      Predicate<Object> predicate13 = predicate3.negate();
      Predicate<Object> predicate14 = predicate0.or(predicate13);
      predicate14.and(predicate7);
      predicate10.and(predicate14);
      predicate5.negate();
      predicate5.test("BITS_PER_GLYPH");
      predicate4.and(predicate9);
      predicate8.or(predicate7);
      predicate12.or(predicate11);
      Range range0 = Range.of((long) (byte)14, 2520L);
      defaultNucleotideCodec0.isGap(byteArray0, (-1650));
      Integer integer0 = new Integer((-1380));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 14 .. 2520 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Byte byte0 = new Byte((byte) (-22));
      Byte byte1 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("BITS_PER_GLYPH");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      Predicate<Object> predicate9 = predicate1.and(predicate6);
      Predicate<Object> predicate10 = predicate3.negate();
      predicate4.negate();
      predicate4.test(predicate10);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate2.negate();
      predicate11.test((Object) null);
      predicate12.and(predicate6);
      predicate5.test("BITS_PER_GLYPH");
      predicate4.and(predicate9);
      predicate8.or(predicate7);
      predicate12.or(predicate11);
      defaultNucleotideCodec0.iterator(byteArray0);
      Range range0 = Range.of((long) (byte) (-22), (long) (byte)14);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -22 .. 14 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("BITS_PER_GLYPH");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      predicate3.and(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate3.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      Predicate<Object> predicate9 = predicate1.and(predicate6);
      Predicate<Object> predicate10 = predicate1.and(predicate8);
      Predicate<Object> predicate11 = predicate8.negate();
      predicate4.test(predicate10);
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate<Object> predicate13 = predicate2.negate();
      Predicate<Object> predicate14 = predicate3.negate();
      predicate13.negate();
      Predicate<Object> predicate15 = predicate14.and(predicate11);
      Predicate<Object> predicate16 = predicate0.or(predicate14);
      predicate16.and(predicate7);
      Predicate<Object> predicate17 = predicate10.and(predicate16);
      predicate12.and(predicate17);
      predicate7.and(predicate15);
      predicate17.negate();
      predicate5.test("BITS_PER_GLYPH");
      predicate4.and(predicate9);
      predicate8.or(predicate7);
      predicate13.or(predicate12);
      defaultNucleotideCodec0.isGap(byteArray0, (-1650));
      Integer integer0 = new Integer((-1650));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)102;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byteArray0[3] = (byte)7;
      int int0 = new Byte((byte)0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6985711382966118
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[3] = (byte)7;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)7);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-65);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-110);
      byte byte0 = (byte)0;
      byteArray1[2] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      defaultNucleotideCodec0.getGapOffsets(byteArray1);
      byte byte1 = (byte)7;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)5;
      byte byte2 = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.1208276135312563
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 2619);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      nucleotide1.getBasesFor();
      Set<Nucleotide> set2 = nucleotide1.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      Nucleotide nucleotide2 = Nucleotide.NotThymine;
      linkedList1.push(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 1500);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.iterator(byteArray2);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8138265641391214
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.359475354295831
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.isGap(byteArray0, (-2146663995));
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      Nucleotide nucleotide1 = Nucleotide.Gap;
      defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide2 = Nucleotide.Pyrimidine;
      nucleotide2.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide3 = Nucleotide.Purine;
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      linkedList3.push(nucleotide3);
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray1, 1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.iterator(byteArray0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.encode((-1113), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-610), (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.527737042085175
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)77;
      byte byte0 = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.400344526816758
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte) (-112);
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte) (-7);
      byteArray1[4] = (byte)29;
      byteArray1[5] = (byte)2;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.509604213180078
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)61;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4286687697449683
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1062);
      Integer.getInteger("BITS_PER_GLYPH");
      int int0 = Integer.compare(3022, (-1742));
      defaultNucleotideCodec0.isGap(byteArray0, (-1650));
      Integer integer0 = new Integer((-1650));
      assertFalse(integer0.equals((Object)int0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.159481591934477
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-8);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-1700080648L), long0);
      
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte) (-32)}, byteArray1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Byte byte0 = new Byte((byte) (-22));
      Byte byte1 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("BITS_PER_GLYPH");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate0.test(predicate1);
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      Predicate<Object> predicate9 = predicate1.and(predicate6);
      Predicate<Object> predicate10 = predicate7.negate();
      predicate3.negate();
      predicate4.test(predicate10);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate2.negate();
      Predicate<Object> predicate13 = predicate3.negate();
      Predicate<Object> predicate14 = predicate0.or(predicate13);
      predicate10.and(predicate14);
      predicate5.negate();
      predicate5.test("BITS_PER_GLYPH");
      predicate4.and(predicate9);
      predicate8.or(predicate7);
      predicate12.or(predicate11);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 1L);
      assertEquals(Nucleotide.Gap, nucleotide0);
      
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "#\"Ly");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("#\"Ly");
      Integer.compare(3045, (-1742));
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate4.negate();
      Predicate<Object> predicate10 = predicate1.or(predicate6);
      Predicate<Object> predicate11 = predicate1.and(predicate8);
      Predicate<Object> predicate12 = predicate1.and(predicate10);
      predicate10.negate();
      predicate5.test(predicate12);
      Predicate<Object> predicate13 = predicate2.negate();
      Predicate<Object> predicate14 = predicate3.negate();
      predicate5.negate();
      Predicate<Object> predicate15 = predicate0.or(predicate14);
      predicate15.and(predicate9);
      Predicate<Object> predicate16 = predicate12.and(predicate15);
      predicate4.and(predicate16);
      Predicate<Object> predicate17 = predicate9.and(predicate0);
      predicate17.negate();
      predicate6.test("#\"Ly");
      predicate5.and(predicate11);
      predicate10.or(predicate9);
      predicate13.or(predicate8);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (-1650));
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1650));
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)14);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "~~-pgBIyD[l6");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("~~-pgBIyD[l6");
      Integer.toUnsignedString((int) (byte)14);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate6);
      Predicate<Object> predicate10 = predicate1.and(predicate7);
      Predicate<Object> predicate11 = predicate1.and(predicate9);
      predicate5.negate();
      Predicate<Object> predicate12 = predicate5.negate();
      predicate10.or(predicate11);
      predicate5.test(predicate11);
      Predicate<Object> predicate13 = predicate2.negate();
      predicate3.negate();
      predicate10.or(predicate3);
      predicate10.test(predicate8);
      predicate13.and(predicate7);
      predicate6.test("~~-pgBIyD[l6");
      Predicate<Object> predicate14 = predicate13.negate();
      predicate13.or(predicate12);
      predicate14.or(predicate8);
      predicate13.or(predicate9);
      Range.of((long) (byte)14, 2520L);
      Integer integer0 = new Integer((byte)14);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "~~-pgBIyD[l6");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("~~-pgBIyD[l6");
      Integer.toUnsignedString((int) (byte)14);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate6);
      Predicate<Object> predicate10 = predicate1.and(predicate7);
      Predicate<Object> predicate11 = predicate1.and(predicate9);
      predicate5.negate();
      Predicate<Object> predicate12 = predicate5.negate();
      predicate0.negate();
      predicate10.or(predicate11);
      predicate5.test(predicate11);
      Predicate<Object> predicate13 = predicate2.negate();
      predicate12.or(predicate1);
      Predicate.isEqual((Object) predicate9);
      predicate10.or(predicate3);
      predicate10.test(predicate8);
      predicate1.negate();
      predicate6.test("~~-pgBIyD[l6");
      Predicate<Object> predicate14 = predicate5.and(predicate10);
      predicate5.negate();
      predicate13.or(predicate12);
      predicate14.or(predicate8);
      predicate13.or(predicate9);
      Integer integer0 = new Integer((byte)14);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte) (-22));
      Byte byte1 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("BITS_PER_GLYPH");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      predicate1.and(predicate6);
      Predicate<Object> predicate9 = predicate1.and(predicate8);
      predicate4.negate();
      predicate4.test(predicate9);
      predicate9.negate();
      predicate2.negate();
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate0.or(predicate10);
      predicate9.and(predicate11);
      predicate5.negate();
      predicate5.test("BITS_PER_GLYPH");
      Predicate<Object> predicate12 = predicate7.and(predicate0);
      predicate12.negate();
      predicate10.test((Object) null);
      predicate4.and(predicate1);
      predicate2.or(predicate10);
      predicate4.or(predicate3);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-22);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-22));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.5673483863397744
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("BITS_PER_GLYPH");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      predicate3.and(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate3.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      Predicate<Object> predicate9 = predicate1.and(predicate6);
      Predicate<Object> predicate10 = predicate1.and(predicate8);
      Predicate<Object> predicate11 = predicate8.negate();
      predicate4.test(predicate10);
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate<Object> predicate13 = predicate2.negate();
      Predicate<Object> predicate14 = predicate3.negate();
      predicate13.negate();
      Predicate<Object> predicate15 = predicate14.and(predicate11);
      Predicate<Object> predicate16 = predicate0.or(predicate14);
      predicate16.and(predicate7);
      Predicate<Object> predicate17 = predicate10.and(predicate16);
      predicate12.and(predicate17);
      predicate7.and(predicate15);
      predicate17.negate();
      predicate5.test("BITS_PER_GLYPH");
      predicate4.and(predicate9);
      predicate8.or(predicate7);
      predicate13.or(predicate12);
      defaultNucleotideCodec0.isGap(byteArray0, (-1650));
      Integer integer0 = new Integer((-1650));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte) (-14);
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte) (-7);
      byteArray1[4] = (byte)45;
      byteArray1[5] = (byte)3;
      byteArray1[6] = (byte)115;
      byteArray1[7] = (byte)12;
      byteArray1[8] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray1, (-288));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2662596083157305
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      int int0 = (-1045);
      defaultNucleotideCodec0.isGap(byteArray0, (-1045));
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)113;
      byte byte0 = (byte)54;
      byteArray0[2] = (byte)54;
      byte byte1 = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte) (-23);
      byteArray1[3] = (byte) (-23);
      byteArray1[4] = (byte)109;
      byteArray1[5] = (byte) (-23);
      byteArray1[6] = (byte) (-23);
      byteArray1[7] = (byte)113;
      byteArray1[8] = (byte)54;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      DefaultNucleotideCodec.values();
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.encode(0, iterator0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)113);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 113 corresponds to encodedIndex 60  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)16;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byteArray0[0] = (byte)16;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte)16;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      Byte byte0 = new Byte((byte) (-22));
      Byte byte1 = new Byte((byte)14);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BITS_PER_GLYPH");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Integer.getInteger("BITS_PER_GLYPH");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.test((Object) null);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      Predicate<Object> predicate9 = predicate1.and(predicate6);
      Predicate<Object> predicate10 = predicate1.and(predicate8);
      predicate9.negate();
      predicate4.test(predicate10);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate3.negate();
      Predicate<Object> predicate14 = predicate0.or(predicate13);
      predicate10.and(predicate14);
      predicate5.negate();
      predicate5.test("BITS_PER_GLYPH");
      predicate4.and(predicate9);
      predicate8.or(predicate7);
      predicate12.or(predicate11);
      Range.of((long) (byte)14, 2520L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (-1650));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
