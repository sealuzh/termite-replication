/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 03:36:57 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.schememode.SchemeController;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.MenuComponent;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.help.ForwardAction;
import javax.swing.Icon;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.parsers.XIncludeAwareParserConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.712924217851714
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(false);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getLocale();
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 657, 6);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setDecorationBordersVisible(true);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      jDayChooser0.setCalendar(mockGregorianCalendar1);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getMaxSelectableDate();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser1.setDayBordersVisible(true);
      int int0 = JComponent.UNDEFINED_CONDITION;
      jDayChooser1.getDecorationBackgroundColor();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser1.setLocale(locale0);
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.758248552597388
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(15);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setMaxDayCharacters(100);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser0.getDay();
      jDayChooser3.getDay();
      JPanel jPanel0 = new JPanel();
      jDayChooser0.getDay();
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, (byte)36, 700L, (byte)78, (byte)36, 'O');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(keyEvent0.isAltDown());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setIgnoreRepaint(false);
      jDayChooser0.getBorder();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMinSelectableDate((Date) null);
      Color color0 = jDayChooser1.weekdayForeground;
      JDayChooser jDayChooser2 = new JDayChooser();
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7167462582949584
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-75);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay((byte) (-119));
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setMaxDayCharacters(100);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser0.getDay();
      jDayChooser3.getDay();
      JPanel jPanel0 = new JPanel();
      jDayChooser0.getDay();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7039446318508733
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayLanguage();
      locale0.toLanguageTag();
      Locale.getISOCountries();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.remove((MenuComponent) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Color color0 = jDayChooser0.weekdayForeground;
      Stack<Object> stack0 = new Stack<Object>();
      JList<Object> jList0 = new JList<Object>(stack0);
      Color color1 = jList0.getSelectionForeground();
      jDayChooser1.setDecorationBackgroundColor(color1);
      jDayChooser1.isDecorationBackgroundVisible();
      System.setCurrentTimeMillis(20L);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7167462582949584
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.day = 896;
      TitledBorder titledBorder0 = new TitledBorder("day");
      jDayChooser0.setDay(34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(28);
      jDayChooser0.setMaxDayCharacters(160);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser0.setToolTipText("day");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setMaxDayCharacters(34);
      jDayChooser1.isDecorationBackgroundVisible();
      System.setCurrentTimeMillis(1L);
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.day = 896;
      jDayChooser0.getBorder();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 3, "day");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay(896);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setMonth(28);
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources(34);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, fontInfo0, (PDFDocument) null, pDFResourceContext0, "day", "Dialog Plain 11", 34);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      int int0 = jDayChooser2.getMaxDayCharacters();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7481461843008175
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.day = 896;
      TitledBorder titledBorder0 = new TitledBorder("day");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(164);
      jDayChooser1.setMaxDayCharacters(896);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser0.setMonth(896);
      jDayChooser1.setEnabled(false);
      assertNotSame(jDayChooser1, jDayChooser2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7926483779936917
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.day = 896;
      TitledBorder titledBorder0 = new TitledBorder("day");
      jDayChooser0.setDay(34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(28);
      jDayChooser0.setMaxDayCharacters(160);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.getDay();
      jDayChooser1.getDay();
      JDayChooser jDayChooser4 = new JDayChooser(false);
      JDayChooser jDayChooser5 = new JDayChooser(false);
      jDayChooser0.getDay();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser4, 1, 691L, 14, (-973), 'M');
      MenuElement[] menuElementArray0 = new MenuElement[9];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser1, 1, 15, 1, 34, 'P', menuElementArray0, menuSelectionManager0);
      KeyEvent.getExtendedKeyCodeForChar(1753);
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7017652912416006
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(4507);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.UNDERLINE_ON;
      ActionEvent actionEvent0 = new ActionEvent(integer1, 14, "day");
      actionEvent0.paramString();
      jDayChooser0.getDay();
      jDayChooser0.getDay();
      jDayChooser0.getDayPanel();
      jDayChooser0.getDay();
      jDayChooser0.setMonth(2014);
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.706697613279902
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(4507);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.UNDERLINE_ON;
      ActionEvent actionEvent0 = new ActionEvent(integer1, 14, "day");
      actionEvent0.paramString();
      jDayChooser0.getDay();
      jDayChooser0.getDay();
      jDayChooser0.getDayPanel();
      jDayChooser0.getDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 297, (-376), 28, 90, '^');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.755843634042967
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.day = 896;
      jDayChooser0.getBorder();
      int int0 = 34;
      jDayChooser0.setDay(258);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(258, 10072);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, 34, "day");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(2);
      jDayChooser1.setMaxDayCharacters(0);
      boolean boolean0 = true;
      JDayChooser jDayChooser2 = new JDayChooser(true);
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.setMonth(2902);
      jDayChooser0.setEnabled(false);
      MockDate mockDate0 = new MockDate(2834);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("day", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.593621512459067
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton jButton0 = new JButton("day");
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.setIgnoreRepaint(true);
      EtchedBorder etchedBorder0 = new EtchedBorder(896);
      jDayChooser0.setDay(21);
      jDayChooser0.setMonth(896);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.753252865192133
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener0);
      AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMaxDayCharacters((-6313));
      DefaultEditorKit.InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit.InsertContentAction();
      JButton jButton0 = new JButton(defaultEditorKit_InsertContentAction0);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 24, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"insert-content\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale locale0 = Locale.UK;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(90);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, 1458, "0");
      actionEvent0.paramString();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 11, 6, (-1532), (-1532));
      ActionEvent actionEvent1 = new ActionEvent(mockGregorianCalendar0, 4, "day", (-1532));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-28);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((byte)67, threadPoolExecutor_DiscardOldestPolicy0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(thread0, 0L, (byte)50, timeUnit0);
      ActionEvent actionEvent0 = new ActionEvent(scheduledFuture0, (byte)67, (String) null);
      actionEvent0.paramString();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3";
      stringArray0[1] = "14";
      stringArray0[2] = "bWEL>yrs#i";
      stringArray0[3] = "2hPlMD5?";
      stringArray0[4] = "day";
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.804506987817414
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-277), "day");
      SymbolTable symbolTable0 = new SymbolTable(0);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool0);
      Locale locale0 = xIncludeAwareParserConfiguration0.getLocale();
      Locale.setDefault(locale0);
      locale0.getDisplayScript();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 11, 0, 3282, '>', 0);
      keyEvent0.setKeyCode(247);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDay();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 17, true);
      jDayChooser0.focusGained(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hAkR[4^,L^c?3N^Yn2");
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setMaxDayCharacters(2);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.60511024750744
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale locale0 = Locale.UK;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(10041);
      jDayChooser0.setMaxDayCharacters(3);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.70463509116901
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.day = 896;
      TitledBorder titledBorder0 = new TitledBorder("day");
      jDayChooser0.setDay(34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(28);
      jDayChooser0.setMaxDayCharacters(160);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.getDay();
      jDayChooser1.getDay();
      JDayChooser jDayChooser4 = new JDayChooser(false);
      jDayChooser1.getDayPanel();
      jDayChooser0.getDay();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jDayChooser4.setDay(896);
      jDayChooser0.setMaxDayCharacters(4);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7622091045067054
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setToolTipText("=|UnIm2Fbf+~");
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      jDayChooser0.setToolTipText("=|UnIm2Fbf+~");
      jDayChooser0.getSelectedDay();
      jDayChooser0.setEnabled(true);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      jDayChooser0.initDecorations();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setToolTipText("=|UnIm2Fbf+~");
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(8819);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jDayChooser0.setMaxDayCharacters(8819);
      jDayChooser0.getSundayForeground();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-72), (-2608L), 8819, 8819, 'V');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
      
      jDayChooser0.drawDays();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.611479906446705
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setIgnoreRepaint(false);
      jDayChooser0.getBorder();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(896);
      jDayChooser0.setMaxDayCharacters((-924));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.799517964535027
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.doLayout();
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.drawDays();
      jDayChooser0.drawDays();
      jDayChooser0.init();
      java.sql.Date date0 = new java.sql.Date(27L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3653), "R>)Bg");
      SymbolTable symbolTable0 = new SymbolTable(3);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, xMLGrammarPoolImpl0);
      Locale locale1 = xIncludeAwareParserConfiguration0.getLocale();
      Locale.setDefault(locale1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=R>)Bg,offset=-3653,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=17,MILLISECOND=667,ZONE_OFFSET=-3653,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setMonth(3);
      Color color0 = new Color((-3653), false);
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear(8745);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      JTextArea jTextArea0 = new JTextArea(4495, 1251);
      jDayChooser0.checkImage((Image) bufferedImage0, 25, 2857, (ImageObserver) jTextArea0);
      jDayChooser0.repaint((-1343), (-1343), 4057, (-5448));
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getDayPanel();
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7502443039254847
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(1974);
      jDayChooser1.setMaxDayCharacters(221);
      assertEquals(28, jDayChooser1.getDay());
      
      JDayChooser jDayChooser2 = new JDayChooser(true);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.setMonth(38);
      jDayChooser3.setFocus();
      System.setCurrentTimeMillis(1024L);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7180293135333957
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(4507);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.SMALL_CAPS;
      ActionEvent actionEvent0 = new ActionEvent(integer1, 14, "day");
      actionEvent0.paramString();
      jDayChooser0.getDay();
      jDayChooser0.getDay();
      jDayChooser0.getDayPanel();
      jDayChooser0.getDay();
      jDayChooser0.setYear((-7));
      jDayChooser0.setDay(31);
      jDayChooser0.setMaxDayCharacters((-1));
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.741954108442287
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, (-463L), (-376), 4507, '`', 0);
      keyEvent0.getExtendedKeyCode();
      KeyEvent.getExtendedKeyCodeForChar(4507);
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.decorationBordersVisible = false;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false);
      focusEvent0.paramString();
      focusEvent0.setSource(keyEvent0);
      jDayChooser0.focusLost(focusEvent0);
      Date date0 = jDayChooser0.getMinSelectableDate();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxSelectableDate(date1);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      jDayChooser0.doLayout();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      jDayChooser0.decorationBackgroundColor = null;
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1603), true);
      metalToolBarUI0.getAccessibleChildrenCount(jDayChooser0);
      focusEvent0.paramString();
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      metalToolBarUI0.isRolloverBorders();
      jDayChooser0.validate();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setVerifyInputWhenFocusTarget(true);
      jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setFocus();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      Timestamp timestamp0 = new Timestamp((-1603));
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      jDayChooser0.setMonth((-1603));
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      Color.getHSBColor(0.0F, 6, 628);
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(90, color0.getGreen());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8239992787002124
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ForwardAction forwardAction0 = new ForwardAction(mockGregorianCalendar0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setWeekOfYearVisible(true);
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setDay(28);
      int int0 = jDayChooser0.getDay();
      assertEquals(28, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.746209545491265
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      locale0.getDisplayLanguage();
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.validate();
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      int int0 = 0;
      jDayChooser0.getMaximumSize();
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.validate();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("Windows");
      font0.getMissingGlyphCode();
      jDayChooser0.setFont(font0);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(false);
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)50;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setRolloverSelectedIcon((Icon) null);
      jDayChooser_DecoratorButton0.getBorder();
      jDayChooser_DecoratorButton0.isFocusable();
      int int0 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.day = 896;
      TitledBorder titledBorder0 = new TitledBorder("day");
      jDayChooser0.setDay(34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(15);
      jDayChooser1.setMaxDayCharacters(896);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser2.getDay();
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.getDayPanel();
      jDayChooser2.getDay();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser2, 34, 24, 1, 34, 'M');
      int int0 = jDayChooser1.getMaxDayCharacters();
      assertEquals(15, jDayChooser1.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7800115946748636
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(100);
      jDayChooser0.setMaxDayCharacters(100);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMonth(10154);
      jDayChooser1.setEnabled(true);
      jDayChooser1.getMaxDayCharacters();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6408363687032845
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      System.setCurrentTimeMillis(2266L);
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jDayChooser0.setAlwaysFireDayProperty(false);
      boolean boolean0 = new Boolean(true);
      int int0 = 1;
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1, 0L, 1, (-3483), ':', (-3483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6408363687032845
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.getLocale();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      jDayChooser0.updateUI();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setRolloverSelectedIcon((Icon) null);
      jDayChooser_DecoratorButton0.getBorder();
      jDayChooser_DecoratorButton0.isFocusable();
      int int0 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      locale0.getScript();
      Locale.getISOCountries();
      jDayChooser0.drawDays();
      jDayChooser0.init();
      java.sql.Date date0 = new java.sql.Date((-601L));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(141, "day");
      SymbolTable symbolTable0 = new SymbolTable();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, xMLGrammarPoolImpl0);
      Locale locale1 = xIncludeAwareParserConfiguration0.getLocale();
      Locale.setDefault(locale1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=day,offset=141,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=461,ZONE_OFFSET=141,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setMonth(831);
      jDayChooser0.setLocale(locale1);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MenuElement[] menuElementArray0 = new MenuElement[7];
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("Windows");
      font0.getMissingGlyphCode();
      MockDate mockDate0 = new MockDate((-571L));
      Date date0 = jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7325637712329622
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      TitledBorder titledBorder0 = new TitledBorder("day");
      Date date0 = jDayChooser0.maxSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setSelectableDateRange(date0, date1);
      Date date2 = jDayChooser0.getMaxSelectableDate();
      assertSame(date2, date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.549904071707152
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(true);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setDecorationBordersVisible(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.updateUI();
      int int0 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Color color0 = Color.getColor("Wn6Hu<AdS=s1:", 2);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (-2461.2456F);
      floatArray0[3] = 0.7154F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 625.41846F;
      floatArray0[6] = 0.7154F;
      color0.getRGBColorComponents(floatArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color1 = jDayChooser0.sundayForeground;
      Color.getColor("R.%(QeYU", 2);
      jDayChooser0.setForeground(color1);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.getDay();
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, 881, 14, 14, 14, '=');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6408363687032845
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      System.setCurrentTimeMillis(2266L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      locale0.clone();
      locale0.getScript();
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayVariant(locale1);
      locale1.getDisplayVariant(locale0);
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1086);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.infoText;
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[8];
      floatArray0[0] = 400.0F;
      floatArray0[1] = (-2238.5112F);
      floatArray0[2] = (-3555.0F);
      Color.getColor("Wnw6Hu<AdS=s1:", 538);
      floatArray0[3] = (-2461.2456F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.7154F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.1F;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setForeground(color0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6578207996948766
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.day = 896;
      jDayChooser0.getBorder();
      jDayChooser0.setDay(32);
      jDayChooser0.setMaxDayCharacters(1548);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      MockDate mockDate0 = new MockDate(22, (-78), 22, 22, 21, 6);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7100799133333875
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      jDayChooser0.isFocusOwner();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-951), (-951), (-951), 334, 'Q');
      KeyEvent.getKeyModifiersText(334);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.initDecorations();
      jDayChooser0.drawDays();
      jDayChooser0.getDecorationBackgroundColor();
      int int0 = 0;
      int int1 = 1741;
      char char0 = '`';
      MenuElement[] menuElementArray0 = new MenuElement[9];
      BrowseMode browseMode0 = new BrowseMode();
      SchemeController schemeController0 = null;
      try {
        schemeController0 = new SchemeController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7180293135333957
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hAkR[4^,L^c?3N^Yn2");
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(14, jDayChooser0.getDay());
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~8\"[BC]I+U");
      jDayChooser0.setDay(4212);
      jDayChooser0.setMaxDayCharacters((-831));
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getLocale();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.767583180608272
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jDayChooser0.setAlwaysFireDayProperty(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Windows");
      jDayChooser0.setDay(4212);
      jDayChooser0.setMaxDayCharacters((-831));
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getLocale();
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }
}
