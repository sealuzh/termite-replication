/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 09:21:39 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.ImageCapabilities;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.sql.Date;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingDeque;
import javax.help.ForwardAction;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;
import javax.swing.JToggleButton;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.LineBorder;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalInternalFrameUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.BitmapImage;
import org.apache.fop.pdf.PDFColorSpace;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFFunction;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.pdf.PDFShading;
import org.apache.fop.pdf.PDFStream;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.parsers.XIncludeAwareParserConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.apache.xpath.NodeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3846296650145757
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = new Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-277), "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 11, 0, 3282, '>', 0);
      keyEvent0.setKeyCode(247);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setYear(3282);
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "Windows");
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl(documentTypeImpl0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(pSVIDocumentImpl0);
      sVGGraphics2D0.clipRect(0, '>', 11, '>');
      NodeSet nodeSet0 = new NodeSet((Node) pSVIDocumentImpl0);
      NodeSet nodeSet1 = new NodeSet(nodeSet0);
      MockDate mockDate0 = new MockDate(23, (-277), (-277), 1, (-1509), 1457);
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getLocale();
      jDayChooser0.getMinSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2592774269833718
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setDay(896);
      jDayChooser0.setMaxDayCharacters(304);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedBlockingDeque0, locale_FilteringMode0);
      FontInfo fontInfo0 = new FontInfo();
      PDFResources pDFResources0 = new PDFResources(896);
      Vector<Locale> vector1 = new Vector<Locale>();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = new Locale("30");
      locale0.getDisplayName(locale1);
      locale0.getDisplayVariant();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Locale locale2 = Locale.FRENCH;
      jDayChooser0.setLocale(locale2);
      jDayChooser0.setMonth(896);
      jDayChooser0.setFocus();
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.322436244902908
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-1155));
      jDayChooser0.setMaxDayCharacters(20);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>();
      vector0.iterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedBlockingDeque0, locale_FilteringMode0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFResources pDFResources0 = new PDFResources(20);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 20, (-2012));
      jDayChooser_DecoratorButton0.getRolloverSelectedIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", (Icon) null);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[2] = (MenuElement) jRadioButtonMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, (-4370), (-1155), 27, 37, '!', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setSource(locale_FilteringMode0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.260970493640655
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = new Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1274, "day");
      SymbolTable symbolTable0 = new SymbolTable(0);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, xMLGrammarPoolImpl0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      calendar0.setFirstDayOfWeek(2649);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setFocus();
      jDayChooser0.getWeekdayForeground();
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1708460440638633
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      PDFResources pDFResources0 = new PDFResources(158);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 158, (-1461));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getRolloverSelectedIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("", (Icon) null);
      MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[4];
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[2] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem0;
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, 2507, 29116800000L, (-948), 158, ',', menuElementArray0, menuSelectionManager1);
      jRadioButtonMenuItem0.removeActionListener(jDayChooser0);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser_DecoratorButton0, 2444, 233L, (-948), 5, '\"', menuElementArray0, menuSelectionManager0);
      menuKeyEvent1.getExtendedKeyCode();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3462730520237107
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      Date date0 = new Date(1L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", locale0);
      ParsePosition parsePosition0 = new ParsePosition(2201);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setSelectableDateRange(date0, (java.util.Date) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-178), "day");
      SymbolTable symbolTable0 = new SymbolTable(1);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setToolTipText("day");
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setToolTipText("day");
      jDayChooser1.getSelectedDay();
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.setEnabled(true);
      java.util.Date date1 = jDayChooser1.minSelectableDate;
      jDayChooser1.setMaxSelectableDate((java.util.Date) null);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1677452551206233
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.infoText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getDecorationBackgroundColor();
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1920060881903782
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.add(hierarchyBoundsListener2, hierarchyBoundsListener2);
      AWTEventMulticaster.remove(hierarchyBoundsListener3, hierarchyBoundsListener3);
      HierarchyBoundsListener hierarchyBoundsListener4 = AWTEventMulticaster.add(hierarchyBoundsListener3, hierarchyBoundsListener2);
      HierarchyBoundsListener hierarchyBoundsListener5 = AWTEventMulticaster.add(hierarchyBoundsListener3, (HierarchyBoundsListener) null);
      HierarchyBoundsListener hierarchyBoundsListener6 = AWTEventMulticaster.remove(hierarchyBoundsListener3, hierarchyBoundsListener4);
      HierarchyBoundsListener hierarchyBoundsListener7 = AWTEventMulticaster.remove(hierarchyBoundsListener6, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      HierarchyBoundsListener hierarchyBoundsListener8 = AWTEventMulticaster.add(hierarchyBoundsListener5, hierarchyBoundsListener7);
      AWTEventMulticaster.remove(hierarchyBoundsListener6, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove(hierarchyBoundsListener8, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add(hierarchyBoundsListener3, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-4106));
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setToolTipText("KSCms-UHC-V");
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, true);
      JInternalFrame jInternalFrame1 = new JInternalFrame((String) null, true);
      MetalInternalFrameUI metalInternalFrameUI0 = new MetalInternalFrameUI(jInternalFrame0);
      Dimension dimension0 = metalInternalFrameUI0.getMaximumSize(jInternalFrame0);
      jDayChooser0.setPreferredSize(dimension0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMaxDayCharacters(35);
      assertEquals(1, jDayChooser0.getDay());
      
      int int0 = jDayChooser1.getDaysInMonth();
      assertEquals(28, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.192009299875774
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(896);
      jDayChooser1.setMaxDayCharacters(1245);
      Locale locale0 = new Locale("day", "day", "day");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedBlockingDeque0, locale_FilteringMode0);
      jDayChooser0.setYear(1245);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 896, 1245, (-741), 4, '~');
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>();
      Vector<Locale> vector0 = new Vector<Locale>();
      FontInfo fontInfo0 = new FontInfo();
      PDFResources pDFResources0 = new PDFResources((-1580));
      Locale locale0 = Locale.CHINESE;
      String string0 = AbstractButton.ICON_CHANGED_PROPERTY;
      JDayChooser jDayChooser0 = new JDayChooser();
      Object object0 = new Object();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(true);
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D1.getPDFDocument();
      PDFStream pDFStream0 = new PDFStream();
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFStream0, (-1580), (-288));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      BitmapImage bitmapImage0 = new BitmapImage("23", 1985, (-3783), byteArray0, "ISO-8859-1");
      PDFColorSpace pDFColorSpace0 = bitmapImage0.getColorSpace();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getRoot();
      pDFDocument0.getOutlineRoot();
      PDFFunction pDFFunction0 = new PDFFunction(268, vector0, (List) null, (List) null, canvasGraphicsNode0, 2);
      PDFShading pDFShading0 = new PDFShading((-288), pDFColorSpace0, vector0, vector0, false, (-3783), 2, (-732), vector0, pDFFunction0);
      pDFPage0.addShading(pDFShading0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFPage0, ",cXt0JY", (String) null, (-288));
      DebugGraphics debugGraphics0 = new DebugGraphics(pDFGraphics2D0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D1);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.createVolatileImage(7, 26, (ImageCapabilities) null);
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.169955066694688
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-108);
      byte byte0 = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)14;
      byte byte1 = (byte)23;
      byteArray0[6] = (byte)23;
      TimeZone timeZone0 = TimeZone.getTimeZone("Windows");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.264751957486765
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = new Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1274, "day");
      SymbolTable symbolTable0 = new SymbolTable(0);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, xMLGrammarPoolImpl0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale.getISOCountries();
      Locale locale0 = Locale.CHINESE;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.addMouseListener((MouseListener) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDecorationBackgroundVisible(false);
      CheckboxMenuItem checkboxMenuItem0 = null;
      try {
        checkboxMenuItem0 = new CheckboxMenuItem("day", false);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.225638632888409
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDay(896);
      jDayChooser0.setMaxDayCharacters(35);
      Locale locale0 = Locale.CHINA;
      jDayChooser0.setLocale(locale0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(4);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2466692658189538
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = new Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1274, "day");
      SymbolTable symbolTable0 = new SymbolTable(0);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, xMLGrammarPoolImpl0);
      Locale locale0 = xIncludeAwareParserConfiguration0.getLocale();
      Locale.setDefault(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2178), 0L, 0, 951, '>', 0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.149827905824892
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.maxDayCharacters = 72;
      jDayChooser0.day = 896;
      jDayChooser0.setDay(0);
      jDayChooser0.setMaxDayCharacters(457);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1561258844406392
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6");
      jDayChooser0.setDay(896);
      jDayChooser0.setMaxDayCharacters(896);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      FontInfo fontInfo0 = new FontInfo();
      PDFResources pDFResources0 = new PDFResources((-4461));
      Vector<Locale> vector1 = new Vector<Locale>();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = new Locale("6");
      locale1.getDisplayName(locale0);
      locale0.getDisplayVariant();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Locale locale2 = Locale.FRENCH;
      jDayChooser0.setMonth((-3925));
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.186701326306983
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getDay();
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext_GraphicContextDefaults0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(14, 14, (RenderingHints) null);
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      rescaleOp0.filter(bufferedImage0, bufferedImage0);
      JToggleButton jToggleButton0 = new JToggleButton();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.23080938526805
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      Date date0 = new Date(1L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", locale0);
      ParsePosition parsePosition0 = new ParsePosition(2201);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setSelectableDateRange(date0, (java.util.Date) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-178), "day");
      MockDate mockDate0 = new MockDate((-1923), 36, (-78), (-78), (-1923), 10);
      jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.307607076343633
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener(hierarchyBoundsListener2);
      java.util.Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.addListeners(11);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.addListeners(11);
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.getDayPanel();
      jDayChooser0.setWeekdayForeground((Color) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1815864511724317
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>();
      Vector<Locale> vector0 = new Vector<Locale>();
      FontInfo fontInfo0 = new FontInfo();
      PDFResources pDFResources0 = new PDFResources((-1580));
      Locale locale0 = Locale.CHINESE;
      String string0 = AbstractButton.ICON_CHANGED_PROPERTY;
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AOB(&Ys}$De('R|1X");
      jDayChooser0.setDay((-2877));
      jDayChooser0.setMaxDayCharacters((-2877));
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      FontInfo fontInfo1 = new FontInfo();
      PDFResources pDFResources1 = new PDFResources(1301);
      Vector<Locale> vector2 = new Vector<Locale>();
      Locale locale1 = Locale.CHINESE;
      Locale locale2 = new Locale("AOB(&Ys}$De('R|1X");
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      ResourceBundle.Control resourceBundle_Control0 = ResourceBundle.Control.getControl(list0);
      Locale locale3 = resourceBundle_Control0.getFallbackLocale("MGh", locale1);
      locale3.getDisplayName(locale2);
      locale3.getDisplayVariant();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Locale locale4 = Locale.FRENCH;
      jDayChooser0.setMonth(262152);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2742907015233556
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setDecorationBordersVisible(true);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      mockGregorianCalendar0.clear(7);
      mockGregorianCalendar0.getGreatestMinimum(9);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.getMaxSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar2.clone();
      ForwardAction forwardAction0 = new ForwardAction(mockGregorianCalendar2);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.302725194813716
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = new Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-277), "day");
      SymbolTable symbolTable0 = new SymbolTable(0);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool0);
      Locale locale0 = xIncludeAwareParserConfiguration0.getLocale();
      Locale.setDefault(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=day,offset=-277,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=43,ZONE_OFFSET=-277,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 11, 0, 3282, '>', 0);
      keyEvent0.setKeyCode(247);
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setSelectableDateRange((java.util.Date) null, date0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0634080210456234
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Windows");
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>();
      Vector<Locale> vector1 = new Vector<Locale>();
      FontInfo fontInfo0 = new FontInfo();
      PDFResources pDFResources0 = new PDFResources(896);
      Vector<Locale> vector2 = new Vector<Locale>();
      Locale locale0 = Locale.CHINESE;
      String string0 = AbstractButton.ICON_CHANGED_PROPERTY;
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFStream pDFStream0 = new PDFStream();
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFStream0, 896, 100);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, (PDFDocument) null, pDFPage0, "", "refY", 180.0F);
      DebugGraphics debugGraphics0 = new DebugGraphics(pDFDocumentGraphics2D0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0966166083347697
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.menu;
      Color color0 = Color.getColor("values", 0);
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.294063047655238
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(896);
      jDayChooser0.setMaxDayCharacters(6);
      jDayChooser0.setDay(32);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1023, 0, 896, (-917), 0, 9);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      JPopupMenu jPopupMenu0 = new JPopupMenu("r@^Ml>RL|");
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      JMenu jMenu0 = new JMenu();
      JPopupMenu jPopupMenu1 = jMenu0.getPopupMenu();
      JMenuItem jMenuItem0 = jPopupMenu1.add((Action) null);
      menuElementArray0[1] = (MenuElement) jMenuItem0;
      JMenuItem jMenuItem1 = jMenu0.insert(jMenuItem0, 6);
      menuElementArray0[2] = (MenuElement) jMenuItem1;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1023, 1969L, 1023, 1023, 'U', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setSource(menuElementArray0[0]);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      int int0 = jDayChooser1.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1609223925836183
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = new Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      int int0 = (-277);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-277), "day");
      int int1 = (-5356);
      jDayChooser0.setYear((-5356));
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "7");
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl(documentTypeImpl0);
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(deferredDocumentImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2750543890430937
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener(hierarchyBoundsListener2);
      java.util.Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.addListeners(11);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.addListeners(11);
      JDayChooser jDayChooser1 = new JDayChooser();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Dimension dimension0 = gridBagLayout0.preferredLayoutSize(jDayChooser1);
      jDayChooser1.setPreferredSize(dimension0);
      assertEquals(203, dimension0.width);
      
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, (-463L), (-376), 4507, '`', 0);
      keyEvent0.getExtendedKeyCode();
      KeyEvent.getExtendedKeyCodeForChar(4507);
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.decorationBordersVisible = false;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false);
      focusEvent0.setSource(keyEvent0);
      jDayChooser0.focusLost(focusEvent0);
      java.util.Date date0 = jDayChooser0.maxSelectableDate;
      java.util.Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxSelectableDate(date1);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1609349675619263
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>();
      Vector<Locale> vector0 = new Vector<Locale>();
      FontInfo fontInfo0 = new FontInfo();
      PDFResources pDFResources0 = new PDFResources((-1580));
      Vector<Locale> vector1 = new Vector<Locale>();
      Locale locale0 = Locale.CHINESE;
      String string0 = AbstractButton.ICON_CHANGED_PROPERTY;
      JDayChooser jDayChooser0 = new JDayChooser();
      Object object0 = new Object();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(true);
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D1.getPDFDocument();
      PDFStream pDFStream0 = new PDFStream();
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFStream0, (-1580), (-335));
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFPage0, ",[Ft0zY", (String) null, (-335));
      DebugGraphics debugGraphics0 = new DebugGraphics(pDFGraphics2D0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(7);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFStream pDFStream0 = new PDFStream();
      PDFResources pDFResources0 = new PDFResources(12308);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFStream0, (-2568), (-3529));
      pDFPage0.getDocument();
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, (FontInfo) null, (PDFDocument) null, pDFPage0, "String Value: ", "ISO-8859-1", 12308);
      DebugGraphics debugGraphics0 = new DebugGraphics(pDFDocumentGraphics2D0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2875346864475063
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = new Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1274, "day");
      SymbolTable symbolTable0 = new SymbolTable(0);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool0);
      Locale locale0 = xIncludeAwareParserConfiguration0.getLocale();
      Locale.setDefault(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=day,offset=1274,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=22,MILLISECOND=594,ZONE_OFFSET=1274,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setFocus();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      jDayChooser0.updateUI();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getGraphicsConfiguration();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.224109137261152
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(896);
      jDayChooser1.setMaxDayCharacters(1245);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedBlockingDeque0, locale_FilteringMode0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FontInfo fontInfo0 = new FontInfo();
      PDFResources pDFResources0 = new PDFResources(1245);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      pDFResources0.addFonts(pDFDocument0, fontInfo0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 375, (-1461));
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      java.util.Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser1.setMaxSelectableDate(date0);
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3083425891745457
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener(hierarchyBoundsListener2);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      jDayChooser0.setCalendar(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      jDayChooser0.setFocus();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.updateUI();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isWeekOfYearVisible();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.256121932388635
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      jDayChooser0.doLayout();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      jDayChooser0.decorationBackgroundColor = null;
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1603), true);
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.validate();
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setWeekOfYearVisible(true);
      MockCalendar.getInstance();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setMonth((-1603));
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1708751650941007
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale.getISOCountries();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Locale locale0 = jDayChooser1.getLocale();
      jDayChooser0.setLocale(locale0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener2);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener(hierarchyBoundsListener2);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser1.setMonth((-36));
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.infoText;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      SystemColor systemColor1 = SystemColor.infoText;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Locale locale0 = Locale.FRENCH;
      jDayChooser0.setMonth(22);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getFont();
      jDayChooser0.setFont((Font) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.085671428717565
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.infoText;
      LineBorder lineBorder0 = new LineBorder(systemColor0);
      jDayChooser0.setBorder(lineBorder0);
      jDayChooser0.setDay((-917));
      jDayChooser0.setDay(8869);
      MetalInternalFrameUI metalInternalFrameUI0 = new MetalInternalFrameUI((JInternalFrame) null);
      Dimension dimension0 = metalInternalFrameUI0.getMaximumSize(jDayChooser0);
      jDayChooser0.setPreferredSize(dimension0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3329054552735284
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener(hierarchyBoundsListener2);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setFocus();
      Color color0 = jDayChooser0.getWeekdayForeground();
      MenuSelectionManager.defaultManager();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(90, color0.getGreen());
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.200010905276689
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 896;
      jDayChooser0.setDay(34);
      jDayChooser0.getVerifyInputWhenFocusTarget();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser_DecoratorButton0.addInputMethodListener((InputMethodListener) null);
      jDayChooser_DecoratorButton0.isFocusable();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(26, 28, 3600000, (-135), 3600000);
      ForwardAction forwardAction0 = new ForwardAction(mockGregorianCalendar1);
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1609223925836183
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = new Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1274, "day");
      SymbolTable symbolTable0 = new SymbolTable(0);
      MockDate mockDate0 = new MockDate(2045, (-282), 49, (-78), 1274, (-282));
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.1701828337800664
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      jDayChooser0.init();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.updateUI();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[3] = (Object) "";
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.169993336394016
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jK8Ce'twC-ia9N.Z");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.firePropertyChange("", (-2000L), 0L);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawDays();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2021264500326914
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.add(hierarchyBoundsListener2, hierarchyBoundsListener2);
      AWTEventMulticaster.remove(hierarchyBoundsListener3, hierarchyBoundsListener3);
      HierarchyBoundsListener hierarchyBoundsListener4 = AWTEventMulticaster.add(hierarchyBoundsListener3, hierarchyBoundsListener2);
      HierarchyBoundsListener hierarchyBoundsListener5 = AWTEventMulticaster.add(hierarchyBoundsListener3, hierarchyBoundsListener3);
      AWTEventMulticaster.add(hierarchyBoundsListener4, hierarchyBoundsListener4);
      HierarchyBoundsListener hierarchyBoundsListener6 = AWTEventMulticaster.remove(hierarchyBoundsListener4, hierarchyBoundsListener3);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener6);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener6);
      AWTEventMulticaster.add(hierarchyBoundsListener5, (HierarchyBoundsListener) null);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.133789948455545
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.updateUI();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0586049119161527
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFStream pDFStream0 = new PDFStream();
      PDFResources pDFResources0 = new PDFResources(12308);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFStream0, (-2568), (-3529));
      pDFPage0.getDocument();
      SystemColor systemColor0 = SystemColor.infoText;
      jDayChooser0.setForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1912202525750986
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setDay(896);
      jDayChooser0.setMaxDayCharacters(896);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedBlockingDeque0, locale_FilteringMode0);
      FontInfo fontInfo0 = new FontInfo();
      PDFResources pDFResources0 = new PDFResources(896);
      Vector<Locale> vector1 = new Vector<Locale>();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = new Locale("day");
      locale1.getExtensionKeys();
      locale0.getDisplayName(locale1);
      locale1.getDisplayVariant();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Locale locale2 = Locale.FRENCH;
      jDayChooser0.setMonth(896);
      jDayChooser0.getDayPanel();
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.133742703431037
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      Locale locale1 = Locale.ROOT;
      jDayChooser0.getUIClassID();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      locale0.clone();
      locale0.getScript();
      locale0.getDisplayVariant(locale1);
      locale0.getDisplayVariant(locale1);
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(3319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.133789948455545
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale.getISOCountries();
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.GERMANY;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale1 = Locale.CHINA;
      jDayChooser0.setLocale(locale1);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.272595785627052
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.infoText;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JMenuItem jMenuItem0 = new JMenuItem((Action) null);
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 27, 27, 27, 0, '!', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setEnabled(false);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2742351305314132
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ForwardAction forwardAction0 = new ForwardAction(mockGregorianCalendar0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.2894956398050104
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ForwardAction forwardAction0 = new ForwardAction(mockGregorianCalendar0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedBlockingDeque0, locale_FilteringMode0);
      FontInfo fontInfo0 = new FontInfo();
      PDFResources pDFResources0 = new PDFResources(896);
      Vector<Locale> vector1 = new Vector<Locale>();
      String string0 = AbstractButton.ICON_CHANGED_PROPERTY;
      JDayChooser jDayChooser0 = new JDayChooser();
      Object object0 = new Object();
      Object[][] objectArray0 = new Object[2][2];
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) vector0;
      objectArray1[1] = (Object) pDFResources0;
      objectArray1[2] = (Object) locale_FilteringMode0;
      objectArray1[3] = (Object) vector0;
      objectArray1[4] = (Object) vector1;
      objectArray1[5] = (Object) vector0;
      objectArray1[6] = (Object) fontInfo0;
      objectArray1[7] = (Object) locale_FilteringMode0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) locale_FilteringMode0;
      objectArray2[1] = (Object) fontInfo0;
      objectArray2[2] = object0;
      objectArray2[3] = (Object) vector1;
      objectArray2[4] = (Object) vector1;
      objectArray2[5] = object0;
      objectArray2[6] = (Object) vector1;
      objectArray2[7] = (Object) list0;
      objectArray2[8] = (Object) "icon";
      objectArray0[1] = objectArray2;
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      Rectangle rectangle0 = jTable0.getCellRect(29, 896, true);
      jDayChooser0.getBounds(rectangle0);
      ActionEvent actionEvent0 = new ActionEvent(object0, 29, "IisEe0I#Zc{{?qCKl", 3449);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
