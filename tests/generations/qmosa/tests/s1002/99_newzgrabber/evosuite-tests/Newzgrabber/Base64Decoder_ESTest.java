/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 07:59:18 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.Base64Decoder;
import Newzgrabber.BufferedCustomInputStream;
import Newzgrabber.Newzgrabber;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64Decoder_ESTest extends Base64Decoder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6175690840398205
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("Transfer", "Transfer");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile1 = new MockFile("", "Transfer");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile2 = new MockFile(mockFile0, "Transfer");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile2, true);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Transfer/Transfer/Transfer");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[4] = (byte) (-107);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Transfer/Transfer/Transfer");
      mockFile2.setExecutable(true);
      mockFile2.mkdirs();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 874);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      Newzgrabber.IsBatch = true;
      base64Decoder1.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      assertFalse(base64Decoder0.ABORT);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6129560246772454
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(pipedInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("Transfer", "Transfer");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile1 = new MockFile("", "Transfer");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile2 = new MockFile(mockFile0, "Transfer");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile2, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[4] = (byte) (-107);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Transfer/Transfer/Transfer");
      mockFile2.mkdirs();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 874);
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(byteArrayInputStream0);
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream1, mockFileOutputStream0);
      Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream1, mockFileOutputStream0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      base64Decoder2.decodeStream();
      base64Decoder2.decodeStream();
      assertEquals(1L, base64Decoder2.getLineCount());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7535026497228274
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[4] = (byte)0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Transfer/Transfer/Transfer");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)0;
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)13);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, (byte)13, true);
      byteArrayInputStream0.read();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      base64Decoder0.foundbegin = true;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, dataOutputStream0);
      base64Decoder1.setOutputStream((OutputStream) null);
      Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream0, dataOutputStream0);
      base64Decoder2.decodeStream();
      base64Decoder2.decodeStream();
      base64Decoder2.decodeStream();
      base64Decoder0.decodeStream();
      assertFalse(base64Decoder0.ABORT);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.7574242183502784
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[4] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)0;
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)13);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, (byte)13, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      base64Decoder0.foundbegin = true;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, dataOutputStream0);
      base64Decoder1.setOutputStream((OutputStream) null);
      Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      base64Decoder2.updateProgress();
      base64Decoder2.foundbegin = true;
      Base64Decoder base64Decoder3 = new Base64Decoder(bufferedCustomInputStream0, dataOutputStream0);
      base64Decoder3.setStatusObject(bufferedCustomInputStream0);
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder1.decodeStream();
      assertEquals(1L, base64Decoder1.getLineCount());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.7490805417936826
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[4] = (byte)0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Transfer/Transfer/Transfer");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)0;
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)13);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, (byte)13, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      base64Decoder0.foundbegin = true;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Base64Decoder base64Decoder0 = new Base64Decoder((BufferedCustomInputStream) null, byteArrayOutputStream0);
      Newzgrabber.verbose = true;
      // Undeclared exception!
      try { 
        base64Decoder0.decodeStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.Base64Decoder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Vector<Locale> vector0 = new Vector<Locale>(linkedHashSet0);
      Locale locale1 = Locale.JAPANESE;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      vector0.add(locale1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) vector0, locale_FilteringMode0);
      Locale.lookup(stack0, list0);
      Locale.getISOCountries();
      locale0.hasExtensions();
      vector0.add(locale0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet1 = new LinkedHashSet<Locale>();
      Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      linkedHashSet1.add(locale1);
      linkedHashSet1.add((Locale) null);
      linkedHashSet1.add(locale1);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet1, locale_FilteringMode1);
      Locale.lookupTag(arrayList0, set0);
      locale0.getDisplayLanguage();
      Locale locale2 = Locale.US;
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0, locale_FilteringMode1);
      locale2.getDisplayName(locale0);
      Locale.setDefault(locale_Category0, locale2);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-41);
      Base64Decoder base64Decoder0 = new Base64Decoder((BufferedCustomInputStream) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        base64Decoder0.decodeStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.Base64Decoder", e);
      }
  }
}
