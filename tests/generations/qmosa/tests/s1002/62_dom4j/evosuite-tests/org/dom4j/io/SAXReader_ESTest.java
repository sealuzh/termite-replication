/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 07:34:38 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMDocument;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributeListImpl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2141218257485757
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      locator2Impl1.getSystemId();
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl1.setSystemId("//tmp/http:/xml.org/sax/features/namespaces0]\"UtR%Wc=l.]0u");
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl5.getLineNumber();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      File file0 = MockFile.createTempFile("//tmp/http:/xml.org/sax/features/validation0jKJxz|+9ImFJjd", "//tmp/Expected: 0.tmp");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.getParent();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.skippedEntity("6T^||:kd{y");
      defaultHandler2_0.resolveEntity("1ffIso<F{P8;,?QB^i", "6T^||:kd{y");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.startCDATA();
      defaultHandler2_1.resolveEntity("6T^||:kd{y", "6T^||:kd{y");
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      defaultHandler2_2.startPrefixMapping("1ffIso<F{P8;,?QB^i", " ym]'rg");
      char[] charArray1 = new char[0];
      defaultHandler2_2.comment(charArray0, 27, 27);
      defaultHandler2_0.characters(charArray1, 4538, 27);
      defaultHandler2_2.comment(charArray0, 36, 27);
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      defaultHandler2_3.endEntity("@C@:K6O3c6TvP");
      DefaultHandler2 defaultHandler2_4 = new DefaultHandler2();
      defaultHandler2_2.notationDecl(" ym]'rg", (String) null, "}\"(G>=yLdd{!H8h8tw");
      DefaultHandler2 defaultHandler2_5 = new DefaultHandler2();
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", true);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1356451697605046
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.isIgnoreComments();
      String string0 = "!";
      InputSource inputSource0 = new InputSource("!");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = false;
          SAXReader sAXReader0 = new SAXReader(false);
          byte[] byteArray0 = new byte[4];
          URL uRL0 = MockURL.getFtpExample();
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
          sAXReader0.setEncoding("v9\"");
          PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3674724429174536
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("org.jaxen.expr.PredicateSet", "\"e[~h");
      sAXReader_SAXEntityResolver0.resolveEntity("", "org.jaxen.expr.PredicateSet");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getColumnNumber();
      Object object0 = new Object();
      Object object1 = new Object();
      SAXReader sAXReader1 = new SAXReader();
      Object object2 = new Object();
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", object2);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.392289647069807
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.delete();
      mockFile0.setWritable(false);
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile0.deleteOnExit();
      mockFile0.createNewFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile2 = new MockFile("", "4XJQ Nu&|P.VhFr");
      MockFile mockFile3 = new MockFile(mockFile2, "4XJQ Nu&|P.VhFr");
      URI uRI1 = mockFile2.toURI();
      MockFile mockFile4 = new MockFile("");
      mockFile4.setExecutable(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4XJQ Nu&|P.VhFr");
      mockFile0.setExecutable(false);
      mockFile4.setExecutable(true);
      MockFile mockFile5 = new MockFile(uRI1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sAXReader0.setEncoding("kwD-oYC9nd`5e#[1");
      sAXReader0.isMergeAdjacentText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NeOp]&2qsCo$>g,4}w9");
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"KWD-OYC9ND`5E#[1\". Nested exception: Invalid encoding name \"KWD-OYC9ND`5E#[1\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("substring-after");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("lu6dfJsA,6rzOM", ":7");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[4];
      MockURL.getHttpExample();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createEntity("$N9^vM", "$N9^vM");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-114);
      byteArray0[1] = (byte)58;
      byteArray0[5] = (byte) (-14);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, (byte)58);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.read(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setEncoding("$N9^vM");
      try { 
        sAXReader0.read((InputStream) dataInputStream0, " Q");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"$N9^VM\". Nested exception: Invalid encoding name \"$N9^VM\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "r^D");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte)42;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      String string0 = "//tmp/tmp/string0/tmp/wKz`'~9%6-eH>/\\wQp0wKz`'~9%V6-eH>/\\wQp0/tmp/string0/tmp/wKz`'~9%6-eH>/\\wQp0wKz`'~9%V6-eH>/\\wQp";
      StringReader stringReader0 = new StringReader("//tmp/tmp/string0/tmp/wKz`'~9%6-eH>/wQp0wKz`'~9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%6-eH>/wQp0wKz`'~9%V6-eH>/wQp");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3200751058822906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      String string0 = "org.dom4j.tree.QNameCache";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.tree.QNameCache");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.QNameCache", "hCo]y=>");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getDispatchHandler();
      sAXReader0.getDispatchHandler();
      sAXReader0.createContentHandler(xMLFilterImpl0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2815);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, false);
      DefaultDocumentFactory.getInstance();
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter(xMLFilter0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[8] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "HJUv");
      SAXReader sAXReader2 = new SAXReader(false);
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.239095456210609
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.tree.QNameCache");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.QNameCache", "hCo]y=>");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      sAXReader0.getDispatchHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      char[] charArray0 = new char[0];
      defaultHandler2_0.characters(charArray0, 1690, 1690);
      defaultHandler2_0.ignorableWhitespace(charArray0, (-1754), (-1232));
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.unparsedEntityDecl("//tmp/wKz`'~9%V6-eH>/wQp0No such attribute", "//tmp/wKz`'~9%V6-eH>/wQp0No such attribute", "floor", "//tmp/ZN N{,w#t55^5^f!)}0.tmp");
      defaultHandler2_0.resolveEntity("isEqual", "PiMw1");
      // Undeclared exception!
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.616721739008198
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      sAXReader_SAXEntityResolver0.resolveEntity(" : ", "vk(%R|Vn=^p{");
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter1);
      sAXReader0.isIgnoreComments();
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@1137f313 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3605385140248165
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, false);
      sAXReader1.getXMLFilter();
      sAXReader1.createContentHandler(xMLFilterImpl0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) null, ")");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.getPublicId();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl1);
      String string0 = "6jY>s>oj_ n=ah@9j";
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3497427651978415
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-48);
      byteArray0[0] = (byte) (-48);
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver("G7^R8XFnE_'Q}R&");
      sAXReader0.setEntityResolver(entityResolver0);
      byte byte1 = (byte)101;
      String string0 = "//tmp/T[L8nVC5n^6:a0T[L8nVC5n^6:a";
      File file0 = MockFile.createTempFile(".&DFGTrf7Z", "//tmp/T[L8nVC5n^6:a0T[L8nVC5n^6:a");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.313613076828765
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      sAXReader_SAXEntityResolver0.resolveEntity(" : ", "vk(%R|Vn=^p{");
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.createContentHandler(parserAdapter1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity("//tmp/ZN N{,w#t55^5^f!)}0.tmp", "P-6nS]2Arno%P8pd");
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '{';
      xMLReaderAdapter0.processingInstruction("{zNgjAfxC,", "vk(%R|Vn=^p{");
      defaultHandler2_0.characters(charArray0, 977, 81);
      defaultHandler2_0.resolveEntity("//tmp/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'9%V6-eH>/wQp", "//tmp/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'9%V6-eH>/wQp");
      StringReader stringReader0 = new StringReader(" : ");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "r^D");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "r^D");
      SAXReader sAXReader0 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.installXMLFilter((XMLReader) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.353110605213824
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      String string0 = "http://xml.org/sax/properties/declaration-handler";
      sAXReader0.setEncoding("http://xml.org/sax/properties/declaration-handler");
      StringReader stringReader0 = new StringReader("//tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp");
      StringReader stringReader1 = new StringReader("");
      stringReader0.read();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader1 = new SAXReader();
      try { 
        sAXReader0.read((Reader) stringReader1, "k=,mi3y_8@^^IjW!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locatorImpl0.setPublicId("]/[Y&HL");
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl2);
      locator2Impl1.getLineNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      locator2Impl5.getSystemId();
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl8 = new Locator2Impl();
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl2);
      locator2Impl9.getSystemId();
      locator2Impl9.getLineNumber();
      Locator2Impl locator2Impl10 = new Locator2Impl();
      Locator2Impl locator2Impl11 = new Locator2Impl();
      locator2Impl11.setSystemId("//tmp/QTvLjsc)8Z{6Gx\"09(a");
      Locator2Impl locator2Impl12 = new Locator2Impl();
      locator2Impl1.getLineNumber();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      locator2Impl0.setPublicId(".Hp`");
      Locator2Impl locator2Impl13 = new Locator2Impl();
      locator2Impl2.getLineNumber();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.setFeature("http://xml.org/sax/features/namespaces", true);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      Object object0 = new Object();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.skippedEntity("VT;\"wo^T0;meM");
      defaultHandler2_0.resolveEntity("3`<+_d=RsSeynK6b9*8", "3`<+_d=RsSeynK6b9*8");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      defaultHandler2_2.endEntity("r39+1h1shH/");
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      defaultHandler2_1.notationDecl("3`<+_d=RsSeynK6b9*8", "//tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp", "6h(@<");
      defaultHandler2_3.resolveEntity("r39+1h1shH/", "6h(@<");
      char[] charArray1 = new char[0];
      defaultHandler2_1.characters(charArray1, (-1877), 59);
      defaultHandler2_3.ignorableWhitespace(charArray1, (-1877), (-1877));
      defaultHandler2_1.unparsedEntityDecl("//tmp/wKz`'~9%V6-eH>/wQp0No such attribute", "//tmp/tmp/string0/tmp/wKz`'~9%6-eH>/wQp0wKz`'~9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%6-eH>/wQp0wKz`'~9%V6-eH>/wQp", "PiMw1", "1^mF");
      Object object1 = new Object();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3372717988650726
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      defaultDocumentFactory0.getXPathNamespaceURIs();
      defaultDocumentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader0.isValidating();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl3);
      locator2Impl0.getLineNumber();
      locator2Impl1.getSystemId();
      locator2Impl0.getPublicId();
      locator2Impl4.setXMLVersion("QTvLjsc)8Z{6Gx\"");
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl7.setSystemId("*$(K0w3 ");
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl8.getLineNumber();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      locator2Impl7.getLineNumber();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      StringReader stringReader0 = new StringReader("*$(K0w3 ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("9YB0bn(KoTS^");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(documentFactory0);
      sAXReader1.isValidating();
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertTrue(sAXReader1.isStringInternEnabled());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader(false);
          byte[] byteArray0 = new byte[4];
          URL uRL0 = MockURL.getFtpExample();
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
          PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl3);
      locator2Impl0.getLineNumber();
      locator2Impl1.getSystemId();
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl6.getLineNumber();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl1.setSystemId("//tmp/http/xml.org/sax/features/namespaces0]tR%Wc=l.]0u");
      Locator2Impl locator2Impl9 = new Locator2Impl();
      locator2Impl6.getLineNumber();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      locator2Impl9.setPublicId("");
      Locator2Impl locator2Impl10 = new Locator2Impl();
      locator2Impl9.getLineNumber();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)82;
      sAXReader1.setIncludeInternalDTDDeclarations(true);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3533), (byte)77);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      bufferedInputStream0.close();
      sAXReader1.isIncludeInternalDTDDeclarations();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader1.removeHandler("");
      assertTrue(sAXReader1.isIncludeInternalDTDDeclarations());
      
      sAXReader0.getEntityResolver();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      locatorImpl1.setColumnNumber((-1304));
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      locator2Impl2.getLineNumber();
      locator2Impl1.getSystemId();
      locator2Impl1.getPublicId();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl1);
      locator2Impl1.setSystemId("http://xml.org/sax/properties/lexical-handler");
      locator2Impl1.getLineNumber();
      xMLFilterImpl0.setDocumentLocator(locator2Impl3);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.unparsedEntityDecl((String) null, (String) null, (String) null, "e6:P(gwk3v@");
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      try { 
        sAXReader0.setFeature("JPO(o:h9;Ox>yb;", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'JPO(o:h9;Ox>yb;' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl3);
      locator2Impl0.getLineNumber();
      locator2Impl1.getSystemId();
      locator2Impl0.getPublicId();
      locator2Impl4.setXMLVersion("QTvLjsc)8Z{6Gx\"");
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl7.setSystemId("*$(K0w3 ");
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl8.getLineNumber();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      MockFile mockFile0 = new MockFile("#cdata-section");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter1);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter0);
      InputSource inputSource0 = new InputSource("?x/Y0f0.G=g_");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: ?x/Y0f0.G=g_ Nested exception: no protocol: ?x/Y0f0.G=g_
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.452246979423442
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader1.getXMLFilter();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader1.createContentHandler((XMLReader) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.getDispatchHandler();
      // Undeclared exception!
      sAXReader0.installXMLFilter(xMLFilterImpl1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.resolveEntity("//tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp", "//tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_0.notationDecl("//tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp", "uDyC}Q(?9uA6.", "//tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp");
      defaultHandler2_0.resolveEntity("!JJ!dj1=hu", "D,%Ey");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.skippedEntity("64^\"|:|d{y");
      defaultHandler2_0.resolveEntity("64^\"|:|d{y", "1ffIso<F{P8;,?QB^i", "1ffIso<F{P8;,?QB^i", "1ffIso<F{P8;,?QB^i");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.startCDATA();
      defaultHandler2_1.getExternalSubset("64^\"|:|d{y", "1ffIso<F{P8;,?QB^i");
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      defaultHandler2_1.resolveEntity("`\"^/Q", (String) null, "//tmp/#cdata-section0QTvLjsc)8Z{6Gx\"", "F[C#HK+7/yK*mYuWMN(");
      defaultHandler2_2.startPrefixMapping("1ffIso<F{P8;,?QB^i", " ym]'rg");
      char[] charArray1 = new char[0];
      defaultHandler2_2.comment(charArray0, 27, 27);
      defaultHandler2_0.characters(charArray1, 4538, 27);
      defaultHandler2_1.comment(charArray1, (-392), 14);
      defaultHandler2_0.endEntity(" ym]'rg");
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      defaultHandler2_1.endEntity(" ym]'rg");
      DefaultHandler2 defaultHandler2_4 = new DefaultHandler2();
      defaultHandler2_4.resolveEntity(")5w`{", "1ffIso<F{P8;,?QB^i");
      defaultHandler2_4.notationDecl("//tmp/Wp&P[0v}: \"9Bz;O=1+)kaO", "//tmp/Wp&P[0v}: \"9Bz;O=1+)kaO", "rscOqR&");
      DefaultHandler2 defaultHandler2_5 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "DW0Cmu\"s}wGe$kd5b\"");
      DefaultDocumentFactory.getInstance();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile("DW0Cmu\"s}wGe$kd5b\"", "DW0Cmu\"s}wGe$kd5b\"");
      mockFile0.mkdir();
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile0.deleteOnExit();
      MockFile mockFile2 = new MockFile(uRI0);
      mockFile2.createNewFile();
      String string0 = "4XJQ Nu&|P.VhFr";
      MockFile mockFile3 = new MockFile("Unrecognized token type: 0", "4XJQ Nu&|P.VhFr");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile4 = new MockFile(mockFile0, "7>Eo[57hzxPp {");
      URI uRI1 = MockURI.aFileURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "|_ZP;";
      MockFile mockFile5 = new MockFile("DW0Cmu\"s}wGe$kd5b\"", "|_ZP;");
      MockFile mockFile6 = new MockFile("|_ZP;", "|_ZP;");
      mockFile6.setExecutable(true);
      MockFile mockFile7 = new MockFile("DW0Cmu\"s}wGe$kd5b\"");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/4XJQ Nu&|P.VhFr/4XJQ Nu&|P.VhFr");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/string-interning");
      sAXReader_SAXEntityResolver0.resolveEntity("mQa}vdn--&blA6[", "http://xml.org/sax/properties/lexical-handler");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4897182683864876
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.getErrorHandler();
      documentFactory0.getXPathNamespaceURIs();
      documentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(false);
      DOMDocument dOMDocument0 = new DOMDocument("");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader1.setXMLReader(xMLFilterImpl0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-48);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      try { 
        sAXReader0.setProperty("G7^R8XFnE_'Q}R&", object2);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'G7^R8XFnE_'Q}R&' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte) (-114);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2844);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      try { 
        sAXReader0.read((InputStream) dataInputStream0, "R!J|vH_1");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid byte 2 of 4-byte UTF-8 sequence. Nested exception: Invalid byte 2 of 4-byte UTF-8 sequence.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3385967288168596
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      XMLReaderAdapter xMLReaderAdapter2 = new XMLReaderAdapter();
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter2);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver(" : ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver1.resolveEntity(" : ", "?x/Y0f0.G=g_");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@17f99f83 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@17f99f83 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "";
      sAXReader0.removeHandler("");
      sAXReader0.getDocumentFactory();
      sAXReader0.setMergeAdjacentText(false);
      SAXReader sAXReader1 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader1.setDefaultHandler(dispatchHandler0);
      String[] stringArray0 = new String[5];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream1, 38);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory.getInstance();
      int int0 = 25;
      PipedInputStream pipedInputStream0 = new PipedInputStream(25);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 25);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      SAXReader sAXReader0 = new SAXReader(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      sAXReader0.getXMLReader();
      PipedInputStream pipedInputStream2 = null;
      try {
        pipedInputStream2 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      namespace0.toString();
      QName qName0 = new QName("org.jaxen.function.SubstringFunction", namespace0);
      BaseElement baseElement0 = new BaseElement(qName0);
      defaultDocumentFactory0.createAttribute((Element) baseElement0, "org.jaxen.function.SubstringFunction", "org.jaxen.function.SubstringFunction");
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createEntity("//tmp/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp01^mF", "RIj>)MF%FS.6?_");
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      byte[] byteArray0 = new byte[4];
      MockURL.getFileExample();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      StringReader stringReader0 = new StringReader("jz. b}`Q)E6f*M!&");
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getLineNumber();
      locator2Impl0.getSystemId();
      locator2Impl0.getPublicId();
      locator2Impl1.setXMLVersion("QTvLjsc)8Z{6Gx\"");
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl1.setSystemId("//tmp/ZN N{,w#t55^5^f!)}0.tmp");
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl3.getLineNumber();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/#cdata-section0:`/G*");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile.createTempFile("#cdata-section", ":`/G*");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("zR2m]J9.~o#ehm{");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      defaultDocumentFactory1.createText("//tmp/#cdata-section0/tmp/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp0org.dom4j.io.SAXReader");
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory0.createDocType("processing-instruction()", "processing-instruction()", "h<3Mcz@jm");
      defaultDocumentFactory0.createXPath("processing-instruction()", (VariableContext) simpleVariableContext0);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createXPath("processing-instruction()", (VariableContext) simpleVariableContext0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "processing-instruction()");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      defaultDocumentFactory1.createDocument();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.getDocumentFactory();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("//tmp/r39RS1h1shHR0", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //tmp/r39RS1h1shHR0 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      Object object0 = new Object();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.skippedEntity("VT;\"wo^T0;meM");
      defaultHandler2_0.resolveEntity("3`<+_d=RsSeynK6b9*8", "3`<+_d=RsSeynK6b9*8");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      defaultHandler2_2.characters(charArray0, (-2275), 1393);
      defaultHandler2_2.endEntity("r39RS1h1shHR");
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      defaultHandler2_1.notationDecl("3`<+_d=RsSeynK6b9*8", "//tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp", "6h(@<");
      char[] charArray1 = new char[0];
      defaultHandler2_3.ignorableWhitespace(charArray1, (-1877), (-1877));
      defaultHandler2_1.unparsedEntityDecl("org.dom4j.jaxb.JAXBReader$PruningElementHandler", "//tmp/tmp/string0/tmp/wKz`'~9%6-eH>/wQp0wKz`'~9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%6-eH>/wQp0wKz`'~9%V6-eH>/wQp", "PiMw1", "1^mF");
      defaultHandler2_1.resolveEntity("//tmp/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'9%V6-eH>/wQp", "P-6nS]2Arno%P8d");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory.getInstance();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setStringInternEnabled(true);
      try { 
        sAXReader0.setXMLReaderClassName("m");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class m not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.skippedEntity("64^\"|:|d{y");
      defaultHandler2_0.resolveEntity("64^\"|:|d{y", "1ffIso<F{P8;,?QB^i", "1ffIso<F{P8;,?QB^i", "1ffIso<F{P8;,?QB^i");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.startCDATA();
      defaultHandler2_1.getExternalSubset("64^\"|:|d{y", "1ffIso<F{P8;,?QB^i");
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      defaultHandler2_2.startPrefixMapping("1ffIso<F{P8;,?QB^i", " ym]'rg");
      char[] charArray1 = new char[0];
      defaultHandler2_2.comment(charArray0, 27, 27);
      defaultHandler2_0.characters(charArray1, 4538, 27);
      defaultHandler2_1.comment(charArray1, (-392), 14);
      defaultHandler2_0.endEntity(" ym]'rg");
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      defaultHandler2_1.endEntity(" ym]'rg");
      DefaultHandler2 defaultHandler2_4 = new DefaultHandler2();
      defaultHandler2_4.notationDecl("//tmp/Wp&P[0v}: \"9Bz;O=1+)kaO", "//tmp/Wp&P[0v}: \"9Bz;O=1+)kaO", "rscOqR&");
      DefaultHandler2 defaultHandler2_5 = new DefaultHandler2();
      try { 
        sAXReader0.setFeature("{UY}Z%S9a", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '{UY}Z%S9a' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      String string0 = "http://xml.org/sax/features/namespaces";
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getNamespaceForPrefix("7k");
      QName qName0 = new QName("7k", (Namespace) null, "7k");
      BeanElement beanElement0 = new BeanElement(qName0);
      beanElement0.addElement("http://xml.org/sax/features/namespaces", "http://xml.org/sax/features/namespaces");
      sAXReader0.resetHandlers();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7k";
      stringArray0[1] = "7k";
      stringArray0[2] = "7k";
      stringArray0[3] = "http://xml.org/sax/features/namespaces";
      stringArray0[4] = "7k";
      stringArray0[5] = "http://xml.org/sax/features/namespaces";
      stringArray0[6] = "7k";
      stringArray0[7] = "http://xml.org/sax/features/namespaces";
      stringArray0[8] = "http://xml.org/sax/features/namespaces";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0, 867);
      pruningElementStack0.pushElement(beanElement0);
      PruningElementStack pruningElementStack1 = null;
      try {
        pruningElementStack1 = new PruningElementStack((String[]) null, dispatchHandler0, 867);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setStripWhitespaceText(false);
      DefaultDocumentFactory.getInstance();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-48);
      byteArray0[0] = (byte) (-48);
      byte byte1 = (byte)101;
      sAXReader0.isStripWhitespaceText();
      MockFile.createTempFile("http://xml.org/sax/features/string-interning", "//tmp/T[L8nVC5n^6:a0T[L8nVC5n^6:a");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/T[L8nVC5n^6:a0T[L8nVC5n^6:a");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[4];
      StringReader stringReader0 = new StringReader("//tmp/Error on line 0wKz`'~9%V6-eH>/wQp");
      try { 
        sAXReader0.read((Reader) stringReader0, "//tmp/Error on line 0wKz`'~9%V6-eH>/wQp");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document //tmp/Error on line 0wKz`'~9%V6-eH>/wQp : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ";%dK/2N^l?5");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      simpleVariableContext1.setVariableValue(" value \"", (Object) xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity((String) null, "9~q%vK/F");
      defaultHandler2_0.resolveEntity("3`<+_d=RsSeynK6b9*8", "3`<+_d=RsSeynK6b9*8");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      sAXReader0.removeHandler((String) null);
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      defaultHandler2_2.endEntity("r39+1h1shH/");
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      defaultHandler2_1.notationDecl("3`<+_d=RsSeynK6b9*8", "//tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp", "//tmp/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp");
      char[] charArray0 = new char[0];
      defaultHandler2_1.characters(charArray0, (-1877), 59);
      defaultHandler2_3.ignorableWhitespace(charArray0, (-1877), (-1877));
      defaultHandler2_1.unparsedEntityDecl("//tmp/wKz`'~9%V6-eH>/wQp0No such attribute", "//tmp/tmp/string0/tmp/wKz`'~9%6-eH>/wQp0wKz`'~9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%6-eH>/wQp0wKz`'~9%V6-eH>/wQp", "PiMw1", "1^mF");
      defaultHandler2_1.resolveEntity("//tmp/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'9%V6-eH>/wQp", "P-6nS]2no%P8pd");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPath("processing-instruction()", (VariableContext) simpleVariableContext0);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createXPath("processing-instruction()", (VariableContext) simpleVariableContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      defaultDocumentFactory1.createDocument();
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      attributeListImpl0.getName((-1889));
      AttributeListImpl attributeListImpl1 = new AttributeListImpl(attributeListImpl0);
      parserAdapter0.startElement("%", attributeListImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributesImpl0);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("Qoo3wX");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      SAXReader sAXReader1 = new SAXReader((String) null, false);
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.180115872190566
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.getErrorHandler();
      xMLReaderAdapter0.setErrorHandler((ErrorHandler) null);
      xMLReaderAdapter0.startPrefixMapping("", "");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(parserAdapter0, defaultHandler2_0);
      sAXReader0.createDefaultEntityResolver("");
      sAXReader0.removeHandler("");
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.isStringInternEnabled();
      defaultHandler2_0.resolveEntity("", "");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getXMLFilter();
      sAXReader0.setIgnoreComments(true);
      sAXReader0.isStringInternEnabled();
      sAXReader0.setXMLReader((XMLReader) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      sAXReader0.resetHandlers();
      byte[] byteArray0 = new byte[0];
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-48);
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver("G7^R8XFnE_'Q}R&");
      entityResolver0.resolveEntity("//tmp/tmp/string0/tmp/wKz`'~9%V6-eH>/wQp0wKz`'~9%V6-eH>/wQp0T[L8nVC5n^6:a", "//tmp/tmp/string0/tmp/wKz`'~9%6-eH>/wQp0wKz`'~9%V6-eH>/wQp0/tmp/string0/tmp/wKz`'~9%6-eH>/wQp0wKz`'~9%V6-eH>/wQp");
      sAXReader0.setEntityResolver(entityResolver0);
      MockFile.createTempFile(".&DFGTrf7Z", "//tmp/T[L8nVC5n^6:a0T[L8nVC5n^6:a");
      entityResolver0.resolveEntity("//tmp/T[L8nVC5n^6:a0T[L8nVC5n^6:a", "G7^R8XFnE_'Q}R&");
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(false);
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      attributeListImpl0.getName((-367));
      AttributeListImpl attributeListImpl1 = new AttributeListImpl(attributeListImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.startElement((String) null, attributeListImpl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributesImpl0);
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      sAXReader1.addHandler((String) null, sAXModifyElementHandler0);
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.setValidation(true);
      assertTrue(sAXReader1.isValidating());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte)15;
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory2);
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory.getInstance();
      URI uRI0 = MockURI.aFileURI;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("4XJQ Nu&|P.VhFr");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile1 = new MockFile(mockFile0, "4XJQ Nu&|P.VhFr");
      URI uRI1 = MockURI.aFileURI;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DW0Cmu\"s}wGe$kd5b\"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4XJQ Nu&|P.VhFr");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile.createTempFile("j.5WI5", "SFOBtK:E-s");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "__LZ/jkg}");
      MockFile mockFile2 = new MockFile("DW0Cmu\"s}wGe$kd5b\"");
      StringReader stringReader0 = new StringReader("//tmp/tmp/T[L8nVC5n^6:a0T[L8nVC5n^6:a0/tmp/T[L8nVC5n^6:a0T[L8nVC5n^6:a");
      SAXReader sAXReader0 = new SAXReader((String) null);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl0);
      locator2Impl4.getLineNumber();
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl7.getLineNumber();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl0.setSystemId("3[`G~iA$<OmUII/");
      Locator2Impl locator2Impl9 = new Locator2Impl();
      Locator2Impl locator2Impl10 = new Locator2Impl();
      locator2Impl10.getLineNumber();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.notationDecl("//tmp/tmp/:`/G*0.tmp0/tmp/r39+1h1shH/0.tmp", "55B", "");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      try { 
        sAXReader0.setFeature("", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: 
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory.getInstance();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setFeature("m", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: m
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.354592309236786
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.2251550429852736
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl0);
      locator2Impl4.getLineNumber();
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl7.getLineNumber();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl0.setSystemId("3[`G~iA$<OmUII/");
      Locator2Impl locator2Impl9 = new Locator2Impl();
      Locator2Impl locator2Impl10 = new Locator2Impl();
      locator2Impl10.getLineNumber();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      File file0 = MockFile.createTempFile("v7wB},LyF&", "-NLqzocsqS/c!yW`#E");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "DW0Cmu\"s}wGe$kd5b\"");
      DefaultDocumentFactory.getInstance();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      mockFile0.mkdir();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFile0.toPath();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile0.deleteOnExit();
      mockFile0.createNewFile();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile2 = new MockFile("", "4XJQ Nu&|P.VhFr");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile3 = new MockFile(mockFile2, "4XJQ Nu&|P.VhFr");
      URI uRI1 = MockURI.aFileURI;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      mockFile3.mkdirs();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile.createTempFile("j.5WI5", "SFOBtK:E-s");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      mockFile3.setExecutable(true);
      MockFile mockFile4 = new MockFile("DW0Cmu\"s}wGe$kd5b\"");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2251550429852736
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      locator2Impl5.getLineNumber();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl1.setSystemId("//tmp/http:/xml.org/sax/features/namespaces0]\"UtR%Wc=l.]0u");
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl5.getLineNumber();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      File file0 = MockFile.createTempFile("-NLqzocsqS/c!yW`#E", "-NLqzocsqS/c!yW`#E");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@2194a35a Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@2194a35a Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      xMLReaderAdapter0.setDTDHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("[ (");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("B:`)sQ(", "B:`)sQ(");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("substring-after");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("lufJsA,6rzOM", "S(g$t!_<");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory.getInstance();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.delete();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.deleteOnExit();
      mockFile0.createNewFile();
      MockFile mockFile2 = new MockFile(mockFile1, "r-mS~bXB3,L3.tq");
      mockFile2.setExecutable(false);
      MockFile mockFile3 = new MockFile(uRI0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "r-mS~bXB3,L3.tq");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("r-mS~bXB3,L3.tq");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class r-mS~bXB3,L3.tq not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, (DefaultHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'e';
      charArray0[2] = '&';
      charArray0[3] = '(';
      charArray0[4] = ')';
      charArray0[5] = '|';
      parserAdapter0.ignorableWhitespace(charArray0, 36, 36);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7646308653001808
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory.getInstance();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.delete();
      mockFile0.setWritable(false);
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile0.deleteOnExit();
      mockFile0.createNewFile();
      MockFile mockFile2 = new MockFile("", "");
      MockFile mockFile3 = new MockFile(mockFile2, "");
      mockFile2.setExecutable(false);
      mockFile3.mkdirs();
      mockFile3.setExecutable(true);
      MockFile mockFile4 = new MockFile(uRI0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("{");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/T[L8nVC5n^6:a0T[L8nVC5n^6:a", "{");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "{");
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, false);
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isValidating());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)4;
      Namespace namespace0 = Namespace.get("http://xml.org/sax/properties/lexical-handler", "");
      BeanElement beanElement0 = new BeanElement(" is in scope on: ", namespace0, xMLFilterImpl0);
      DefaultElement defaultElement0 = beanElement0.clone();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " is in scope on: ";
      stringArray0[1] = " is in scope on: ";
      stringArray0[2] = " is in scope on: ";
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      
      dispatchHandler0.removeHandler(" is in scope on: ");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 6);
      pruningElementStack0.pushElement(defaultElement0);
      pruningElementStack0.getDispatchHandler();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      sAXReader0.addHandler(" is in scope on: ", dispatchHandler0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          byte[] byteArray0 = new byte[4];
          URL uRL0 = MockURL.getHttpExample();
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
          PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl0);
      locator2Impl3.getLineNumber();
      locator2Impl1.getSystemId();
      locator2Impl4.getPublicId();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      locator2Impl5.setSystemId("");
      locator2Impl3.getLineNumber();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      locator2Impl5.getColumnNumber();
      Object object0 = new Object();
      Object object1 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      Object object2 = new Object();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, object2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.skippedEntity("64^\"|:|d{y");
      defaultHandler2_0.resolveEntity("1ffIso<F{P8;,?QB^i", "64^\"|:|d{y");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.startCDATA();
      defaultHandler2_1.resolveEntity("64^\"|:|d{y", "64^\"|:|d{y");
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      defaultHandler2_2.startPrefixMapping("1ffIso<F{P8;,?QB^i", " ym]'rg");
      char[] charArray1 = new char[0];
      defaultHandler2_2.comment(charArray0, 27, 27);
      defaultHandler2_0.characters(charArray1, 4538, 27);
      defaultHandler2_2.comment(charArray0, 36, 27);
      defaultHandler2_1.endEntity(" ym]'rg");
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      defaultHandler2_3.endEntity("//tmp/Wp&P[0v}: \"9Bz;O=1+)kaO");
      defaultHandler2_2.notationDecl("64^\"|:|d{y", "O", "O");
      try { 
        sAXReader0.read("*+ee,u#)1<`j7|<");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: *+ee,u#)1<`j7|< Nested exception: no protocol: *+ee,u#)1<`j7|<
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
