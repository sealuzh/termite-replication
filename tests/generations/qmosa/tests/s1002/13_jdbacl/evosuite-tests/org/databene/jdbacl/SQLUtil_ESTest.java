/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 08:25:10 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.EOFException;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.ArrayInputStream;
import org.apache.derby.iapi.services.loader.GeneratedClass;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.monitor.FileMonitor;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.CreateIndexNode;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.expression.Parameter;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.value.Value;
import org.h2.value.ValueArray;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger((String) null, dBSchema0);
      dBTrigger0.setTriggerType("exec");
      dBTrigger0.setWhenClause("'BY'");
      dBTrigger0.setStatus("'BY'");
      dBTrigger0.setDoc("kSaMm");
      dBSchema0.addTrigger(dBTrigger0);
      dBSchema0.getTables(false);
      DBSchema dBSchema1 = new DBSchema(":gOHDy|6UZ^9");
      dBSchema1.addTrigger(dBTrigger0);
      dBSchema1.getTables();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType.getInstance((-3430), "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(393, "t57v");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('U');
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "delete";
      stringArray0[3] = "t57v";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("U", stringBuilder0.toString());
      
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Mj=A7|", defaultDBTable1, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("alter session");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Mj=A7| T57V(3) DEFAULT alter session NULL", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7689192975524
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vy(q`dbs-*");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "vy(q`dbs-*", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("vy(q", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFileWriter mockFileWriter0 = new MockFileWriter("?>1 BJk6?W=q", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", dBTable0.getObjectType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "inner");
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "Bytes";
      stringArray0[2] = null;
      SQLUtil.join("inner", "inner", stringArray0, "E_`/TOPnQ+", (String) null, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      BasicUUID basicUUID0 = new BasicUUID("Bytes");
      basicUUID0.toANSIidentifier();
      basicUUID0.cloneMe();
      ArrayInputStream arrayInputStream0 = null;
      try {
        arrayInputStream0 = new ArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.io.ArrayInputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7894590031976123
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DBDataType.getInstance(663, "create unique indexcallisvalid(int)");
      Integer integer0 = new Integer(57);
      Integer integer1 = RawTransaction.COMMIT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "drop table");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.canonicalize();
      VersionNumber.valueOf("create unique indexcallisvalid(int)");
      Boolean boolean0 = new Boolean(false);
      SQLUtil.isProcedureCall("create unique indexcallisvalid(int)");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setPrepareThreshold(6198);
      pGConnectionPoolDataSource0.setPassword("parameterName");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource1);
      SQLUtil.mutatesDataOrStructure("parameterName");
      System.setCurrentTimeMillis(6198);
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("iO}VMc+1J");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "updatetimeout after";
      stringArray0[1] = "parameterName";
      stringArray0[2] = "iO}VMc+1J";
      stringArray0[3] = "parameterName";
      stringArray0[4] = "DOMAIN_CATALOG";
      stringArray0[5] = "create unique indexcallisvalid(int)";
      stringArray0[6] = "create unique indexcallisvalid(int)";
      stringArray0[7] = "DOMAIN_CATALOG";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "DOMAIN_CATALOG", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("updatetimeout after", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(663);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table iO}VMc+1J (,\n\tPRIMARY KEY (updatetimeout after, parameterName, iO}VMc+1J, parameterName, DOMAIN_CATALOG, create unique indexcallisvalid(int), create unique indexcallisvalid(int), DOMAIN_CATALOG)\n)", charArrayWriter0.toString());
      assertEquals(209, charArrayWriter0.size());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7560836273833573
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SQLUtil.isDML("create table");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.isProcedureCall("create table");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f!D75XIx!]Elh");
      SQLUtil.isQuery("select into");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getTransactionController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLUtil.isProcedureCall(" DEFAULT ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isQuery(" DEFAULT ");
      String string0 = "b";
      SQLUtil.removeComments("b");
      DBCatalog dBCatalog0 = new DBCatalog("b");
      DBSchema dBSchema0 = new DBSchema(" DEFAULT ", dBCatalog0);
      dBSchema0.isIdentical(dBCatalog0);
      dBSchema0.getTable("b");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("date", false, "truncatedefault", "truncatedefault");
      dBCatalog0.isIdentical((DBObject) null);
      DBDataType dBDataType0 = DBDataType.getInstance(663, "date");
      String string1 = "rename";
      DBDataType.getInstance(10, "b");
      Integer integer0 = new Integer(663);
      dBCatalog0.getSequences();
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", (DBTable) null, dBDataType0, integer1, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.305872062268199
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("tbmeJut aften ");
      assertNull(boolean0);
      
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getCursorName();
      BasicUUID basicUUID0 = new BasicUUID(30000L, 0L, 335544720);
      basicUUID0.toANSIidentifier();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory1.getBlobBufferSize();
      fBManagedConnectionFactory0.getSocketBufferSize();
      fBManagedConnectionFactory0.equals((Object) null);
      SQLUtil.isQuery("tbmeJut aften ");
      fBManagedConnectionFactory1.setUserName("FzBCzd_9o_+O&=");
      SQLUtil.mutatesStructure("");
      Random.setNextRandom(0);
      SQLUtil.isDDL("bIyu#s(7@.6");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter sessiontbmejut aften");
      assertNotNull(boolean1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index'");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("J)Kk", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.isIdentical(dBForeignKeyConstraint0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("CONSTRAINT J)Kk ");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DBDataType.getInstance((-2028723585), "dele");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.min((-2028723585), (-541574283));
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ER");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.impl.sql.execute.NoRowsResultSetImpl";
      stringArray0[1] = "HQublz";
      stringArray0[2] = "HQublz";
      stringArray0[3] = "org.apache.derby.impl.sql.execute.NoRowsResultSetImpl";
      stringArray0[4] = "org.apache.derby.impl.sql.execute.NoRowsResultSetImpl";
      stringArray0[5] = "ER";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ER", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("HQublz", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("dele", dBTable0, (-541574283), "insert");
      Integer integer2 = new Integer((-2028723585));
      defaultDBColumn0.setSize(integer2);
      Value[] valueArray0 = new Value[0];
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      valueArray1.getReader();
      System.setCurrentTimeMillis(0L);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " as ", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(dBUniqueIndex0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" as \" PRIMARY KEY (org.apache.derby.impl.sql.execute.NoRowsResultSetImpl, HQublz, HQublz, org.apache.derby.impl.sql.execute.NoRowsResultSetImpl, org.apache.derby.impl.sql.execute.NoRowsResultSetImpl, ER)", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9295986650375077
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("&-}$;wPWlJUx7*Gex:L", (DBCatalog) null);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2 SoMEsG~");
      String string0 = "Calling rollback() in auto-commit mode is not allowed.";
      dBSchema0.getPackages();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Calling rollback() in auto-commit mode is not allowed.", defaultDBTable0, 21, "2 SoMEsG~");
      defaultDBColumn0.setOwner(dBSchema0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(rowOutputTextLog0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.ITALIAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "[Ew\"<<{K8B^;`jg", (Object[]) dBColumnArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      StringBuilder stringBuilder0 = new StringBuilder(21);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (long) 1);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, '_');
      stringBuilder2.append(0);
      SQLUtil.addOptionalCondition("[Ew\"<<{K8B^;`jg", stringBuilder2);
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4993646124305886
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DBSchema dBSchema0 = new DBSchema("wes|FiV0p");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|2_!", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("IJo", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("8(= (H66Y");
      stringBuilder0.append((-32768.0));
      stringBuilder0.append((Object) "-0123456789");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      StringBuilder stringBuilder2 = stringBuilder0.append((-3023));
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "wes|FiV0p", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      Random.setNextRandom(816);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2);
      assertEquals("8(= (H66Y-32768.0-0123456789true-3023CONSTRAINT IJo CONSTRAINT IJo ", stringBuilder2.toString());
      assertEquals("8(= (H66Y-32768.0-0123456789true-3023CONSTRAINT IJo CONSTRAINT IJo ", stringBuilder0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "wQI02Lc";
      String[] stringArray0 = new String[2];
      stringArray0[1] = "wQI02Lc";
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      jdbcConnectionPool0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("]h2d*>");
      String string1 = "/*";
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1463096566766366
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[6];
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition(stringArray0[0], stringBuilder0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'S';
      charArray0[2] = '&';
      VersionNumber versionNumber0 = VersionNumber.valueOf("A>)3o96R$");
      VersionNumber versionNumber1 = VersionNumber.valueOf("A>)3o96R$");
      versionNumber1.compareTo(versionNumber0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("org.databene.SQL", "GDe%e=%I!", versionNumber1);
      SQLUtil.isDML("jx");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.isProcedureCall(":}FF7'GDbM");
      SQLUtil.isQuery("");
      versionNumber1.compareTo(versionNumber0);
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9753593746751648
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLUtil.isProcedureCall("org.apache.derby.impl.jdbc.EmbedResultSetMetaData");
      SQLUtil.normalize("vy(Q`dBS-*", false);
      BasicUUID basicUUID0 = new BasicUUID(2696L, (byte)82, (byte)82);
      basicUUID0.toANSIidentifier();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.setType("B1&]\"c4 1a");
      FBManagedConnectionFactory fBManagedConnectionFactory1 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory1.getBlobBufferSize();
      fBManagedConnectionFactory0.getSocketBufferSize();
      fBManagedConnectionFactory1.equals(basicUUID0);
      SQLUtil.isQuery("FzBCzd_9o_+O&=");
      SQLUtil.mutatesDataOrStructure("U00000052X0000X0000X0052X000000000a88");
      // Undeclared exception!
      SQLUtil.mutatesStructure("?fyCp8Ypmzhuo/*l~?");
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      InternalTransactionCoordinator internalTransactionCoordinator1 = new InternalTransactionCoordinator();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "Bynes");
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup1, "Bynes");
      MockThread mockThread2 = new MockThread(mockThread0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread1.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      Thread[] threadArray0 = new Thread[2];
      mockThread2.getStackTrace();
      MockThread.reset();
      threadArray0[0] = (Thread) mockThread2;
      MockThread.dumpStack();
      threadArray0[1] = (Thread) mockThread1;
      MockThread.getAllStackTraces();
      MockThread.enumerate(threadArray0);
      MockThread.enumerate(threadArray0);
      MockThread mockThread3 = new MockThread((ThreadGroup) null, "Bynes");
      MockThread mockThread4 = new MockThread(threadArray0[0]);
      StringBuffer stringBuffer0 = new StringBuffer();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Bynes", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(")", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(679, ")");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")", dBTable0, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl0.dataDescriptorGenerator;
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("op_open/create_blob ");
      stringBuilder0.append((-1356.768695));
      stringBuilder0.append(true);
      stringBuilder0.append(46);
      Random.setNextRandom(42);
      Random.setNextRandom(42);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DBDataType.getInstance(663, "delete");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "delete");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      fBManagedConnectionFactory1.getNonStandardProperty("delete");
      fBManagedConnectionFactory0.getTransactionIsolation();
      FBManagedConnectionFactory fBManagedConnectionFactory2 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory2.getSocketBufferSize();
      fBManagedConnectionFactory1.equals(fBManagedConnectionFactory0);
      fBManagedConnectionFactory2.isTimestampUsesLocalTimezone();
      Integer.toUnsignedString((-2058005160));
      Integer.compare(2793, (-2273));
      Integer integer2 = RawTransaction.COMMIT;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "V#x>];91A$D:g";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("8R", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("SELECT * FROM ");
      VersionNumber.valueOf("SELECT * FROM ");
      VersionNumber versionNumber1 = VersionNumber.valueOf("SELECT * FROM ");
      VersionNumber versionNumber2 = VersionNumber.valueOf("SELECT * FROM ");
      versionNumber2.compareTo(versionNumber0);
      versionNumber2.toString();
      versionNumber0.toString();
      VersionNumber.valueOf("SELECT * FROM ");
      VersionNumber.valueOf("Qp/YF%$NcArq6");
      VersionNumber.valueOf("gZst+6n?5dk9v4");
      VersionNumber.valueOf("gZst+6n?5dk9v4");
      VersionNumber.valueOf("SELECT * FROM ");
      versionNumber0.toString();
      VersionNumber.valueOf("Mhp>to'~)^");
      VersionNumber.valueOf("SELECT * FROM ");
      versionNumber2.toString();
      VersionNumber.valueOf("SELECT");
      versionNumber1.compareTo(versionNumber2);
      versionNumber1.toString();
      versionNumber1.toString();
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cQ%c^us=";
      stringArray0[1] = "MINVALUE";
      stringArray0[2] = "call";
      stringArray0[4] = "f?S^";
      stringArray0[5] = "selectyou are trying to start a transaction as new that is already known to this xaresource";
      stringArray0[6] = "org.databene.script.expression.CompositeExpression";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectyou are trying to start a transaction as new that is already known to this xaresource");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.09481082352759
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[3] = "";
      DBDataType.getInstance(3, "delete");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-1984898044), "CHECK ");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      StringBuilder stringBuilder0 = new StringBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-1);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      StringBuilder stringBuilder1 = stringBuilder0.append('Z');
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("HvW>iyY|WVA+x>V", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("alter table");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuilder1);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("ZCONSTRAINT HvW>iyY|WVA+x>V ", stringBuilder1.toString());
      assertEquals("ZCONSTRAINT HvW>iyY|WVA+x>V ", stringBuilder0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.315487224168137
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DBSchema dBSchema0 = new DBSchema("wes|FiV0p");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|2_!", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("IJo", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("8(= (H66Y");
      stringBuilder0.append((-32768.0));
      stringBuilder0.append((Object) "-0123456789");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      StringBuilder stringBuilder2 = stringBuilder0.append((-3023));
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "wes|FiV0p", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("k@P4");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLUtil.normalize(":5<s8k)$A-3W[W<Sz", false);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.clearIndexScanInfo();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      constantActionActivation1.getResultDescription();
      constantActionActivation0.clearCurrentRow(739);
      constantActionActivation0.throwIfMissingParms();
      constantActionActivation0.clearCurrentRow((-1319));
      ConstantActionActivation constantActionActivation2 = new ConstantActionActivation();
      constantActionActivation2.getGC();
      constantActionActivation1.setGC((GeneratedClass) null);
      // Undeclared exception!
      try { 
        constantActionActivation0.getMethod("select");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChars((-1636), (-827));
      streamTokenizer0.ttype = 16;
      BasicUUID basicUUID0 = new BasicUUID(16, 16, 16);
      BasicUUID basicUUID1 = new BasicUUID("L)4AXhd,j");
      basicUUID1.cloneMe();
      Character character0 = Character.valueOf('!');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'!'", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      boolean boolean0 = SQLUtil.isDML("truncate\"l)");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChars((-1636), (-827));
      streamTokenizer0.ttype = 16;
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9801661371021682
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLUtil.mutatesStructure(";G%W9u'Ba");
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";G%W9u'Ba";
      stringArray0[2] = ";G%W9u'Ba";
      VersionNumber versionNumber0 = VersionNumber.valueOf("|2_!{4frqs");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.isProcedureCall(";G%W9u'Ba");
      SQLUtil.isQuery("ckK=");
      versionNumber0.toString();
      String string0 = SQLUtil.normalize("mi+/,", false);
      assertEquals("mi + /,", string0);
      
      VersionNumber.valueOf("mi + /,");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("pZvIIO_sq$^tCt7e", "ckK=", versionNumber0);
      SQLUtil.isDML("join");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      boolean boolean0 = SQLUtil.isProcedureCall("mi + /,");
      assertFalse(boolean0);
      
      SQLUtil.isDDL(";G%W9u'Ba");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("|yR");
      assertNull(boolean1);
      
      boolean boolean2 = SQLUtil.isQuery("Unknown constraint type: ");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.impl.sql.execute.NoRowsResultSetImpl";
      stringArray0[0] = "";
      stringArray0[3] = "";
      DBDataType dBDataType0 = DBDataType.getInstance(26, "delete");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      Integer.max((-1772), 26);
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("6n1(E", (DBTable) null, dBDataType0, integer2);
      defaultDBColumn0.setVersionColumn(true);
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Boolean boolean0 = SQLUtil.mutatesStructure("drop tableor");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DBSchema dBSchema0 = new DBSchema("wes|FiV0p");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|2_!", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("IJo", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBSchema0.setDoc(" parent:");
      StringBuilder stringBuilder0 = new StringBuilder("8(= (H66Y");
      stringBuilder0.append((-32768.0));
      stringBuilder0.append((Object) "-0123456789");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      StringBuilder stringBuilder2 = stringBuilder0.append((-3023));
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "wes|FiV0p", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      Random.setNextRandom(784);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLUtil.normalize("If(RAK`OY[3`V*+.\":k", false);
      BasicUUID basicUUID0 = new BasicUUID();
      basicUUID0.stringWorkhorse('u');
      basicUUID0.toString();
      BasicUUID basicUUID1 = new BasicUUID("If (RAK ` OY [ 3 ` V * +.\":k\"");
      basicUUID0.toString();
      basicUUID1.toHexString();
      basicUUID0.toANSIidentifier();
      BasicUUID basicUUID2 = null;
      try {
        basicUUID2 = new BasicUUID((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.services.uuid.BasicUUID", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      DBDataType.getInstance(3, "delete");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      jdbcConnectionPool0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("");
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.CANADA_FRENCH;
      mockPrintWriter0.format(locale1, "isDistinctSelect=[", (Object[]) stringArray0);
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLUtil.normalize("R[y2/P\"", false);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(false);
      StringBuffer stringBuffer1 = stringBuffer0.append('.');
      stringBuffer0.reverse();
      StringBuffer stringBuffer2 = new StringBuffer(9);
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedReader0.ready();
      pipedReader0.markSupported();
      pipedReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.parseNumbers();
      pipedReader0.close();
      streamTokenizer1.slashSlashComments(false);
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.setUserName((String) null);
      Boolean.valueOf((String) null);
      BasicUUID basicUUID0 = new BasicUUID();
      basicUUID0.toANSIidentifier();
      SQLUtil.mutatesStructure("G$+~>9QTD_");
      Random.setNextRandom((-1656));
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("|2_{fr\"qs");
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("c &Ga", (String[]) null, "|2_{fr\"qs", "Blob in auto-commi mode is read-only.", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9896217341979852
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("|2_!");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      stringBuilder1.append((Object) "|2_!");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("IelOhe");
      Locale locale0 = Locale.KOREA;
      File file0 = MockFile.createTempFile("drop materialized view", "|2_!");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) null;
      SQLUtil.isQuery("drop materialized view");
      SQLUtil.mutatesStructure("callisvalid(int)");
      Random.setNextRandom(8);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedReader0.ready();
      pipedReader0.markSupported();
      pipedReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.parseNumbers();
      pipedReader0.close();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.ordinaryChars(335544482, (-1056));
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("/pu.'4Dw_=", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3148914488554517
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      SQLUtil.isProcedureCall("callcq%c^us=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isQuery(" DEFAULT ");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("il5j$.nn`Xv|^;kM!'");
      assertNull(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Bytes";
      stringArray0[1] = "Bytes";
      stringArray0[1] = "Bytes";
      stringArray0[4] = "Bytes";
      stringArray0[7] = "Bytes";
      stringArray0[8] = "Bytes";
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedReader0.ready();
      pipedReader0.markSupported();
      pipedReader0.close();
      VersionNumber versionNumber0 = VersionNumber.valueOf("Bytes");
      versionNumber0.toString();
      VersionNumber versionNumber1 = VersionNumber.valueOf("Bytes");
      VersionNumber versionNumber2 = VersionNumber.valueOf("Bytes");
      VersionNumber.valueOf("Bytes");
      VersionNumber versionNumber3 = VersionNumber.valueOf("cDf2`;x_");
      versionNumber0.toString();
      versionNumber3.compareTo(versionNumber1);
      versionNumber2.toString();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute");
      assertNull(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = SQLUtil.renderValue("truncate\"l)");
      assertEquals("'truncate\"l)'", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[0] = "";
      stringArray0[3] = "";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setDefaultAutoCommit(true);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      jdbcConnectionPool0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("", true);
      VersionNumber.valueOf((String) null);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      assertEquals(3, (int)integer2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      fBManagedConnectionFactory1.getNonStandardProperty("delete");
      fBManagedConnectionFactory1.getDatabase();
      fBManagedConnectionFactory1.setTpbMapping(", ");
      fBManagedConnectionFactory1.getDefaultIsolation();
      fBManagedConnectionFactory0.setType("delete");
      FBManagedConnectionFactory fBManagedConnectionFactory2 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory2.getBlobBufferSize();
      fBManagedConnectionFactory2.getSocketBufferSize();
      fBManagedConnectionFactory1.equals(fBManagedConnectionFactory0);
      fBManagedConnectionFactory2.isTimestampUsesLocalTimezone();
      Integer.toUnsignedString((-2058005160));
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedReader0.ready();
      pipedReader0.markSupported();
      pipedReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.parseNumbers();
      pipedReader0.close();
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(false);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("K]zt9gsSgKCdjv", dBCatalog0);
      DBSchema dBSchema1 = new DBSchema("#U)-E~yR", dBCatalog0);
      dBSchema1.getPackages();
      DBPackage dBPackage0 = new DBPackage("[Q1glO", dBSchema1);
      dBPackage0.toString();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("pFi4B Q");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 3232, "CHECK ");
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("8(= (H66Y");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      stringBuilder0.append((-3023));
      Random.setNextRandom(816);
      Random.setNextRandom(1815);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8(= (H66Y";
      stringArray0[3] = "8(= (H66Y";
      stringArray0[5] = "8(= (H66Y";
      stringArray0[6] = "8(= (H66Y";
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.substituteMarkers("", "drop tabledefault", "drop tabledefault");
      assertEquals("", string0);
      
      boolean boolean0 = SQLUtil.isDDL("5ru$;VYshPrUm(*:K2~");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Bynes";
      stringArray0[1] = "Bynes";
      SQLUtil.normalize("?xLGK|9KJRsup", true);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-4490), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4490
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLUtil.normalize("->Y'I>B]DKoS-J`", false);
      VersionNumber.valueOf("[juJW%T=$fA^ O");
      StringBuilder stringBuilder0 = new StringBuilder();
      BasicUUID basicUUID0 = new BasicUUID("[juJW%T=$fA^ O");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)82;
      ArrayInputStream arrayInputStream0 = new ArrayInputStream(byteArray0);
      BasicUUID basicUUID1 = new BasicUUID((byte)47, (byte)82, 2320);
      ArrayInputStream arrayInputStream1 = new ArrayInputStream(byteArray0);
      try { 
        basicUUID1.readExternal(arrayInputStream1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.io.ArrayInputStream", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.canonicalize();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.setPrepareThreshold(6198);
      pGConnectionPoolDataSource0.setPassword((String) null);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource2 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.setCompatible("update{zu-~5xgyi) \t9_i'");
      pGConnectionPoolDataSource1.setLoginTimeout(1);
      JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource2);
      SQLUtil.mutatesDataOrStructure("Wa");
      System.setCurrentTimeMillis((-1181L));
      System.setCurrentTimeMillis(0L);
      Random.setNextRandom((-721));
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.816060069608632
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("|2_!{4frqs", "|2_!{4frqs", "|2_!{4frqs");
      assertEquals("'|2_!{4frqs'", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure(";G%W9u'Ba");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";G%W9u'Ba";
      stringArray0[1] = ";G%W9u'Ba";
      stringArray0[2] = "'|2_!{4frqs'";
      String string1 = SQLUtil.innerJoin(";G%W9u'Ba", stringArray0, (String) null, "|2_!{4frqs", stringArray0);
      assertEquals("null as |2_!{4frqs on ;G%W9u'Ba.;G%W9u'Ba = |2_!{4frqs.;G%W9u'Ba and ;G%W9u'Ba.;G%W9u'Ba = |2_!{4frqs.;G%W9u'Ba and ;G%W9u'Ba.'|2_!{4frqs' = |2_!{4frqs.'|2_!{4frqs'", string1);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("callisvalid(int)", true, " join ", " join ");
      boolean boolean1 = SQLUtil.isProcedureCall("drop index");
      boolean boolean2 = SQLUtil.isQuery("|2_!{4frqs");
      assertTrue(boolean2 == boolean1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK  join ", string2);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("cQ%cYp^us=");
      versionNumber0.toString();
      versionNumber0.toString();
      versionNumber0.toString();
      VersionNumber.valueOf("insert");
      VersionNumber versionNumber1 = VersionNumber.valueOf("insert");
      VersionNumber.valueOf("6b W ");
      versionNumber1.toString();
      VersionNumber.valueOf("cQ");
      VersionNumber.valueOf("default");
      VersionNumber versionNumber2 = VersionNumber.valueOf("cQ%cYp^us=");
      versionNumber1.toString();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber3 = new VersionNumber(constraintDescriptorList0);
      versionNumber2.compareTo(versionNumber3);
      versionNumber1.toString();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      fBManagedConnectionFactory1.getNonStandardProperty("delete");
      fBManagedConnectionFactory1.getDatabase();
      fBManagedConnectionFactory1.setTpbMapping(", ");
      fBManagedConnectionFactory1.getDefaultIsolation();
      fBManagedConnectionFactory0.setType("delete");
      FBManagedConnectionFactory fBManagedConnectionFactory2 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory2.getBlobBufferSize();
      fBManagedConnectionFactory2.getSocketBufferSize();
      fBManagedConnectionFactory1.equals(fBManagedConnectionFactory0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("delete", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.2289707507713135
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "CsRF^~`";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[3] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("CsRF^~`", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      dBPackage0.toString();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.listIterator();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[2]);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("80000012-00d0-fd77-3ed8-000a0a0b1900", defaultDBTable0, 7, "");
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("[80000012-00d0-fd77-3ed8-000a0a0b1900 : ]", vector0.toString());
      
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getTable((String) null);
      Integer integer0 = new Integer((-1984898044));
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (DBDataType) null, integer0, integer1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("W[bpro5FGd");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      String string0 = "alter tableg-oni)^6";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W[bpro5FGd";
      stringArray0[1] = "W[bpro5FGd";
      stringArray0[2] = "W[bpro5FGd";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter tableg-oni)^6", true, stringArray0);
      Boolean boolean1 = new Boolean((String) null);
      dBPrimaryKeyConstraint0.toString();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      GDSHelper gDSHelper0 = null;
      int int0 = (-220172267);
      SQLUtil.renderColumnNames(stringArray0);
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator1 = null;
      try {
        internalTransactionCoordinator_MetaDataTransactionCoordinator1 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator(internalTransactionCoordinator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator$MetaDataTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf(" NOT NULL");
      VersionNumber versionNumber1 = VersionNumber.valueOf((String) null);
      versionNumber0.toString();
      versionNumber1.toString();
      VersionNumber.valueOf(" NOT NULL");
      VersionNumber versionNumber2 = VersionNumber.valueOf("Qp/YF%$NcArq6");
      VersionNumber versionNumber3 = VersionNumber.valueOf("gZst+6n?5dk9v4");
      VersionNumber.valueOf((String) null);
      versionNumber3.toString();
      VersionNumber versionNumber4 = VersionNumber.valueOf("L");
      VersionNumber versionNumber5 = VersionNumber.valueOf("gZst+6n?5dk9v4");
      versionNumber0.compareTo(versionNumber3);
      versionNumber5.toString();
      VersionNumber.valueOf("(");
      VersionNumber.valueOf("org.databene.commons.OrderedSet");
      versionNumber0.compareTo(versionNumber2);
      versionNumber4.compareTo(versionNumber5);
      versionNumber4.toString();
      versionNumber1.compareTo(versionNumber2);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.h2.expression.ExpressionVisitor");
      dBSchema0.setDoc("org.h2.expression.ExpressionVisitor");
      dBSchema0.setName("xDK9> X^m6RtMeQ+,f");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.h2.expression.ExpressionVisitor");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.expression.ExpressionVisitor", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.h2.expression.ExpressionVisitor";
      stringArray0[1] = "org.h2.expression.ExpressionVisitor";
      stringArray0[2] = "org.h2.expression.ExpressionVisitor";
      stringArray0[3] = "IJo";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("update", stringArray0, "org.h2.expression.ExpressionVisitor", "update", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3337, "'");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("'", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("dz5:|p");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "dz5:|p";
      stringArray0[1] = "dz5:|p";
      stringArray0[2] = "dz5:|p";
      stringArray0[3] = "dz5:|p";
      stringArray0[4] = "dz5:|p";
      stringArray0[5] = "dz5:|p";
      stringArray0[6] = "dz5:|p";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.3230839731770083
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[2] = "DdYTKX,Ao<9^}$Dd";
      stringArray0[4] = "f?S^";
      stringArray0[0] = "DdYTKX,Ao<9^}$Dd";
      SQLUtil.mutatesStructure("org.databene.script.expression.Comp%sdteExpr'ssion");
      Random.setNextRandom((-2));
      SQLUtil.isDDL("create tablen#xc/}v|/!i(frl:-6");
      SQLUtil.mutatesDataOrStructure("f?S^");
      SQLUtil.isDML("f?S^");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("|fI_Ide5UqEc:>@tk");
      assertNull(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = '@';
      charArray0[2] = '(';
      stringBuilder0.append(charArray0);
      charArray0[3] = 'h';
      charArray0[4] = '#';
      stringBuilder1.append(false);
      charArray0[5] = '8';
      charArray0[6] = 'Q';
      stringBuilder0.append(charArray0);
      stringBuilder0.append((double) '@');
      stringBuilder0.append(0.0);
      stringBuilder0.append(true);
      stringBuilder1.append("8(= (H66Y");
      Random.setNextRandom(1815);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("8(= (H66Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 8(= (H66Y
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf(";tpB6=P!E\"");
      VersionNumber versionNumber1 = VersionNumber.valueOf("SELECT * FROM ");
      versionNumber1.compareTo(versionNumber0);
      VersionNumber versionNumber2 = VersionNumber.valueOf(";tpB6=P!E\"");
      versionNumber1.compareTo(versionNumber2);
      versionNumber0.compareTo(versionNumber1);
      SQLUtil.isQuery("SELECT * FROM ");
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      fBManagedConnectionFactory1.getNonStandardProperty("delete");
      fBManagedConnectionFactory1.getDatabase();
      fBManagedConnectionFactory1.setTpbMapping((String) null);
      fBManagedConnectionFactory1.getDefaultIsolation();
      fBManagedConnectionFactory0.setType("delete");
      FBManagedConnectionFactory fBManagedConnectionFactory2 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory2.getBlobBufferSize();
      fBManagedConnectionFactory2.getSocketBufferSize();
      fBManagedConnectionFactory1.equals(fBManagedConnectionFactory0);
      fBManagedConnectionFactory2.isTimestampUsesLocalTimezone();
      Integer.toUnsignedString((-2058005160));
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "W7}?DLp&U";
      stringArray0[1] = "e=quP{NI1ej0-PdE ";
      stringArray0[2] = "e=quP{NI1ej0-PdE ";
      stringArray0[3] = "W7}?DLp&U";
      stringArray0[4] = "+/' P|";
      stringArray0[5] = "alter sessiontbmejut aften";
      stringArray0[6] = "e=quP{NI1ej0-PdE ";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "+/' P|";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("0op2GRg'[", stringArray0, "e=quP{NI1ej0-PdE ", " expecting set ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-24);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wz?],{73a![NKQZYHZ";
      stringArray0[1] = "CLOB";
      stringArray0[2] = "wz?],{73a![NKQZYHZ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "wz?],{73a![NKQZYHZ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("create ", true, dBUniqueConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("wz?],{73a![NKQZYHZ", true, dBUniqueConstraint0);
      dBUniqueConstraint0.isIdentical(dBUniqueIndex0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("iq\"&ZB{^9Sb?}2\"M+", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (wz?],{73a![NKQZYHZ, CLOB, wz?],{73a![NKQZYHZ, , ) REFERENCES null(wz?],{73a![NKQZYHZ, CLOB, wz?],{73a![NKQZYHZ, , )", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("cQ%cYp^us=");
      versionNumber0.toString();
      versionNumber0.toString();
      versionNumber0.toString();
      VersionNumber versionNumber1 = VersionNumber.valueOf("cQ");
      VersionNumber.valueOf("insert");
      VersionNumber.valueOf("insert");
      versionNumber1.toString();
      VersionNumber.valueOf("6b W ");
      VersionNumber.valueOf("cQ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("=`k='7eoi;,,xmxV", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.h2.expression.ExpressionVisitor");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.h2.expression.ExpressionVisitor");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.expression.ExpressionVisitor", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.h2.expression.ExpressionVisitor";
      stringArray0[1] = "org.h2.expression.ExpressionVisitor";
      stringArray0[2] = "org.h2.expression.ExpressionVisitor";
      stringArray0[3] = "IJo";
      stringArray0[4] = "org.h2.expression.ExpressionVisitor";
      stringArray0[5] = "org.h2.expression.ExpressionVisitor";
      stringArray0[6] = "org.h2.expression.ExpressionVisitor";
      stringArray0[7] = "org.h2.expression.ExpressionVisitor";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.h2.expression.ExpressionVisitor", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("IJo");
      StringBuilder stringBuilder1 = stringBuilder0.append(915.3568);
      stringBuilder0.append((Object) "org.h2.expression.ExpressionVisitor");
      stringBuilder0.append(2260);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      assertEquals("IJo915.3568org.h2.expression.ExpressionVisitor2260", stringBuilder1.toString());
      assertEquals("IJo915.3568org.h2.expression.ExpressionVisitor2260", stringBuilder2.toString());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.h2.expression.ExpressionVisitor");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.expression.ExpressionVisitor", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.h2.expression.ExpressionVisitor";
      stringArray0[1] = "org.h2.expression.ExpressionVisitor";
      stringArray0[2] = "org.h2.expression.ExpressionVisitor";
      stringArray0[3] = "IJo";
      stringArray0[4] = "org.h2.expression.ExpressionVisitor";
      stringArray0[5] = "org.h2.expression.ExpressionVisitor";
      stringArray0[6] = "org.h2.expression.ExpressionVisitor";
      stringArray0[7] = "org.h2.expression.ExpressionVisitor";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.h2.expression.ExpressionVisitor", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      OutputStream outputStream0 = fileUtil0.openOutputStreamElement("|2_!{4frqsmki/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertNull(dBForeignKeyConstraint0.getDoc());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.3381514637755787
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "z,mFKXoe0>@\"vgL&fq7";
      stringArray0[1] = "'`:Tc-PV,6M-=#3G0";
      stringArray0[2] = " on ";
      stringArray0[3] = "select";
      stringArray0[4] = "s9j+v?zJvEyP+";
      stringArray0[5] = "]HXobZlB";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE z,mFKXoe0>@\"vgL&fq7 = 'z,mFKXoe0>@\"vgL&fq7' AND '`:Tc-PV,6M-=#3G0 = ''`:Tc-PV,6M-=#3G0' AND  on  = ' on ' AND select = 'select' AND s9j+v?zJvEyP+ = 's9j+v?zJvEyP+' AND ]HXobZlB = ']HXobZlB'", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("SELECT * FROM ");
      VersionNumber versionNumber1 = VersionNumber.valueOf("SELECT * FROM ");
      VersionNumber.valueOf("h2.optimizeIsNull");
      VersionNumber versionNumber2 = VersionNumber.valueOf("SELECT * FROM ");
      versionNumber2.toString();
      versionNumber1.toString();
      versionNumber0.toString();
      VersionNumber versionNumber3 = VersionNumber.valueOf("SELECT * FROM ");
      VersionNumber.valueOf("Qp8/YF%$NcArq6");
      VersionNumber.valueOf("6b W ");
      versionNumber2.toString();
      VersionNumber.valueOf(">)7zDwv7x+2kvbo");
      VersionNumber.valueOf((String) null);
      VersionNumber.valueOf("SELECT * FROM ");
      VersionNumber.valueOf("SELECT * FROM ");
      versionNumber2.toString();
      versionNumber1.compareTo(versionNumber3);
      versionNumber1.toString();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "SELECT";
      stringArray0[2] = "h2.optimizeIsNull";
      stringArray0[3] = "h2.optimizeIsNull";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.8950056533107491
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = " and ";
      SQLUtil.leftJoin(" and ", stringArray0, "cETm", "\u0001\u01CF", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("left join cETm as \u0001\u01CF on  and . and  = \u0001\u01CF. and ", stringArray0, " and ", "callbytes", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")|2z!";
      DBDataType.getInstance(2713, ")|2z!");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[4] = "wQI2Lc";
      stringArray0[6] = "wQI2Lc";
      char char0 = ']';
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.h2.expression.ExpressionVisitor");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.expression.ExpressionVisitor", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.h2.expression.ExpressionVisitor";
      stringArray0[1] = "org.h2.expression.ExpressionVisitor";
      stringArray0[2] = "org.h2.expression.ExpressionVisitor";
      stringArray0[3] = "IJo";
      stringArray0[4] = "org.h2.expression.ExpressionVisitor";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("call");
      StringBuilder stringBuilder1 = stringBuilder0.append(32768.0);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) "org.h2.expression.ExpressionVisitor");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder3 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder2, nameSpec0);
      stringBuilder3.append(90052);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder4 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder3, nameSpec1);
      assertEquals("call32768.0org.h2.expression.ExpressionVisitor90052", stringBuilder3.toString());
      assertEquals("call32768.0org.h2.expression.ExpressionVisitor90052", stringBuilder4.toString());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create table ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`m)X_4oM$>A", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`m)X_4oM$>A";
      stringArray0[1] = null;
      stringArray0[2] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (`m)X_4oM$>A, , )", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("SCELECT * FROM ");
      VersionNumber.valueOf("SCELECT * FROM ");
      VersionNumber versionNumber1 = VersionNumber.valueOf("SCELECT * FROM ");
      versionNumber1.toString();
      versionNumber0.toString();
      VersionNumber.valueOf("SCELECT * FROM ");
      VersionNumber.valueOf("Qp/YF%$NcArq6");
      VersionNumber.valueOf(">)7zDwv7xz+2kvbo");
      VersionNumber.valueOf("select into3w|!<");
      VersionNumber.valueOf("SCELECT * FROM ");
      VersionNumber.valueOf("SCELECT * FROM ");
      StringBuffer stringBuffer0 = new StringBuffer(1000);
      boolean boolean0 = SQLUtil.isDDL("SCELECT * FROM ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "|2_!{_frqh";
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "|2_!{_frqh", "|2_!{_frqh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " = ";
      stringArray0[1] = "alter materialized viewunknown constaint type:";
      stringArray0[2] = "X>";
      char char0 = 'U';
      char char1 = '`';
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized viewunknown constaint type:", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(27, '`');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.9007452539070404
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wz?],{73a![NKQZYHZ";
      stringArray0[1] = "CLOB";
      stringArray0[2] = "wz?],{73a![NKQZYHZ";
      stringArray0[0] = "wz?],{73a![NKQZYHZ";
      stringArray0[4] = "wz?],{73a![NKQZYHZ";
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "wz?],{73a![NKQZYHZ", false, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT wz?],{73a![NKQZYHZ PRIMARY KEY (wz?],{73a![NKQZYHZ, CLOB, wz?],{73a![NKQZYHZ, , wz?],{73a![NKQZYHZ)", string0);
      
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (wz?],{73a![NKQZYHZ, CLOB, wz?],{73a![NKQZYHZ, , wz?],{73a![NKQZYHZ)", string1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.0992975938210185
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("isrt");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("isrt", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger("exec", dBSchema0);
      dBTrigger0.setTriggerType("exec");
      dBSchema0.isIdentical(dBTrigger0);
      MockThread.reset();
      MockThread.reset();
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "alter sessionfzbczd_9o_+o&=");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread0, "alter sessionfzbczd_9o_+o&=");
      MockThread mockThread3 = new MockThread("alter sessionfzbczd_9o_+o&=");
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      classLoader0.getParent();
      mockThread0.getContextClassLoader();
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread4 = new MockThread(threadGroup1, "isrt");
      MockThread mockThread5 = new MockThread(mockThread4);
      MockThread mockThread6 = new MockThread(mockThread4);
      MockThread mockThread7 = new MockThread(mockThread6, "/4$");
      StringBuffer stringBuffer0 = new StringBuffer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter sessionfzbczd_9o_+o&=";
      stringArray0[1] = "/4$";
      stringArray0[2] = "alter sessionfzbczd_9o_+o&=";
      stringArray0[3] = "/4$";
      stringArray0[4] = "alter sessionfzbczd_9o_+o&=";
      stringArray0[5] = "alter sessionfzbczd_9o_+o&=";
      stringArray0[6] = "/4$";
      stringArray0[7] = "inner";
      stringArray0[8] = "exec";
      String[] stringArray1 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("exec", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT exec FOREIGN KEY (alter sessionfzbczd_9o_+o&=, /4$, alter sessionfzbczd_9o_+o&=, /4$, alter sessionfzbczd_9o_+o&=, alter sessionfzbczd_9o_+o&=, /4$, inner, exec) REFERENCES isrt()", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "insertuimeout after";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter indextbmejut aften", 16);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "insertuimeout after");
      stringBuilder0.append((-565L));
      SQLUtil.addRequiredCondition("delete", stringBuilder0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("inserttbmejut aften", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      Locale locale0 = Locale.CANADA;
      assertEquals("CAN", locale0.getISO3Country());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" NULL", 3);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)52;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("$9[2H!R]SSGp\b[=2LS", stringBuilder0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 9);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-100752409));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 635;
      DBDataType dBDataType0 = DBDataType.getInstance(635, "delete");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|4J ocji1Fv&:}5vxOs");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      Integer integer0 = fBManagedConnectionFactory0.getTransactionIsolation();
      fBManagedConnectionFactory0.setTpbMapping("jP-LXq3?6lI");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", (DBTable) null, dBDataType0, integer0, integer0);
      FBManagedConnectionFactory fBManagedConnectionFactory2 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory2.getLocalEncoding();
      fBManagedConnectionFactory2.getSocketBufferSize();
      fBManagedConnectionFactory1.equals(fBManagedConnectionFactory0);
      fBManagedConnectionFactory2.isTimestampUsesLocalTimezone();
      defaultDBColumn0.equals("delete");
      defaultDBColumn0.toString();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "Ra_aps&A?)hAz\"u}*x ";
      DBSchema dBSchema0 = new DBSchema("Ra_aps&A?)hAz\"u}*x ");
      SQLUtil.typeAndName(dBSchema0);
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.ensureCapacity((-1815333582));
      Vector<DBColumn> vector1 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(90, threadPoolExecutor_AbortPolicy0);
      FileMonitor fileMonitor0 = new FileMonitor();
      MockThread mockThread0 = new MockThread();
      Thread thread0 = fileMonitor0.getDaemonThread(mockThread0, "&X", true);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleWithFixedDelay(thread0, 90, 1L, timeUnit0);
      String string0 = SQLUtil.renderValue(scheduledFuture0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Unknown constraint type: ");
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("Unknown constraint type: ", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("Jb}7LgD4g;hJNQKH=S");
      tableContainer0.getTable("Jb}7LgD4g;hJNQKH=S");
      SQLUtil.typeAndName((DBObject) null);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl1.getConstraintTableDescriptor(basicUUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&'&dW~{sA!\"Fo#k}gV");
      stringArray0[0] = "cQ%c^us=";
      stringArray0[1] = "cQ%c^us=";
      stringArray0[2] = "cQ%c^us=";
      stringArray0[4] = "f?S^";
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("nqLrAyuSU", (DBTable) null, (DBDataType) null, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      Parameter parameter0 = new Parameter(787);
      String string0 = SQLUtil.substituteMarkers("-trace", "truncatet", parameter0);
      assertEquals("-trace", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      Integer.max((-1772), 26);
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "deletealter oabledg";
      stringArray0[1] = "'";
      stringArray0[2] = "deletealter oabledg";
      stringArray0[3] = "Currently positioned after the end of the ResultSet.  You cannot call deleteRow() here.";
      stringArray0[4] = "deletealter oabledg";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "Currently positioned after the end of the ResultSet.  You cannot call deleteRow() here.";
      stringArray1[1] = "'";
      stringArray1[2] = "'";
      // Undeclared exception!
      try { 
        SQLUtil.join("deletealter oabledg", "'", stringArray0, "deletealter oabledg", "deletealter oabledg", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      fBManagedConnectionFactory1.getNonStandardProperty("delete");
      fBManagedConnectionFactory1.setTpbMapping(", ");
      fBManagedConnectionFactory1.getDefaultIsolation();
      fBManagedConnectionFactory0.setType("delete");
      FBManagedConnectionFactory fBManagedConnectionFactory2 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory2.getSocketBufferSize();
      fBManagedConnectionFactory1.equals(fBManagedConnectionFactory0);
      fBManagedConnectionFactory2.isTimestampUsesLocalTimezone();
      Integer.toUnsignedString(0);
      Integer integer0 = new Integer(0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tabledr");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "Blob in auto-commit mode is read-only.";
      stringArray0[2] = "Blob in auto-commit mode is read-only.";
      stringArray0[2] = "Blob in auto-commit mode is read-only.";
      stringArray0[4] = "call";
      stringArray0[5] = "Blob in auto-commit mode is read-only.";
      stringArray0[6] = "call";
      stringArray0[7] = null;
      stringArray0[8] = "call";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)39;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String string0 = SQLUtil.join((String) null, "exec", stringArray0, stringArray0[7], "select", stringArray0);
      assertEquals("null as select on exec.null = select.null and exec.Blob in auto-commit mode is read-only. = select.Blob in auto-commit mode is read-only. and exec.Blob in auto-commit mode is read-only. = select.Blob in auto-commit mode is read-only. and exec.null = select.null and exec.call = select.call and exec.Blob in auto-commit mode is read-only. = select.Blob in auto-commit mode is read-only. and exec.call = select.call and exec.null = select.null and exec.call = select.call", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "6L8}";
      stringArray0[1] = "renameer";
      stringArray0[2] = "renameer";
      stringArray0[3] = "renameer";
      stringArray0[4] = "renameer";
      stringArray0[5] = "renameer";
      stringArray0[6] = "renameer";
      String string0 = SQLUtil.leftJoin("renameer", stringArray0, "iele", "create unique indexer", stringArray0);
      assertEquals("left join iele as create unique indexer on renameer.6L8} = create unique indexer.6L8} and renameer.renameer = create unique indexer.renameer and renameer.renameer = create unique indexer.renameer and renameer.renameer = create unique indexer.renameer and renameer.renameer = create unique indexer.renameer and renameer.renameer = create unique indexer.renameer and renameer.renameer = create unique indexer.renameer", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" NULL", 3);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 9);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("bj<t");
      vector0.ensureCapacity((-1815333582));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("bj<t", defaultDBTable0, 3232, "drop materialized view\"qz;z#wh50e/1w<m7h");
      Vector<DBColumn> vector1 = new Vector<DBColumn>();
      vector1.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector1);
      assertEquals("bj<t", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-1815333582), "bj<t");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("hQGRd", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[7] = (DBColumn) defaultDBColumn1;
      Integer.getInteger("hQGRd", (-1815333582));
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("bj<t, bj<t, bj<t, bj<t, bj<t, bj<t, bj<t, hQGRd, bj<t", string1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDML("call");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.h2.command.Parser";
      stringArray0[2] = "org.h2.command.Parser";
      stringArray0[2] = "org.h2.command.Parser";
      stringArray0[3] = "org.h2.command.Parser";
      stringArray0[4] = "org.h2.command.Parser";
      stringArray0[6] = "org.h2.command.Parser";
      stringArray0[7] = "org.h2.command.Parser";
      stringArray0[8] = "org.h2.command.Parser";
      SQLUtil.renderColumnListWithTableName("org.h2.command.Parser", stringArray0);
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.command.Parser");
      defaultDBTable0.setName("org.h2.command.Parser");
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'org.h2.command.Parser' has no foreign key with the columns (org.h2.command.Parser, , org.h2.command.Parser, org.h2.command.Parser, org.h2.command.Parser, , org.h2.command.Parser, org.h2.command.Parser, org.h2.command.Parser)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DBDataType.getInstance(663, "create unique indexor");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|4J ocji1Fv&:}5vxOs");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.getEncoding();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      fBManagedConnectionFactory0.getTransactionIsolation();
      fBManagedConnectionFactory0.setTpbMapping("jP-LXq3?6lI");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|4J ocji1Fv&:}5vxOs", (DBTable) null, 663, "|4J ocji1Fv&:}5vxOs");
      FBManagedConnectionFactory fBManagedConnectionFactory2 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory2.getLocalEncoding();
      fBManagedConnectionFactory2.getSocketBufferSize();
      fBManagedConnectionFactory1.equals(fBManagedConnectionFactory0);
      fBManagedConnectionFactory2.isTimestampUsesLocalTimezone();
      defaultDBColumn0.equals("create unique indexor");
      defaultDBColumn0.toString();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.459562444957137
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(663, "delete");
      Integer integer0 = new Integer(663);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|4J ocji1Fv&:}5vxOs");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      Integer integer1 = fBManagedConnectionFactory0.getTransactionIsolation();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", (DBTable) null, dBDataType0, integer1);
      FBManagedConnectionFactory fBManagedConnectionFactory2 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory2.getSocketBufferSize();
      fBManagedConnectionFactory1.equals(fBManagedConnectionFactory0);
      fBManagedConnectionFactory2.isTimestampUsesLocalTimezone();
      defaultDBColumn0.equals("delete");
      defaultDBColumn0.toString();
      fBManagedConnectionFactory2.getBlobBufferSize();
      fBManagedConnectionFactory1.getSocketBufferSize();
      Parameter parameter0 = new Parameter(44);
      fBManagedConnectionFactory0.equals(parameter0);
      fBManagedConnectionFactory1.isTimestampUsesLocalTimezone();
      Integer.toUnsignedString((-183));
      Integer integer2 = new Integer(42);
      Integer integer3 = new Integer(0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("|4J ocji1Fv&:}5vxOs");
      assertNull(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Bynes";
      stringArray0[1] = "Bynes";
      stringArray0[3] = "Bynes";
      stringArray0[4] = "Bynes";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Bynes");
      stringBuilder0.append((-1116));
      MockThread.reset();
      MockThread.reset();
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "Bynes");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "yY73=b6pDMpak");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread1.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.getParent();
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread3 = new MockThread(threadGroup1, mockThread2, "");
      mockThread3.getContextClassLoader();
      ThreadGroup threadGroup2 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread4 = new MockThread(threadGroup2, "");
      MockThread mockThread5 = new MockThread(mockThread0);
      MockThread mockThread6 = new MockThread(mockThread1, "FOREIGN KEY ");
      StringBuffer stringBuffer0 = new StringBuffer();
      TableContainer tableContainer0 = new TableContainer("yY73=b6pDMpak");
      tableContainer0.getTable("Bynes");
      DBDataType dBDataType0 = DBDataType.getInstance((-1116), "Bynes");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SoY%8p#39RL", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("SoY%8p#39RL BYNES(3) NULL", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[2] = "Dd[YTKX,Ao<9^}$Dd";
      stringArray0[4] = "f?S^";
      stringArray0[0] = "Dd[YTKX,Ao<9^}$Dd";
      stringArray0[6] = "org.databene.script.expression.Comp%sdteExpr'ssion";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "inserttimeout after";
      stringArray0[1] = "alter indextimeout after";
      stringArray0[2] = "delete";
      stringArray0[3] = "a:gc\"y[ou&$F:f+e";
      stringArray0[4] = "W7}?Lp&U";
      stringArray0[5] = "+/' P|";
      stringArray0[6] = "timeout aft";
      stringArray0[7] = "e=quP{NI1ej0-PdE ";
      stringArray0[8] = "Ev@P\"u6s>thgi]=)";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "delete";
      objectArray0[1] = (Object) "Ev@P\"u6s>thgi]=)";
      objectArray0[2] = (Object) "+/' P|";
      objectArray0[3] = (Object) "W7}?Lp&U";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedReader0.ready();
      pipedReader0.markSupported();
      pipedReader0.close();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      GDSHelper gDSHelper0 = null;
      SQLUtil.removeComments("");
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator1 = null;
      try {
        internalTransactionCoordinator_MetaDataTransactionCoordinator1 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator(internalTransactionCoordinator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator$MetaDataTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "Bytes";
      stringArray0[1] = "Bytes";
      stringArray0[1] = "Bytes";
      StringBuilder stringBuilder0 = new StringBuilder(125);
      stringBuilder0.appendCodePoint(125);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("Bytes", stringBuilder0);
      stringBuilder0.chars();
      stringBuilder1.append(125);
      MockThread.reset();
      MockThread.reset();
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Bytes");
      mockThread1.getContextClassLoader();
      mockThread1.getContextClassLoader();
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup1, "zg<N!AR&$bXwl.3 FF");
      MockThread mockThread3 = new MockThread(mockThread2);
      MockThread mockThread4 = null;
      try {
        mockThread4 = new MockThread(mockThread3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name cannot be null
         //
         verifyException("java.lang.Thread", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("SELECT * FROM ");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, " WHERE ");
      VersionNumber.valueOf("SELECT * FROM ");
      VersionNumber versionNumber1 = VersionNumber.valueOf("SELECT * FROM ");
      versionNumber1.toString();
      versionNumber0.toString();
      VersionNumber.valueOf("SELECT * FROM ");
      VersionNumber.valueOf("Qp8/YF%$NcArq6");
      MockThread mockThread0 = new MockThread();
      MockThread.reset();
      MockThread.reset();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread1 = new MockThread(thread0);
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "2b@t-S?0Yck:,");
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      mockThread1.getContextClassLoader();
      MockThread mockThread3 = new MockThread("Qp8/YF%$NcArq6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockThread3.setContextClassLoader(classLoader1);
      MockThread mockThread4 = new MockThread(mockThread3, "2b@t-S?0Yck:,");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("isrt");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("isrt", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger("exec", dBSchema0);
      dBTrigger0.setTriggerType("exec");
      dBSchema0.isIdentical(dBTrigger0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "exec");
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup1, "bc1sG\"C )(>0?");
      MockThread mockThread2 = new MockThread(mockThread1);
      MockThread.dumpStack();
      Thread[] threadArray0 = new Thread[4];
      threadArray0[0] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      ThreadGroup threadGroup2 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread3 = new MockThread(threadGroup2, mockThread1);
      MockThread mockThread4 = new MockThread(threadArray0[0], "exec");
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("isrt.isrt", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null, compositeDBObject0);
      tableContainer0.getTable("calldelete\"l)");
      Integer integer0 = new Integer(34);
      Integer integer1 = new Integer((-112));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (DBDataType) null, integer0, integer1);
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[3] = "";
      DBDataType.getInstance(3, "delete");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("delete");
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.CANADA_FRENCH;
      mockPrintWriter0.format(locale0, "CHECK ", (Object[]) stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLUtil.isProcedureCall("BglN]CDfo '<Ui/?");
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      VersionNumber versionNumber1 = VersionNumber.valueOf((String) null);
      versionNumber1.compareTo(versionNumber0);
      versionNumber0.toString();
      versionNumber0.toString();
      VersionNumber.valueOf("1");
      VersionNumber versionNumber2 = VersionNumber.valueOf("BglN]CDfo '<Ui/?");
      VersionNumber versionNumber3 = VersionNumber.valueOf("1");
      VersionNumber versionNumber4 = VersionNumber.valueOf("BglN]CDfo '<Ui/?");
      VersionNumber.valueOf("Qp/YF%$NcArq6");
      VersionNumber versionNumber5 = VersionNumber.valueOf((String) null);
      versionNumber4.toString();
      versionNumber2.compareTo(versionNumber5);
      versionNumber1.toString();
      versionNumber5.compareTo(versionNumber3);
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Random.setNextRandom((-4008));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "P&bEOO-t5X99x/7Z#9";
      // Undeclared exception!
      try { 
        SQLUtil.join("P&bEOO-t5X99x/7Z#9", "CKd", stringArray0, "P&bEOO-t5X99x/7Z#9", "CKd", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesDataOrStructure("timeout after ");
      int int0 = (-2747);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getMethod("timeout after ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop table");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drop table";
      stringArray0[1] = "drop table";
      stringArray0[3] = "drop table";
      stringArray0[4] = "drop table";
      System.setCurrentTimeMillis((-144L));
      System.setCurrentTimeMillis((-2677L));
      long long0 = 0L;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "<AgHkcb", true, stringArray0);
      Boolean boolean0 = Boolean.FALSE;
      dBPrimaryKeyConstraint0.toString();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      GDSHelper gDSHelper0 = null;
      int int0 = (-220172267);
      SQLUtil.removeComments("<AgHkcb");
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator1 = null;
      try {
        internalTransactionCoordinator_MetaDataTransactionCoordinator1 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator(internalTransactionCoordinator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator$MetaDataTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wz?],{73a![NKQZYHZ";
      stringArray0[1] = "CLOB";
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getLanguageConnectionContext();
      StringBuilder stringBuilder0 = new StringBuilder(336331014);
      MockThread mockThread0 = new MockThread();
      MockThread.reset();
      MockThread.reset();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      classLoader0.getParent();
      mockThread0.getContextClassLoader();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      mockThread1.setContextClassLoader(classLoader1);
      MockThread mockThread2 = new MockThread(mockThread0, "nss*dh>~");
      StringBuffer stringBuffer0 = new StringBuffer();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "wz?],{73a![NKQZYHZ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT wz?],{73a![NKQZYHZ UNIQUE (wz?],{73a![NKQZYHZ, CLOB, , , )", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "<AgHkcb", true, stringArray0);
      Boolean boolean0 = new Boolean("<![CDATA[");
      dBPrimaryKeyConstraint0.toString();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      GDSHelper gDSHelper0 = null;
      int int0 = (-220172267);
      SQLUtil.removeComments("<AgHkcb");
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator1 = null;
      try {
        internalTransactionCoordinator_MetaDataTransactionCoordinator1 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator(internalTransactionCoordinator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator$MetaDataTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`m)X_4oM$>A", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`m)X_4oM$>A";
      stringArray0[1] = null;
      stringArray0[2] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (`m)X_4oM$>A, , )", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-47);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("hVZ(F2Rp0aBpXJUrS)V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F2Rp0aBpXJUrS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
