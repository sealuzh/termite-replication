/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 03:10:08 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.760755259244303
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(B)0d #Rt?");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      StringReader stringReader0 = new StringReader("F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm1.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1952684170869836
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "krw");
      Integer integer0 = new Integer(863);
      Integer integer1 = new Integer((-3987));
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      System.setCurrentTimeMillis((-3987));
      System.setCurrentTimeMillis((-3987));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1831L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-16L));
      StringReader stringReader0 = new StringReader("vsu&prUV9HzH\"");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      System.setCurrentTimeMillis(1831L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.standarizerSubs();
      jSSubstitution1.add((Object) integer0);
      jSSubstitution1.add((Object) "krw");
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.equals(jSPredicateForm0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      assertSame(unaryOperator1, unaryOperator0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("nil");
      jSTerm0.lastElement();
      jSTerm0.addElement(jSTerm0);
      Integer integer0 = new Integer((-3));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "nil");
      Integer integer1 = new Integer(505);
      Integer integer2 = new Integer((-3));
      Integer integer3 = new Integer(914);
      Integer integer4 = new Integer(1713);
      Integer integer5 = new Integer((-3));
      Integer integer6 = new Integer((-3));
      UnaryOperator.identity();
      Integer integer7 = new Integer(505);
      UnaryOperator.identity();
      System.setCurrentTimeMillis(505);
      jSTerm1.toStr();
      System.setCurrentTimeMillis(914);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis(1939L);
      jSTerm1.clonePF();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9184277849930976
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("nil");
      jSTerm0.lastElement();
      jSTerm0.addElement(jSTerm0);
      Integer integer0 = new Integer((-3));
      jSTerm0.add((Object) "nil");
      Integer integer1 = new Integer(505);
      Integer integer2 = new Integer((-3));
      Integer integer3 = new Integer(914);
      Integer integer4 = new Integer(914);
      Integer integer5 = new Integer((-3));
      Integer integer6 = new Integer((-3));
      UnaryOperator.identity();
      Integer integer7 = new Integer(505);
      Integer integer8 = new Integer(1706);
      UnaryOperator.identity();
      Integer integer9 = new Integer(914);
      Integer integer10 = new Integer(914);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) integer6);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.standardizerTerm();
      jSTerm1.sort(comparator0);
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2227793161934692
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("nil");
      jSTerm0.lastElement();
      jSTerm0.addElement(jSTerm0);
      Integer integer0 = new Integer((-3));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "nil");
      Integer integer1 = new Integer(505);
      Integer integer2 = new Integer((-3));
      Integer integer3 = new Integer(914);
      Integer integer4 = new Integer(914);
      Integer integer5 = new Integer((-3));
      Integer integer6 = new Integer((-3));
      UnaryOperator.identity();
      Integer integer7 = new Integer(505);
      Integer integer8 = new Integer(1706);
      UnaryOperator.identity();
      Integer integer9 = new Integer(914);
      Integer integer10 = new Integer(914);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) integer6);
      jSTerm1.add((Object) jSTerm2);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.standardizerTerm();
      jSTerm2.sort(comparator0);
      Function.identity();
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      jSSubstitution0.add((Object) integer10);
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("nil");
      jSPredicateForm0.lastElement();
      jSPredicateForm0.addElement(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.containsAll(jSPredicateForm0);
      Integer integer0 = new Integer((-3));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nil");
      Integer integer1 = new Integer(12);
      Integer integer2 = new Integer((-3));
      Integer integer3 = new Integer(863);
      StringReader stringReader0 = new StringReader("f4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      Integer integer4 = new Integer(1717);
      Integer integer5 = new Integer((-3));
      Integer integer6 = new Integer((-18655746));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer7 = new Integer((-794));
      System.setCurrentTimeMillis((-1189L));
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(3495L);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(39);
      jSPredicateForm0.addElement("nil");
      Function.identity();
      StringReader stringReader0 = new StringReader("nil");
      stringReader0.markSupported();
      stringReader0.close();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "EtVtWH";
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object object1 = new Object();
      jSPredicateForm0.remove(object0);
      jSPredicateForm0.print();
      Object object2 = new Object();
      jSPredicateForm0.addElement(object2);
      StringReader stringReader0 = new StringReader("a{!^Vzd8HB?xe");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5783252866601273
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(k RM?");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6019239717322894
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "(d #Rt?";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(d #Rt?");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2730283365896258
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NEf E>L9H]&,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("NEf E>L9H]&,");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      StringReader stringReader2 = new StringReader("o+ed%`1wymqdz[j`yzk");
      StringReader stringReader3 = new StringReader("o+ed%`1wymqdz[j`yzk");
      stringReader3.close();
      stringReader0.skip((-1477L));
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ?>) function2);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.apply("NEf E>L9H]&,");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function5 = unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function6 = unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function7 = function3.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function.identity();
      Function<Object, String> function8 = unaryOperator2.compose((Function<? super Object, ? extends String>) function5);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function8);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function7);
      function5.andThen((Function<? super String, ? extends String>) function6);
      jSPredicateForm0.print();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.addElement(jSTerm1);
      jSPredicateForm0.print();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) jSTerm1);
      assertEquals("[NEf]", jSTerm0.toString());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(: gM@?");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MMGQ!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-1739));
      jSTerm0.add((Object) integer0);
      String string0 = "4Q-r";
      StringReader stringReader1 = new StringReader("4Q-r");
      streamTokenizer0.sval = "cDX2pM%RQC(3$p-A?eW";
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("nil");
      Object object0 = new Object();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("nil");
      stringReader0.ready();
      stringReader0.close();
      unaryOperator0.apply("!)u^p![gJo\"7Kg>5");
      unaryOperator1.apply("I\"{K?");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator5);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1209503926735833
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("nil");
      jSTerm0.lastElement();
      jSTerm0.addElement(jSTerm0);
      Integer integer0 = new Integer((-3));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "nil");
      Integer integer1 = new Integer(505);
      Integer integer2 = new Integer((-3));
      Integer integer3 = new Integer(914);
      Integer integer4 = new Integer(1713);
      Integer integer5 = new Integer((-3));
      Integer integer6 = new Integer((-3));
      UnaryOperator.identity();
      Integer integer7 = new Integer(505);
      Integer integer8 = new Integer(1713);
      UnaryOperator.identity();
      Integer integer9 = new Integer(914);
      Integer integer10 = new Integer(914);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) integer6);
      jSTerm1.add((Object) jSTerm2);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.standardizerTerm();
      jSTerm2.sort(comparator0);
      jSTerm2.toStr();
      jSTerm1.clonePF();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.removeAllElements();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MMGQ!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.whitespaceChars((-1434200128), 3245);
      StringReader stringReader1 = new StringReader("4Q-r");
      jSTerm0.add((Object) stringReader0);
      stringReader1.skip((-1));
      streamTokenizer0.sval = ": Error read:ng control parametmrs: ";
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      stringReader0.markSupported();
      streamTokenizer1.ordinaryChars((-2), 382);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      stringReader0.read();
      streamTokenizer1.ordinaryChar(382);
      streamTokenizer1.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.nval = 0.0;
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer2.quoteChar((-2));
      StringReader stringReader2 = new StringReader("4Q-r");
      streamTokenizer1.whitespaceChars((-4), (-1));
      System.setCurrentTimeMillis((-2));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MMGQ!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-4));
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Integer, String> function2 = unaryOperator1.compose((Function<? super Integer, ? extends String>) function1);
      Function<Integer, Integer> function3 = Function.identity();
      Function<Integer, String> function4 = unaryOperator1.compose((Function<? super Integer, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function4);
      Function.identity();
      Integer integer1 = new Integer(79);
      unaryOperator1.compose((Function<? super Integer, ? extends String>) function1);
      Integer integer2 = new Integer(473);
      unaryOperator0.andThen((Function<? super Integer, ?>) function3);
      Function<Integer, String> function5 = unaryOperator0.andThen((Function<? super Integer, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function6);
      function5.compose((Function<? super String, ? extends Integer>) function7);
      unaryOperator0.andThen((Function<? super Integer, ?>) function5);
      Function<Object, String> function8 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function9 = unaryOperator1.compose((Function<? super Object, ? extends String>) function8);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function9);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Integer, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      function8.compose((Function<? super Object, ?>) unaryOperator4);
      unaryOperator3.andThen((Function<? super Integer, ?>) function4);
      unaryOperator0.andThen((Function<? super Integer, ?>) function7);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("( ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "EtV}tWpH";
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object object1 = new Object();
      jSPredicateForm0.print();
      Object object2 = new Object();
      jSPredicateForm0.clear();
      objectArray0[0] = (Object) (-1);
      jSPredicateForm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "NEf E>L9H]&,";
      StringReader stringReader0 = new StringReader("NEf E>L9H]&,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("NEf E>L9H]&,");
      stringReader1.ready();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.makeEval(true);
      StringReader stringReader2 = new StringReader("o+edj`1wymqdz[j`yzk");
      StringReader stringReader3 = new StringReader("o+edj`1wymqdz[j`yzk");
      stringReader2.close();
      stringReader3.close();
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      stringReader0.read(charArray0);
      stringReader0.skip((-1477L));
      jSPredicateForm0.setSize(34);
      jSTerm0.clonePF();
      jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.lastElement();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "EtVtWH";
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSJshopVars.percent = 0;
      Object object1 = new Object();
      jSPredicateForm0.add(0, objectArray0[1]);
      jSPredicateForm0.remove(object0);
      jSPredicateForm0.print();
      Object object2 = new Object();
      jSPredicateForm0.addElement(object2);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NEf E>vL9Hx&,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("NEf E>vL9Hx&,");
      stringReader1.ready();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.makeEval(true);
      StringReader stringReader2 = new StringReader("o+edj`1wymqdz[j`yzk");
      StringReader stringReader3 = new StringReader("o+edj`1wymqdz[j`yzk");
      stringReader3.close();
      stringReader3.close();
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      stringReader0.read(charArray0);
      streamTokenizer0.slashSlashComments(true);
      stringReader0.skip((-1477L));
      jSPredicateForm0.setSize(34);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSTerm> function0 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ?>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator2);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("nil");
      jSPredicateForm0.addElement(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("0mT/L*2C3\"1.rs");
      stringReader0.ready();
      stringReader0.close();
      unaryOperator0.apply("eo6/sZ");
      unaryOperator1.apply("nil");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator.identity();
      Function<String, String> function0 = unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis(196L);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      jSTerm1.add((Object) jSTerm0);
      System.setCurrentTimeMillis(196L);
      System.setCurrentTimeMillis((-1457L));
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.clear();
      jSTerm2.add((Object) "E/<A2:@.");
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm2.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-12));
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      jSTerm0.add((Object) "nil");
      Integer integer1 = new Integer(12);
      Integer integer2 = new Integer((-12));
      jSTerm0.removeAll(jSSubstitution1);
      Integer integer3 = new Integer(1717);
      Integer integer4 = new Integer((-12));
      UnaryOperator.identity();
      Integer integer5 = new Integer(40);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeEval(false);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.add((Object) jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      jSTerm3.clear();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("AEf EL9H]&$,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer(4054);
      jSTerm1.add((Object) null);
      Integer integer1 = new Integer(3453);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer2 = new Integer(4054);
      Integer integer3 = new Integer((-3229));
      Integer integer4 = new Integer((-1));
      unaryOperator0.apply(integer4);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer(26);
      Integer integer7 = new Integer(3453);
      unaryOperator1.andThen((Function<? super Integer, ?>) unaryOperator0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      jSTerm1.sort(comparator0);
      System.setCurrentTimeMillis(45L);
      System.setCurrentTimeMillis((-799L));
      System.setCurrentTimeMillis((-3229));
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "EtV`~tWH";
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object object1 = new Object();
      jSPredicateForm0.removeElement(object0);
      jSPredicateForm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.addElement("krd");
      jSPredicateForm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MMGQ!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      String string0 = "4Q-r";
      StringReader stringReader1 = new StringReader("4Q-r");
      stringReader1.skip((-1));
      streamTokenizer0.sval = ": Error reading control parameters: ";
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.markSupported();
      int int0 = 382;
      streamTokenizer1.ordinaryChars((-4), 382);
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "EtVtWH";
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object object1 = new Object();
      jSPredicateForm0.remove(object0);
      jSPredicateForm0.print();
      Object object2 = new Object();
      jSPredicateForm0.addElement("EtVtWH");
      jSPredicateForm0.print();
      assertEquals("[EtVtWH]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.print();
      Object object1 = new Object();
      jSPredicateForm0.clear();
      objectArray0[0] = (Object) (-1);
      jSPredicateForm0.addElement(object0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("pcn");
      jSPredicateForm0.toStr();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      Function.identity();
      unaryOperator2.apply("LUne ");
      unaryOperator0.apply("LUne ");
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator4);
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator6);
      unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator5);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator7 = UnaryOperator.identity();
      assertSame(unaryOperator7, unaryOperator3);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("nil");
      jSPredicateForm0.lastElement();
      JSJshopVars.verticalL = (-1);
      JSJshopVars.slash = 34;
      jSPredicateForm0.addElement("nil");
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("rd");
      jSPredicateForm0.toStr();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.apply("? ");
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator4.apply("rd");
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator3);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.compose((Function<? super String, ? extends String>) unaryOperator5);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator5);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator7 = UnaryOperator.identity();
      assertSame(unaryOperator7, unaryOperator2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("pcn");
      jSPredicateForm0.toStr();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      unaryOperator2.apply("LUne ");
      unaryOperator0.apply("LUne ");
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator3);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator5);
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ? extends String>) unaryOperator4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator7 = UnaryOperator.identity();
      assertSame(unaryOperator7, unaryOperator6);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AEf EQ9H]{$,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("D==k'O$}-]=mm");
      StringReader stringReader2 = new StringReader("AEf EQ9H]{$,");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      stringReader0.markSupported();
      streamTokenizer1.nval = 0.0;
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      streamTokenizer0.ordinaryChar(32);
      stringReader0.reset();
      StringReader stringReader3 = new StringReader("AEf EQ9H]{$,");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      streamTokenizer0.quoteChar((-4));
      StringReader stringReader4 = new StringReader("gow;khht;rtt");
      stringReader0.reset();
      StringReader stringReader5 = new StringReader("Operator name expected");
      stringReader2.read();
      StringReader stringReader6 = new StringReader("");
      assertFalse(stringReader6.equals((Object)stringReader2));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.clear();
      jSPredicateForm0.addElement("nil");
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.listIterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = null;
      // Undeclared exception!
      try { 
        unaryOperator0.compose((Function<? super Object, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.apply((String) null);
      unaryOperator7.apply(") ");
      unaryOperator5.andThen((Function<? super String, ?>) unaryOperator6);
      UnaryOperator<String> unaryOperator8 = UnaryOperator.identity();
      unaryOperator7.apply((String) null);
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator8.andThen((Function<? super String, ?>) unaryOperator3);
      UnaryOperator<String> unaryOperator9 = UnaryOperator.identity();
      unaryOperator8.compose((Function<? super String, ? extends String>) unaryOperator5);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator7.compose((Function<? super String, ? extends String>) unaryOperator9);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator10 = UnaryOperator.identity();
      assertSame(unaryOperator10, unaryOperator4);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.apply("LUne ");
      UnaryOperator.identity();
      unaryOperator4.apply("LUne ");
      unaryOperator0.apply("LUne ");
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator5);
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator8 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ? extends String>) unaryOperator7);
      UnaryOperator.identity();
      unaryOperator7.compose((Function<? super String, ? extends String>) unaryOperator6);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator9 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator8.compose((Function<? super String, ? extends String>) unaryOperator9);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator6.compose((Function<? super String, ? extends String>) unaryOperator8);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator10 = UnaryOperator.identity();
      assertSame(unaryOperator10, unaryOperator2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("nil");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "krw");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("wG4[b/$?dP=Q;i0a");
      unaryOperator1.apply("!");
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super String, ? extends String>) function0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator6 = UnaryOperator.identity();
      assertSame(unaryOperator6, unaryOperator2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.trimToSize();
      jSPredicateForm0.removeAllElements();
      JSPredicateForm jSPredicateForm1 = null;
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "EtVtWH";
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSJshopVars.percent = 0;
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "EtVtWH");
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate1.and(predicate0);
      predicate1.negate();
      Predicate<Integer> predicate3 = predicate2.or(predicate0);
      jSPredicateForm0.removeIf(predicate3);
      Object object1 = new Object();
      jSPredicateForm0.add(0, objectArray0[1]);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(object0);
      jSPredicateForm0.elementAt(0);
      jSTerm0.add((Object) "EtVtWH");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-3));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nil");
      Integer integer1 = new Integer((-3));
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function4).apply(any());
      Function<Object, Integer> function5 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function8);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function9 = unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      function7.andThen((Function<? super Integer, ?>) function6);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function9);
      function2.andThen((Function<? super String, ? extends Integer>) function8);
      Function.identity();
      Function<Object, String> function10 = unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function11 = unaryOperator2.compose((Function<? super Object, ? extends String>) function10);
      Function.identity();
      function8.apply(function11);
      function8.compose((Function<? super String, ?>) function6);
      function8.compose((Function<? super String, ?>) unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MMx>&[C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("4Q-r");
      streamTokenizer0.sval = "MMx>&[C";
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.sval = "4Q-r";
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      streamTokenizer1.ordinaryChar((-1));
      stringReader1.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (double) (-1);
      streamTokenizer2.whitespaceChars(69, (-1));
      streamTokenizer1.nextToken();
      streamTokenizer2.nval = (double) (-1);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.quoteChar(81);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.addElement(consumer0);
      assertFalse(jSTerm1.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(2821L);
      System.setCurrentTimeMillis((-156964788));
      System.setCurrentTimeMillis(2821L);
      System.setCurrentTimeMillis((-22L));
      System.setCurrentTimeMillis(2821L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(849L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-20L));
      System.setCurrentTimeMillis(1939L);
      System.setCurrentTimeMillis(2164L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(849L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-22L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-156964788));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1507L));
      StringReader stringReader0 = new StringReader("(kmwn>");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      function1.compose((Function<? super String, ?>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function9 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function10 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, String> function11 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      function9.compose((Function<? super String, ?>) function11);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function11);
      function8.andThen((Function<? super Integer, ?>) function6);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function11);
      function10.compose((Function<? super String, ?>) function11);
      Function<Object, String> function12 = unaryOperator2.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      function12.andThen((Function<? super String, ? extends Integer>) function9);
      Function.identity();
      Function<Object, String> function13 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function14 = unaryOperator0.compose((Function<? super Object, ? extends String>) function13);
      function10.apply((Object) null);
      function7.compose((Function<? super String, ?>) function5);
      Function<Object, Integer> function15 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function10);
      function15.compose((Function<? super String, ?>) function14);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.24493002679463532
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(k RMFe?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("nil");
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-3));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nil");
      Integer integer1 = new Integer((-3));
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function5 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function8);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      Function<Object, String> function9 = unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      function7.andThen((Function<? super Integer, ?>) function6);
      function9.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function9);
      function2.andThen((Function<? super String, ? extends Integer>) function8);
      Function.identity();
      Function<Object, String> function10 = unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function10);
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis(0L);
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSPairVarTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("pqn");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.apply("LUne ");
      unaryOperator0.apply("LUne ");
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.apply("!");
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator4);
      UnaryOperator.identity();
      Function<String, String> function2 = unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) function2);
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StringReader stringReader1 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2821L);
      System.setCurrentTimeMillis(788L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-503L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-503L));
      System.setCurrentTimeMillis(237L);
      System.setCurrentTimeMillis(237L);
      System.setCurrentTimeMillis(788L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-503L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2021L));
      System.setCurrentTimeMillis(1172L);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(%N?");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gow;k]hht;rt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-4));
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Integer, String> function2 = unaryOperator1.compose((Function<? super Integer, ? extends String>) function1);
      Function<Integer, Integer> function3 = Function.identity();
      Function<Integer, String> function4 = unaryOperator1.compose((Function<? super Integer, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function4);
      Function.identity();
      Integer integer1 = new Integer(79);
      Integer integer2 = new Integer(0);
      function2.apply(integer2);
      unaryOperator1.compose((Function<? super Integer, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function5);
      function3.compose((Function<? super String, ? extends Integer>) function6);
      Integer integer3 = new Integer((-2409));
      unaryOperator0.andThen((Function<? super Integer, ?>) function3);
      Function<Integer, String> function7 = unaryOperator0.andThen((Function<? super Integer, ? extends String>) function4);
      function7.apply(integer3);
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function8);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function7);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) integer1);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "/M7o*5j0Vp,bVJR)2";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("/M7o*5j0Vp,bVJR)2");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4293230219306162
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(kwn>");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0&NQ9y(");
      stringReader0.reset();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("aef eq9h]{$,");
      stringReader0.reset();
      stringReader1.reset();
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("1ioj");
      StringReader stringReader3 = new StringReader("%%%");
      stringReader1.read();
      StringReader stringReader4 = new StringReader(")");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
