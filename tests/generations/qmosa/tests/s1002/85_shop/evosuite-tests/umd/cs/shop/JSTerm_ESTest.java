/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 04:42:47 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.799902779427117
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(<c$FM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.7519304663146794
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(jSTerm0, 0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSJshopVars.greaterT = 0;
      StringReader stringReader0 = new StringReader("5($g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.854806284951481
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.ordinaryChars(13, 752);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9008949598191847
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "?-Xd|qIITY5F1eX<@";
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.insertElementAt(stringReader0, 0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isVariable();
      jSTerm1.insertElementAt("?-Xd|qIITY5F1eX<@", 0);
      StringReader stringReader1 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.print();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.447495892123302
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer2);
      JSTerm jSTerm2 = jSTerm1.call();
      UnaryOperator.identity();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      jSTerm2.insertElementAt(jSTerm1, 2);
      stringReader0.mark(45);
      streamTokenizer2.slashStarComments(true);
      jSTerm2.print();
      jSTerm0.isGround();
      jSTerm1.print();
      jSTerm2.cloneT();
      StringReader stringReader1 = new StringReader(".");
      jSTerm2.standardizerTerm();
      assertEquals("[., [Predicateform.print(], [., [Predicateform.print(], [nil]], [nil]]", jSTerm2.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6681739719973967
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.matches(jSTerm0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%yBTD5IXzm#Ul>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      assertFalse(jSSubstitution4.fail());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars((-1953), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer3.nextToken();
      jSTerm0.parseList(streamTokenizer1);
      System.setCurrentTimeMillis((-1184L));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1186492470699503
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = 'r';
      stringReader0.skip((-1236L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      streamTokenizer0.wordChars((-2), (-2));
      jSTerm1.call();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.iterator();
      Integer integer0 = new Integer(96);
      jSSubstitution1.add((Object) integer0);
      jSTerm0.listIterator(0);
      stringReader0.close();
      JSTerm jSTerm2 = (JSTerm)jSTerm1.lastElement();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm2);
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate3 = predicate1.or(predicate2);
      Predicate<Integer> predicate4 = predicate3.and(predicate1);
      jSSubstitution0.removeIf(predicate4);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSTerm1.addAll((Collection) jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3778195080390327
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Error flag1 : ");
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      char[] charArray1 = new char[2];
      charArray1[0] = 'Z';
      charArray1[1] = 'Z';
      stringReader1.read(charArray1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      stringReader0.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.quoteChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.isGround();
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0126926438092823
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      JSTerm jSTerm0 = new JSTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      JSJshopVars.equalT = (-1);
      jSTerm0.isEmpty();
      CharBuffer.wrap((CharSequence) "?-Xd|qIITY5F1eX<@");
      streamTokenizer0.quoteChar(39);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("Predicateform.print(): 0 elements", 0);
      jSTerm0.isEmpty();
      jSTerm0.insertElementAt(stringReader0, 0);
      jSTerm0.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.050705726455745
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.insertElementAt(jSTerm0, 0);
      StringReader stringReader0 = new StringReader("Ta=H~>RJe})#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.equals(jSTerm0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      stringReader0.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars(64, 1);
      streamTokenizer2.quoteChar(990);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      jSTerm1.isGround();
      System.setCurrentTimeMillis(544);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1682824501765625
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("flag1");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1306893065841206
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(stringReader0, 0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.matches(jSTerm0);
      jSTerm1.isGround();
      jSTerm1.insertElementAt("(", 0);
      jSTerm1.addElement(jSTerm0);
      jSTerm1.print();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2644994906224687
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(jSTerm0, 0);
      jSTerm0.isEmpty();
      JSJshopVars.greaterT = 0;
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.add((Object) stringBuffer0);
      System.setCurrentTimeMillis(1762L);
      // Undeclared exception!
      try { 
        jSTerm3.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("?-Xd|qIITY5F1eX<@", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9674308609942304
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Pedicateform.print(): 0 elements");
      char[] charArray0 = new char[17];
      charArray0[0] = 'M';
      charArray0[1] = 'r';
      stringReader0.skip((-1236L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      jSTerm1.clone();
      Predicate.isEqual((Object) jSSubstitution0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.128549004875151
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer2);
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      jSTerm2.equals(jSTerm1);
      System.setCurrentTimeMillis((-406L));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars(41, (-1));
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.969540332941515
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution0.isEmpty());
      
      jSTerm0.isEmpty();
      boolean boolean0 = jSTerm1.isGround();
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertTrue(boolean1 == boolean0);
      
      jSTerm1.print();
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.11336892717262
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.insertElementAt(jSTerm0, 0);
      JSJshopVars.greaterT = 0;
      jSTerm0.matches(jSTerm1);
      jSTerm1.isVariable();
      jSTerm0.isGround();
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(40);
      jSSubstitution0.add((Object) integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7118451352339121
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.insertElementAt(jSTerm0, 0);
      JSJshopVars.greaterT = 0;
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution0);
      jSTerm1.isVariable();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.536722469437219
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Error flag1 : ");
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      char[] charArray1 = new char[2];
      charArray1[0] = 'Z';
      charArray1[1] = 'Z';
      stringReader1.read(charArray1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ttype = (-619);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      stringReader0.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.quoteChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.isGround();
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.greaterT = (-3975);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.631345420808597
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "?-Xd|qIITY5F1eX<@");
      streamTokenizer0.quoteChar(39);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) charBuffer0);
      Predicate<Object> predicate1 = null;
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2865714177338354
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(jSTerm0, 0);
      jSTerm0.isEmpty();
      jSTerm0.isGround();
      System.setCurrentTimeMillis(0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.trimToSize();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm2 = new JSTerm();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ?>) unaryOperator0);
      jSTerm2.replaceAll(unaryOperator1);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm4.print();
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(677L);
      jSTerm1.standardizerTerm();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm3, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0713433025795
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.insertElementAt(jSTerm0, 0);
      jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm1);
      jSTerm1.isVariable();
      jSTerm1.isGround();
      jSTerm1.equals(jSTerm0);
      jSTerm0.isGround();
      jSTerm1.print();
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9036866883376182
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.ordinaryChars(13, 752);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer3);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals(41, streamTokenizer3.ttype);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2397458666084575
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(jSTerm0, 0);
      jSTerm0.isEmpty();
      JSJshopVars.greaterT = 4;
      jSTerm0.isEmpty();
      jSTerm0.isGround();
      System.setCurrentTimeMillis(0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.colon = 45;
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 5;
      jSTerm0.setSize(5);
      String string0 = "Line : ";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.interrogation = 47;
      jSTerm0.setSize(47);
      Object object0 = new Object();
      jSTerm0.insertElementAt(object0, 47);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.lastElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.insertElementAt(jSSubstitution0, 47);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSUtil");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0735965673995684
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?Xd|qIITF1eX<@");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      streamTokenizer0.quoteChar(39);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      Predicate.isEqual((Object) jSTerm0);
      jSTerm1.isGround();
      System.setCurrentTimeMillis(39);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.interrogation = 47;
      jSTerm0.setSize(47);
      Object object0 = jSTerm0.clone();
      jSTerm0.insertElementAt(object0, 47);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9451366013736582
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer2);
      JSTerm jSTerm2 = jSTerm1.call();
      UnaryOperator.identity();
      jSTerm0.isEmpty();
      jSTerm2.isGround();
      System.setCurrentTimeMillis((-406L));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChars((-4), 752);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.25605588095289
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer2);
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.equals(jSTerm1);
      System.setCurrentTimeMillis((-406L));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(41, (-4));
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.cloneT();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2);
      Object object0 = jSTerm0.clone();
      jSTerm0.insertElementAt(object0, 2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.31043986809725
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer2);
      jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      streamTokenizer1.commentChar((-4));
      JSJshopVars.astherisk = 41;
      jSTerm1.toStr();
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2Od@ A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("[2.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1006789212792607
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'b';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.trimToSize();
      jSTerm1.addAll(1, (Collection) jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.listIterator(0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches(jSTerm3, jSSubstitution2);
      jSTerm1.matches(jSTerm2);
      assertEquals(0, jSTerm0.capacity());
      assertEquals("[., ., [Predicateform.print(], [nil], [Predicateform.print(], [nil]]", jSTerm1.toString());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2865714177338354
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(jSTerm0, 0);
      jSTerm0.isEmpty();
      jSTerm0.isGround();
      System.setCurrentTimeMillis(0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.trimToSize();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm2 = new JSTerm();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ?>) unaryOperator0);
      jSTerm2.replaceAll(unaryOperator1);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm3, jSSubstitution1);
      Predicate.isEqual((Object) unaryOperator1);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8dj2eQ1mKOq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.ordinaryChar((-2415));
      streamTokenizer0.commentChar(1461);
      streamTokenizer0.wordChars(1461, 1461);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7170759801988817
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      CharBuffer.wrap((CharSequence) "?-Xd|qIITY5F1eX<@");
      streamTokenizer0.quoteChar(39);
      jSTerm1.isVariable();
      // Undeclared exception!
      try { 
        jSTerm1.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.semicolon = (-708);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm0.isFunction();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      System.setCurrentTimeMillis((-400L));
      System.setCurrentTimeMillis((-400L));
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSJshopVars.greaterT = 0;
      JSJshopVars.percent = 1;
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.3874526477749907
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(jSTerm0, 0);
      jSTerm0.isEmpty();
      JSJshopVars.greaterT = 4;
      jSTerm0.equals(jSTerm0);
      jSTerm0.isGround();
      System.setCurrentTimeMillis(0);
      JSJshopVars.slash = 550;
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5857708352080966
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8dj2eQ1mKOq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-2415));
      streamTokenizer0.commentChar(1461);
      streamTokenizer0.wordChars(1461, 1461);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.iterator();
      jSTerm1.setSize(2);
      jSTerm0.matches(jSTerm1);
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.90853528164356
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(stringReader0, 0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm0.isGround();
      jSTerm1.insertElementAt((Object) null, 0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2);
      jSTerm0.insertElementAt(jSTerm0, 2);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = jSTerm0.set(2, jSSubstitution1);
      objectArray0[5] = object0;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) jSTerm0;
      jSSubstitution0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3457374038618126
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?Xd|qIITF1eX<@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.insertElementAt((Object) null, 0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringBuffer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      jSTerm1.clone();
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) predicate5);
      predicate1.negate();
      predicate2.test(jSTerm1);
      Predicate<Integer> predicate7 = predicate6.and(predicate2);
      Predicate<Integer> predicate8 = predicate6.or(predicate0);
      predicate8.or(predicate7);
      predicate4.negate();
      Predicate<JSSubstitution> predicate9 = Predicate.isEqual((Object) null);
      predicate7.and(predicate3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSSubstitution> predicate10 = Predicate.isEqual((Object) predicate4);
      predicate9.or(predicate5);
      predicate10.negate();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2076L));
      jSTerm0.standardizerTerm();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      assertEquals("[null, ?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7848621942139289
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer2);
      jSTerm1.call();
      UnaryOperator.identity();
      jSTerm0.isEmpty();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.ordinaryChars(3500, 43);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nextToken();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3439604435494834
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.print();
      jSTerm1.isGround();
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-708);
      JSJshopVars.semicolon = (-708);
      StringReader stringReader0 = new StringReader("a~vMv]R^~j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.setSize((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.159731616075493
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Error flag1 : ");
      stringReader0.skip(0L);
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = '\'';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars(544, (-4));
      streamTokenizer2.quoteChar(39);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm3.isVariable());
      assertNotSame(jSTerm0, jSTerm2);
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = 'D';
      charArray0[2] = 'R';
      charArray0[3] = '<';
      charArray0[4] = '+';
      charArray0[5] = 'N';
      charArray0[6] = 'l';
      charArray0[7] = '1';
      charArray0[8] = 'j';
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.8018185525433373
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8dj2eQ1mKOq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ttype = (-879);
      streamTokenizer0.wordChars((-879), (-879));
      System.setCurrentTimeMillis((-879));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.314202569375892
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt(jSTerm0, 0);
      jSTerm0.isEmpty();
      JSJshopVars.greaterT = 4;
      jSTerm0.isEmpty();
      jSTerm0.isGround();
      System.setCurrentTimeMillis(0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator1);
      JSJshopVars.colon = 45;
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm3.print();
      System.setCurrentTimeMillis(208L);
      System.setCurrentTimeMillis(0L);
      jSTerm3.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm4.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5684419540128833
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.nval = (-1.0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(18L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qITY51eX<@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(1L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8989267893363286
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.makeEval(true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = '-';
      charArray0[2] = 'i';
      charArray0[3] = '|';
      charArray0[4] = '{';
      charArray0[5] = 'i';
      stringReader0.read(charArray0);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.toStr();
      jSTerm0.call();
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      predicate0.and(predicate0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qIITY5F1eX<@");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Error flag1 : ");
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      char[] charArray1 = new char[2];
      charArray1[0] = 'Z';
      charArray1[1] = 'Z';
      stringReader1.read(charArray1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      stringReader0.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.whitespaceChars(2, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.quoteChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertEquals(32, streamTokenizer0.ttype);
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qITY51eX<@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(1L);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = 1250;
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1935496040981333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-Xd|qITY51eX<@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      long long0 = new Integer((-4));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      JSJshopVars.dot = (-3);
      System.setCurrentTimeMillis((-406L));
      // Undeclared exception!
      try { 
        jSTerm0.lastElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5171515848932913
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      System.setCurrentTimeMillis((-1L));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars(38, (-2021));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      jSTerm0.standardizerTerm();
      jSTerm0.cloneT();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      stringReader0.read(charArray0);
      charBuffer0.mark();
      charBuffer0.slice();
      charBuffer0.chars();
      charBuffer0.clear();
      stringReader0.read(charBuffer0);
      charArray0[0] = '\\';
      charArray0[1] = 'D';
      stringReader0.mark(0);
      charArray0[2] = 'R';
      charArray0[3] = '<';
      charArray0[4] = '+';
      charArray0[5] = 'N';
      charArray0[7] = '1';
      charArray0[8] = 'j';
      stringReader0.read(charArray0, 0, 0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.insertElementAt(jSTerm0, 0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Integer> predicate1 = predicate0.and(predicate0);
      predicate1.or(predicate0);
      predicate1.negate();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, JSSubstitution> function4 = unaryOperator0.andThen((Function<? super Object, ? extends JSSubstitution>) function0);
      function4.apply(predicate0);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      function4.compose((Function<? super Integer, ?>) function3);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator2);
      StringReader stringReader0 = new StringReader("(:YJEJmD^");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6904565313848348
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("5(jvg");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate0.and(predicate2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      predicate1.negate();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.7751292747786216
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?XWd|qIITF1eX<@");
      StringReader stringReader1 = new StringReader("0(<c$FM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader1.skip(0L);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.pushBack();
      streamTokenizer1.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      charBuffer0.mark();
      charBuffer0.slice();
      charBuffer0.chars();
      charBuffer0.clear();
      stringReader0.read(charBuffer0);
      charArray0[0] = '\\';
      charArray0[1] = 'D';
      charArray0[2] = 'R';
      charArray0[3] = '<';
      charArray0[4] = '+';
      charArray0[5] = 'N';
      charArray0[7] = '1';
      charArray0[8] = 'j';
      stringReader0.read(charArray0, 0, 0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.resetSyntax();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function3 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, JSSubstitution> function4 = unaryOperator2.andThen((Function<? super Object, ? extends JSSubstitution>) function3);
      Function<Object, JSSubstitution> function5 = unaryOperator1.andThen((Function<? super Object, ? extends JSSubstitution>) function4);
      function5.apply(function2);
      Function<Object, Object> function6 = Function.identity();
      function4.compose((Function<? super Integer, ?>) function6);
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator1);
      StringReader stringReader1 = new StringReader(" ) ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.48509409130221154
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.insertElementAt(jSTerm0, 0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Integer> predicate1 = predicate0.and(predicate0);
      predicate1.or(predicate0);
      predicate1.negate();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, JSSubstitution> function4 = unaryOperator0.andThen((Function<? super Object, ? extends JSSubstitution>) function0);
      function4.apply(function2);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      function4.compose((Function<? super Integer, ?>) function5);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ?>) function6);
      StringReader stringReader0 = new StringReader("(:YJEJmD^");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      jSTerm0.isEval();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      predicate3.and(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      predicate6.or(predicate5);
      Predicate<JSSubstitution> predicate7 = Predicate.isEqual((Object) predicate4);
      predicate7.or(predicate1);
      predicate7.and(predicate1);
      Predicate<Integer> predicate8 = Predicate.isEqual((Object) predicate0);
      predicate4.negate();
      predicate0.and(predicate6);
      // Undeclared exception!
      try { 
        predicate8.and((Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
