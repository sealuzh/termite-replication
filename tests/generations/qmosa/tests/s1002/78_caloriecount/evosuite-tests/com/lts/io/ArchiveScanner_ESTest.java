/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 07:47:14 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P5Zf+)zxCPd}a{$";
      stringArray0[1] = "P5Zf+)zxCPd}a{$";
      archiveScanner0.setExcludes(stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.flush();
      pipedOutputStream0.close();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.filesIncluded = vector1;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "P5Zf+)zxCPd}a{$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5461078180068584
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("The file, ");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("The file, ", ">W>");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      archiveScanner0.basedir = (File) improvedFile0;
      archiveScanner0.basedir = (File) improvedFile0;
      archiveScanner0.scan();
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The file, ";
      stringArray0[1] = ">W>";
      stringArray0[2] = ">W>";
      stringArray0[3] = "mzzSvoV";
      archiveScanner0.setIncludes(stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory(improvedFile0, ");pB}b;{V=\"0$d", true);
      System.setCurrentTimeMillis((-1331L));
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory(improvedFile0, ">W>", true);
      System.setCurrentTimeMillis((byte)8);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.978563225201054
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("The file, ");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("The file, ", ">W>");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      archiveScanner0.basedir = (File) improvedFile0;
      archiveScanner0.basedir = (File) improvedFile0;
      archiveScanner0.scan();
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The file, ";
      ImprovedFile.createTempImprovedFile("The file, ", "?eB!l", improvedFile1);
      stringArray0[1] = ">W>";
      stringArray0[2] = ">W>";
      stringArray0[3] = "mzzSvoV";
      archiveScanner0.setIncludes(stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.available();
      bufferedInputStream0.read(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      bufferedInputStream0.available();
      Vector<InputStream> vector1 = new Vector<InputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sequenceInputStream0.markSupported();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.markSupported();
      sequenceInputStream1.skip(774L);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, bufferedInputStream0);
      try { 
        archiveScanner0.processArchive(improvedFile1, ">W>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/The file, /The file, 0>W>
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5611877090735962
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("The file, ");
      improvedFile0.createTempDir();
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("The file, ", ">W>");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      archiveScanner0.basedir = (File) improvedFile0;
      archiveScanner0.basedir = (File) improvedFile0;
      archiveScanner0.scan();
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The file, ";
      stringArray0[1] = ">W>";
      stringArray0[2] = ">W>";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-147094374));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("t,Fuc)q9V=$", "t,Fuc)q9V=$");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "t,Fuc)q9V=$");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "t,Fuc)q9V=$";
      stringArray0[1] = "t,Fuc)q9V=$";
      stringArray0[2] = "t,Fuc)q9V=$";
      stringArray0[3] = "t,Fuc)q9V=$";
      stringArray0[4] = "t,Fuc)q9V=$";
      archiveScanner0.includes = stringArray0;
      Vector<DataInputStream> vector0 = new Vector<DataInputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      boolean boolean0 = false;
      try { 
        archiveScanner0.processDirectory(improvedFile0, ")]", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/t,Fuc)q9V=$/t,Fuc)q9V=$/t,Fuc)q9V=$
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5295859745510523
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("The file, ");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("The file, ", ">W>");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      archiveScanner0.basedir = (File) improvedFile0;
      archiveScanner0.basedir = (File) improvedFile0;
      archiveScanner0.scan();
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(archiveScanner0.basedir);
      Function.identity();
      Vector<Object> vector0 = new Vector<Object>();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The file, ";
      stringArray0[1] = "=||wL<88!:l";
      stringArray0[2] = ">W>";
      stringArray0[3] = "";
      stringArray0[4] = ">W>";
      stringArray0[5] = ">W>";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) "The file, ");
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory(improvedFile0, "The file, ", false);
      System.setCurrentTimeMillis(1);
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String[] stringArray0 = new String[2];
      String string0 = "Error extracting archive to temp directory";
      stringArray0[0] = string0;
      String string1 = "com.lts.io.ArchiveScanner";
      stringArray0[1] = string1;
      vector0.add((Object) archiveScanner0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.dirsExcluded = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String[] stringArray0 = new String[2];
      archiveScanner0.haveSlowResults = boolean0;
      String string0 = "Error extracting archive to temp directory";
      stringArray0[0] = string0;
      String string1 = "com.lts.io.ArchiveScanner";
      String[] stringArray1 = new String[0];
      Object object0 = new Object();
      boolean boolean1 = vector1.remove(object0);
      Vector<Object> vector2 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector2;
      stringArray0[1] = string1;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.haveSlowResults = boolean0;
      String string2 = "IO error scanning directory ";
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, string2, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P5Zf+)zxCPd}a{$";
      stringArray0[1] = "P5Zf+)zxCPd}a{$";
      archiveScanner0.setExcludes(stringArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.mark((-235900842));
      sequenceInputStream1.mark(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1, 1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      sequenceInputStream1.read();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      pipedOutputStream0.close();
      sequenceInputStream0.markSupported();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(bufferedInputStream0, sequenceInputStream0);
      sequenceInputStream3.available();
      bufferedInputStream0.available();
      Vector<InputStream> vector1 = new Vector<InputStream>();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(dataInputStream0, sequenceInputStream2);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "P5Zf+)zxCPd}a{$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String string0 = "_C.#=e9yCU*MK8J]LT";
      FileSystemHandling.shouldAllThrowIOExceptions();
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, archiveScanner0.DIRECTORY);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      vector1.add((InputStream) bufferedInputStream0);
      vector1.add((InputStream) bufferedInputStream0);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.addDefaultExcludes();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 4);
      byte[] byteArray0 = new byte[0];
      bufferedInputStream0.read(byteArray0);
      vector0.add((InputStream) bufferedInputStream0);
      vector0.add((InputStream) null);
      vector0.add((InputStream) null);
      archiveScanner0.setBasedir("9=7A&CZaTP`'=p/]t:");
      vector0.add((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, (InputStream) null);
      vector0.add((InputStream) bufferedInputStream0);
      pushbackInputStream0.markSupported();
      vector0.add((InputStream) pushbackInputStream0);
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesNotIncluded = vector1;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "9Qzx(]eB;MJNtZ4";
      vector1.add((Object) null);
      stringArray0[1] = "9Qzx(]eB;MJNtZ4";
      stringArray0[2] = "9Qzx(]eB;MJNtZ4";
      stringArray0[3] = ".zip";
      stringArray0[4] = "9=7A&CZaTP`'=p/]t:";
      stringArray0[5] = "9Qzx(]eB;MJNtZ4";
      stringArray0[6] = "9Qzx(]eB;MJNtZ4";
      stringArray0[7] = "9Qzx(]eB;MJNtZ4";
      stringArray0[8] = "9Qzx(]eB;MJNtZ4";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "9=7A&CZaTP`'=p/]t:", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[1];
      Vector<Object> vector0 = new Vector<Object>(2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<9WO'V*T]m");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      vector0.removeIf(predicate2);
      archiveScanner0.filesExcluded = vector0;
      stringArray0[0] = "9>$A&FZ1TP`'=pJ]t:";
      archiveScanner0.includes = stringArray0;
      vector0.add((Object) null);
      archiveScanner0.setBasedir("5gI.jar");
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "9>$A&FZ1TP`'=pJ]t:", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String string0 = "";
      String string1 = "DJ";
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean1);
      String[] stringArray0 = new String[6];
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesIncluded = vector0;
      Vector<Integer> vector1 = null;
      archiveScanner0.dirsExcluded = vector1;
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      Vector<Object> vector2 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector2;
      stringArray0[5] = string1;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processFile(stringArray0[2]);
      int int0 = (-121);
      // Undeclared exception!
      try { 
        vector2.insertElementAt(vector1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[3];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[0] = "_C.#=e9yCU*MK8JLT";
      stringArray0[1] = "_C.#=e9yCU*MK8JLT";
      stringArray0[2] = "_C.#=e9yCU*MK8JLT";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processFile("DJ");
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(6);
      Integer integer3 = new Integer(722);
      Integer integer4 = new Integer(6);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "DJ";
      stringArray1[1] = "0lqn$";
      stringArray1[2] = "5gI.jar";
      linkedList0.toArray(stringArray1);
      Integer integer5 = new Integer(3);
      linkedList0.add(integer5);
      Vector<Integer> vector1 = new Vector<Integer>(linkedList0);
      Integer integer6 = new Integer((-203171573));
      Integer integer7 = new Integer(39);
      Integer integer8 = new Integer((-264378286));
      Integer integer9 = new Integer(39);
      Integer integer10 = new Integer(5);
      Integer integer11 = new Integer((-260006356));
      System.setCurrentTimeMillis(722);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.dirsExcluded = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_C.#=e9yCU*MK8J]LT";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[1] = "DJ";
      stringArray0[2] = "_C.#=e9yCU*MK8J]LT";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory((File) null, "_C.#=e9yCU*MK8J]LT", true);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("n}h_}- <;4d3K&oW;D/n}h_}- <;4d3K&oW;D0z9itmw&SAqYzo");
      MockFile mockFile0 = new MockFile((String) null, "n}?Eh_}- <;4d3K&oW;");
      File file0 = MockFile.createTempFile("n}?Eh_}- <;4d3K&oW;", "zt9itmw&SAqzo", (File) mockFile0);
      MockFile mockFile1 = new MockFile("n}?Eh_}- <;4d3K&oW;");
      mockFile1.renameTo(file0);
      File file1 = mockFile0.getAbsoluteFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.deleteOnExit();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      file0.setWritable(false, false);
      mockFile1.setReadable(false);
      mockFile0.getCanonicalPath();
      mockFile1.renameTo(file0);
      mockFile0.delete();
      mockFile1.setReadOnly();
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile1.setWritable(false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      mockFile1.setExecutable(false, true);
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "a&0XY`1$+iI");
      mockFile0.setExecutable(true, false);
      file1.getCanonicalPath();
      file0.getAbsoluteFile();
      mockFile1.toURL();
      MockFile mockFile2 = new MockFile("7j.1Ol+yn!c=]");
      URI uRI0 = MockURI.aFileURI;
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "7j.1Ol+yn!c=]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[1];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesNotIncluded = vector0;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, (InputStream) null);
      vector0.add((InputStream) sequenceInputStream0);
      stringArray0[0] = "ZU!7]S+QT";
      archiveScanner0.includes = stringArray0;
      DirectoryScanner.matchPatternStart("ZU!7]S+QT", "ZU!7]S+QT");
      archiveScanner0.processArchive((File) null, "D5;J|n/gLaa ");
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_C.#=e9yCU*MK8JLT";
      stringArray0[1] = "DJ";
      stringArray0[2] = "_C.#=e9yCU*MK8JLT";
      archiveScanner0.setExcludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector0;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processFile("DJ");
      Integer integer0 = new Integer((-17));
      Integer integer1 = new Integer((-293776745));
      Integer integer2 = new Integer((-1007));
      Integer integer3 = new Integer((-816));
      Integer integer4 = new Integer(3);
      Integer integer5 = new Integer((-1007));
      Integer integer6 = new Integer((-1007));
      System.setCurrentTimeMillis((-816));
      System.setCurrentTimeMillis((-17));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[3];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[0] = "_C.#=e9yCU*MK8JLT";
      stringArray0[1] = "DJ";
      stringArray0[2] = "_C.#=e9yCU*MK8JLT";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("DJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      String string0 = "P5Zf+)zxCPd}a{$";
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P5Zf+)zxCPd}a{$";
      stringArray0[1] = "P5Zf+)zxCPd}a{$";
      archiveScanner0.setExcludes(stringArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.mark((-235900842));
      sequenceInputStream1.mark(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1, 1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      sequenceInputStream1.read();
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsIncluded = vector0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      sequenceInputStream0.markSupported();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(bufferedInputStream0, sequenceInputStream0);
      sequenceInputStream0.mark(4);
      sequenceInputStream3.available();
      bufferedInputStream0.available();
      Vector<InputStream> vector1 = new Vector<InputStream>();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(dataInputStream0, sequenceInputStream2);
      int int0 = ArchiveScanner.ARCHIVE;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "P5Zf+)zxCPd}a{$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.dirsExcluded = null;
      String string0 = "_C.#=e9yCU*MK8J]LT";
      String string1 = "DJ";
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = 1584;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, int0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Vector<Object> vector1 = new Vector<Object>();
      Enumeration<DataInputStream> enumeration1 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0, int0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(pipedInputStream0);
      int int1 = 92;
      bufferedInputStream2.mark(int1);
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      Vector<InputStream> vector2 = new Vector<InputStream>();
      vector2.add((InputStream) sequenceInputStream2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = string0;
      stringArray0[6] = string1;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String string0 = "";
      String string1 = "DJ";
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String[] stringArray0 = new String[6];
      Vector<Integer> vector0 = null;
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector1;
      stringArray0[5] = string1;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(stringArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P5Zff)zAdDa{";
      stringArray0[1] = "P5Zff)zAdDa{";
      archiveScanner0.setExcludes(stringArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.mark((-235900842));
      sequenceInputStream1.mark(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1, 1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      sequenceInputStream1.read();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      pipedOutputStream0.flush();
      pipedOutputStream0.close();
      sequenceInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream2);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream1.read(byteArray0);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, pushbackInputStream0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "P5Zff)zAdDa{", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-8));
      hashMap0.getOrDefault("&Pq", (Integer) null);
      Integer integer1 = new Integer((-8));
      Integer integer2 = new Integer((-8));
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer3 = new Integer((-8));
      Integer integer4 = new Integer(1267);
      hashMap1.put(integer3, integer4);
      hashMap1.put((Integer) null, integer2);
      hashMap0.putAll(hashMap1);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer5 = new Integer((-8));
      Integer integer6 = new Integer(8);
      Integer integer7 = hashMap0.put(integer0, integer6);
      Integer integer8 = new Integer(1267);
      Integer integer9 = new Integer(1267);
      hashMap0.put(integer8, integer9);
      vector1.add((Integer) null);
      Integer integer10 = new Integer((-264378247));
      Integer integer11 = new Integer(1267);
      vector1.add(integer7);
      Integer integer12 = new Integer(8);
      Vector<Integer> vector2 = new Vector<Integer>();
      Integer integer13 = new Integer((-8));
      Integer integer14 = new Integer((-264378247));
      Integer integer15 = new Integer(8);
      Integer integer16 = new Integer((-264378247));
      ImprovedFile improvedFile0 = new ImprovedFile("''xg!dJX*]/tKSm7F", "&Pq");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      improvedFile0.createTempDir();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "''xg!dJX*]/tKSm7F", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("n}?Eh_}- <;4d3K&oW;");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "n}?Eh_}- <;4d3K&oW;");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("n}h_}- <;4d3K&oW;D/n}h_}- <;4d3K&oW;D0z9itmw&SAqYzo");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("n}h_}- <;4d3K&oW;D/n}h_}- <;4d3K&oW;D0z9itmw&SAqYzo");
      FileSystemHandling.setPermissions(evoSuiteFile2, false, false, false);
      FileSystemHandling.setPermissions(evoSuiteFile2, true, true, false);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      FileSystemHandling.createFolder(evoSuiteFile2);
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "H");
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte) (-39);
      FileSystemHandling.appendDataToFile(evoSuiteFile3, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ImprovedFile improvedFile0 = new ImprovedFile(".zip", "n}?Eh_}- <;4d3K&oW;");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("n}h_}- <;4d3K&oW;D/n}h_}- <;4d3K&oW;D0z9itmw&SAqYzo");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "com.lts.application.prompt.startup.continueDespiteCommandLineError");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("n}h_}- <;4d3K&oW;D/n}h_}- <;4d3K&oW;D0z9itmw&SAqYzo");
      MockFile mockFile0 = new MockFile((String) null, "n}?Eh_}- <;4d3K&oW;");
      File file0 = MockFile.createTempFile("n}?Eh_}- <;4d3K&oW;", "z9itmw&SAqYzo", (File) mockFile0);
      File file1 = ImprovedFile.buildName("n}?Eh_}- <;4d3K&oW;", 1L, "n}?Eh_}- <;4d3K&oW;", file0);
      file1.renameTo(file0);
      mockFile0.deleteOnExit();
      file1.renameTo(file0);
      mockFile0.delete();
      byte[] byteArray0 = new byte[1];
      file0.toURL();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile(file1, "ya&0XY`1$+iI");
      file1.renameTo(file0);
      file0.getAbsoluteFile();
      file0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "C:%Cbt", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "n}?Eh_}- <;4d3K&oW;");
      File file0 = MockFile.createTempFile("n}?Eh_}- <;4d3K&oW;", "n}?Eh_}- <;4d3K&oW;", (File) mockFile0);
      MockFile mockFile1 = new MockFile("n}?Eh_}- <;4d3K&oW;");
      mockFile1.renameTo(file0);
      File file1 = mockFile0.getAbsoluteFile();
      file1.getCanonicalPath();
      file1.setReadable(false);
      file0.setWritable(false, false);
      file1.setLastModified(1000000L);
      mockFile1.setReadable(false);
      mockFile0.getCanonicalPath();
      file1.setExecutable(false, true);
      mockFile1.renameTo(file0);
      mockFile0.delete();
      file1.toPath();
      mockFile0.setWritable(false);
      mockFile1.setExecutable(false, true);
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "A{YqHVbe81wQq))->(");
      mockFile0.setExecutable(false, false);
      mockFile1.getCanonicalFile();
      MockFile mockFile2 = new MockFile((String) null, "n}?Eh_}- <;4d3K&oW;");
      mockFile1.toURL();
      MockFile mockFile3 = new MockFile("7j.1OJ+yn!c=]");
      MockURI.URI((String) null, "n}?Eh_}- <;4d3K&oW;", "7j.1OJ+yn!c=]");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(mockFile3);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(46);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer1 = new Integer(46);
      vector0.add(integer1);
      vector0.trimToSize();
      vector0.add((Integer) null);
      vector0.add((Integer) null);
      Integer integer2 = new Integer((-316376795));
      vector0.spliterator();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      vector0.add(integer1);
      File file0 = ImprovedFile.buildName(".^a", 1000000L, "edD5.o'nHaVjL]q", (File) null);
      Integer integer3 = new Integer((-316008059));
      vector0.add(integer3);
      int int0 = archiveScanner0.toFileType(file0);
      Vector<Integer> vector1 = new Vector<Integer>();
      int int1 = 1086;
      Integer integer4 = new Integer(int1);
      Integer integer5 = new Integer(int0);
      int int2 = (-263);
      Integer integer6 = new Integer(int2);
      int int3 = (-8);
      Integer integer7 = new Integer(int3);
      int int4 = 55;
      Integer integer8 = new Integer(int4);
      int int5 = (-233512278);
      Integer integer9 = new Integer(int5);
      int int6 = 2510;
      Integer integer10 = new Integer(int6);
      int int7 = (-1308);
      Integer integer11 = new Integer(int7);
      assertFalse(integer11.equals((Object)integer5));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "n}?Eh_}- <;4d3K&oW;");
      File file0 = MockFile.createTempFile("n}?Eh_}- <;4d3K&oW;", "zt9itmw&SAqYzo", (File) mockFile0);
      MockFile mockFile1 = new MockFile("n}?Eh_}- <;4d3K&oW;");
      mockFile1.renameTo(file0);
      File file1 = mockFile0.getAbsoluteFile();
      file1.setReadable(false);
      file0.setWritable(false, false);
      mockFile1.setReadable(false);
      mockFile0.getCanonicalPath();
      mockFile1.renameTo(file0);
      mockFile0.delete();
      file1.toPath();
      mockFile1.setWritable(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile1.setExecutable(false, true);
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "a&0`1$+iI");
      mockFile0.setExecutable(true, false);
      file0.getAbsoluteFile();
      mockFile1.toURL();
      MockFile mockFile2 = new MockFile("7j.1Ol+yn!c=]");
      MockURI.URI((String) null, "zt9itmw&SAqYzo", "7j.1Ol+yn!c=]");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "7j.1Ol+yn!c=]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("n}h_}- <;4d3K&oW;D/n}h_}- <;4d3K&oW;D0z9itmw&SAqYzo");
      MockFile mockFile0 = new MockFile((String) null, "n}?Eh_}- <;4d3K&oW;");
      File file0 = MockFile.createTempFile("n}?Eh_}- <;4d3K&oW;", "zt9itmw&SAqzo", (File) mockFile0);
      MockFile mockFile1 = new MockFile("n}?Eh_}- <;4d3K&oW;");
      mockFile1.renameTo(file0);
      File file1 = mockFile0.getAbsoluteFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.deleteOnExit();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      file0.setWritable(false, false);
      mockFile1.setReadable(false);
      mockFile0.getCanonicalPath();
      mockFile1.renameTo(file0);
      mockFile0.delete();
      mockFile1.setReadOnly();
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile1.setWritable(false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      mockFile1.setExecutable(false, true);
      ImprovedFile improvedFile0 = new ImprovedFile("a&0Y`1$iI");
      mockFile0.setExecutable(false, false);
      file1.getCanonicalPath();
      file0.getAbsoluteFile();
      improvedFile0.toURL();
      MockFile mockFile2 = new MockFile("7j.1Ol+yn!c=]");
      URI uRI0 = MockURI.aFileURI;
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "7j.1Ol+yn!c=]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-8));
      hashMap0.getOrDefault("&Pq", (Integer) null);
      Integer integer1 = new Integer((-8));
      Integer integer2 = new Integer((-8));
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer3 = new Integer((-8));
      Integer integer4 = new Integer(61);
      hashMap1.put(integer3, integer4);
      hashMap1.put((Integer) null, integer2);
      hashMap0.putAll(hashMap1);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer5 = new Integer((-8));
      Integer integer6 = new Integer(8);
      Integer integer7 = hashMap0.put(integer0, integer6);
      Integer integer8 = new Integer(61);
      Integer integer9 = new Integer(61);
      hashMap0.put(integer8, integer9);
      vector1.add((Integer) null);
      Integer integer10 = new Integer((-8));
      Integer integer11 = new Integer(3387);
      vector1.add(integer7);
      Integer integer12 = new Integer(3387);
      Vector<Integer> vector2 = new Vector<Integer>();
      Integer integer13 = new Integer(61);
      Integer integer14 = new Integer(8);
      Integer integer15 = new Integer(8);
      Integer integer16 = new Integer((-8));
      ImprovedFile improvedFile0 = new ImprovedFile("''xg!dJX*]/tKSm7F", "&Pq");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      improvedFile0.createTempDir();
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-323));
      Integer integer1 = new Integer((-323));
      Integer integer2 = new Integer((-323));
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer3 = new Integer((-323));
      Integer integer4 = new Integer((-323));
      hashMap1.put(integer1, integer4);
      Integer integer5 = new Integer((-323));
      Integer integer6 = new Integer((-323));
      hashMap1.put(integer5, integer6);
      hashMap1.put(integer3, integer4);
      hashMap0.putAll(hashMap1);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer7 = new Integer((-323));
      Integer integer8 = new Integer(8);
      Integer integer9 = hashMap0.put(integer0, integer8);
      Integer integer10 = new Integer((-2953));
      Integer integer11 = new Integer((-2953));
      hashMap0.put(integer10, integer11);
      Integer integer12 = new Integer((-264378252));
      Integer integer13 = new Integer(3387);
      vector1.add(integer9);
      Integer integer14 = new Integer(3387);
      Vector<Integer> vector2 = new Vector<Integer>();
      Integer integer15 = new Integer((-323));
      Integer integer16 = new Integer((-264378252));
      Integer integer17 = new Integer(8);
      Integer integer18 = new Integer(1232);
      ImprovedFile improvedFile0 = new ImprovedFile("ya&XY>$iI.jaB#z");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "ya&XY>$iI.jaB#z");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, ya&XY>$iI.jaB#z
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P5Zf+)zxCPd}a{$";
      stringArray0[1] = "P5Zf+)zxCPd}a{$";
      archiveScanner0.setExcludes(stringArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.mark((-235900842));
      sequenceInputStream1.mark(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1, 1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      sequenceInputStream1.read();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      pipedOutputStream0.flush();
      pipedOutputStream0.close();
      sequenceInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream2);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream1.read(byteArray0);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, pushbackInputStream0);
      sequenceInputStream2.available();
      sequenceInputStream0.markSupported();
      bufferedInputStream0.available();
      sequenceInputStream0.available();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(bufferedInputStream0, sequenceInputStream3);
      sequenceInputStream1.available();
      bufferedInputStream0.available();
      sequenceInputStream4.available();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream1, bufferedInputStream0);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1593);
      hashMap0.getOrDefault("Wj+R NtO>R&|ZEu", (Integer) null);
      Integer integer1 = new Integer(1593);
      Integer integer2 = new Integer(1593);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer3 = new Integer(1593);
      Integer integer4 = new Integer(1593);
      Integer integer5 = new Integer((-2447));
      Integer integer6 = new Integer((-219550089));
      Integer integer7 = new Integer((-219550089));
      Integer integer8 = new Integer(1593);
      Integer integer9 = new Integer((-2447));
      Integer integer10 = new Integer(1593);
      Integer integer11 = new Integer((-2447));
      Integer integer12 = new Integer((-219550089));
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer13 = new Integer(1593);
      Integer integer14 = new Integer(1593);
      hashMap0.put(integer14, (Integer) null);
      Integer integer15 = new Integer(1593);
      Integer integer16 = new Integer(1593);
      Integer integer17 = new Integer(1593);
      vector1.add((Integer) null);
      Integer integer18 = new Integer(1593);
      Integer integer19 = new Integer(1593);
      vector1.add((Integer) null);
      Integer integer20 = new Integer(1593);
      Vector<Integer> vector2 = new Vector<Integer>();
      Integer integer21 = new Integer(1593);
      Integer integer22 = new Integer(1593);
      Integer integer23 = new Integer(1593);
      Integer integer24 = new Integer(1593);
      ImprovedFile improvedFile0 = new ImprovedFile("$7$@t{uekmL:jo1#", "Wj+R NtO>R&|ZEu");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("Wj+R NtO>R&|ZEu", "Wj+R NtO>R&|ZEu");
      archiveScanner0.scandir(improvedFile1, "Wj+R NtO>R&|ZEu", true);
      assertTrue(improvedFile1.canWrite());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-20));
      hashMap0.getOrDefault("&OP", (Integer) null);
      Integer integer1 = new Integer((-20));
      Integer integer2 = new Integer((-20));
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer3 = new Integer((-20));
      Integer integer4 = new Integer((-20));
      Integer integer5 = new Integer((-20));
      Integer integer6 = new Integer(1267);
      hashMap1.put(integer3, integer6);
      hashMap1.put((Integer) null, integer2);
      hashMap0.putAll(hashMap1);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer7 = new Integer((-20));
      Integer integer8 = new Integer(8);
      Integer integer9 = hashMap0.put(integer0, integer8);
      Integer integer10 = new Integer(1267);
      Integer integer11 = new Integer(1267);
      hashMap0.put(integer10, integer11);
      vector1.add((Integer) null);
      Integer integer12 = new Integer(8);
      Integer integer13 = new Integer(1267);
      vector1.add(integer9);
      Integer integer14 = new Integer(8);
      Vector<Integer> vector2 = new Vector<Integer>();
      Integer integer15 = new Integer(8);
      Integer integer16 = new Integer(1267);
      Integer integer17 = new Integer(8);
      Integer integer18 = new Integer((-20));
      ImprovedFile improvedFile0 = new ImprovedFile("QNt78AfP4$wg6u;HY", "&OP");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      archiveScanner0.scandir(improvedFile1, "&OP", true);
      assertEquals(0L, improvedFile1.getTotalSpace());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P5Zf+)zxCPd}a{$";
      stringArray0[1] = "P5Zf+)zxCPd}a{$";
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.mark((-235900842));
      sequenceInputStream1.mark(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1, 1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      sequenceInputStream1.read();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      pipedOutputStream0.flush();
      pipedOutputStream0.close();
      sequenceInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream2);
      byte[] byteArray0 = new byte[0];
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, pushbackInputStream0);
      sequenceInputStream2.available();
      sequenceInputStream0.markSupported();
      bufferedInputStream0.available();
      sequenceInputStream0.available();
      bufferedInputStream0.available();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      sequenceInputStream3.markSupported();
      sequenceInputStream0.skip(0L);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(dataInputStream0, sequenceInputStream0);
      ImprovedFile improvedFile0 = new ImprovedFile("aKg'm_Wr");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "n}?Eh_}- <;4d3K&oW;0zt9itmw&SAqYzo.jar", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/aKg'm_Wr
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1872));
      hashMap0.put(integer0, integer0);
      hashMap0.putIfAbsent((Integer) null, (Integer) null);
      hashMap0.getOrDefault("&glRP", (Integer) null);
      Integer integer1 = new Integer(1593);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(1593);
      Integer integer3 = new Integer(1593);
      Integer integer4 = new Integer(1593);
      hashMap1.put(integer3, integer4);
      Integer integer5 = new Integer(1593);
      hashMap1.put(integer2, integer5);
      hashMap1.put((Integer) null, integer1);
      hashMap0.putAll(hashMap1);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer6 = new Integer(1593);
      Integer integer7 = hashMap0.put((Integer) null, integer6);
      Integer integer8 = new Integer(1593);
      Integer integer9 = new Integer(1593);
      Integer integer10 = new Integer((-137002534));
      vector1.add(integer10);
      hashMap0.put(integer8, integer9);
      vector1.add((Integer) null);
      Integer integer11 = new Integer(1593);
      Integer integer12 = new Integer(1593);
      vector1.add(integer7);
      Integer integer13 = new Integer(1593);
      Vector<Integer> vector2 = new Vector<Integer>();
      Integer integer14 = new Integer(1593);
      Integer integer15 = new Integer(1593);
      Integer integer16 = new Integer(1593);
      ImprovedFile improvedFile0 = new ImprovedFile("&glRP", "&glRP");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer((-1610874239));
      Integer integer3 = new Integer(3);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>(vector0);
      Integer integer4 = new Integer(4);
      Integer integer5 = new Integer(4);
      Integer integer6 = new Integer(948);
      vector1.add(integer6);
      vector1.add(integer6);
      Integer integer7 = new Integer((-264378273));
      Integer integer8 = new Integer(3387);
      vector1.add(integer8);
      Integer integer9 = new Integer(3387);
      vector1.add(integer9);
      Integer integer10 = new Integer(8);
      Integer integer11 = new Integer((-1610874239));
      Integer integer12 = new Integer(801);
      Integer integer13 = new Integer((-235900879));
      Integer integer14 = new Integer(10);
      Integer integer15 = new Integer(3387);
      ImprovedFile improvedFile0 = new ImprovedFile("J4 ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.isArchive(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(4455);
      hashMap0.put(integer0, integer1);
      Integer integer2 = new Integer(3);
      Integer integer3 = new Integer(3);
      Integer integer4 = new Integer((-1610874239));
      Integer integer5 = new Integer(4455);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>(vector0);
      Integer integer6 = new Integer((-264378286));
      vector0.add(integer2);
      Integer integer7 = new Integer(3394);
      vector1.add(integer7);
      vector0.add(integer7);
      Vector<Integer> vector2 = new Vector<Integer>();
      Vector<Integer> vector3 = new Vector<Integer>(vector1);
      Integer integer8 = new Integer((-65));
      Vector<Integer> vector4 = new Vector<Integer>();
      Integer integer9 = new Integer(8);
      Integer integer10 = new Integer(6);
      Integer integer11 = new Integer(801);
      Integer integer12 = new Integer(1686);
      Integer integer13 = new Integer(10);
      Integer integer14 = new Integer(3394);
      ImprovedFile improvedFile0 = new ImprovedFile("0.gs.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-323));
      Integer integer1 = new Integer((-323));
      Integer integer2 = new Integer((-323));
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer3 = new Integer((-323));
      Integer integer4 = new Integer((-323));
      hashMap1.put(integer1, integer4);
      Integer integer5 = new Integer((-323));
      Integer integer6 = new Integer((-323));
      hashMap1.put(integer5, integer6);
      hashMap1.put(integer3, integer4);
      hashMap0.putAll(hashMap1);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer7 = new Integer((-323));
      Integer integer8 = new Integer(8);
      hashMap0.put(integer0, integer8);
      Integer integer9 = new Integer((-2953));
      Integer integer10 = new Integer((-2953));
      hashMap0.put(integer9, integer10);
      Integer integer11 = new Integer((-264378252));
      Integer integer12 = new Integer(3387);
      Integer integer13 = new Integer(3387);
      Vector<Integer> vector2 = new Vector<Integer>();
      Integer integer14 = new Integer((-323));
      Integer integer15 = new Integer((-264378252));
      Integer integer16 = new Integer(8);
      Integer integer17 = new Integer(1232);
      ImprovedFile improvedFile0 = new ImprovedFile("ya&XY>$iI.jaB#z");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[3];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[0] = "_C.#=e9yCU*MK8JLT";
      stringArray0[1] = "_C.#=e9yCU*MK8JLT";
      stringArray0[2] = "_C.#=e9yCU*MK8JLT";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processFile("DJ");
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(6);
      Integer integer3 = new Integer(722);
      Integer integer4 = new Integer(6);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "DJ";
      stringArray1[1] = "0lqn$";
      stringArray1[2] = "5gI.jar";
      linkedList0.toArray(stringArray1);
      Integer integer5 = new Integer(3);
      linkedList0.add(integer5);
      Vector<Integer> vector1 = new Vector<Integer>(linkedList0);
      Integer integer6 = new Integer((-203171573));
      Integer integer7 = new Integer(39);
      Integer integer8 = new Integer((-264378286));
      Integer integer9 = new Integer(5);
      Integer integer10 = new Integer((-260006356));
      assertFalse(integer10.equals((Object)integer4));
  }
}
