/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 07:36:30 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9699903615895153
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      Instances instances0 = new Instances(" J7:~lo@,i_1p(", arrayList0, 53);
      instances0.lastIndexOf(arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("+SI{R+!9oji&rv_=_");
      Attribute attribute0 = new Attribute("@data", linkedList0, 865);
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      attribute0.setWeight(2162.593275082805);
      Instances instances1 = new Instances(instances0, (-2777));
      linkedList0.pollLast();
      discretize0.setInputFormat(instances0);
      Instances instances2 = new Instances(instances1, 110);
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.setBins(0);
      discretize0.getOptions();
      System.setCurrentTimeMillis(3);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9698276510531856
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(", expected ", arrayList0, 865);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".bsi", linkedList0, 865);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute("numeric", linkedList0, protectedProperties1);
      arrayList0.add(attribute1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Attribute attribute2 = new Attribute("first-last", linkedList0, protectedProperties1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute1);
      attribute2.enumerateValues();
      attribute0.setWeight(1);
      Instances instances1 = new Instances(instances0, (-2101792504));
      Instances instances2 = new Instances(instances1, 99);
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize1.setBins(2);
      assertEquals(2, discretize1.getBins());
      
      Discretize discretize2 = new Discretize();
      discretize0.getOptions();
      System.setCurrentTimeMillis(1);
      discretize0.calculateCutPoints();
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9633894721891396
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine((String) null);
      Instances instances0 = new Instances("ABaAKTi6n", arrayList0, 865);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.offerLast("+Z>viNgx;");
      Attribute attribute0 = new Attribute(".bsi", linkedList1, 865);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute((String) null, linkedList1, protectedProperties1);
      arrayList0.add(attribute1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      Attribute attribute2 = new Attribute("string");
      Properties properties1 = new Properties();
      Attribute attribute3 = new Attribute("x8h", instances0, protectedProperties1);
      attribute0.copy("otn*'K+K");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@attribute");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.toArray();
      linkedList2.offerFirst("-F");
      linkedList2.add("relational");
      discretize0.findNumBins(0);
      discretize0.calculateCutPoints();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopy(discretize0);
      discretize0.setMakeBinary(true);
      discretize0.m_IgnoreClass = true;
      discretize0.setOutputFormat();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ABaAKTi6n", arrayList0, 865);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.offerLast("+Z>viNgx;");
      Attribute attribute0 = new Attribute(".bsi", linkedList1, 865);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      SystemInUtil.addInputLine("=&,.0");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute((String) null, linkedList1, protectedProperties1);
      arrayList0.add(attribute1);
      discretize0.getInvertSelection();
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5112753186181611
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("c(AQWV*Ovy72&XI\"", arrayList0, 1736);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".bsi", 1736);
      arrayList0.add(attribute0);
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 1736;
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 4;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = 2.0;
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = (double) 865;
      doubleArray3[6] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 865;
      doubleArray4[3] = 2.0;
      doubleArray4[4] = (double) 4;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) 1;
      doubleArray5[3] = 2.0;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = (double) 2;
      doubleArray5[6] = 2.0;
      doubleArray5[7] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 2.0;
      doubleArray6[1] = 2.0;
      doubleArray6[2] = (double) 2;
      doubleArray6[3] = 2.0;
      doubleArray6[4] = (double) 1736;
      doubleArray6[5] = 2.0;
      discretize0.m_CutPoints = doubleArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = discretize0.getBinRangesString(3);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("(-inf-1],(1-1],(1-865],(865-2],(2-4],(4-inf)", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1614755180305174
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("c(AQWV*Ovy72&XI\"", arrayList0, 1736);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".arff", linkedList1, 865);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      DenseInstance denseInstance0 = new DenseInstance(865);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2440);
      SparseInstance sparseInstance0 = new SparseInstance(2440);
      sparseInstance0.isMissing(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2440);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add(".arff");
      linkedList1.add("Qsk(@Q})le~xQJ");
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      discretize0.input(binarySparseInstance2);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(77);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 77
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1479893632953337
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      Instances instances0 = new Instances(" J7:~lo@,i_1p(", arrayList0, 69);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      instances0.lastIndexOf(arrayList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.offerLast("+SI{R+!9oji&rv_=_");
      Attribute attribute0 = new Attribute("@data", linkedList1, 865);
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      attribute0.setWeight(2162.593275082805);
      Instances instances1 = new Instances(instances0, (-2777));
      discretize0.setInputFormat(instances0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      Attribute attribute1 = new Attribute("@data", (-2073432485));
      Attribute attribute2 = new Attribute(".bsi");
      linkedList0.listIterator();
      Discretize discretize1 = new Discretize();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Policy";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualWidthBinning((-1876));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.967080871229376
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("c(AQWV*Ovy72&XI\"", arrayList0, 1736);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Properties properties0 = new Properties();
      arrayList0.spliterator();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("c(AQWV*Ovy72&XI\"", linkedList1, protectedProperties1);
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setInputFormat(instances0);
      Attribute attribute1 = new Attribute("Policy");
      Properties properties1 = new Properties();
      Attribute attribute2 = new Attribute("Number of folds must be at least 2!", instances0, protectedProperties1);
      attribute0.copy("All");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.toArray();
      linkedList1.offerFirst("");
      linkedList2.add("  protected Object[] instanceToObjects(Instance inst) {\n");
      discretize0.findNumBins(0);
      discretize0.setOutputFormat();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(12);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.toString(attribute1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0849048032361273
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemInUtil.addInputLine("UMJUA@;X6+ ]OD>-Y");
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ABaAKTi6n", arrayList0, 865);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.offerLast("+Z>viNgx;");
      Attribute attribute0 = new Attribute(".bsi", linkedList1, 865);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setInputFormat(instances0);
      Attribute attribute1 = new Attribute("string");
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Attribute attribute2 = new Attribute("x8h", instances0, protectedProperties1);
      Attribute.typeToString((-2101792504));
      attribute0.copy("otn*'K+K");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@attribute");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.setBins((-887));
      DenseInstance denseInstance0 = new DenseInstance(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(14);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.071167710287096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ABaAKTi6n", arrayList0, 865);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.offerLast("+Z>viNgx;");
      Attribute attribute0 = new Attribute(".bsi", linkedList1, 865);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute((String) null, linkedList1, protectedProperties1);
      arrayList0.add(attribute1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setInputFormat(instances0);
      Attribute attribute2 = new Attribute("string");
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute3 = new Attribute("x8h", instances0, protectedProperties1);
      attribute0.copy("otn*'K+K");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@attribute");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("relational");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(77);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1025959429841774
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" J7:~lo@,i_1p(", arrayList0, 69);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.offerLast(".bsi");
      Attribute attribute0 = new Attribute("@data", linkedList1, 865);
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setInputFormat(instances0);
      Attribute attribute1 = new Attribute("h", 69);
      Attribute attribute2 = new Attribute("numeric");
      attribute2.copy("@relation");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "integer");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      linkedList1.add(".bsi");
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4904032277870636
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" J7:~lo@,i_1p(", arrayList0, 69);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      linkedList1.offerLast(".bsi");
      Attribute attribute0 = new Attribute("@data", linkedList1, 865);
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setInputFormat(instances0);
      Attribute attribute1 = new Attribute("h", 69);
      arrayList0.add(attribute1);
      Attribute attribute2 = new Attribute("numeric");
      attribute2.copy("@relation");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "integer");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4548917612619334
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("c(AQWV*Ovy72&XI\"", arrayList0, 1736);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".arff", linkedList1, 865);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0);
      arrayList0.add(attribute0);
      Instances instances2 = new Instances(instances0);
      discretize0.setInputFormat(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '.arff' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1837296503255472
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" J7:~lo@,i_1p(", arrayList0, 69);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      Attribute attribute0 = new Attribute("@relation");
      Attribute attribute1 = new Attribute("]rJ?uLWw8d=", linkedList1, 2);
      arrayList0.add(attribute1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances1 = new Instances(instances0, 4);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 69;
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualFrequencyBinning(2042);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0150647373065556
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" J7:~lo@,i_1p(", arrayList0, 69);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      linkedList1.offerLast(".bsi");
      Attribute attribute0 = new Attribute("@data", linkedList1, 865);
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      Attribute attribute1 = new Attribute("h", 69);
      Attribute attribute2 = new Attribute("numeric");
      attribute2.copy("@relation");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "integer");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-862.3326804866825), intArray0, 3);
      discretize0.convertInstance(binarySparseInstance0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(true);
      discretize0.m_UseBinNumbers = true;
      discretize0.m_DefaultCols = "#g>Qh#BgG&D`";
      discretize0.getAttributeIndices();
      System.setCurrentTimeMillis(19L);
      discretize0.findNumBinsTipText();
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 19L;
      doubleArray1[1] = (double) 300;
      doubleArray1[2] = (double) 19L;
      doubleArray1[3] = (double) 19L;
      doubleArray1[4] = (double) 300;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 300;
      doubleArray2[1] = (double) 19L;
      doubleArray2[2] = (double) 300;
      doubleArray2[3] = 10.0;
      doubleArray2[4] = (double) 19L;
      doubleArray2[5] = 1.7976931348623157E308;
      doubleArray2[6] = (double) 19L;
      doubleArray2[7] = (double) 19L;
      doubleArray2[8] = (double) 300;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 10.0;
      doubleArray4[1] = (double) 19L;
      doubleArray4[2] = (double) 19L;
      doubleArray4[3] = 1.7976931348623157E308;
      doubleArray4[4] = 10.0;
      doubleArray4[5] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) 19L;
      doubleArray5[1] = 10.0;
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray5[3] = (double) 300;
      doubleArray5[4] = 10.0;
      doubleArray5[5] = 10.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (double) 19L;
      doubleArray6[1] = 4.6;
      doubleArray6[2] = (double) 19L;
      doubleArray6[3] = (double) 19L;
      doubleArray6[4] = (double) 300;
      doubleArray6[5] = 10.0;
      doubleArray6[6] = (double) 19L;
      doubleArray6[7] = (double) 19L;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.setBins(300);
      discretize0.getCutPoints(2);
      discretize0.invertSelectionTipText();
      discretize0.attributeIndicesTipText();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.941659471292561
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("c(AQWV*Ovy72&XI\"", arrayList0, 1736);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".arff", linkedList1, 865);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0);
      instances1.toArray();
      discretize0.setInputFormat(instances1);
      DenseInstance denseInstance0 = new DenseInstance(865);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.batchFinished();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.toArray();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.offerFirst("66JqQ{lNL{{Nv(TYBh");
      linkedList3.add("-TxAs]V'2Z");
      linkedList3.removeAll(linkedList2);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2078209979));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2078209979
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("c(AQWV*Ovy72&XI\"", arrayList0, 1736);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".arff", linkedList0, 865);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      DenseInstance denseInstance0 = new DenseInstance(865);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2440);
      SparseInstance sparseInstance0 = new SparseInstance(2440);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2440);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.062257174304032
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemInUtil.addInputLine("UMJUA@;X6+ ]OD>-Y");
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ABaAKTi6n", arrayList0, 865);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.offerLast("+Z>viNgx;");
      Attribute attribute0 = new Attribute("+Z>viNgx;", 865);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setInputFormat(instances0);
      Attribute attribute1 = new Attribute("string");
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Attribute attribute2 = new Attribute("x8h", instances0, protectedProperties1);
      Attribute.typeToString((-2101792504));
      attribute0.copy("otn*'K+K");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@attribute");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("@data");
      linkedList3.add("relational");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(77);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("9ym1$_ZzO;1}fKvF", arrayList0, 865);
      instances0.lastIndexOf(arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("26r$iV`");
      Attribute attribute0 = new Attribute("26r$iV`", linkedList0, (-1994091956));
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      attribute0.setWeight((-1));
      Instances instances1 = new Instances(instances0, (-1));
      linkedList0.pollLast();
      Discretize discretize1 = new Discretize("26r$iV`");
      try { 
        discretize1.setInputFormat(instances1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at 26r$iV`
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      discretize0.setIgnoreClass(false);
      discretize0.getUseEqualFrequency();
      int[] intArray0 = new int[6];
      intArray0[0] = (-3548);
      intArray0[1] = 23;
      intArray0[2] = 1530;
      intArray0[3] = 2756;
      intArray0[4] = 1531;
      int int0 = (-934);
      intArray0[5] = (-934);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-4465.9), intArray0, 34);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("+'pp", "+'pp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Discretize discretize0 = new Discretize("\tUse bin numbers rather than ranges for discretized attributes.");
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) (byte)0;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      String[] stringArray0 = new String[24];
      stringArray0[0] = "\tUse bin numbers rather than ranges for discretized attributes.";
      stringArray0[1] = "-R <col1,cl2-col4,...>";
      stringArray0[23] = "\tUse bin numbers rather than ranges for discretized attributes.";
      stringArray0[3] = "-R<col1,col2-col4,...>";
      stringArray0[4] = "\tUse bin numbers rather than ranges for discretized attributes.";
      stringArray0[5] = "-R <col1,cl2-col4,...>";
      stringArray0[6] = "\tUse bin numbers rather than ranges for discretized attributes.";
      stringArray0[7] = "\tUse bin numbers rather than ranges for discretized attributes.";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "G)ME$?dR+T";
      stringArray0[1] = "6V;i9TgP";
      stringArray0[2] = "1,1,1,1";
      discretize0.getBinRangesString((-2310));
      stringArray0[3] = "%E&j~q60UzkrR_'}Y\"";
      discretize0.setInvertSelection(true);
      stringArray0[4] = "J7:~lo@,i_1p(";
      stringArray0[5] = "-A0fw-";
      discretize0.getCapabilities();
      stringArray0[6] = "`;,:7}3}7x@R||v3";
      discretize0.setBins((-1773));
      discretize0.getUseEqualFrequency();
      discretize0.getBins();
      discretize0.findNumBinsTipText();
      discretize0.invertSelectionTipText();
      System.setCurrentTimeMillis((-1773));
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1773), discretize0.getBins());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EY>NTv53zx6kZY5P3");
      double[] doubleArray1 = new double[10];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      doubleArray1[1] = 1020.5374178213399;
      doubleArray0[1] = doubleArray0[0];
      double[] doubleArray2 = new double[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1020.5374178213399;
      doubleArray3[3] = 0.0;
      double[] doubleArray4 = new double[8];
      doubleArray4[2] = 1020.5374178213399;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 1020.5374178213399;
      doubleArray1[6] = 0.0;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray5 = new double[20];
      doubleArray5[0] = 0.0;
      doubleArray0[1] = doubleArray5;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SV");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(1088);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1088
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedList1.pollLast();
      linkedList1.listIterator();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.containsAll(linkedList2);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList1.parallelStream();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals(7, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      StringReader stringReader0 = new StringReader("archive");
      StringReader stringReader1 = new StringReader("archive");
      properties0.load((Reader) stringReader0);
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties5);
      properties1.clear();
      Attribute attribute0 = new Attribute("7G5_(!ow", protectedProperties0);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 2;
      doubleArray2[7] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 4;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 1225.3859410203486;
      doubleArray4[1] = (double) 3;
      doubleArray4[2] = (double) 2;
      doubleArray4[3] = (double) 4;
      doubleArray4[4] = (-1732.7);
      doubleArray4[5] = 1.7976931348623157E308;
      doubleArray4[6] = (double) 3;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -473
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "packageListWithVersion.txt");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Options:\n\t-list-packages <all | installed | available>\n\t-package-info <repository | installed | archive> <packageName | packageZip>\n\t-install-package <packageName | packageZip | URL> [version]\n\t-uninstall-package packageName\n\t-refresh-cache");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'B%2|f2'";
      stringArray0[2] = "Options:\n\t-list-packages <all | installed | available>\n\t-package-info <repository | installed | archive> <packageName | packageZip>\n\t-install-package <packageName | packageZip | URL> [version]\n\t-uninstall-package packageName\n\t-refresh-cache";
      stringArray0[1] = "Options:\n\t-list-packages <all | installed | available>\n\t-package-info <repository | installed | archive> <packageName | packageZip>\n\t-install-package <packageName | packageZip | URL> [version]\n\t-uninstall-package packageName\n\t-refresh-cache";
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(false);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6174998898943667
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.m_NumBins = (-1688);
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      discretize0.getMakeBinary();
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals((-1688), discretize0.getBins());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[12];
      doubleArray1[1] = 1001.3145;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1001.3145;
      doubleArray2[4] = 1001.3145;
      doubleArray2[7] = 1001.3145;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[2] = 1001.3145;
      doubleArray3[3] = 1001.3145;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      properties2.storeToXML((OutputStream) byteArrayOutputStream0, "* @d27;Grja3-a@Ko");
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties2);
      Properties properties3 = new Properties();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize("Myv&Eh$y#");
      discretize0.getCapabilities();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      discretize0.m_UseBinNumbers = true;
      discretize0.setFindNumBins(true);
      discretize0.m_DefaultCols = "Myv&Eh$y#";
      discretize0.setInvertSelection(true);
      discretize0.setAttributeIndices("G,m");
      discretize0.getUseBinNumbers();
      discretize0.useEqualFrequencyTipText();
      discretize0.findNumBinsTipText();
      discretize0.useBinNumbersTipText();
      DenseInstance denseInstance0 = new DenseInstance(68);
      denseInstance0.copy();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("\tUse bin numbers rather than ranges for discretized attributes.");
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 563;
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(563.0, double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize("DXWf7O9Wdf:,@=~");
      discretize0.m_MakeBinary = true;
      discretize0.setInvertSelection(true);
      discretize0.setIgnoreClass(true);
      discretize0.getInvertSelection();
      discretize0.toString();
      discretize0.getCapabilities();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.findNumBinsTipText();
      discretize0.m_ClassIndex = 1543;
      discretize0.useEqualFrequencyTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.setOutputFormat();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      discretize0.m_FindNumBins = true;
      Instances instances0 = new Instances(" J7:~lo@,i_1p(", arrayList0, 53);
      instances0.lastIndexOf(arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("+SI{R+!9oji&rv_=_");
      Attribute attribute0 = new Attribute("@data", linkedList0, 865);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances1 = new Instances(instances0, (-2777));
      linkedList0.pollLast();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "+'pp";
      Discretize discretize0 = new Discretize("+'pp");
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.m_FindNumBins = true;
      discretize0.makeBinaryTipText();
      discretize0.getCapabilities();
      discretize0.getFindNumBins();
      discretize0.attributeIndicesTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "";
      Discretize discretize0 = new Discretize("");
      discretize0.setInvertSelection(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "o'yP?cT";
      stringArray0[1] = "+'{&(8U$a!%\"6H";
      stringArray0[2] = "    if (inst.numInstances() > 0) {\n";
      stringArray0[3] = "8o";
      stringArray0[4] = "%E&j~q60UzkXR_'}Y\"";
      stringArray0[5] = "cB";
      stringArray0[6] = "O";
      stringArray0[7] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[8] = "-";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5719579500515657
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize("%'&jx?60Uz%rR_[}Y\"");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%'&jx?60Uz%rR_[}Y\"";
      stringArray0[1] = "%'&jx?60Uz%rR_[}Y\"";
      stringArray0[2] = "-B";
      stringArray0[3] = "-R <col1,col2-col4,...>";
      stringArray0[4] = "%'&jx?60Uz%rR_[}Y\"";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-R <col1,col2-col4,...>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2325);
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = (-2325);
      intArray0[3] = (-2325);
      SparseInstance sparseInstance0 = new SparseInstance((-2325.0), doubleArray0, intArray0, 1487);
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      String string0 = discretize0.makeBinaryTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"1H^YAvcSA.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("x_kbj?r5!Pi}");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"1H^YAvcSA.");
      Discretize discretize0 = new Discretize("0/'<");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setUseBinNumbers(false);
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 298.367261217;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(278);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2440);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2440);
      Discretize discretize0 = new Discretize();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2440;
      doubleArray1[1] = (double) 2440;
      doubleArray1[3] = 2999.5519;
      doubleArray1[5] = (double) 2440;
      binarySparseInstance2.s_numericAfterDecimalPoint = 2440;
      doubleArray1[7] = (double) 2440;
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(2440, doubleArray1);
      String[] stringArray0 = discretize0.getOptions();
      Filter.runFilter(discretize0, stringArray0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(6, stringArray0.length);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-1059));
      Discretize discretize1 = new Discretize();
      Filter.makeCopies(discretize1, 79);
      discretize0.binsTipText();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1059);
      discretize0.setBins(79);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1059), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        sparseInstance0.relationalValue(2440);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.setDebug(false);
      Filter[] filterArray0 = new Filter[0];
      multiFilter0.setFilters(filterArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter2.setDebug(false);
      Filter.makeCopies(multiFilter2, 16);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "first-last";
      stringArray0[1] = "'iR";
      Filter.runFilter(multiFilter0, stringArray0);
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.setDebug(false);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      Filter[] filterArray0 = multiFilter2.getFilters();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      Filter[] filterArray1 = new Filter[3];
      filterArray1[0] = (Filter) multiFilter1;
      filterArray1[1] = (Filter) multiFilter1;
      filterArray1[2] = (Filter) allFilter0;
      multiFilter4.setFilters(filterArray0);
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      multiFilter2.setDebug(false);
      MultiFilter multiFilter9 = new MultiFilter();
      MultiFilter multiFilter10 = new MultiFilter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.parallelStream();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, int0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("@u1z");
      mockPrintStream0.print((-876.6F));
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object object1 = new Object();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "@u1z");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      printStream0.println((-876.6F));
      Locale locale1 = Locale.CHINA;
      locale0.getUnicodeLocaleKeys();
      Object object2 = new Object();
      Locale locale2 = Locale.ITALY;
      mockPrintStream0.print("@u1z");
      mockPrintStream0.println(2L);
      mockPrintStream0.println(19);
      MockPrintStream mockPrintStream2 = new MockPrintStream("-y_;>ekErT90k?hSf");
      mockPrintStream0.append('U');
      MockPrintStream mockPrintStream3 = new MockPrintStream("Depends");
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getFilters();
      Discretize discretize0 = new Discretize("Depends");
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      Filter.makeCopies(multiFilter3, 16);
      Filter.makeCopies(multiFilter3, 2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (-4729.75214);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 16;
      doubleArray0[6] = (double) 16;
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      int[] intArray0 = new int[4];
      intArray0[0] = (-2);
      intArray0[1] = 105;
      intArray0[2] = 105;
      intArray0[3] = (-2);
      discretize0.setAttributeIndicesArray(intArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      SystemInUtil.addInputLine("");
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-3);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-1,106,106,-1";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "t -;ri,UX+aSohzJ";
      Filter.runFilter(discretize0, stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[13];
      stringArray0[0] = "-R<col1,col2-col4,...>";
      stringArray0[1] = "`Ak";
      stringArray0[2] = "%'&jx?60Uz%rR_[}Y\"";
      stringArray0[3] = "`Ak";
      stringArray0[4] = "`Ak";
      stringArray0[5] = "`Ak";
      stringArray0[6] = "-R <col1,col2-col4,...>";
      stringArray0[7] = "Sum (doubles): ";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedList1.pollLast();
      linkedList1.listIterator();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.add((Locale.LanguageRange) null);
      linkedList3.poll();
      linkedList3.add((Locale.LanguageRange) null);
      linkedList3.add((Locale.LanguageRange) null);
      linkedList3.containsAll(linkedList2);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList1.parallelStream();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getRevision();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("8964", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EY>NTv53zx6kZY5P3");
      double[] doubleArray1 = new double[10];
      SystemInUtil.addInputLine("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      doubleArray1[1] = 1020.5374178213399;
      doubleArray0[1] = doubleArray0[0];
      double[] doubleArray2 = new double[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.setAttributeIndices("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1020.5374178213399;
      doubleArray3[3] = 0.0;
      doubleArray1[6] = 0.0;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1020.5374178213399;
      doubleArray0[1] = doubleArray4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SV");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.m_CutPoints = doubleArray0;
      int int0 = 32;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance((-301.223559), doubleArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(1272);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      int[] intArray0 = new int[6];
      intArray0[0] = 2440;
      intArray0[1] = 2440;
      intArray0[2] = 2440;
      intArray0[3] = 2440;
      intArray0[4] = 2440;
      intArray0[5] = 2440;
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedList1.pollLast();
      ListIterator<Locale.LanguageRange> listIterator0 = linkedList0.listIterator();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) linkedList1;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) listIterator0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) linkedList2;
      objectArray0[5] = (Object) listIterator0;
      linkedList3.toArray(objectArray0);
      linkedList3.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList1.parallelStream();
      int[] intArray0 = new int[5];
      intArray0[0] = 1994;
      intArray0[1] = (-1968526675);
      intArray0[2] = 34;
      intArray0[3] = 70;
      intArray0[4] = (-956);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.908238329122374
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 298.367261217;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(237);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2440);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2440;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ".+(W&XmiU+";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getCapabilities();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "[H/|{iz.-k=vl:";
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      DenseInstance denseInstance0 = new DenseInstance(105);
      Discretize discretize0 = new Discretize("Options:\n\t-list-packages <all | installed | avilable>\n\t-package-info <repository | installed | archive> <packageName | packageZip>\n\t-install-package <packageName | packageZip | URL> [version]\n\t-uninstall-package packageName\n\t-refresh-cache");
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      multiFilter0.getFilters();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      Filter[] filterArray0 = new Filter[4];
      filterArray0[0] = (Filter) allFilter0;
      filterArray0[1] = (Filter) multiFilter1;
      filterArray0[2] = (Filter) multiFilter2;
      filterArray0[3] = (Filter) multiFilter2;
      multiFilter5.setFilters(filterArray0);
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      MultiFilter multiFilter10 = new MultiFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      MultiFilter multiFilter13 = new MultiFilter();
      MultiFilter multiFilter14 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize("Y");
      discretize0.listOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "";
      Discretize discretize0 = new Discretize("");
      discretize0.setUseEqualFrequency(false);
      double[] doubleArray0 = new double[8];
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize("1,1,1,1,1,-1");
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.setDebug(false);
      MultiFilter multiFilter1 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      multiFilter1.isStreamableFilter();
      AllFilter allFilter1 = new AllFilter();
      Filter[] filterArray0 = new Filter[3];
      filterArray0[0] = (Filter) multiFilter1;
      filterArray0[1] = (Filter) multiFilter0;
      Filter.makeCopy(multiFilter1);
      Filter.makeCopy(filterArray0[0]);
      filterArray0[2] = filterArray0[0];
      multiFilter0.setFilters(filterArray0);
      MultiFilter multiFilter2 = new MultiFilter();
      AllFilter allFilter2 = new AllFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      Filter.makeCopies(filterArray0[0], 125);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";IE|l1Z";
      stringArray0[2] = "tQ\th%Bz)H]qNDn&a";
      multiFilter3.isStreamableFilter();
      stringArray0[2] = "x7gI1hSP#.je.)";
      stringArray0[3] = "1,1,1,1";
      Filter.runFilter(multiFilter3, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.setDebug(true);
      MultiFilter multiFilter1 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      multiFilter1.isStreamableFilter();
      AllFilter allFilter1 = new AllFilter();
      Filter[] filterArray0 = new Filter[3];
      filterArray0[0] = (Filter) multiFilter1;
      filterArray0[1] = (Filter) multiFilter0;
      Filter.makeCopy(multiFilter1);
      Filter.makeCopy(filterArray0[0]);
      filterArray0[2] = filterArray0[0];
      multiFilter0.setFilters(filterArray0);
      MultiFilter multiFilter2 = new MultiFilter();
      Filter.makeCopy(allFilter1);
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      Filter.makeCopies(filterArray0[0], 125);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";IE|l1Z";
      stringArray0[1] = "tQ\th%Bz)H]qNDn&a";
      multiFilter3.isStreamableFilter();
      stringArray0[2] = "x7gI1hSP#.je.)";
      stringArray0[3] = "1,1,1,1";
      Filter.runFilter(multiFilter3, stringArray0);
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedList2.add((Object) linkedList1);
      linkedList1.containsAll(linkedList2);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList1.parallelStream();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(4, stringArray0.length);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter[] filterArray0 = new Filter[6];
      filterArray0[0] = (Filter) multiFilter0;
      filterArray0[1] = (Filter) multiFilter0;
      filterArray0[2] = (Filter) multiFilter0;
      filterArray0[3] = (Filter) multiFilter0;
      filterArray0[4] = (Filter) multiFilter0;
      filterArray0[5] = (Filter) multiFilter0;
      multiFilter0.setFilters(filterArray0);
      Filter.makeCopies(filterArray0[5], 15);
      Filter.makeCopies(filterArray0[3], 1556);
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(15);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-R<col1,col2-col4,...>";
      stringArray0[1] = "`Ak";
      stringArray0[2] = "-R <col1,col2-col4,...>";
      Discretize discretize0 = new Discretize("'All'");
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-R<col1,col2-col4,...>";
      stringArray0[1] = "`Ak";
      stringArray0[2] = "-R <col1,col2-col4,...>";
      Discretize discretize0 = new Discretize();
      String[] stringArray1 = new String[0];
      discretize0.setOptions(stringArray1);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Unknown attribute type '";
      stringArray0[1] = "symbolic";
      stringArray0[2] = "7 KjdH+g>0OQ+b.w|<*";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "--k+1Uc";
      Discretize.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 298.367261217;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(237);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(298.367261217, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      Discretize discretize0 = new Discretize();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2440;
      doubleArray1[1] = (double) 2440;
      doubleArray1[2] = (double) 2440;
      doubleArray1[3] = 2999.5519;
      doubleArray1[5] = (double) 2440;
      binarySparseInstance2.s_numericAfterDecimalPoint = 2440;
      doubleArray1[7] = (double) 2440;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2440, doubleArray1);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      multiFilter0.getFilters();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      Filter[] filterArray0 = new Filter[4];
      filterArray0[0] = (Filter) allFilter0;
      filterArray0[1] = (Filter) multiFilter1;
      filterArray0[2] = (Filter) multiFilter2;
      filterArray0[3] = (Filter) multiFilter2;
      multiFilter5.setFilters(filterArray0);
      MultiFilter multiFilter6 = new MultiFilter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(false);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "b2.Wx7C";
      stringArray0[1] = "cB";
      stringArray0[2] = "randomize";
      stringArray0[3] = "B?nH*!ls'&ZVaUj~m";
      Discretize.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }
}
