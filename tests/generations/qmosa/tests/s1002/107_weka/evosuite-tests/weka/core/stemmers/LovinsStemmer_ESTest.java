/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 03:57:29 GMT 2020
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1125334880364024
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("Julie Beth Lovins");
      lovinsStemmer1.stemString("ex");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("Key words used for searching or possibly for annotation.");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.stemString("e2jerid");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.toString();
      lovinsStemmer4.stemString("cnUM{f? 2>pm4zZp");
      lovinsStemmer0.stemString("key word us for search or pos for annot.");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~0|#6,!Xtm3`e=[g";
      stringArray0[1] = "cnUM{f? 2>pm4zZp";
      stringArray0[2] = "key word us for search or pos for annot.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.stemString("e2jrud");
      lovinsStemmer1.stem("~0|#6,!Xtm3`e=[g");
      lovinsStemmer5.stemString("arly");
      TechnicalInformation technicalInformation0 = lovinsStemmer3.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2129888635026802
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("en");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("wV<9C`");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("en");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("%r8w(snet");
      lovinsStemmer0.stemString("%r8w(snet");
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer0.stem("!YO<e:b>EMm");
      assertEquals("!yo<e:b>em", string1);
      
      String string2 = lovinsStemmer1.stemString("Variance: ");
      assertEquals("vari: ", string2);
      
      lovinsStemmer2.getRevision();
      lovinsStemmer1.stem("@]]8Q84@4");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer1.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.088431348979503
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("B~aMRY\\*+#,Bb");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("B~aMRY\\*+#,Bb");
      assertEquals("b~amr\\*+#,bb", string0);
      
      String string1 = lovinsStemmer0.stem("b~amr\\*+#,bb");
      assertEquals("b~amr\\*+#,b", string1);
      
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1945119673730136
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[2] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("CHAPTER");
      String string0 = lovinsStemmer0.stem("cid");
      assertEquals("cis", string0);
      
      lovinsStemmer0.stem("array-dimensions of 'new string[3][4][]': lud");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("array-dimensions of 'new string[3][4][]': lus");
      assertEquals("arra-dimens of 'new string[3][4][]': lus", string1);
      
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getRevision();
      String string3 = lovinsStemmer1.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.342256793554883
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "{.R$m";
      stringArray0[2] = "P|j";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("P|j");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("P|j");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("<*:gJG#N>");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("P|j");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.stem("olv");
      lovinsStemmer1.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2900432904062367
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = null;
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.stemString("iull");
      lovinsStemmer0.stem("l<!MdOq-");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("cid");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.stemString("!f");
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer4.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer4.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1380525700501423
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("l<!MdOq-");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("ons");
      assertEquals("on", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string1);
      
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1671887510327656
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer2.stemString("lessness");
      String string0 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("eninglud");
      lovinsStemmer1.stemString("eninglus");
      lovinsStemmer2.stem("|Clq+rI<");
      lovinsStemmer3.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer3.getTechnicalInformation();
      String string1 = lovinsStemmer3.stemString("t?|X'kF/!;O$1A");
      assertEquals("t?|x'kf/!;o$1a", string1);
      
      lovinsStemmer3.stem("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer4.stemString("Y-i;BYn_M{e~@mGG$4");
      String string3 = lovinsStemmer2.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1901230791849713
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("array-dimensions of 'new string[3][4][]': ond");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.stem("FSOpC@");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer3.stem("+m\"Wj1d.sY5Q9=GG");
      lovinsStemmer0.stem("ert");
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer3.stem("+m\"Wj1d.sY5Q9=GG");
      assertEquals("+m\"wj1d.sy5q9=g", string1);
      
      lovinsStemmer2.stemString("IN2g;!J>Bq`$");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer3.stem("FSOpC@");
      lovinsStemmer2.stem("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      lovinsStemmer1.getRevision();
      String string2 = lovinsStemmer1.stemString("array-dimensions of 'new string[3][4][]': ons");
      assertEquals("arra-dimens of 'new string[3][4][]': on", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.107555386991017
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka.core.Utils";
      stringArray0[1] = "NJd)N{gmo(_bn.Rb].";
      stringArray0[2] = "weka.core.Utils";
      stringArray0[3] = "gYyhXN[@6K~v9";
      stringArray0[4] = "K";
      stringArray0[5] = "rud";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[7];
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray1);
      String string0 = lovinsStemmer0.stemString("P|^Hj");
      assertEquals("p|^hj", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("p|^hj");
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("icide");
      String string2 = lovinsStemmer0.stemString("the year of publication or, for an unpublished work, the year it was written. generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.ert");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.ers", string2);
      
      lovinsStemmer2.stem("Warning, unable to load properties file(s) from system resource (Utils.java): ");
      String string3 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      lovinsStemmer2.getRevision();
      lovinsStemmer1.stem("The organization that sponsors a conference or that publishes a manual.");
      lovinsStemmer1.toString();
      String string4 = lovinsStemmer1.getRevision();
      assertEquals("8034", string4);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1393926514443387
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stemString("P|^Hj");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("P|^Hj");
      lovinsStemmer0.stem("p|^hj");
      lovinsStemmer0.stem("p|^hj");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("D-ZDC'*");
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("p|^hj");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer1.stemString("p|^hj");
      assertEquals("p|^hj", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("ental");
      assertEquals("ent", string1);
      
      lovinsStemmer1.stemString("ent");
      lovinsStemmer2.stem("1");
      lovinsStemmer2.stem("p|^hj");
      String string2 = lovinsStemmer2.stemString("z8a{YW@1NDXo~^4<c");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string3 = lovinsStemmer3.stemString("z8{yw@1ndx~^4<c");
      assertTrue(string3.equals((Object)string2));
      
      String string4 = lovinsStemmer2.stem("ond");
      assertEquals("ons", string4);
      
      lovinsStemmer3.stem("s&KD+G}Y0b,0");
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      String string5 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string5);
      
      String string6 = lovinsStemmer0.stem("p|^hj");
      assertEquals("p|^hj", string6);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1516126196811611
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "{.R$m";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P|^Hj";
      stringArray0[1] = "{.R$m";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("{.R$m");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ical");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("jzf0!&\fOeaPO");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = "icide";
      lovinsStemmer1.stemString("P|^Hj");
      // Undeclared exception!
      try { 
        lovinsStemmer3.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0679889819361281
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("(X$B*x3W|TD.>7<;");
      lovinsStemmer0.stem("(X$B*x3W|TD.>7<;");
      lovinsStemmer0.stemString("Induction of decision trees");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("OSu@,.B=N");
      lovinsStemmer0.stemString("p)f[|&>");
      lovinsStemmer0.stemString("g%XAdFbV]");
      lovinsStemmer0.stemString("induc of decis tree");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("p)f[|&>");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g%xadfbv]";
      stringArray0[1] = "6LpH0KeNZ0;|U1@@E+#";
      stringArray0[2] = "g%XAdFbV]";
      stringArray0[3] = "(x$b*x3w|td.>7<;";
      stringArray0[4] = "p)f[|&>";
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1000050829965435
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("P|^Hj");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("p|^hj");
      lovinsStemmer0.stemString(".%Cy<TKf/;r");
      String string0 = "The organization that sponsors a conference or that publishes a manual.";
      lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Variance: ");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("th organ that sponsor a confer or that publish a manu.");
      lovinsStemmer0.stemString("vari: ");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.165240473811559
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = null;
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "8034";
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("(wYvEovZHQtR");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      lovinsStemmer1.stem("Morgan Kaufmann Publishers");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1896308122629509
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("bookrudtex");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("bookrudtic");
      assertEquals("bookrudt", string0);
      
      String string1 = lovinsStemmer1.stemString("W@iXbV");
      assertEquals("w@ixbv", string1);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("lingucid");
      lovinsStemmer2.stem("weka.core.stemmers.LovinsStemmer");
      String string3 = lovinsStemmer1.stemString("rpt");
      assertEquals("rb", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1848393344807406
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "P|^Hj";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("ement");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.stem("{.R$m");
      lovinsStemmer0.stemString("I");
      String string0 = lovinsStemmer0.stemString("Original array with NaN (doubles): ");
      assertEquals("origin arra with nan (doubl): ", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("8034");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("8034");
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer2.toString();
      String string2 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string2);
      
      lovinsStemmer3.getRevision();
      String string3 = lovinsStemmer1.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3054142551851817
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("<VC&X?/f2");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString(";");
      lovinsStemmer2.stemString("");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stemString("j^P");
      assertEquals("j^p", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1549307482809672
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "the mathematical reviews number.vad";
      stringArray0[2] = "P|^Hj";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("fr?\"?&Dn1");
      lovinsStemmer0.stemString("d,(Nc[W1");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("the mathematical reviews number.vad");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stemString("d,(Nc[W1");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer4.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.092356441176515
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("the database key of the entry being cross referenced. any fields that are missing from the current record are inherited from the field being cross referenced.et");
      assertEquals("th databas key of th entr being cros refer. any field that ar mis from th cur record ar inherit from th field being cros refer.et", string0);
      
      lovinsStemmer0.stemString("");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Correlation: ");
      lovinsStemmer0.stemString("");
      lovinsStemmer1.stemString("");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ex5_L4K} ,Yl?;g");
      String string2 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string2);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      lovinsStemmer1.stem("erid");
      String string4 = lovinsStemmer1.stemString("");
      assertFalse(string4.equals((Object)string3));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1614662921410885
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("U2");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("IRu$v");
      lovinsStemmer0.stemString("iru$v");
      lovinsStemmer1.stemString("{T#[;g10LH");
      lovinsStemmer0.stemString("cao9ix");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation1 = lovinsStemmer4.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0824104429350578
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("Julie Beth Lovins");
      lovinsStemmer1.stemString("ex");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      TechnicalInformation technicalInformation0 = lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer1.stem("fp");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.108967101497252
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lid";
      stringArray0[1] = "fulness";
      stringArray0[2] = "rud";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("fulness");
      lovinsStemmer2.stemString("The organization that sponsors a conference or that publishes a manual.");
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer2.stemString("lid");
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.stemString("fulness");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2578552613565008
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.getRevision();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.toString();
      String string0 = lovinsStemmer2.stemString("ert");
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getRevision();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0876578652712963
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ators");
      lovinsStemmer0.stemString("dicpand");
      lovinsStemmer0.stemString("dicpans");
      lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      lovinsStemmer0.stemString("dicpans");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("mit");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ariza*ble");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1118334923499005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem("INBOOK");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("t*<$2neT0\"U/|/qj} V");
      lovinsStemmer0.stem("izement");
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("No value given for -");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("metr");
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer0.stemString("t*<$2net0\"u/|/qj} v");
      lovinsStemmer0.stemString("mit");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.159095965825899
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("=|0c{pmkl@");
      lovinsStemmer0.stem("=|0c{pmkl@");
      String[] stringArray0 = new String[10];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("Pe");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("icalism");
      lovinsStemmer0.stem("P ");
      String string0 = lovinsStemmer0.stemString("tex");
      assertEquals("tic", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("An abstract of the work.");
      assertEquals("an abstract of th work.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("Gor,MBx>+0N8KI\fvA");
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stem("type");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("tex");
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string3 = lovinsStemmer1.stem("{.r$mend");
      assertEquals("{.r$mens", string3);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1171433227403567
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "P|j";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("P|j");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("P|j");
      lovinsStemmer0.stemString("<*:gJG#N>");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("P|j");
      lovinsStemmer0.stemString("istuad");
      lovinsStemmer0.stem("P|j");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("f42IsLqoeLbc@*y");
      lovinsStemmer0.stem("idine");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("<*:gJG#N>");
      String string1 = lovinsStemmer0.stemString("istuas");
      assertEquals("istu", string1);
      
      lovinsStemmer1.stem("istu");
      String string2 = lovinsStemmer0.stemString("the year of publication or, for an unpublished work, the year it was written. generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.erterid");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.erteris", string2);
      
      String string3 = lovinsStemmer0.stem("the year of publication or, for an unpublished work, the year it was written. generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.ertond");
      assertEquals("the year of publication or, for an unpublished work, the year it was written. generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.ertons", string3);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1182682834766795
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("Pe");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("incollechSon");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("bookrusend");
      assertEquals("bookrusens", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1747653394370123
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("dicpand");
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.stemString("dicpans");
      lovinsStemmer0.stemString("vadpicert");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("Y.obt vt,kv");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("vadpicrud");
      lovinsStemmer0.stemString("metr");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString(".&'.0*4f0i");
      assertEquals(".&'.0*4f0", string0);
      
      lovinsStemmer0.stem("meter");
      lovinsStemmer0.stemString("\n");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("{.r$mond");
      assertEquals("{.r$mons", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2083667341473585
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("ialize");
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("Y%ux'v9sI#_EFnA=7");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("ex");
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.toString();
      lovinsStemmer2.stemString("il");
      lovinsStemmer0.stemString("cI /X");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0731924986019221
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("sdC");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.stem("_*x(,&zyz");
      assertEquals("_*x(,&zys", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0436711563148766
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("o9:-UohXb0[:%]");
      lovinsStemmer0.stem("j3sc7%(yinfr-fkzet");
      String string0 = lovinsStemmer0.stemString("The Library of Congress Call Number. I've also seen this as lib-congress.");
      assertEquals("th libr of congres cal number. i'v als seen th as lib-congres.", string0);
      
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("Any additional information that can help the reader. The first word should be capitalized.");
      assertEquals("any addit inform that can help th reader. th first word should be capital.", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.2151924444806048
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ionate");
      lovinsStemmer0.stem("ion");
      lovinsStemmer0.stemString("`75$Nyu{mMsCj#?");
      String string0 = lovinsStemmer0.stem("ex");
      assertEquals("ex", string0);
      
      lovinsStemmer0.stemString("ion");
      lovinsStemmer0.stem(",c,SK");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("$EE~Dk2ZFb~q ");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.stemString("$VuadL'=Tqv@P");
      assertEquals("$vuadl'=tqv@p", string2);
      
      lovinsStemmer0.stem("ion");
      lovinsStemmer1.stem("&T<P3");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string3 = lovinsStemmer2.stemString("m2zL4>'FaPKs^");
      assertEquals("m2zl4>'fapk^", string3);
      
      String string4 = lovinsStemmer1.stem("allic");
      assertEquals("al", string4);
      
      String string5 = lovinsStemmer0.stem("ion");
      assertEquals("ion", string5);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1482230373756015
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[0] = "{.R$m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("{.R$m");
      lovinsStemmer0.stemString("mit");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("The International Standard Book Number (10 digits).");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("'oyR{4~[");
      String string0 = lovinsStemmer2.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.ond");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.ons", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer2.stemString("ix");
      assertEquals("ix", string1);
      
      lovinsStemmer1.stemString("lux");
      String string2 = lovinsStemmer2.stemString("mis");
      assertEquals("mi", string2);
      
      lovinsStemmer1.stemString("}bf-,-[)");
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("The International Standard Book Number (10 digits).");
      String string4 = lovinsStemmer1.stemString("'oyr{4~[");
      assertEquals("'oyr{4~[", string4);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1812776142670438
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ENccy S5s+qW=WWr8>";
      stringArray0[1] = "ENccy S5s+qW=WWr8>";
      stringArray0[2] = "bex";
      stringArray0[3] = "the library of congress call number. i've also seen this as lib-congress.bex";
      stringArray0[4] = "the library of congress call number. i've also seen this as lib-congress.erid";
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      stringArray0[5] = "|tmTbAj";
      stringArray0[6] = "ance";
      stringArray0[7] = "ariser";
      stringArray0[8] = "the library of congress call number. i've also seen this as lib-congress.pex";
      lovinsStemmer0.stem("the library of congress call number. i've also seen this as lib-congress.bex");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("A location associated with the entry, such as the city in which a conference took place.");
      lovinsStemmer0.stem("H2eD5j&Ct");
      lovinsStemmer0.stemString("'ei");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3013579487226634
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("J%v;EMHSW");
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(X$B*x3W|TD.>7<;";
      stringArray0[1] = "(X$B*x3W|TD.>7<;";
      lovinsStemmer0.stem("n($%A(,ersjL@ &h");
      stringArray0[2] = "j%v;emhsw";
      lovinsStemmer0.stemString("rud");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("Can't add object to itself!");
      assertEquals("can't ad object to itself!", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("dex");
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("!XTZMTR&Z{hS<AfvGC");
      assertEquals("!xtzmtr&z{hs<afvgc", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1278769273931821
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("rud");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("fulness");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer2.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("rud");
      lovinsStemmer3.stemString("yHb;$b-}}#e");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("rud");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer4.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.196906555082742
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("!]s'3YJ_(VD/Rp\"W2#");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string0 = lovinsStemmer3.stemString("U^8q*ihY35s,\"S;!l");
      assertEquals("u^8q*ihy35,\"s;!l", string0);
      
      lovinsStemmer0.stemString("");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("!]s'3yj_(vd/rp\"w2#");
      lovinsStemmer2.stemString("xc>8n7osGR");
      lovinsStemmer2.stemString("");
      lovinsStemmer5.stemString("u^8q*ihy35,\"s;!l");
      String string1 = lovinsStemmer5.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("/+6>\u0003jExsqW&V:");
      String string2 = lovinsStemmer2.stemString("max index (doubles): ond");
      assertEquals("mac indic (doubl): ons", string2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.152815666224999
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = null;
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("8034uad");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1077662735106932
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = null;
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("ancies");
      String string0 = null;
      // Undeclared exception!
      try { 
        lovinsStemmer2.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.104547892862988
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("Julie Beth Lovins");
      lovinsStemmer1.stemString("ex");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.stemString("optcid");
      lovinsStemmer0.stemString("juli beth lovin");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.stemString("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wek.cor.stemmer.lovinsstemmer";
      stringArray0[1] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.";
      stringArray0[2] = "optcid";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2137695626846285
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("eless");
      assertEquals("eles", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("\"]sL#'q:)^i");
      assertEquals("\"]sl#'q:)^i", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer2.stemString("Rh:`f,k{3}S6gZ");
      assertEquals("rh:`f,k{3}s6gz", string3);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1233079425667387
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("{.r$mvad");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{.r$mvas";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer3.stemString("{.r$mex");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.stemString("{.r$mvas");
      lovinsStemmer1.stemString("U^8q*ihY35s,\"S;!l");
      lovinsStemmer1.toString();
      lovinsStemmer4.stemString("U^8q*ihY35s,\"S;!l");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer4.stemString("{.r$myt");
      String string1 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer2.stemString("howpublished");
      assertEquals("howpubl", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1831616474792237
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem("INBOOK");
      lovinsStemmer0.stem("INBOOK");
      lovinsStemmer0.stemString("inbook");
      lovinsStemmer0.stem("zumn");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zumn";
      stringArray0[1] = "zumn";
      stringArray0[2] = "zumn";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("$EE~Dk2ZFb~q ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      lovinsStemmer1.stemString("");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.toString();
      String[] stringArray1 = new String[4];
      stringArray1[1] = "|<ynSlG`.yQ`Z";
      stringArray1[1] = "";
      stringArray1[3] = "inbook";
      String string1 = lovinsStemmer1.stemString("$VuadL'=Tqv@P");
      assertEquals("$vuadl'=tqv@p", string1);
      
      String string2 = lovinsStemmer1.stem("end");
      assertEquals("ens", string2);
      
      lovinsStemmer1.stem("");
      String string3 = lovinsStemmer0.stemString("m2zL4>'FaPKs^");
      assertEquals("m2zl4>'fapk^", string3);
      
      lovinsStemmer1.stem("ZUY@(0/)Xt");
      lovinsStemmer0.stem("INBOOK");
      lovinsStemmer1.stemString("inbook");
      lovinsStemmer1.stemString("");
      String string4 = lovinsStemmer0.stem("nesses");
      assertEquals("nes", string4);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0257282884183545
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1835303737806186
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("uct");
      String string0 = "=K-(XS";
      lovinsStemmer0.stem("uc");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("uct");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1226157441188966
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("ialize");
      assertEquals("ial", string0);
      
      lovinsStemmer0.stemString("ial");
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer1.stemString("rud");
      assertEquals("rus", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer1.stemString("ex");
      assertEquals("ex", string2);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.stemString("rus");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("ial");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("rus");
      String string3 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      String string4 = lovinsStemmer3.stemString("aY");
      assertEquals("ay", string4);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.117179108819897
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer3.stemString("eninglud");
      lovinsStemmer0.stem("r?j5\"zN`{xn");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getTechnicalInformation();
      lovinsStemmer1.stemString("lessness");
      lovinsStemmer2.stemString("eninglus");
      lovinsStemmer2.stemString("umpt");
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer3.stemString("r?j5\"zN`{xn");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1489611806413955
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("ex");
      assertEquals("ex", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.stemString("Get position of option -o: ");
      assertEquals("ges posit of opt -o: ", string1);
      
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1252339211623155
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lid";
      stringArray0[1] = "fulness";
      stringArray0[2] = "rud";
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("lid");
      assertEquals("lis", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stem("izationally");
      assertEquals("izat", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.stemString("Quote parse error.");
      assertEquals("quot pars error.", string2);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1343663913255022
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("6achine L{arning");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ality";
      LovinsStemmer.main(stringArray0);
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("ariza*bltex");
      assertEquals("ariz*bltic", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1141159200879447
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("{.r$mvad");
      assertEquals("{.r$mvas", string0);
      
      lovinsStemmer0.stemString("d,(Nc[W1");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "d,(nc[w1";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer3.stemString("{.r$mex");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.stemString("G*!Vi");
      lovinsStemmer1.stemString("U^8q*ihY35s,\"S;!l");
      lovinsStemmer1.toString();
      lovinsStemmer4.stemString("U^8q*ihY35s,\"S;!l");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer4.stemString("{.r$myt");
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("d,(Nc[W1");
      lovinsStemmer2.stemString("howpublished");
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer3.stemString("editor");
      assertEquals("edit", string3);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.7356907463699587
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("pex");
      assertEquals("pic", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.15017228634299
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("=|0c{pmkl@");
      assertEquals("=|0c{pmkl@", string0);
      
      lovinsStemmer0.stem("=|0c{pmkl@");
      String string1 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ality";
      stringArray0[1] = "=|0c{pmkl@";
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.15017228634299
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("=|0c{pmkl@");
      lovinsStemmer0.stem("=|0c{pmkl@");
      String string0 = lovinsStemmer0.stemString("6achine L{arning");
      assertEquals("6ach l{arn", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ality";
      LovinsStemmer.main(stringArray0);
      stringArray0[1] = "=|0c{pmkl@";
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("eousness");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0619690444446561
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[0] = "{.R$m";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("{.R$m");
      lovinsStemmer0.stem("P|^Hj");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.stem("c+][)$Wd}");
      assertEquals("c+][)$wd}", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.160020628343588
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      String string0 = "P|^Hj";
      stringArray0[2] = "P|^Hj";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("fr?\"?&Dn1");
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("U^8q*ihY35s,\"S;!l");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer2.stemString(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
