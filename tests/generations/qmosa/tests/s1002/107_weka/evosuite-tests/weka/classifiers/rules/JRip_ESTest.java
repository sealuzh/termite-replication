/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 08:58:59 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BottomUpConstructor;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      double[] doubleArray0 = new double[14];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(50);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      jRip0.getDebug();
      doubleArray0[1] = (double) 0;
      jRip_RipperRule0.setConsequent(0.0);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[24];
      intArray0[0] = 0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.0, doubleArray0);
      binarySparseInstance1.toStringNoWeight();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance1);
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("entiation");
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 946.61658609878, 1777.4005847263875);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "-";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.getOptions();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Attribute attribute0 = new Attribute("<71L|#nG", instances0);
      attribute0.getRevision();
      arrayList0.add(attribute0);
      doubleArray0[6] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      jRip0.setCheckErrorRate(false);
      jRip0.seedTipText();
      jRip0.enumerateMeasures();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      jRip0.getOptions();
      try { 
        linearNNSearch0.nearestNeighbour((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      environment0.getVariableNames();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.FRENCH;
      arrayList0.clone();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      locale0.getUnicodeLocaleAttributes();
      Locale locale2 = new Locale("");
      locale2.toLanguageTag();
      Locale locale3 = Locale.ITALY;
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("und");
      locale_LanguageRange0.getRange();
      arrayList0.add(locale_LanguageRange0);
      arrayList1.trimToSize();
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      arrayList2.add(locale2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) arrayList2, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      locale2.getDisplayCountry(locale3);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list1, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list0);
      locale3.getDisplayCountry(locale0);
      Locale locale4 = Locale.CANADA_FRENCH;
      Locale locale5 = Locale.TRADITIONAL_CHINESE;
      Locale locale6 = Locale.ITALIAN;
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.value = 564.588142626678;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      try { 
        jRip0.rulesetForOneClass(1673.0, (Instances) null, (byte)106, (-2173.9681285709));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3473508904222826
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("hWpGKU.>q/1", arrayList0, 0);
      MockRandom mockRandom0 = new MockRandom((-1L));
      Instances instances1 = instances0.resample(mockRandom0);
      Attribute attribute0 = new Attribute("", (List<String>) null, 0);
      Attribute attribute1 = new Attribute("", (List<String>) null, (-4));
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances1, (-52.0), 1);
      jRip_NominalAntd0.splitData(instances0, 2, 120);
      jRip0.setCheckErrorRate(false);
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      jRip0.checkErrorRateTipText();
      jRip0.globalInfo();
      jRip0.getCheckErrorRate();
      bottomUpConstructor0.setInstances(instances0);
      bottomUpConstructor0.setMaxRelativeLeafRadius(0.95);
      BottomUpConstructor bottomUpConstructor1 = new BottomUpConstructor();
      try { 
        bottomUpConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BottomUpConstructor", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      properties1.setProperty("K9Ev%Yh&", "K9Ev%Yh&");
      Enumeration<Object> enumeration0 = protectedProperties0.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      protectedProperties0.elements();
      protectedProperties2.replace((Object) enumeration0, (Object) properties1, (Object) protectedProperties3);
      Properties properties2 = new Properties();
      properties2.put(protectedProperties0, protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      protectedProperties0.stringPropertyNames();
      SparseInstance sparseInstance0 = new SparseInstance(64);
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("K9Ev%Yh&", linkedList0, 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      Random.setNextRandom(2096);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      String string0 = ">[)O5(XB.0gqT";
      stringArray0[0] = ">[)O5(XB.0gqT";
      jRip0.listOptions();
      String string1 = "o";
      stringArray0[1] = "o";
      stringArray0[2] = "PS.  We have compared this implementation with the original ripper ";
      String string2 = "-F";
      stringArray0[3] = "-F";
      String string3 = "";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "-F";
      stringArray1[1] = "PS.  We have compared this implementation with the original ripper ";
      stringArray1[2] = "";
      stringArray1[3] = "-F";
      try { 
        jRip0.setOptions(stringArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"PS.  We have compared this implementation with the original ripper \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9594045983154569
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("hWpGKU.>q/1", arrayList0, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte) (-76);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.8;
      doubleArray0[2] = (-649.025815183);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.8;
      doubleArray0[5] = 0.8;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-400.38);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.8, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      MockRandom mockRandom0 = new MockRandom(3004L);
      instances0.resample(mockRandom0);
      Attribute attribute0 = new Attribute("GHC`E|F;8nh2", (List<String>) null);
      Attribute attribute1 = new Attribute("XJxS3j", (List<String>) null, 0);
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 0.0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W S{a9yRz7HoxYchI");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int int0 = 0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J+%y9JzUyB!UczSjW=");
      Instances instances0 = new Instances("W S{a9yRz7HoxYchI", arrayList0, 0);
      double[] doubleArray0 = new double[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      doubleArray0[1] = (double) 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[0] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      MockRandom mockRandom0 = new MockRandom(69);
      Instances instances1 = instances0.resample(mockRandom0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Attribute attribute0 = new Attribute("@data", (List<String>) null);
      JRip jRip0 = new JRip();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      String[] stringArray0 = new String[7];
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!ny!C~',/g%2gXwe.");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Instances.mergeInstances(instances1, instances1);
      RuleStats.partition(instances1, 3);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances1, (-380.127468736647), 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "r5,Sm";
      stringArray0[1] = "Ck";
      jRip0.getCapabilities();
      stringArray0[2] = "-E";
      jRip0.setFolds(5);
      stringArray0[3] = "t4F0rqa;$IN,nr%mt|&";
      jRip0.setOptions(stringArray0);
      double double0 = jRip0.getMinNo();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      protectedProperties3.propertyNames();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      protectedProperties5.stringPropertyNames();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1974);
      intArray0[1] = (-1974);
      intArray0[2] = (-1974);
      intArray0[3] = (-1974);
      intArray0[4] = (-1974);
      intArray0[5] = (-1974);
      intArray0[6] = (-1974);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("\tDo not apply the filter to instances that arrive after the first\n\t(training) batch. The default is to apply the filter (i.e.\n\tthe filter may not return an instance if it matches the remove criteria)", 80);
      JRip jRip1 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String[] stringArray0 = new String[1];
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      jRip_NominalAntd0.maxInfoGain = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(502);
      jRip_NominalAntd0.covers(denseInstance0);
      String string0 = jRip1.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-2432.28));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0, doubleArray0);
      binarySparseInstance0.toStringNoWeight();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(3);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@relation";
      stringArray0[5] = "{}";
      stringArray0[6] = "@data";
      stringArray0[7] = "@relation";
      stringArray0[8] = "weka.classifiers.trees.LMT";
      Instances.main(stringArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(435);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((SparseInstance) binarySparseInstance8);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7578996213295177
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-49);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t]EL<a+;fp&6G");
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t72:.}b");
      String[] stringArray0 = new String[1];
      jRip0.setUsePruning(false);
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      stringArray0[0] = "";
      jRip0.setOptions(stringArray0);
      jRip0.getCapabilities();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = Environment.getSystemWide();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("", list0, 86);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      // Undeclared exception!
      try { 
        protectedProperties4.put(object0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      jRip_RipperRule0.setConsequent(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("@data", linkedList0, 0);
      JRip jRip1 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      binarySparseInstance0.setMissing(0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      Instances instances1 = null;
      try {
        instances1 = new Instances(instances0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.813782155210461
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Properties properties0 = new Properties();
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      linkedList0.iterator();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      Attribute attribute0 = new Attribute(".w,Cg-'TDl!Cha", list0);
      jRip0.getOptions();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.value = 3818.649718;
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      StringReader stringReader0 = new StringReader("real");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 316);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1);
      BufferedReader bufferedReader3 = null;
      try {
        bufferedReader3 = new BufferedReader(stringReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.getOptimizations();
      jRip0.toString();
      jRip0.optimizationsTipText();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip0.optimizationsTipText();
      jRip_NumericAntd0.getCover();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getBIFHeader();
      Instances instances0 = bayesNet0.m_Instances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Environment environment0 = new Environment();
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.getOptions();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[4];
      intArray0[2] = 3;
      intArray0[1] = 3;
      intArray0[3] = (-45);
      CoverTree coverTree1 = new CoverTree();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      PrincipalComponents principalComponents2 = new PrincipalComponents();
      PrincipalComponents principalComponents3 = new PrincipalComponents();
      principalComponents2.setTransformBackToOriginal(true);
      CoverTree coverTree2 = new CoverTree();
      PrincipalComponents principalComponents4 = new PrincipalComponents();
      PrincipalComponents principalComponents5 = new PrincipalComponents();
      try { 
        principalComponents2.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.637541774063024
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      double[] doubleArray0 = new double[8];
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances1 = new Instances("", arrayList0, 133);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      Attribute attribute1 = new Attribute("\tWhether to 0=normalize/1=standardize/2=neither.\n\t(default 0=normalize)", (List<String>) null, 3);
      JRip jRip1 = new JRip();
      jRip0.usePruningTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances1, 1, 0.975);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1665.6488075, doubleArray0);
      binarySparseInstance0.setMissing(133);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 2, 0.0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      jRip_NominalAntd0.covers(sparseInstance0);
      jRip_NominalAntd0.toString();
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      arrayList0.clone();
      RandomSubSpace randomSubSpace1 = new RandomSubSpace();
      locale0.getUnicodeLocaleAttributes();
      Locale locale2 = new Locale("-~L|");
      locale0.toLanguageTag();
      locale1.getDisplayLanguage(locale0);
      Locale locale3 = Locale.ITALY;
      arrayList0.trimToSize();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      Locale locale4 = Locale.PRC;
      arrayList2.add(locale4);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) null, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      locale3.getDisplayCountry(locale1);
      Locale locale5 = Locale.CANADA_FRENCH;
      Locale locale6 = Locale.TRADITIONAL_CHINESE;
      Locale locale7 = Locale.CHINA;
      Locale locale8 = Locale.PRC;
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(boolean0);
      
      Attribute attribute0 = new Attribute("\u7FA9\u5927\u5229", "zh", (-3902));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string1 = jRip_NominalAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals("\u7FA9\u5927\u5229 = ", string1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.355825830420688
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      arrayList0.iterator();
      jRip_RipperRule0.hasAntds();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      StringReader stringReader0 = new StringReader("vo*!':MZ}9IT");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      stringReader0.markSupported();
      BufferedReader bufferedReader1 = new BufferedReader(stringReader0);
      bufferedReader0.ready();
      bufferedReader1.markSupported();
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader2);
      jRip_RipperRule0.size();
      BufferedReader bufferedReader4 = new BufferedReader(bufferedReader0);
      bufferedReader0.read();
      BufferedReader bufferedReader5 = new BufferedReader(bufferedReader1);
      BufferedReader bufferedReader6 = new BufferedReader(stringReader0);
      instances0.add((Instance) binarySparseInstance0);
      jRip0.getCapabilities();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.105029631334913
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";&BqD dK18n");
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("q2V");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4;
      attribute0.toString();
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd1.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      double double0 = jRip_NominalAntd1.getAccuRate();
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      
      double double1 = jRip0.getMinNo();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, double1, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "hWpGKU.>q/1";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("hWpGKU.>q/1", 0);
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader0);
      StringReader stringReader1 = new StringReader("CAAG");
      stringReader1.read();
      stringReader1.markSupported();
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader0, 3);
      bufferedReader2.markSupported();
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader1, 4);
      bufferedReader2.read();
      BufferedReader bufferedReader4 = new BufferedReader(bufferedReader2);
      bufferedReader4.ready();
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("date");
      stringReader2.ready();
      BufferedReader bufferedReader5 = new BufferedReader(bufferedReader4);
      BufferedReader bufferedReader6 = new BufferedReader(stringReader2);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo(0.0);
      jRip0.getMinNo();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      double[] doubleArray0 = new double[14];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(50);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      jRip0.getDebug();
      jRip_RipperRule0.setConsequent(0.0);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[24];
      intArray0[0] = 0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.0, doubleArray0);
      binarySparseInstance1.toStringNoWeight();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(0);
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("entiation");
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 946.61658609878, 1777.4005847263875);
      assertTrue(jRip1.getCheckErrorRate());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      jRip0.setOptions(stringArray0);
      ClassOrder classOrder0 = new ClassOrder();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      Attribute attribute0 = new Attribute("", "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 4, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Instances instances0 = null;
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass((-807.305), (Instances) null, 1816.864148516102, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Utils.SMALL = 23.654867744125703;
      jRip0.checkErrorRateTipText();
      jRip0.optimizationsTipText();
      Attribute attribute0 = new Attribute("Whether check for error rate >= 1/2 is included in stopping criterion.");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip_NumericAntd0.cover = (double) 1;
      jRip_NumericAntd0.toString();
      Instances instances0 = new Instances("@attribute", arrayList0, 2077);
      arrayList0.clear();
      arrayList0.add((Attribute) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      arrayList0.add(attribute0);
      PART pART0 = new PART();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "numeric";
      stringArray0[2] = "@data";
      stringArray0[3] = " >= ";
      stringArray0[4] = "numeric";
      stringArray0[5] = "string";
      stringArray0[6] = "@data";
      stringArray0[7] = "@relation";
      AbstractClassifier.runClassifier(pART0, stringArray0);
      jRip_RipperRule0.prune(instances0, true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-166);
      doubleArray0[1] = (double) 1;
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      //  // Unstable assertion: assertEquals(118, set0.size());
      
      jRip0.usePruningTipText();
      RuleStats.partition(instances0, 4);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      Locale locale2 = Locale.TRADITIONAL_CHINESE;
      arrayList0.clone();
      locale1.getUnicodeLocaleAttributes();
      Locale locale3 = Locale.CHINESE;
      Locale locale4 = Locale.FRANCE;
      Locale locale5 = Locale.ITALIAN;
      locale1.getScript();
      Locale.forLanguageTag("");
      locale0.getDisplayName();
      Locale locale6 = Locale.JAPAN;
      locale0.toLanguageTag();
      Locale locale7 = Locale.ITALY;
      locale2.toLanguageTag();
      Locale locale8 = Locale.ITALY;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      arrayList1.add(locale2);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      arrayList2.clone();
      arrayList2.add(locale5);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList5 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList5, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) list0);
      locale7.getDisplayCountry(locale0);
      Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) arrayList3);
      SGD sGD0 = new SGD();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      properties0.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.put(protectedProperties2, protectedProperties1);
      Properties properties2 = new Properties();
      properties2.put(protectedProperties0, protectedProperties2);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties3);
      protectedProperties5.clone();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      protectedProperties4.stringPropertyNames();
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("ahNVY&!x43r", protectedProperties2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      attribute0.equals(jRip_NominalAntd1);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      SparseInstance sparseInstance0 = new SparseInstance(875);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      
      DecisionTable decisionTable0 = new DecisionTable();
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      Random.setNextRandom(187);
      String string0 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Properties properties0 = new Properties();
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      linkedList0.iterator();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      Attribute attribute0 = new Attribute(".w,Cg-'TDl!Cha", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 0);
      jRip_NominalAntd0.getRevision();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      StringReader stringReader0 = new StringReader("real");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 316);
      bufferedReader0.mark(316);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1);
      BufferedReader bufferedReader3 = null;
      try {
        bufferedReader3 = new BufferedReader(stringReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Properties properties0 = new Properties();
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      linkedList0.iterator();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      Attribute attribute0 = new Attribute(".w,Cg-'TDl!Cha", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      StringReader stringReader0 = new StringReader("real");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 316);
      stringReader0.mark(1);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1);
      jRip_NominalAntd0.getRevision();
      BufferedReader bufferedReader3 = null;
      try {
        bufferedReader3 = new BufferedReader(stringReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.062711125700289
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "hWpGKU.>q/1";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("hWpGKU.>q/1", arrayList0, 0);
      Attribute attribute0 = new Attribute("hWpGKU.>q/1", (List<String>) null, 0);
      JRip jRip0 = new JRip();
      instances0.removeAll(arrayList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 4, 1);
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      bottomUpConstructor0.setContainChildBalls(true);
      jRip0.checkErrorRateTipText();
      jRip_NominalAntd0.copy();
      BottomUpConstructor bottomUpConstructor1 = new BottomUpConstructor();
      BottomUpConstructor bottomUpConstructor2 = new BottomUpConstructor();
      BottomUpConstructor bottomUpConstructor3 = new BottomUpConstructor();
      bottomUpConstructor2.setMaxRelativeLeafRadius(4.676279128988815);
      BottomUpConstructor bottomUpConstructor4 = new BottomUpConstructor();
      BottomUpConstructor bottomUpConstructor5 = new BottomUpConstructor();
      try { 
        bottomUpConstructor5.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BottomUpConstructor", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      doubleArray0[2] = (double) 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-166));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute(".bsi", (-1));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttrValue();
      jRip_RipperRule0.covers(binarySparseInstance1);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-166));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("X+s:", linkedList0, 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accuRate = (double) 4;
      jRip_NumericAntd0.getAttr();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      arrayList0.clone();
      locale0.getUnicodeLocaleAttributes();
      Locale locale2 = Locale.CHINESE;
      Locale locale3 = Locale.FRANCE;
      Locale locale4 = Locale.ITALIAN;
      locale2.getDisplayLanguage();
      locale1.getScript();
      locale4.getDisplayName();
      Locale locale5 = Locale.ITALIAN;
      locale4.toLanguageTag();
      Locale locale6 = Locale.ITALY;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      arrayList1.add(locale5);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      Locale locale7 = Locale.GERMANY;
      Locale locale8 = Locale.GERMAN;
      locale8.getDisplayCountry(locale7);
      RandomSubSpace randomSubSpace1 = new RandomSubSpace();
      randomSubSpace1.setNumIterations((-2437));
      Locale locale9 = Locale.CANADA_FRENCH;
      locale3.getUnicodeLocaleAttributes();
      Locale locale10 = Locale.FRANCE;
      Locale locale11 = Locale.ITALIAN;
      Locale locale12 = Locale.CHINA;
      locale10.getDisplayCountry(locale12);
      SGD sGD0 = new SGD();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      String string0 = jRip0.minNoTipText();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[4] = 0.0;
      jRip_RipperRule0.setConsequent(0.0);
      jRip0.getUsePruning();
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      binarySparseInstance0.toStringNoWeight();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1513.3830355422), doubleArray0);
      binarySparseInstance0.toStringNoWeight();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      jRip_RipperRule0.grow(instances0);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      jRip_RipperRule0.setConsequent(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 15.90562251262117;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(133.8225901, doubleArray0);
      binarySparseInstance0.toStringNoWeight();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(2658);
      instances0.add((Instance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.getOptions();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      Attribute attribute0 = new Attribute("<71L|#nG", "");
      attribute0.getRevision();
      arrayList0.add(attribute0);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      Properties properties3 = new Properties();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties2);
      protectedProperties0.stringPropertyNames();
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      protectedProperties1.stringPropertyNames();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("C@y+%]2STyis%");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      boolean boolean1 = jRip_NumericAntd0.covers(binarySparseInstance1);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      Locale locale2 = locale0.stripExtensions();
      arrayList0.clone();
      locale1.getUnicodeLocaleAttributes();
      Locale locale3 = Locale.CHINESE;
      Locale locale4 = Locale.FRANCE;
      Locale locale5 = Locale.ITALIAN;
      locale1.getScript();
      Locale.forLanguageTag("");
      locale0.getDisplayName();
      Locale locale6 = Locale.JAPAN;
      locale0.toLanguageTag();
      Locale locale7 = Locale.ITALY;
      locale2.toLanguageTag();
      Locale locale8 = Locale.ITALY;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      arrayList1.add(locale2);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      arrayList2.clone();
      arrayList2.add(locale5);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList5 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList5, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) list0);
      locale7.getDisplayCountry(locale0);
      Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) arrayList3);
      SGD sGD0 = new SGD();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 68);
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      try { 
        jRip0.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8169929397370832
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[5];
      String[] stringArray0 = jRip0.getOptions();
      byteArray0[0] = (byte)83;
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      IBk iBk0 = new IBk();
      iBk0.setMeanSquared(false);
      AbstractClassifier.runClassifier(iBk0, stringArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 581;
      doubleArray0[4] = (double) 581;
      doubleArray0[5] = (double) 4;
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      Enumeration<Object> enumeration0 = properties0.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.put(protectedProperties2, protectedProperties1);
      ProtectedProperties protectedProperties3 = (ProtectedProperties)properties0.put(protectedProperties0, enumeration0);
      Properties properties2 = new Properties();
      properties2.put(protectedProperties0, protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      properties1.put(protectedProperties3, protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      protectedProperties5.stringPropertyNames();
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("ahNVY&!x43r", protectedProperties3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(850);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      Random.setNextRandom(187);
      String string0 = jRip0.foldsTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "hWpGKU.>q/1";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      Instances instances0 = new Instances("", arrayList0, 6);
      try { 
        jRip0.rulesetForOneClass(3779.144076, instances0, 3779.144076, 3779.144076);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      Enumeration<Object> enumeration0 = properties0.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.put(protectedProperties2, protectedProperties1);
      ProtectedProperties protectedProperties3 = (ProtectedProperties)properties0.put(protectedProperties0, enumeration0);
      Properties properties2 = new Properties();
      properties2.put(protectedProperties0, protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      properties1.put(protectedProperties3, protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      protectedProperties5.stringPropertyNames();
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("ahNVY&!x43r", protectedProperties3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      SparseInstance sparseInstance0 = new SparseInstance(850);
      jRip_NumericAntd0.covers(sparseInstance0);
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      Random.setNextRandom(187);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 1530.764721;
      jRip0.getCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JW}!@<";
      stringArray0[1] = "JW}!@<";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[4] = "JW}!@<";
      stringArray0[5] = "JW}!@<";
      Utils.SMALL = 1530.764721;
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "weka/core/Capabilities.props";
      stringArray0[8] = "JW}!@<";
      Attribute.main(stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", linkedList0, 18);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.getDebug();
      jRip_NumericAntd0.getMaxInfoGain();
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip1.getMeasure("ss[Ck;VP@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ss[Ck;VP@ not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      properties1.setProperty("K9Ev%Yh&", "K9Ev%Yh&");
      Enumeration<Object> enumeration0 = properties0.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.put(protectedProperties0, enumeration0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties2 = new Properties();
      properties2.put(protectedProperties0, protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      protectedProperties7.stringPropertyNames();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      Attribute attribute0 = new Attribute("\nGrowing and pruning a new rule ...", (List<String>) null);
      jRip0.getOptimizations();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccu();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-1924));
      assertEquals((-1924), jRip0.getOptimizations());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Properties properties0 = new Properties();
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      linkedList0.iterator();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      jRip0.setFolds((-836));
      Attribute attribute0 = new Attribute(".w,Cg-'TDl!Cha", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[1];
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("date", 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=3.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      DecisionTable decisionTable1 = new DecisionTable();
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 3;
      int[] intArray0 = new int[8];
      intArray0[1] = 3;
      intArray0[2] = 4;
      intArray0[5] = 79;
      intArray0[6] = 2;
      intArray0[7] = 2;
      DecisionTable decisionTable2 = new DecisionTable();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      IBk iBk0 = new IBk(1);
      iBk0.pruneToK((Instances) null, doubleArray0, (-5));
      Instances instances2 = bayesNet0.m_Instances;
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      Enumeration<Object> enumeration0 = properties0.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.put(protectedProperties2, protectedProperties1);
      ProtectedProperties protectedProperties3 = (ProtectedProperties)properties0.put(protectedProperties0, enumeration0);
      Properties properties2 = new Properties();
      properties2.put(protectedProperties0, protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      properties1.put(protectedProperties3, protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties0);
      protectedProperties3.stringPropertyNames();
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("ahNVY&!x43r", protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      
      jRip0.getTechnicalInformation();
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-1L));
      jRip0.getSeed();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      Enumeration<Object> enumeration0 = properties0.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.put(protectedProperties2, protectedProperties1);
      ProtectedProperties protectedProperties3 = (ProtectedProperties)properties0.put(protectedProperties0, enumeration0);
      Properties properties2 = new Properties();
      properties2.put(protectedProperties0, protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      protectedProperties6.clone();
      properties1.put(protectedProperties3, protectedProperties6);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      protectedProperties5.stringPropertyNames();
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("ahNVY&!x43r", protectedProperties3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(850);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      Random.setNextRandom(187);
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties0);
      protectedProperties0.keySet();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("8118", string0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      Enumeration<Object> enumeration0 = properties0.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.put(protectedProperties2, protectedProperties1);
      ProtectedProperties protectedProperties3 = (ProtectedProperties)properties0.put(protectedProperties0, enumeration0);
      Properties properties2 = new Properties();
      properties2.put(protectedProperties0, protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      properties1.put(protectedProperties3, protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties0);
      protectedProperties3.stringPropertyNames();
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("ahNVY&!x43r", protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      jRip0.listOptions();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      Enumeration<Object> enumeration0 = properties0.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.put(protectedProperties2, protectedProperties1);
      ProtectedProperties protectedProperties3 = (ProtectedProperties)properties0.put(protectedProperties0, enumeration0);
      Properties properties2 = new Properties();
      properties2.put(protectedProperties0, protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      protectedProperties6.clone();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      protectedProperties5.stringPropertyNames();
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("ahNVY&!x43r", protectedProperties3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(875);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      
      DecisionTable decisionTable0 = new DecisionTable();
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      Random.setNextRandom(187);
      String string0 = jRip_NumericAntd0.getRevision();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("8118", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.copy();
      jRip0.setSeed(12L);
      jRip_RipperRule0.copy();
      jRip_RipperRule0.getConsequent();
      jRip0.getOptimizations();
      Instance instance0 = null;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      DecisionTable decisionTable1 = new DecisionTable();
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      decisionTable1.getEvaluationMeasure();
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[4] = (double) 4;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 1;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(50);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      jRip_RipperRule0.covers(sparseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      doubleArray0[1] = (double) 0;
      jRip_RipperRule0.setConsequent(0.0);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      jRip_RipperRule0.hasAntds();
      assertEquals(0.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      int[] intArray0 = new int[24];
      intArray0[0] = 0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.0, doubleArray0);
      binarySparseInstance1.toStringNoWeight();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(1587);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(sparseInstance1);
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte byte0 = (byte)106;
      JRip jRip0 = new JRip();
      IBk iBk0 = new IBk((byte)106);
      MockRandom mockRandom0 = new MockRandom(4);
      CoverTree coverTree0 = new CoverTree();
      jRip0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      StringReader stringReader0 = new StringReader("\":f!';.XlNGsS7Nfs.");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      stringReader0.markSupported();
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      bufferedReader1.ready();
      bufferedReader1.markSupported();
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader2);
      BufferedReader bufferedReader4 = new BufferedReader(bufferedReader2);
      BufferedReader bufferedReader5 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader6 = new BufferedReader(stringReader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = jRip0.getFolds();
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, int0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hWpGKqT/1";
      stringArray0[1] = "";
      stringArray0[2] = "W7XJ";
      stringArray0[3] = "}-$&(Uus.rs+";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "myself";
      JRip.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      properties1.setProperty("K9Ev%Yh&", "K9Ev%Yh&");
      Enumeration<Object> enumeration0 = properties0.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.put(protectedProperties0, enumeration0);
      protectedProperties0.elements();
      Properties properties2 = new Properties();
      properties2.put(protectedProperties0, protectedProperties2);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      protectedProperties0.stringPropertyNames();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure(":8KBZ;TX|_KYGzfi9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :8KBZ;TX|_KYGzfi9 not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      Enumeration<Object> enumeration0 = properties0.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.put(protectedProperties0, enumeration0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      properties2.put(protectedProperties0, protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      protectedProperties6.stringPropertyNames();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("N`R)0& $");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N`R)0& $ not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }
}
