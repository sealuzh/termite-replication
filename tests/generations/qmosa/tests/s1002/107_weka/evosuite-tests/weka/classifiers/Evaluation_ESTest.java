/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 09:04:18 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.BestFirst;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.IntervalEstimator;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.SimpleKMeans;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.AbstractFileLoader;
import weka.core.converters.ArffLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      OneR oneR0 = new OneR();
      Instances instances1 = testInstances0.getData();
      try { 
        evaluation0.crossValidateModel((Classifier) oneR0, instances1, 1396, (Random) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8773813126471777
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)49;
      byteArray0[5] = (byte)110;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SGD sGD0 = new SGD();
      testInstances0.setClassType((byte) (-16));
      instances0.getRandomNumberGenerator(1594L);
      evaluation0.SFSchemeEntropy();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setSeed((byte)110);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.weightedMatthewsCorrelation();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)110;
      doubleArray0[1] = (double) (byte)49;
      doubleArray0[2] = (double) (byte)110;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 1594L;
      doubleArray0[6] = (double) (byte)110;
      doubleArray0[7] = (double) (byte)49;
      doubleArray0[8] = (double) 1;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.816992408889048
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)110;
      byteArray1[2] = (byte) (-15);
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte) (-15);
      byteArray1[5] = (byte)110;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SGD sGD0 = new SGD();
      testInstances0.setClassType((byte) (-15));
      instances0.getRandomNumberGenerator(1594L);
      testInstances0.setNumInstancesRelational(3793);
      double double0 = evaluation0.m_SumClassPredicted;
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setSeed((byte)110);
      double double1 = evaluation0.m_SumPriorEntropy;
      evaluation0.weightedMatthewsCorrelation();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      evaluation0.numInstances();
      evaluation0.errorRate();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9624283861683924
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      SGD sGD0 = new SGD();
      SelectedTag selectedTag0 = sGD0.getLossFunction();
      multiClassClassifierUpdateable1.setMethod(selectedTag0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      multiClassClassifierUpdateable1.setSeed((byte)49);
      evaluation0.relativeAbsoluteError();
      multiClassClassifierUpdateable0.setSeed(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Instance instance0 = linearNNSearch0.nearestNeighbour(binarySparseInstance2);
      evaluation1.updatePriors(instance0);
      evaluation1.weightedMatthewsCorrelation();
      evaluation1.weightedMatthewsCorrelation();
      evaluation0.weightedPrecision();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.746877171696422
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues(10);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      JRip jRip0 = new JRip();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation1.weightedTruePositiveRate();
      evaluation1.weightedRecall();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setClassIndex(10);
      evaluation0.pctCorrect();
      evaluation1.avgCost();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc1 = new TechnicalInformationHandlerJavadoc();
      evaluation1.toClassDetailsString();
      evaluation1.toMatrixString("%f*FNi+ez3]m");
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toSummaryString("Gvz<VB", false);
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation2.numFalsePositives((-1));
      try { 
        evaluation2.evaluateModel((Classifier) jRip0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3902697987640233
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.m_SumClass = (double) (-1);
      testInstances0.setNumString(979);
      Integer integer0 = new Integer(2);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      IBk iBk0 = new IBk();
      PipedWriter pipedWriter0 = new PipedWriter();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      evaluation1.weightedTrueNegativeRate();
      evaluation2.trueNegativeRate(16);
      evaluation2.meanPriorAbsoluteError();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(19);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3682552050595294
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (-2);
      doubleArray2[3] = (double) (-2);
      doubleArray2[4] = (double) (-2);
      doubleArray2[5] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = (double) (-1);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 10;
      doubleArray4[1] = (double) (-2);
      doubleArray4[2] = (double) (-1);
      doubleArray4[3] = (double) (-1);
      doubleArray4[4] = Double.NaN;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (double) (-1);
      doubleArray5[1] = Double.NaN;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = Double.NaN;
      doubleArray6[1] = (double) (-2);
      doubleArray6[2] = (double) (-1);
      doubleArray6[3] = 755.2576152152;
      doubleArray6[4] = (double) (-1);
      doubleArray6[5] = (double) 10;
      doubleArray6[6] = (double) 10;
      doubleArray6[7] = 605.53750755776;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (double) 10;
      doubleArray7[1] = 462.500897515582;
      doubleArray7[2] = 605.53750755776;
      doubleArray7[3] = (double) (-2);
      doubleArray7[4] = 755.2576152152;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 605.53750755776;
      doubleArray8[1] = 462.500897515582;
      doubleArray8[2] = 462.500897515582;
      doubleArray8[3] = 755.2576152152;
      doubleArray0[7] = doubleArray8;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      JRip jRip0 = new JRip();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      double double0 = evaluation0.m_Unclassified;
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2583478069599994
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-1));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      RandomTree randomTree0 = new RandomTree();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) randomTree0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      instances0.removeIf(predicate3);
      evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.totalCost();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      BayesNet bayesNet0 = new BayesNet();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      MultiScheme multiScheme0 = new MultiScheme();
      multiClassClassifierUpdateable0.setClassifier(multiScheme0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1114383320);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(511.5350286007819, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(22.0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.061296483389803
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedRecall();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setClassIndex(0);
      evaluation2.pctCorrect();
      evaluation2.avgCost();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      technicalInformationHandlerJavadoc0.setProlog(true);
      technicalInformationHandlerJavadoc0.updateJavadoc();
      evaluation2.toMatrixString("%f*FNi+ez3]m");
      evaluation1.setDiscardPredictions(true);
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.SFSchemeEntropy();
      IBk iBk0 = new IBk();
      PipedWriter pipedWriter0 = new PipedWriter();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances1 = bayesNet1.m_Instances;
      evaluation3.weightedTrueNegativeRate();
      try { 
        evaluation3.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 10);
      multiClassClassifierUpdateable0.setSeed(944);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      int[] intArray0 = new int[3];
      intArray0[0] = 76;
      intArray0[1] = (-1);
      multiClassClassifierUpdateable0.listOptions();
      intArray0[2] = (-1773);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.setDiscardPredictions(false);
      try { 
        evaluation0.crossValidateModel((Classifier) multiClassClassifierUpdateable0, instances0, 0, (Random) mockRandom0, (Object[]) multiClassClassifierUpdateable0.TAGS_METHOD);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1688506674631114
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues(106);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_MinTarget;
      capabilities0.getRevision();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation1.setNumericPriorsFromBuffer();
      double double1 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.125;
      doubleArray0[2] = (double) 106;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.getHeader();
      assertTrue(evaluation0.equals((Object)evaluation1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9956667945745803
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[0] = (byte) (-32);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)110;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("getRandomWidthFactor");
      capabilities0.enableAllClasses();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.unweightedMacroFmeasure();
      Evaluation evaluation4 = new Evaluation(instances1, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation4.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.922436434730754
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-32);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      PART pART0 = new PART();
      Capabilities capabilities0 = pART0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.numFalsePositives((byte) (-32));
      double[] doubleArray0 = evaluation0.m_TrainClassWeights;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities1 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      evaluation0.kappa();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.pctCorrect();
      evaluation1.falseNegativeRate((byte)49);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 8, (byte) (-32));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2927302132441336
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedRecall();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " ");
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.weightedFalseNegativeRate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation4.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("@relation");
      capabilities0.enableAllClasses();
      Evaluation evaluation5 = new Evaluation(instances1);
      evaluation0.unweightedMacroFmeasure();
      evaluation4.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6530699014038785
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedRecall();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setClassIndex(0);
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "getOptimizations");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3785312714463442
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.toString();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      int[] intArray0 = new int[13];
      intArray0[0] = 1;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.priorEntropy();
      evaluation0.SFPriorEntropy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1844888273);
      doubleArray0[3] = 3625.0;
      doubleArray0[4] = (double) (-963);
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, 2, 3625.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4263509484347847
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-1));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-19));
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      evaluation0.setPriors(instances0);
      instances0.getRandomNumberGenerator(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setNumString(75);
      Integer integer0 = new Integer((-19));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFSchemeEntropy();
      IBk iBk0 = new IBk();
      PipedWriter pipedWriter0 = new PipedWriter();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      evaluation0.weightedTrueNegativeRate();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), (char[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1604683427407823
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumNominal((-1994981129));
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-1));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      JRip jRip0 = new JRip();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.m_NoPriors = true;
      double[] doubleArray0 = new double[9];
      instances0.lastIndexOf(evaluation0);
      doubleArray0[0] = 0.0;
      testInstances0.setNumNominalValues(2253);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      evaluation1.getClassPriors();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 2253);
      // Undeclared exception!
      try { 
        bufferedInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.419985146350296
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(11);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      JRip jRip0 = new JRip();
      String string0 = Evaluation.makeOptionString(jRip0, true);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.weightedFalseNegativeRate();
      evaluation1.weightedTruePositiveRate();
      evaluation0.weightedRecall();
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation1.weightedMatthewsCorrelation();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Function<Object, SimpleLinearRegression> function0 = (Function<Object, SimpleLinearRegression>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      protectedProperties0.computeIfAbsent(string0, function0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("@relation", list1, protectedProperties2);
      instances0.setClass(attribute0);
      evaluation1.SFMeanPriorEntropy();
      double double4 = evaluation0.m_SumPredicted;
      evaluation1.areaUnderPRC(24);
      double double5 = evaluation0.matthewsCorrelationCoefficient(11);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = evaluation0.falseNegativeRate((-2));
      assertNotEquals(double6, double1, 0.01);
      
      evaluation0.getClassPriors();
      double double7 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8450512461514172
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumNominal((-1994981129));
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-1));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      JRip jRip0 = new JRip();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Version.VERSION = "@data";
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      evaluation0.SFMeanPriorEntropy();
      double double2 = evaluation1.m_SumPredicted;
      evaluation1.areaUnderPRC(488);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double3 = evaluation2.matthewsCorrelationCoefficient(473);
      assertEquals(0.0, double3, 0.01);
      
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      evaluation2.equals(minkowskiDistance0);
      assertEquals(Double.NaN, evaluation2.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.080191382727365
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      JRip jRip0 = new JRip();
      Evaluation.makeOptionString(jRip0, true);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances1);
      Evaluation evaluation3 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation evaluation4 = new Evaluation(instances1);
      evaluation4.weightedFalseNegativeRate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation1.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      Capabilities capabilities0 = linearRegression1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances2 = testInstances0.generate("Jd+_cYYfP{p$");
      Evaluation evaluation5 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation6 = new Evaluation(instances2, costMatrix0);
      evaluation6.unweightedMacroFmeasure();
      try { 
        Evaluation.evaluateModel("2qya9(%u$JVgwv;9", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name 2qya9(%u$JVgwv;9.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3498955630549037
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      JRip jRip0 = new JRip();
      Evaluation.makeOptionString(jRip0, true);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.weightedTruePositiveRate();
      evaluation0.weightedRecall();
      evaluation0.pctCorrect();
      evaluation0.falseNegativeRate(2500);
      evaluation1.weightedMatthewsCorrelation();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("@relation", list1, protectedProperties2);
      evaluation1.falsePositiveRate(1);
      try { 
        Evaluation.evaluateModel((Classifier) jRip0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.JRip:
         // 
         // -F <number of folds>
         // \tSet number of folds for REP
         // \tOne fold is used as pruning set.
         // \t(default 3)
         // -N <min. weights>
         // \tSet the minimal weights of instances
         // \twithin a split.
         // \t(default 2.0)
         // -O <number of runs>
         // \tSet the number of runs of
         // \toptimizations. (Default: 2)
         // -D
         // \tSet whether turn on the
         // \tdebug mode (Default: false)
         // -S <seed>
         // \tThe seed of randomization
         // \t(Default: 1)
         // -E
         // \tWhether NOT check the error rate>=0.5
         // \tin stopping criteria \t(default: check)
         // -P
         // \tWhether NOT use pruning
         // \t(default: use pruning)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.452554440457171
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-1));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-1114383320));
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch2 = new LinearNNSearch();
      multiClassClassifierUpdateable0.setOptions(testInstances0.DEFAULT_WORDS);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      AbstractInstance.s_numericAfterDecimalPoint = 76;
      evaluation0.setPriors(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-jb5)]a%`eg");
      multiClassClassifierUpdateable0.setSeed(0);
      evaluation0.numFalsePositives(1);
      evaluation0.weightedFalseNegativeRate();
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3085905741801445
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(330);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      BayesNet bayesNet0 = new BayesNet();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      multiClassClassifierUpdateable0.setClassifier(adaBoostM1_0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (byte) (-62);
      doubleArray0[3] = (double) (byte) (-60);
      doubleArray0[4] = (double) 0;
      Evaluation.getGlobalInfo(multiClassClassifierUpdateable0);
      doubleArray0[5] = (-920.0);
      SparseInstance sparseInstance0 = new SparseInstance((-920.0), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((-2.0), (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.077920071992424
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 106;
      testInstances0.setNumRelationalNominalValues(106);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_MinTarget;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.numTrueNegatives((-1));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.125;
      doubleArray0[2] = (double) 106;
      double double1 = new Float((double) 1);
      evaluation0.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation1.precision((-3196));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3196
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8573013274601746
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedRecall();
      testInstances0.setWordSeparators("@data");
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.pctCorrect();
      double double0 = evaluation1.m_SumAbsErr;
      evaluation2.avgCost();
      double double1 = evaluation0.m_SumClass;
      evaluation1.SFSchemeEntropy();
      IBk iBk0 = new IBk();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".arff";
      iBk0.enumerateMeasures();
      evaluation0.falsePositiveRate(7);
      stringArray0[1] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[3] = "@relation";
      try { 
        Evaluation.evaluateModel((Classifier) iBk0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominalValues((-2));
      testInstances1.generate("@relation");
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) null, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.751495801382228
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      SGD sGD0 = new SGD();
      SelectedTag selectedTag0 = sGD0.getLossFunction();
      multiClassClassifierUpdateable1.setMethod(selectedTag0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      bufferedInputStream0.mark((byte)49);
      bufferedInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 7);
      multiClassClassifierUpdateable0.setSeed(1);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedMatthewsCorrelation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedMatthewsCorrelation();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8560552852604169
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte byte0 = (byte)110;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues(3);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation2 = new Evaluation(instances0);
      AbstractFileLoader.runFileLoader(arffLoader0, testInstances0.DEFAULT_WORDS);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double1 = 4.5;
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.4439883966072
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      SGD sGD0 = new SGD();
      SelectedTag selectedTag0 = sGD0.getLossFunction();
      multiClassClassifierUpdateable0.setMethod(selectedTag0);
      Evaluation.makeOptionString(multiClassClassifierUpdateable0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedTruePositiveRate();
      double double1 = evaluation0.weightedRecall();
      evaluation1.weightedFMeasure();
      evaluation0.KBInformation();
      evaluation1.avgCost();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation1.m_SumClass;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      evaluation0.unweightedMacroFmeasure();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      double double3 = evaluation0.KBMeanInformation();
      assertEquals(double3, double1, 0.01);
      
      evaluation0.unweightedMicroFmeasure();
      double double4 = evaluation2.incorrect();
      assertNotEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.93341609542662
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedRecall();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.pctCorrect();
      double double0 = evaluation1.m_SumAbsErr;
      evaluation2.avgCost();
      double double1 = evaluation0.m_SumClass;
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      instances0.lastIndexOf(technicalInformationHandlerJavadoc0);
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance(0.02500000037252903, doubleArray0);
      String string0 = "%f*FNi+ez3]m";
      evaluation2.toMatrixString("%f*FNi+ez3]m");
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation3.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.655658866069486
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominalValues((-2));
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      InputStream inputStream0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      byte[] byteArray0 = null;
      evaluation0.numTrueNegatives(1);
      pipedInputStream0.mark(101);
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.672768173035199
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<v#s^@LSpA!ZpVT_4");
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)11;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.setClassType((byte) (-50));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      AbstractFileLoader.runFileLoader(serializedInstancesLoader0, testInstances0.DEFAULT_WORDS);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setSeed((-2));
      evaluation0.weightedFalseNegativeRate();
      evaluation0.toSummaryString("dontReplaceMissingTipText", false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(2226);
      IBk iBk0 = new IBk((byte) (-56));
      try { 
        evaluation1.evaluateModel((Classifier) iBk0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8625417717469035
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalNominalValues((byte)49);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      Instances instances1 = testInstances0.generate(".arff");
      arffLoader0.getNextInstance(instances1);
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      double double0 = evaluation2.m_SumClass;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation4 = new Evaluation(instances1);
      AbstractFileLoader.runFileLoader(arffLoader0, testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.058836006790731
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      InputStream inputStream0 = null;
      int int0 = 9;
      PipedInputStream pipedInputStream0 = new PipedInputStream(20);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      byte[] byteArray0 = null;
      evaluation0.numTrueNegatives(20);
      int int1 = 2;
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.812244590094997
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)110;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.setClassType(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      AbstractFileLoader.runFileLoader(serializedInstancesLoader0, testInstances0.DEFAULT_WORDS);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5zQewkz9v1");
      MultiClassClassifierUpdateable multiClassClassifierUpdateable2 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setSeed(2);
      double double1 = evaluation1.weightedFalseNegativeRate();
      double double2 = evaluation0.m_SumClass;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOptions();
      BestFirst bestFirst0 = new BestFirst();
      SelectedTag selectedTag0 = bestFirst0.getDirection();
      costSensitiveClassifier0.setCostMatrixSource(selectedTag0);
      double double3 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation0.weightedFMeasure();
      assertEquals(double4, double1, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      multiClassClassifierUpdateable0.setSeed(944);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)88;
      byteArray1[3] = (byte)71;
      byteArray1[4] = (byte)71;
      byteArray1[5] = (byte)40;
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Evaluation.makeOptionString(multiClassClassifierUpdateable0, false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Date class", arrayList0, 7);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3608599266817913
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      JRip jRip0 = new JRip();
      String string0 = Evaluation.makeOptionString(jRip0, true);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.weightedTruePositiveRate();
      evaluation0.weightedRecall();
      evaluation0.weightedAreaUnderROC();
      evaluation1.weightedMatthewsCorrelation();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Function<Object, SimpleLinearRegression> function0 = (Function<Object, SimpleLinearRegression>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      protectedProperties0.computeIfAbsent(string0, function0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      evaluation1.weightedFalseNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) jRip0, instances0, 244, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.148302086868759
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      JRip jRip0 = new JRip();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedRecall();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.pctCorrect();
      double double1 = evaluation1.m_SumAbsErr;
      double double2 = evaluation2.avgCost();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.m_SumClass;
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      instances0.lastIndexOf(technicalInformationHandlerJavadoc0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1505.8824647191182);
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      String string0 = evaluation2.toMatrixString("%f*FNi+ez3]m");
      assertEquals("%f*FNi+ez3]m\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-69);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation2.toSummaryString("%f*FNi+ez3]m", true);
      double double4 = evaluation3.priorEntropy();
      assertEquals(0.9940302114769565, double4, 0.01);
      
      double double5 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double5, 0.01);
      
      evaluation1.kappa();
      double[] doubleArray1 = evaluation3.makeDistribution(Double.NaN);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, evaluation3.unclassified(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8063861875580676
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues(10);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      JRip jRip0 = new JRip();
      evaluation0.toMatrixString();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.weightedTruePositiveRate();
      JRip jRip1 = new JRip();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      instances0.lastIndexOf(evaluation1);
      testInstances0.setNumNominalValues((-1));
      jRip1.setFolds((-2));
      AbstractClassifier.runClassifier(jRip0, testInstances0.DEFAULT_WORDS);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2253;
      doubleArray0[2] = 49.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 1;
      // Undeclared exception!
      try { 
        iBk0.pruneToK(instances0, doubleArray0, 2253);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.lazy.IBk", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3425403760730843
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SGD sGD0 = new SGD();
      testInstances0.setClassType((-1442762233));
      instances0.getRandomNumberGenerator(1594L);
      evaluation0.toSummaryString("ws8gD}'H,I>>", true);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalsePositives(15);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) sGD0;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-197));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0038942291815784
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues(10);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      JRip jRip0 = new JRip();
      evaluation0.toCumulativeMarginDistributionString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      double double0 = evaluation0.m_Unclassified;
      evaluation0.weightedFMeasure();
      double double1 = evaluation0.m_TotalCoverage;
      evaluation0.matthewsCorrelationCoefficient(1349);
      ArrayList<BinarySparseInstance> arrayList0 = new ArrayList<BinarySparseInstance>(17);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.02500000037252903;
      doubleArray0[5] = (double) 1349;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)19);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      arrayList0.add(binarySparseInstance1);
      LinkedHashSet<BinarySparseInstance> linkedHashSet0 = new LinkedHashSet<BinarySparseInstance>(arrayList0);
      instances0.addAll((Collection<? extends Instance>) linkedHashSet0);
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, ".bsi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9986745565640383
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      int int0 = 0;
      testInstances0.setNumRelationalNominalValues(0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation0.weightedFalseNegativeRate();
      instances0.compactify();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.falseNegativeRate(8);
      evaluation0.pctUnclassified();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1427));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1427
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5975170300947936
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominalValues((-2));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1382107404520405
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedRecall();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.pctCorrect();
      double double0 = evaluation1.m_SumAbsErr;
      evaluation2.avgCost();
      double double1 = evaluation0.m_SumClass;
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      technicalInformationHandlerJavadoc0.updateJavadoc();
      instances0.lastIndexOf(technicalInformationHandlerJavadoc0);
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance(0.02500000037252903, doubleArray0);
      evaluation2.toMatrixString("%f*FNi+ez3]m");
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.toSummaryString("%f*FNi+ez3]m", true);
      SparseInstance sparseInstance1 = new SparseInstance(0, doubleArray0);
      evaluation1.toMatrixString(".arff");
      try { 
        evaluation3.evaluateModelOnce((double) 1, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2930649819576105
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      SGD sGD0 = new SGD();
      SelectedTag selectedTag0 = sGD0.getLossFunction();
      multiClassClassifierUpdateable0.setMethod(selectedTag0);
      Evaluation.makeOptionString(multiClassClassifierUpdateable0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.weightedTruePositiveRate();
      Utils.SMALL = Double.NEGATIVE_INFINITY;
      evaluation1.weightedFMeasure();
      evaluation0.KBInformation();
      evaluation1.avgCost();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumClass;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.KBMeanInformation();
      evaluation2.weightedAreaUnderROC();
      try { 
        evaluation0.evaluateModelOnce((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.785822160499854
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedRecall();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " ");
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) filteredClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.FilteredClassifier:
         // 
         // -F <filter specification>
         // \tFull class name of filter to use, followed
         // \tby filter options.
         // \teg: \"weka.filters.unsupervised.attribute.Remove -V -R 1,2\"
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.J48)
         // 
         // Options specific to classifier weka.classifiers.trees.J48:
         // 
         // -U
         // \tUse unpruned tree.
         // -O
         // \tDo not collapse tree.
         // -C <pruning confidence>
         // \tSet confidence threshold for pruning.
         // \t(default 0.25)
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // \t(default 2)
         // -R
         // \tUse reduced error pruning.
         // -N <number of folds>
         // \tSet number of folds for reduced error
         // \tpruning. One fold is used as pruning set.
         // \t(default 3)
         // -B
         // \tUse binary splits only.
         // -S
         // \tDon't perform subtree raising.
         // -L
         // \tDo not clean up after the tree has been built.
         // -A
         // \tLaplace smoothing for predicted probabilities.
         // -J
         // \tDo not use MDL correction for info gain on numeric attributes.
         // -Q <seed>
         // \tSeed for random data shuffling (default 1).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7465575297772897
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.weightedAreaUnderPRC();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setClassType(46);
      testInstances0.setNumRelationalNominalValues((-1114383303));
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch2 = new LinearNNSearch(instances0);
      multiClassClassifierUpdateable0.setOptions(testInstances0.DEFAULT_WORDS);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      evaluation0.setPriors(instances0);
      int int0 = 100000;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      byte[] byteArray0 = new byte[0];
      bufferedInputStream0.read(byteArray0);
      bufferedInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 100000);
      multiClassClassifierUpdateable0.setSeed(963);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.weightedMatthewsCorrelation();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("@relation", instances0, 109, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3084142525000027
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.toString();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.m_ClassIsNominal = false;
      evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      try { 
        evaluation1.updateStatsForIntervalEstimator((IntervalEstimator) null, sparseInstance0, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.445000707859219
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      SGD sGD0 = new SGD();
      SelectedTag selectedTag0 = sGD0.getLossFunction();
      multiClassClassifierUpdateable1.setMethod(selectedTag0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      multiClassClassifierUpdateable1.setSeed((byte)49);
      evaluation0.relativeAbsoluteError();
      binarySparseInstance1.deleteAttributeAt(110);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) multiClassClassifierUpdateable0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.270371716153446
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      evaluation0.setPriors(instances0);
      multiClassClassifierUpdateable0.setSeed(944);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-32);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1396709367503894
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      JRip jRip0 = new JRip();
      evaluation0.toSummaryString(true);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.weightedTruePositiveRate();
      evaluation0.weightedRecall();
      evaluation0.pctCorrect();
      evaluation0.falseNegativeRate(2500);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Evaluation.makeOptionString(naiveBayes0, true);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      NaiveBayes naiveBayes1 = new NaiveBayes();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) null, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(" ", list0, protectedProperties0);
      evaluation1.falsePositiveRate(1183);
      try { 
        Evaluation.evaluateModel((Classifier) jRip0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.JRip:
         // 
         // -F <number of folds>
         // \tSet number of folds for REP
         // \tOne fold is used as pruning set.
         // \t(default 3)
         // -N <min. weights>
         // \tSet the minimal weights of instances
         // \twithin a split.
         // \t(default 2.0)
         // -O <number of runs>
         // \tSet the number of runs of
         // \toptimizations. (Default: 2)
         // -D
         // \tSet whether turn on the
         // \tdebug mode (Default: false)
         // -S <seed>
         // \tThe seed of randomization
         // \t(Default: 1)
         // -E
         // \tWhether NOT check the error rate>=0.5
         // \tin stopping criteria \t(default: check)
         // -P
         // \tWhether NOT use pruning
         // \t(default: use pruning)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5456373100301946
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      JRip jRip0 = new JRip();
      Evaluation.makeOptionString(jRip0, true);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.weightedTruePositiveRate();
      evaluation0.weightedRecall();
      evaluation0.pctCorrect();
      evaluation0.falseNegativeRate(2500);
      testInstances0.generate();
      evaluation1.weightedMatthewsCorrelation();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Evaluation.makeOptionString(naiveBayes0, true);
      evaluation1.SFMeanPriorEntropy();
      evaluation0.weightedMatthewsCorrelation();
      evaluation1.areaUnderPRC(24);
      evaluation0.matthewsCorrelationCoefficient(10);
      evaluation1.relativeAbsoluteError();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(3979.012, doubleArray0);
      evaluation0.toMatrixString("[GeneralRegression] unable to parse the distribution parameter");
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.1096772251848215
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-1));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-1114383320));
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch2 = new LinearNNSearch(instances0);
      multiClassClassifierUpdateable0.setOptions(testInstances0.DEFAULT_WORDS);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      evaluation0.setPriors(instances0);
      int int0 = 100000;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      bufferedInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 100000);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "last");
      multiClassClassifierUpdateable0.setSeed(963);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedMatthewsCorrelation();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.confusionMatrix();
      multiClassClassifierUpdateable0.setUsePairwiseCoupling(false);
      MockRandom mockRandom0 = new MockRandom(3);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1114383320);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.4693281249228396
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      SGD sGD0 = new SGD();
      SelectedTag selectedTag0 = sGD0.getLossFunction();
      multiClassClassifierUpdateable0.setMethod(selectedTag0);
      Evaluation.makeOptionString(multiClassClassifierUpdateable0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedFMeasure();
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.avgCost();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation1.m_SumClass;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      double double3 = evaluation0.KBMeanInformation();
      double double4 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double4, double3, 0.01);
      
      double double5 = evaluation2.weightedAreaUnderROC();
      assertEquals(double5, double0, 0.01);
      
      evaluation2.addNumericTrainClass(Double.NaN, 110.0);
      assertEquals(Double.NaN, evaluation2.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5591350549316445
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 1;
      evaluation0.m_MarginCounts = doubleArray0;
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("Un");
      Evaluation evaluation2 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation2.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.171046951153953
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      boolean boolean0 = true;
      Evaluation.makeOptionString((Classifier) null, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(pipedReader0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.4017139993806484
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      JRip jRip0 = new JRip();
      Evaluation.makeOptionString(jRip0, true);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.weightedTruePositiveRate();
      evaluation0.weightedRecall();
      evaluation0.pctCorrect();
      evaluation0.falseNegativeRate(2500);
      evaluation1.weightedMatthewsCorrelation();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      evaluation1.SFMeanPriorEntropy();
      evaluation1.confusionMatrix();
      evaluation0.falseNegativeRate(2500);
      evaluation0.unclassified();
      try { 
        Evaluation.evaluateModel((Classifier) jRip0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.JRip:
         // 
         // -F <number of folds>
         // \tSet number of folds for REP
         // \tOne fold is used as pruning set.
         // \t(default 3)
         // -N <min. weights>
         // \tSet the minimal weights of instances
         // \twithin a split.
         // \t(default 2.0)
         // -O <number of runs>
         // \tSet the number of runs of
         // \toptimizations. (Default: 2)
         // -D
         // \tSet whether turn on the
         // \tdebug mode (Default: false)
         // -S <seed>
         // \tThe seed of randomization
         // \t(Default: 1)
         // -E
         // \tWhether NOT check the error rate>=0.5
         // \tin stopping criteria \t(default: check)
         // -P
         // \tWhether NOT use pruning
         // \t(default: use pruning)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.646287634145928
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toSummaryString();
      evaluation0.weightedFalseNegativeRate();
      evaluation1.falseNegativeRate(3);
      int int0 = (-1427);
      evaluation1.truePositiveRate(0);
      try { 
        CostMatrix.parseMatlab("The number of neighbours to use.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0300748346589
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumNominal((-1994981129));
      testInstances0.setNumRelationalNominalValues(10);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-2));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = ':';
      charArray0[2] = 's';
      charArray0[3] = 'I';
      charArray0[4] = 'W';
      charArray0[5] = '?';
      charArray0[6] = 'n';
      charArray0[7] = 'h';
      charArray0[8] = '%';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2315), charArray0, 1202);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0628748776227126
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      evaluation0.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'Z';
      charArray0[2] = '6';
      charArray0[3] = 'P';
      charArray0[4] = 'B';
      evaluation0.num2ShortID(640, charArray0, 21);
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setNumRelationalNominalValues(0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable1.setOptions(testInstances2.DEFAULT_WORDS);
      int int0 = (-2052);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2052));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.255528882032245
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      String string0 = evaluation0.toMatrixString(".bsi");
      assertEquals(".bsi\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.setNumNumeric(1376);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      Version.MINOR = 1449;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 1309.6;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      evaluation1.weightedMatthewsCorrelation();
      double double0 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.weightedPrecision();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.0264629737572966
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      JRip jRip0 = new JRip();
      Evaluation.makeOptionString(jRip0, false);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.numFalseNegatives(0);
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.useNoPriors();
      evaluation3.weightedFMeasure();
      evaluation2.correct();
      double double2 = evaluation3.weightedFMeasure();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5975170300947936
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.disableAllAttributes();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues(109);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_MinTarget;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) (-2);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.0352950140535047
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominalValues((-2));
      Instances instances1 = testInstances1.generate("@relation");
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setPriors(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumClass;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation4 = new Evaluation(instances0);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 1756.312449747564;
      try { 
        evaluation2.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" 56g^Q;X6}Y+");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1970.94));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1970
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.381965894302634
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      BayesNet bayesNet0 = new BayesNet();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setClassifier(multiClassClassifier0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte)110;
      doubleArray0[4] = (double) 2;
      multiClassClassifierUpdateable0.getMethod();
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) (byte) (-32);
      evaluation0.weightedAreaUnderROC();
      doubleArray0[7] = (double) (byte) (-32);
      SparseInstance sparseInstance0 = new SparseInstance((byte)49, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(3.0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.4059644168978003
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      evaluation2.numTruePositives(1);
      evaluation0.weightedTruePositiveRate();
      Evaluation evaluation3 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation2.recall(24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.704686708756774
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)110;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.weightedTruePositiveRate();
      evaluation1.weightedFMeasure();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.KBInformation();
      double double0 = evaluation1.m_SumSqrPredicted;
      evaluation0.toClassDetailsString("r[L%$#@|8jl");
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation1.m_TotalCoverage;
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation1.weightedFalsePositiveRate();
      MockRandom mockRandom0 = new MockRandom();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(2, true, true);
      try { 
        evaluation0.crossValidateModel((Classifier) simpleLogistic0, instances0, 6, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.057088248398375
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-1));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues((-1114383320));
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch2 = new LinearNNSearch();
      multiClassClassifierUpdateable0.setOptions(testInstances0.DEFAULT_WORDS);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      evaluation0.setPriors(instances0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      bufferedInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 100000);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-jb5)]a%`eg");
      multiClassClassifierUpdateable0.setSeed(0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedMatthewsCorrelation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedPrecision();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3687935749982674
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.disableAllAttributes();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues(109);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_MinTarget;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.960010444163081
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.falseNegativeRate(0);
      // Undeclared exception!
      try { 
        evaluation0.precision(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.020600991999019
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.KBMeanInformation();
      evaluation2.numTruePositives(10);
      evaluation1.weightedTruePositiveRate();
      evaluation1.getDiscardPredictions();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation1.recall(1);
      evaluation0.weightedRecall();
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation4.KBInformation();
      evaluation4.avgCost();
      evaluation4.SFMeanPriorEntropy();
      int int0 = 12;
      try { 
        Evaluation.handleCostOption("@relation", 19);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.5596847256688386
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<v#s^@LSpA!ZpVT_4");
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)11;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.setClassType((byte) (-50));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      AbstractFileLoader.runFileLoader(serializedInstancesLoader0, testInstances0.DEFAULT_WORDS);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setSeed((-2));
      double double1 = evaluation0.weightedFalseNegativeRate();
      double double2 = evaluation0.m_SumClass;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOptions();
      BestFirst bestFirst0 = new BestFirst();
      SelectedTag selectedTag0 = bestFirst0.getDirection();
      costSensitiveClassifier0.setCostMatrixSource(selectedTag0);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      double double3 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double5, double1, 0.01);
      
      evaluation0.getRevision();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      String string0 = Evaluation.makeOptionString(adaBoostM1_0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.561346369183279
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      evaluation1.numTruePositives(63);
      double double0 = evaluation1.m_Unclassified;
      boolean boolean0 = evaluation1.m_ClassIsNominal;
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 93
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.721291287881113
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      multiClassClassifierUpdateable0.toString();
      evaluation0.numTruePositives((-1301));
      evaluation1.weightedTruePositiveRate();
      evaluation0.getDiscardPredictions();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation2.recall(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3952444492812037
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      multiClassClassifierUpdateable0.toString();
      evaluation0.numTruePositives((-1301));
      evaluation1.weightedTruePositiveRate();
      evaluation0.getDiscardPredictions();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.SFMeanSchemeEntropy();
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation1.weightedRecall();
      evaluation1.pctCorrect();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.KBInformation();
      evaluation2.avgCost();
      evaluation1.SFMeanPriorEntropy();
      evaluation3.numFalseNegatives(19);
      evaluation0.useNoPriors();
      evaluation3.weightedFMeasure();
      try { 
        evaluation0.evaluateModelOnce((Classifier) multiClassClassifierUpdateable0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.141844860959406
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.setNumRelationalNominalValues(10);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      evaluation0.setPriors(instances0);
      Instance instance0 = linearNNSearch0.nearestNeighbour(sparseInstance0);
      double double0 = evaluation0.m_SumKBInfo;
      try { 
        evaluation0.evaluateModelOnce((Classifier) multiClassClassifierUpdateable0, instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.MultiClassClassifier", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3926553617299473
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominalValues((-1));
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      Evaluation evaluation2 = new Evaluation(instances1);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      try { 
        evaluation2.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.4181253315135156
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = (-847);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      CostMatrix costMatrix0 = null;
      evaluation0.weightedFalseNegativeRate();
      DenseInstance denseInstance0 = new DenseInstance(0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) multiClassClassifierUpdateable0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.9513024764316027
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[0] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)110;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      BayesNet bayesNet0 = new BayesNet();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setClassifier(multiClassClassifier0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte)0;
      multiClassClassifierUpdateable0.getMethod();
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) (byte)49;
      evaluation0.weightedAreaUnderROC();
      doubleArray0[7] = (double) (byte)0;
      SparseInstance sparseInstance0 = new SparseInstance((byte)0, doubleArray0);
      evaluation0.weightedMatthewsCorrelation();
      RandomTree randomTree0 = new RandomTree();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) randomTree0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("globalInfo");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      int int0 = 122;
      int int1 = 2;
      try { 
        Evaluation.handleCostOption("globalInfo", 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFFFD\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "graph";
      stringArray0[0] = "";
      Evaluation.main(stringArray0);
      Evaluation.handleCostOption(stringArray0[1], 97);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "";
      Evaluation.handleCostOption("", 97);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CoverTree coverTree0 = new CoverTree();
      int int0 = 480;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)112;
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)3;
      try { 
        pushbackInputStream0.unread(byteArray0, 1466, 14);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Evaluation.main((String[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "seedTipText");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[3];
      intArray0[0] = (-3526);
      intArray0[1] = 62;
      intArray0[2] = 62;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.7, intArray0, 1720);
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Instances instances0 = new Instances("seedTipText", arrayList0, 1821);
      arrayList0.add((Attribute) null);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
