/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 02:53:24 GMT 2020
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.255140204249916
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.comma();
      Token token3 = xPathLexer0.star();
      assertEquals("X", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.pipe();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("L", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer1.setPreviousToken(token1);
      Token token6 = xPathLexer0.dots();
      assertEquals("`", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.pipe();
      Token token7 = xPathLexer0.equals();
      assertEquals(">", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      xPathLexer1.operatorName();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer1.getPreviousToken();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      assertEquals("B", token9.getTokenText());
      
      xPathLexer1.setPreviousToken((Token) null);
      Token token10 = xPathLexer0.not();
      assertEquals("{", token10.getTokenText());
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer1.comma();
      assertEquals(32, token11.getTokenType());
      assertEquals("g", token11.getTokenText());
      
      char char0 = xPathLexer1.LA(3);
      assertEquals('2', char0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      Token token12 = xPathLexer1.doubleColon();
      assertEquals("Uu", token12.getTokenText());
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
      
      xPathLexer1.currentPosition();
      Token token14 = xPathLexer1.identifierOrOperatorName();
      assertEquals("2", token14.getTokenText());
      assertEquals(15, token14.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.600029344676226
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.equals();
      assertEquals("g", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightParen();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("2", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.setPreviousToken(token1);
      assertEquals("u", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals("o", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.star();
      assertEquals("m", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(31, token6.getTokenType());
      assertEquals(".", token6.getTokenText());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.dots();
      assertEquals("w", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      XPathLexer xPathLexer2 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer2.nextToken();
      xPathLexer2.dollar();
      xPathLexer2.slashes();
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.not();
      Token token9 = xPathLexer2.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("F", token9.getTokenText());
      
      Token token10 = xPathLexer1.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer2.not();
      assertEquals(23, token11.getTokenType());
      
      xPathLexer2.slashes();
      Token token12 = xPathLexer2.slashes();
      assertEquals(11, token12.getTokenType());
      assertEquals("9", token12.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token13 = xPathLexer2.dollar();
      assertEquals(26, token13.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5136792238196102
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.minus();
      xPathLexer1.minus();
      xPathLexer1.minus();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("1>q)v(>yX}fi!A");
      xPathLexer0.nextToken();
      xPathLexer2.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer3.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer4.doubleColon();
      xPathLexer2.number();
      xPathLexer1.number();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.at();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer4.relationalOperator();
      xPathLexer6.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.not();
      xPathLexer6.dots();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4499608036827671
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4y^Ri");
      Token token0 = xPathLexer0.dollar();
      assertEquals("4", token0.getTokenText());
      
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.dollar();
      String string0 = token1.toString();
      assertEquals("[ (13) (i)", string0);
      
      xPathLexer1.setXPath("ZG3Zf`V&\u0001C<Sp3xP");
      Token token6 = xPathLexer1.nextToken();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(32, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.pipe();
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("`", token7.getTokenText());
      
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer2.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer1.pipe();
      assertEquals("V", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer1.number();
      assertEquals(30, token11.getTokenType());
      assertEquals("", token11.getTokenText());
      
      Token token12 = xPathLexer1.at();
      assertEquals("&", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      xPathLexer2.nextToken();
      Token token13 = xPathLexer2.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer1.identifier();
      assertEquals("\u0001C", token14.getTokenText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7672469233958066
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("?(/uj){y.X@");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.operatorName();
      xPathLexer0.minus();
      xPathLexer3.minus();
      xPathLexer1.pipe();
      xPathLexer3.rightParen();
      xPathLexer3.number();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer3.and();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer4.literal();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer4.at();
      xPathLexer3.leftParen();
      xPathLexer5.relationalOperator();
      xPathLexer1.notEquals();
      Token token0 = xPathLexer2.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5831607412035043
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.equals();
      assertEquals("g", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      Token token4 = xPathLexer0.star();
      assertEquals("F", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (26) (u)", string0);
      
      xPathLexer0.setXPath("yH%H:k(e@b'rw");
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.setPreviousToken(token3);
      Token token7 = xPathLexer0.pipe();
      assertEquals("%", token7.getTokenText());
      
      Token token8 = xPathLexer1.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer1.dollar();
      Token token9 = xPathLexer0.colon();
      assertEquals("H", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer1.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      assertEquals(":", token12.getTokenText());
      
      Token token13 = xPathLexer1.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      Token token14 = xPathLexer1.not();
      assertEquals(23, token14.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token15 = xPathLexer2.identifier();
      assertEquals(15, token15.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4528332027229347
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.minus();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.consume((-957));
      xPathLexer0.plus();
      // Undeclared exception!
      try { 
        xPathLexer3.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.686919213601195
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      Token token0 = xPathLexer0.equals();
      assertEquals("g", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      assertEquals("U", token1.getTokenText());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("u", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("u", token4.getTokenText());
      
      xPathLexer0.number();
      Token token5 = xPathLexer0.dots();
      assertEquals("F", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      Token token6 = xPathLexer0.leftBracket();
      assertEquals("X", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer0.plus();
      assertEquals("c", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      xPathLexer2.and();
      Token token8 = xPathLexer2.identifier();
      assertEquals("com.werken.saxpath.XPathLexer", token8.getTokenText());
      
      xPathLexer2.mod();
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      assertEquals("B", token10.getTokenText());
      
      Token token11 = xPathLexer1.pipe();
      assertEquals(17, token11.getTokenType());
      assertEquals("g", token11.getTokenText());
      
      Token token12 = xPathLexer1.number();
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer0.at();
      assertEquals("=", token13.getTokenText());
      assertEquals(16, token13.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token14 = xPathLexer1.nextToken();
      assertEquals(15, token14.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token15 = xPathLexer2.notEquals();
      assertEquals(22, token15.getTokenType());
      
      Token token16 = xPathLexer1.comma();
      assertEquals(32, token16.getTokenType());
      assertEquals("!", token16.getTokenText());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.579351609760696
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4y^Ri");
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.setXPath("4y^Ri");
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.colon();
      xPathLexer0.not();
      xPathLexer0.getPreviousToken();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.LA(3);
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.not();
      assertNotSame(token2, token0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.650528041058855
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("u", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      String string0 = token3.toString();
      assertEquals("[ (30) (2)", string0);
      
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.not();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token4);
      assertEquals(5, token4.getTokenType());
      assertEquals("u", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("`", token5.getTokenText());
      
      Token token6 = xPathLexer0.minus();
      assertEquals("l", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.dollar();
      Token token7 = xPathLexer0.slashes();
      assertEquals(">", token7.getTokenText());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals("B", token8.getTokenText());
      
      Token token9 = xPathLexer0.not();
      assertEquals("{", token9.getTokenText());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals("s", token10.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.not();
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token12 = xPathLexer0.identifier();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer0.not();
      assertEquals(23, token13.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7044059188240914
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (2) (g)", string0);
      
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (6) (u)", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (3) (U)", string2);
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("2!", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("X", token4.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("9", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals("L", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("`", token7.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("l>>B{s", token8.getTokenText());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals("l", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token10 = xPathLexer2.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer2.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer2.identifier();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.847346397567314
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      Token token0 = xPathLexer0.equals();
      assertEquals("g", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("2", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.star();
      assertEquals("X", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals("c", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.identifier();
      xPathLexer2.and();
      xPathLexer2.identifier();
      xPathLexer2.mod();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      Token token6 = xPathLexer3.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals(23, token7.getTokenType());
      assertEquals("!", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals("B", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer6.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("com.werken.saxpath.XPathLexer", token9.getTokenText());
      
      Token token10 = xPathLexer3.doubleColon();
      assertEquals("om", token10.getTokenText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6683340817618728
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.equals();
      assertEquals("g", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("u", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      String string0 = token3.toString();
      assertEquals("[ (30) (2)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (26) (U)", string1);
      
      xPathLexer0.setPreviousToken(token1);
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("!", token4.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.plus();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("FXc9L", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token5);
      assertEquals("u", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.pipe();
      Token token7 = xPathLexer0.at();
      assertEquals("l", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (30) (2)");
      XPathLexer xPathLexer2 = new XPathLexer("|.bq!Xy|Lv`Sz)");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.setPreviousToken(token1);
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token8 = xPathLexer1.doubleColon();
      assertEquals("[ ", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(">", token9.getTokenText());
      assertEquals(9, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer1.leftParen();
      assertEquals("(", token10.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("|.bq!Xy|Lv`Sz)");
      Token token11 = xPathLexer6.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer7.nextToken();
      assertEquals(17, token12.getTokenType());
      assertEquals("|", token12.getTokenText());
      
      Token token13 = xPathLexer1.minus();
      assertEquals("3", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4156889930286005
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("F", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("T", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer1.whitespace();
      xPathLexer0.at();
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer1.dots();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer2.dollar();
      assertEquals(26, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.colon();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("/'0vFT");
      Token token8 = xPathLexer4.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer6.colon();
      assertEquals(18, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer5.dots();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token11 = xPathLexer8.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer1.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7871346495499394
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.plus();
      assertEquals("g", token0.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("F", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("X", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("epjHa|BX-?P?<HWFj");
      xPathLexer0.mod();
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer("epjHa|BX-?P?<HWFj");
      xPathLexer3.nextToken();
      Token token5 = xPathLexer3.dollar();
      assertEquals("|", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.slashes();
      xPathLexer3.identifierOrOperatorName();
      Token token6 = xPathLexer2.not();
      assertEquals("e", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer5.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer5.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer2.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("p", token9.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.identifierOrOperatorName();
      XPathLexer xPathLexer7 = new XPathLexer("g')^3eT9lU0WuY!pV]");
      Token token10 = xPathLexer7.identifier();
      assertEquals("g", token10.getTokenText());
      
      Token token11 = xPathLexer5.not();
      assertEquals(23, token11.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5830805624471396
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("u", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token5 = xPathLexer1.plus();
      assertEquals("c", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      xPathLexer2.and();
      Token token6 = xPathLexer1.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer4.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer0.and();
      XPathLexer xPathLexer5 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      XPathLexer xPathLexer6 = new XPathLexer(") (");
      Token token9 = xPathLexer5.nextToken();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer3.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer4.dots();
      assertEquals(13, token13.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5618720645823279
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.minus();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer3.literal();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("[ (6) (0)");
      xPathLexer5.at();
      Token token1 = xPathLexer5.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5974068535850596
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer("epjHa|BX-?P?<HWFj");
      xPathLexer3.comma();
      xPathLexer2.minus();
      xPathLexer0.minus();
      xPathLexer1.star();
      xPathLexer3.comma();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer("jQ9ljf");
      xPathLexer4.nextToken();
      xPathLexer4.whitespace();
      xPathLexer1.leftBracket();
      xPathLexer3.doubleColon();
      xPathLexer3.pipe();
      xPathLexer4.number();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.at();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer4.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer6.not();
      xPathLexer0.dots();
      Token token0 = xPathLexer3.div();
      assertNull(token0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.343464694691235
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.equals();
      assertEquals("g", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.minus();
      assertEquals(6, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.setXPath("#dFgk0Gr3'|n'P\t% <");
      Token token6 = xPathLexer2.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer4 = new XPathLexer("&).=4y*@6|Q");
      XPathLexer xPathLexer5 = new XPathLexer("wX.c M");
      xPathLexer0.nextToken();
      Token token8 = xPathLexer5.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("w", token8.getTokenText());
      
      Token token9 = xPathLexer4.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer0.at();
      assertEquals("#", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer5.dots();
      assertEquals(14, token11.getTokenType());
      assertEquals("X.", token11.getTokenText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.018811221797354
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s~@`+WoiqU");
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.slashes();
      assertEquals("~", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(4, token0.getTokenType());
      assertEquals("s", token0.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("@", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.notEquals();
      assertEquals("`+", token3.getTokenText());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("W", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals("o", token6.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.div();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.literal();
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.623047897840974
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      Token token2 = xPathLexer0.rightParen();
      Token token3 = xPathLexer0.nextToken();
      String string0 = token3.toString();
      assertEquals("[ (30) (2)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (26) (U)", string1);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.not();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("uFXc9L", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("`l>>B{s", token5.getTokenText());
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals(2, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("`", token6.getTokenText());
      
      Token token7 = xPathLexer0.minus();
      assertEquals("l", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      xPathLexer0.dollar();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.number();
      Token token10 = xPathLexer0.at();
      assertEquals("{", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token11 = xPathLexer1.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer0.not();
      assertEquals("s", token12.getTokenText());
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer0.identifier();
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3413567595828126
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.minus();
      token2.toString();
      String string0 = token0.toString();
      assertEquals("[ (2) (g)", string0);
      
      Token token3 = xPathLexer0.not();
      token3.toString();
      String string1 = token3.toString();
      assertEquals("[ (23) (2)", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (3) (U)", string2);
      
      String string3 = token2.toString();
      assertEquals("[ (6) (u)", string3);
      
      xPathLexer0.setPreviousToken(token3);
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("!u", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("F", token5.getTokenText());
      
      xPathLexer0.rightParen();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("9", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("L`l>>B{s", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("L", token9.getTokenText());
      
      xPathLexer2.literal();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      
      xPathLexer0.operatorName();
      Token token11 = xPathLexer5.colon();
      assertEquals(18, token11.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.704952377221797
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (3) (')", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (30) (0)", string1);
      
      Token token3 = xPathLexer0.star();
      token3.toString();
      token3.toString();
      String string2 = token3.toString();
      assertEquals("[ (20) (v)", string2);
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("N]zFm");
      XPathLexer xPathLexer2 = new XPathLexer("4Lp8,>qVNr");
      xPathLexer2.nextToken();
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token6 = xPathLexer1.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("N", token6.getTokenText());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.and();
      Token token8 = xPathLexer1.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.identifier();
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6425124560211488
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("V", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("\"", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token6 = xPathLexer1.rightParen();
      assertEquals(2, token6.getTokenType());
      
      xPathLexer1.setXPath("");
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(".XP$");
      Token token8 = xPathLexer1.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer("z3Xh");
      xPathLexer3.and();
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer("[M`&QC6[AEVN;36PH>");
      Token token9 = xPathLexer3.nextToken();
      assertEquals("z3Xh", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer3.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer3.leftParen();
      assertEquals(1, token11.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5345007646653968
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.star();
      assertEquals("{", token2.getTokenText());
      
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("Fq0{<4(Ku>A@8");
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("F", token3.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      Token token4 = xPathLexer1.comma();
      assertEquals("q", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("Ku", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer1.identifier();
      assertEquals("0", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.literal();
      assertNull(token7);
      
      xPathLexer2.div();
      xPathLexer2.hasMoreChars();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("{<", token9.getTokenText());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      assertEquals("A", token10.getTokenText());
      
      xPathLexer3.mod();
      XPathLexer xPathLexer4 = new XPathLexer("[aDnTE+wo");
      Token token11 = xPathLexer4.at();
      assertEquals("[", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      xPathLexer4.operatorName();
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer3.star();
      assertEquals(20, token13.getTokenType());
      
      Token token14 = xPathLexer2.slashes();
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4789969086492782
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("b?vR!i");
      Token token2 = xPathLexer1.leftBracket();
      xPathLexer0.nextToken();
      String string0 = token2.toString();
      assertEquals("[ (3) (b)", string0);
      
      Token token3 = xPathLexer1.at();
      String string1 = token3.toString();
      assertEquals("[ (16) (?)", string1);
      
      Token token4 = xPathLexer1.star();
      String string2 = token1.toString();
      assertEquals("[ (13) (n)", string2);
      
      xPathLexer1.setPreviousToken(token4);
      xPathLexer0.not();
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer1.plus();
      assertEquals("!", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.at();
      Token token8 = xPathLexer1.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("i", token8.getTokenText());
      
      Token token9 = xPathLexer0.getPreviousToken();
      assertEquals(">", token9.getTokenText());
      assertEquals(9, token9.getTokenType());
      
      Token token10 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3832040259606642
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.nextToken();
      token1.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.not();
      String string0 = token1.toString();
      assertEquals("[ (3) (n)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("B4yW~6Gh!Hb|\"");
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("B", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("wn>!1H3");
      xPathLexer2.operatorName();
      Token token5 = xPathLexer2.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("wn>!1H3");
      Token token6 = xPathLexer0.at();
      assertEquals("H", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("B4yW~6Gh!Hb|\"");
      XPathLexer xPathLexer5 = new XPathLexer("kU=ygm]`aYez");
      xPathLexer5.identifier();
      xPathLexer5.mod();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer6.and();
      xPathLexer3.setPreviousToken(token2);
      assertEquals(">", token2.getTokenText());
      assertEquals(9, token2.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("TM7,zL7pge[&M}m#N");
      Token token7 = xPathLexer6.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("co", token7.getTokenText());
      
      Token token8 = xPathLexer6.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("m.werken.saxpath.XPathLexer", token8.getTokenText());
      
      xPathLexer3.relationalOperator();
      Token token9 = xPathLexer5.nextToken();
      assertEquals(21, token9.getTokenType());
      assertEquals("=", token9.getTokenText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5367207508633596
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("V'Yk[ OJdnF&m");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer1.dots();
      Token token1 = xPathLexer1.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("Yk", token2.getTokenText());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals("[", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("V'Yk[ OJdnF&m");
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer2.operatorName();
      Token token7 = xPathLexer1.minus();
      assertEquals("O", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer4.comma();
      assertEquals(32, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.rightParen();
      xPathLexer3.rightParen();
      xPathLexer0.setXPath("V'Yk[ OJdnF&m");
      Token token9 = xPathLexer4.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer3.mod();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.and();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer0.rightParen();
      assertEquals("V", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token11 = xPathLexer1.nextToken();
      assertEquals("JdnF&m", token11.getTokenText());
      
      Token token12 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6636169651629746
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R'(x7jy^K-ox");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("R", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) ()", string0);
      
      xPathLexer0.slashes();
      Token token3 = xPathLexer0.minus();
      assertEquals("(", token3.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("[ (11) ()");
      Token token4 = xPathLexer1.pipe();
      assertEquals("[", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      assertEquals("x7jy", token6.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer1.and();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("^K-ox", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("^", token8.getTokenText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2316307219101708
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("{<", token3.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.slashes();
      assertEquals("K", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals(">", token6.getTokenText());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("A", token7.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token8 = xPathLexer0.nextToken();
      assertEquals(16, token8.getTokenType());
      assertEquals("@", token8.getTokenText());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals("8", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer0.identifier();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8594091587985293
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.equals();
      assertEquals("g", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("u", token1.getTokenText());
      
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.star();
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token3 = xPathLexer0.star();
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("L", token5.getTokenText());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("`l>>B{s", token6.getTokenText());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals("`", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.slashes();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals(">>", token8.getTokenText());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNull(token9);
      
      Token token10 = xPathLexer0.not();
      assertEquals("B", token10.getTokenText());
      assertEquals(23, token10.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token11 = xPathLexer0.rightBracket();
      assertEquals("{", token11.getTokenText());
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      assertEquals("s", token12.getTokenText());
      
      Token token13 = xPathLexer1.plus();
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8464803861348664
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "wn>!1H3";
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("wn>!1H3");
      xPathLexer1.notEquals();
      int int0 = (-2355);
      xPathLexer0.consume((-2355));
      xPathLexer0.comma();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2340516951609375
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V'Yk[ OJdnF&m");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("[ ", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (3) (')", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals("O", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("J", token6.getTokenText());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token8 = xPathLexer0.getPreviousToken();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("d", token9.getTokenText());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      assertEquals("n", token10.getTokenText());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6114509203246425
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      xPathLexer0.pipe();
      xPathLexer0.plus();
      xPathLexer0.minus();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token1);
      XPathLexer xPathLexer3 = new XPathLexer("Ar&:GI9gXnS'#");
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer3.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.Token");
      Token token2 = xPathLexer2.nextToken();
      assertNotSame(token2, token0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.287632269417286
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer0.setXPath("wn>!1H3");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      xPathLexer1.minus();
      xPathLexer1.setXPath("Vo\"Q}nv]QaG");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.pipe();
      xPathLexer1.setXPath("Vo\"Q}nv]QaG");
      xPathLexer1.pipe();
      xPathLexer0.operatorName();
      xPathLexer1.minus();
      xPathLexer0.comma();
      xPathLexer1.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer2.identifier();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer(",_p)}W");
      xPathLexer3.nextToken();
      xPathLexer2.hasMoreChars();
      xPathLexer3.leftBracket();
      xPathLexer3.dollar();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4222048641910223
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("q", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("{<", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals("4", token4.getTokenText());
      
      xPathLexer0.rightParen();
      Token token5 = xPathLexer0.slashes();
      assertEquals("K", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("u", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.number();
      Token token8 = xPathLexer0.identifier();
      assertEquals("A", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals("@", token9.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token10 = xPathLexer0.nextToken();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer1.literal();
      assertNull(token13);
      
      Token token14 = xPathLexer0.at();
      assertEquals(16, token14.getTokenType());
      
      Token token15 = xPathLexer0.dots();
      assertEquals(13, token15.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1075216951971942
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("j", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      String string0 = token1.toString();
      assertEquals("[ (16) (Q)", string0);
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("jf", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      String string1 = token4.toString();
      assertEquals("[ (-1) ()", string1);
      
      xPathLexer0.setPreviousToken(token4);
      XPathLexer xPathLexer1 = new XPathLexer("?^)YV~oy");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.plus();
      XPathLexer xPathLexer4 = new XPathLexer("jQ9ljf");
      xPathLexer0.at();
      XPathLexer xPathLexer5 = new XPathLexer("?^)YV~oy");
      xPathLexer3.mod();
      xPathLexer3.and();
      xPathLexer0.nextToken();
      xPathLexer2.and();
      XPathLexer xPathLexer6 = new XPathLexer("?^)YV~oy");
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.or();
      xPathLexer5.nextToken();
      Token token6 = xPathLexer3.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer4.leftBracket();
      assertEquals("j", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.436291863701441
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(x7jy^K-ox");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("_", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.nextToken();
      Token token4 = xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("_R`(x7jy^K-ox");
      xPathLexer1.nextToken();
      Token token5 = xPathLexer0.slashes();
      assertEquals("(", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (-1) (`(x7jy^K-ox)", string0);
      
      xPathLexer1.setPreviousToken(token2);
      Token token6 = xPathLexer1.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("kU=ygm]`aYez");
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("_", token7.getTokenText());
      
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.plus();
      assertEquals("x", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("_R`(x7jy^K-ox");
      Token token9 = xPathLexer3.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("kU=ygm]`aYez");
      XPathLexer xPathLexer5 = new XPathLexer("h");
      Token token10 = xPathLexer3.identifier();
      assertEquals("_R", token10.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken(token4);
      assertEquals(3, token4.getTokenType());
      assertEquals("`", token4.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token11 = xPathLexer6.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      xPathLexer2.nextToken();
      xPathLexer3.relationalOperator();
      Token token12 = xPathLexer5.nextToken();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4812584009450187
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.operatorName();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (3) (')", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (30) (0)", string1);
      
      Token token2 = xPathLexer0.star();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      String string2 = token2.toString();
      assertEquals("[ (20) (v)", string2);
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("[ (20) (v)");
      Token token3 = xPathLexer1.minus();
      assertEquals(6, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
      
      xPathLexer1.setXPath("&).=4y*@6|Q");
      Token token5 = xPathLexer1.nextToken();
      assertEquals("&).=4y*@6|Q", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("&", token6.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer1.and();
      XPathLexer xPathLexer4 = new XPathLexer("/'0vFT");
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer4.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("/", token7.getTokenText());
      
      Token token8 = xPathLexer1.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer1.pipe();
      assertEquals(17, token10.getTokenType());
      
      xPathLexer1.or();
      Token token11 = xPathLexer3.not();
      assertEquals(23, token11.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.643841795834675
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R'(x7jy^K-ox");
      xPathLexer0.setXPath("_R'(x7jy^K-ox");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("'", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) (_)", string0);
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("(", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.minus();
      Token token4 = xPathLexer0.dollar();
      assertEquals("y", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("^", token5.getTokenText());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("K", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      assertEquals("-", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("ox", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer0.identifier();
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer0.number();
      assertEquals(30, token12.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.736849806787138
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      Token token0 = xPathLexer0.equals();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("u", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("2", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals("!", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals("F", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.star();
      assertEquals("X", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      xPathLexer0.mod();
      Token token8 = xPathLexer0.dots();
      assertEquals("c", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.identifier();
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      assertEquals("!", token9.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("g", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("C2mJC1P+<");
      Token token10 = xPathLexer3.doubleColon();
      assertEquals(19, token10.getTokenType());
      assertEquals("C2", token10.getTokenText());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftParen();
      Token token11 = xPathLexer0.nextToken();
      assertEquals("B", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer1.minus();
      assertEquals(6, token12.getTokenType());
      assertEquals("u", token12.getTokenText());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.462388821407205
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.comma();
      Token token2 = xPathLexer0.star();
      assertEquals("X", token2.getTokenText());
      
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      Token token3 = xPathLexer0.pipe();
      assertEquals("`", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("epjHa|BX-?P?<HWFj");
      xPathLexer0.comma();
      xPathLexer2.minus();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer2.comma();
      Token token6 = xPathLexer2.rightParen();
      assertEquals("j", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer2.nextToken();
      assertEquals("Ha", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer1.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("^;uIx8");
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer1.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer3.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer0.div();
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      assertEquals(">", token12.getTokenText());
      
      xPathLexer3.relationalOperator();
      Token token13 = xPathLexer0.comma();
      assertEquals("B", token13.getTokenText());
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer1.equals();
      assertEquals(21, token14.getTokenType());
      
      Token token15 = xPathLexer0.nextToken();
      assertEquals((-1), token15.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4023078107584919
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.nextToken();
      String string0 = token2.toString();
      assertEquals("[ (30) (2)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (26) (U)", string1);
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("!", token3.getTokenText());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.dots();
      assertEquals("u", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("\"UPvA*+(4c3*qDt4n");
      XPathLexer xPathLexer2 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer2.identifier();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("FX", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer3.nextToken();
      assertEquals(2, token6.getTokenType());
      assertEquals(")", token6.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer3.leftParen();
      assertEquals(1, token7.getTokenType());
      assertEquals(" ", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("c9L", token8.getTokenText());
      
      Token token9 = xPathLexer1.minus();
      assertEquals("\"", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2050736416978187
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      token1.toString();
      token1.toString();
      xPathLexer0.star();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer1 = new XPathLexer("HRYN+");
      xPathLexer1.nextToken();
      xPathLexer0.mod();
      xPathLexer1.and();
      Token token2 = xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.plus();
      xPathLexer1.isIdentifierChar('=');
      Token token3 = xPathLexer1.leftParen();
      assertNotSame(token3, token2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2827392085387403
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(x7jy^K-ox");
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("_", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (15) (R)", string0);
      
      Token token3 = xPathLexer0.star();
      assertEquals("`", token3.getTokenText());
      
      String string1 = token0.toString();
      assertEquals("[ (13) ()", string1);
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("(x", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.literal();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals("7", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (15) (R)");
      xPathLexer5.operatorName();
      Token token8 = xPathLexer4.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4863215480224454
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.operatorName();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.nextToken();
      token0.toString();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.slashes();
      token0.toString();
      token1.toString();
      xPathLexer0.setPreviousToken((Token) null);
      Token token2 = xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer("/'0vFT");
      xPathLexer1.not();
      xPathLexer1.operatorName();
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer("/'0vFT");
      xPathLexer0.at();
      XPathLexer xPathLexer4 = new XPathLexer("kU=ygm]`aYez");
      XPathLexer xPathLexer5 = new XPathLexer("PdN4{|x(2G");
      xPathLexer2.identifier();
      xPathLexer5.mod();
      xPathLexer5.and();
      XPathLexer xPathLexer6 = new XPathLexer("[].l3_-J.x7k2d");
      xPathLexer6.setPreviousToken(token2);
      XPathLexer xPathLexer7 = new XPathLexer("PdN4{|x(2G");
      Token token3 = xPathLexer1.doubleColon();
      xPathLexer4.nextToken();
      xPathLexer3.relationalOperator();
      Token token4 = xPathLexer1.nextToken();
      assertNotSame(token4, token3);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4343750176275674
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.minus();
      xPathLexer0.minus();
      xPathLexer0.leftBracket();
      xPathLexer0.pipe();
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.consume(117);
      xPathLexer0.slashes();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      Token token0 = xPathLexer0.colon();
      Token token1 = xPathLexer0.not();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7080560750650111
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("co", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(14, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.minus();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals("werken.saxpath.Token", token5.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.setXPath("GBaPUBNq'zf8*n40XX/");
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("G", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("W)r#_DgFp");
      Token token9 = xPathLexer3.nextToken();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer2.plus();
      assertEquals(5, token10.getTokenType());
      
      xPathLexer3.literal();
      Token token11 = xPathLexer3.at();
      assertEquals(16, token11.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6093734788015523
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("{<", token3.getTokenText());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.rightParen();
      Token token5 = xPathLexer0.slashes();
      assertEquals("K", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(9, token6.getTokenType());
      assertEquals(">", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("A", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer0.plus();
      assertEquals("@", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer3.literal();
      assertNull(token9);
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("[ (6) (0)");
      Token token10 = xPathLexer5.at();
      assertEquals(16, token10.getTokenType());
      
      xPathLexer5.operatorName();
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals("8", token11.getTokenText());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6445692504081966
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(x7jy^K-ox");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("_", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("_R`(x7jy^K-ox");
      xPathLexer1.nextToken();
      xPathLexer0.slashes();
      token3.toString();
      token3.toString();
      xPathLexer1.setPreviousToken(token2);
      assertEquals(3, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("kU=ygm]`aYez");
      xPathLexer1.not();
      xPathLexer0.operatorName();
      xPathLexer0.plus();
      XPathLexer xPathLexer3 = new XPathLexer("_R`(x7jy^K-ox");
      Token token4 = xPathLexer3.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer2.or();
      Token token5 = xPathLexer1.nextToken();
      assertEquals("_R", token5.getTokenText());
      
      Token token6 = xPathLexer3.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("R", token7.getTokenText());
      
      xPathLexer3.identifierOrOperatorName();
      Token token8 = xPathLexer2.not();
      assertEquals("k", token8.getTokenText());
      
      Token token9 = xPathLexer3.plus();
      assertEquals("`", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("_kfXQh&:P");
      Token token10 = xPathLexer4.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer1.not();
      assertEquals("`", token11.getTokenText());
      assertEquals(23, token11.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token12 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.627642586359356
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("Q", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.at();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      xPathLexer0.pipe();
      Token token2 = xPathLexer0.star();
      assertEquals("f", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.setXPath("c(1S1>Y_A,6");
      Token token3 = xPathLexer0.pipe();
      assertEquals("c", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.rightParen();
      Token token6 = xPathLexer1.rightParen();
      assertEquals(2, token6.getTokenType());
      
      xPathLexer2.setXPath("/7mI!P@CE@u`h-tw");
      Token token7 = xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("c(1S1>Y_A,6");
      xPathLexer3.mod();
      Token token8 = xPathLexer2.colon();
      assertEquals("/", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer2.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer0.nextToken();
      assertNotSame(token12, token7);
      
      Token token13 = xPathLexer1.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer1.slashes();
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.555041824876283
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.star();
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token3 = xPathLexer1.slashes();
      assertEquals("[", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (-1) (G 2VX\u0002XGY>$G`/)", string0);
      
      token0.toString();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
      
      String string1 = token0.toString();
      assertEquals("[ (20) (})", string1);
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (20) (})");
      Token token6 = xPathLexer2.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      Token token7 = xPathLexer1.at();
      assertEquals(" ", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifier();
      xPathLexer0.mod();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token8 = xPathLexer3.nextToken();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer6.leftParen();
      XPathLexer xPathLexer7 = new XPathLexer(";U-.875_7+jX89g_E{v");
      xPathLexer7.nextToken();
      Token token9 = xPathLexer4.nextToken();
      assertEquals(3, token9.getTokenType());
      assertEquals("[", token9.getTokenText());
      
      Token token10 = xPathLexer2.equals();
      assertEquals(" ", token10.getTokenText());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5693941148384472
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      Token token0 = xPathLexer0.equals();
      assertEquals("g", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("2", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals("u", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("F", token5.getTokenText());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("X", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.identifier();
      xPathLexer2.and();
      Token token7 = xPathLexer2.identifier();
      assertEquals("com.werken.saxpath.XPathLexer", token7.getTokenText());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals("cB", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer1.plus();
      assertEquals("!", token10.getTokenText());
      assertEquals(5, token10.getTokenType());
      
      xPathLexer2.mod();
      xPathLexer1.and();
      Token token11 = xPathLexer0.nextToken();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer1.dollar();
      assertEquals(26, token12.getTokenType());
      assertEquals("u", token12.getTokenText());
      
      xPathLexer0.and();
      Token token13 = xPathLexer1.literal();
      assertNull(token13);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token14 = xPathLexer3.at();
      assertEquals(16, token14.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.2733887271460567
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("j", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      String string0 = token1.toString();
      assertEquals("[ (16) (Q)", string0);
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("l", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer0.plus();
      assertEquals("j", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token4);
      assertEquals(15, token4.getTokenType());
      assertEquals("f", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("?^)YV~oy");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.plus();
      XPathLexer xPathLexer4 = new XPathLexer("jQ9ljf");
      xPathLexer0.at();
      XPathLexer xPathLexer5 = new XPathLexer("?^)YV~oy");
      xPathLexer3.mod();
      xPathLexer3.and();
      xPathLexer0.nextToken();
      xPathLexer2.and();
      Token token6 = xPathLexer5.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer3.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer4.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("j", token8.getTokenText());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6700887135306222
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (3) (n)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.not();
      assertEquals("!", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.plus();
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("3", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(13, token0.getTokenType());
      
      xPathLexer1.pipe();
      xPathLexer1.minus();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      XPathLexer xPathLexer2 = new XPathLexer("wn>!1H3");
      Token token5 = xPathLexer2.colon();
      assertEquals("w", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer2.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("n", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.number();
      xPathLexer1.at();
      xPathLexer3.relationalOperator();
      xPathLexer1.and();
      Token token7 = xPathLexer2.nextToken();
      assertEquals(9, token7.getTokenType());
      assertEquals(">", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("wn>!1H3");
      Token token8 = xPathLexer5.plus();
      assertEquals("w", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer5.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer2.at();
      assertEquals("!", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7199766373687226
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      XPathLexer xPathLexer1 = new XPathLexer("Vo\"Q}nv]QaG");
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer1.operatorName();
      xPathLexer1.minus();
      xPathLexer0.minus();
      xPathLexer2.star();
      xPathLexer0.comma();
      xPathLexer1.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8454766978413668
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("epjHa|BX-?P?<HWFj");
      xPathLexer2.operatorName();
      xPathLexer2.minus();
      xPathLexer0.minus();
      xPathLexer1.pipe();
      xPathLexer0.rightParen();
      xPathLexer2.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.mod();
      xPathLexer2.and();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer3.literal();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftBracket();
      xPathLexer4.at();
      xPathLexer3.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer1.notEquals();
      Token token0 = xPathLexer3.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6111623761634732
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer0.plus();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("U", token0.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.at();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.star();
      Token token2 = xPathLexer0.comma();
      assertEquals("u", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.number();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("^R{,Q4QihNVLYd.7F");
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("^", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("Q\u0007lyiNF");
      Token token6 = xPathLexer2.plus();
      assertEquals("Q", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      xPathLexer2.and();
      Token token7 = xPathLexer2.identifier();
      assertEquals("\u0007lyiNF", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.mod();
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer2.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      assertEquals(">", token10.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("Q\u0007lyiNF");
      Token token11 = xPathLexer4.number();
      assertEquals(30, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer5.at();
      assertEquals(16, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("^R{,Q4QihNVLYd.7F");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer7.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      xPathLexer7.not();
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token14 = xPathLexer8.identifier();
      assertEquals(15, token14.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.68626671821398
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("'", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("0", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("v", token3.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("T", token4.getTokenText());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      Token token5 = xPathLexer1.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.mod();
      Token token8 = xPathLexer1.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("/'0vFT");
      Token token9 = xPathLexer2.nextToken();
      assertEquals("/", token9.getTokenText());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer0.slashes();
      Token token11 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
      assertEquals("", token11.getTokenText());
      
      xPathLexer0.not();
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
      
      Token token14 = xPathLexer2.not();
      assertEquals("'", token14.getTokenText());
      
      Token token15 = xPathLexer2.slashes();
      assertEquals(11, token15.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.identifier();
      Token token16 = xPathLexer1.not();
      assertEquals(23, token16.getTokenType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.526129747131952
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      Token token0 = xPathLexer0.equals();
      assertEquals("x", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.star();
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.nextToken();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("G", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      token2.toString();
      token1.toString();
      Token token5 = xPathLexer0.pipe();
      assertEquals(" ", token5.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (20) (})", string0);
      
      Token token6 = xPathLexer0.plus();
      assertEquals("", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (20) (})");
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("[", token7.getTokenText());
      
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
      assertEquals(" ", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifier();
      xPathLexer0.mod();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token9 = xPathLexer3.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("x", token9.getTokenText());
      
      xPathLexer6.leftParen();
      XPathLexer xPathLexer7 = new XPathLexer(";U-.875_7+jX89g_E{v");
      xPathLexer7.nextToken();
      Token token10 = xPathLexer4.nextToken();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6046214323512686
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("V", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("o", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer0.comma();
      assertEquals("\"", token8.getTokenText());
      assertEquals(32, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer0.rightParen();
      assertEquals("Q", token9.getTokenText());
      
      xPathLexer1.rightParen();
      xPathLexer2.setXPath("Vo\"Q}nv]QaG");
      Token token10 = xPathLexer1.rightParen();
      assertEquals(2, token10.getTokenType());
      
      xPathLexer1.setXPath("Vo\"Q}nv]QaG");
      Token token11 = xPathLexer0.nextToken();
      assertEquals("}nv]QaG", token11.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("p*--%DhKl3#t=WR");
      xPathLexer3.identifier();
      xPathLexer0.mod();
      xPathLexer1.and();
      xPathLexer3.setPreviousToken((Token) null);
      XPathLexer xPathLexer4 = new XPathLexer("PJf(O");
      Token token12 = xPathLexer3.nextToken();
      assertEquals("*", token12.getTokenText());
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer1.leftParen();
      assertEquals(1, token13.getTokenType());
      assertEquals("V", token13.getTokenText());
      
      Token token14 = xPathLexer4.nextToken();
      assertEquals(15, token14.getTokenType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.2706801160264147
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.star();
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("1", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      String string0 = token2.toString();
      assertEquals("[ (3) (!)", string0);
      
      token0.toString();
      token0.toString();
      Token token4 = xPathLexer0.star();
      String string1 = token0.toString();
      assertEquals("[ (-2) ()", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (13) (>)", string2);
      
      xPathLexer0.setPreviousToken(token0);
      Token token5 = xPathLexer0.not();
      assertEquals("3", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token4);
      assertEquals(20, token4.getTokenType());
      assertEquals("H", token4.getTokenText());
      
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer2.dollar();
      assertEquals(26, token10.getTokenType());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3133556704793543
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R'(x7jy^K-ox");
      xPathLexer0.setXPath("_R'(x7jy^K-ox");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("'", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) (_)", string0);
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.minus();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("y", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("^", token5.getTokenText());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("K", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals("", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(6, token8.getTokenType());
      assertEquals("-", token8.getTokenText());
      
      Token token9 = xPathLexer0.not();
      assertEquals("o", token9.getTokenText());
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.identifier();
      assertEquals(15, token10.getTokenType());
      assertEquals("x", token10.getTokenText());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.2062683803849679
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.plus();
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (3) (')", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (30) (0)", string1);
      
      Token token3 = xPathLexer0.star();
      token3.toString();
      token3.toString();
      token3.toString();
      String string2 = token3.toString();
      assertEquals("[ (20) (v)", string2);
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      xPathLexer0.setPreviousToken(token4);
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.setPreviousToken(token4);
      assertEquals(6, token4.getTokenType());
      
      Token token7 = xPathLexer2.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer3.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer4.slashes();
      Token token9 = xPathLexer4.dollar();
      assertEquals(26, token9.getTokenType());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6680588473968714
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("F~wv1d{'zBw/");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.not();
      xPathLexer0.minus();
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.getPreviousToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.identifier();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.star();
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.div();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.66208498443415
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      Token token0 = xPathLexer0.equals();
      assertEquals("g", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("2", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals("!", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.at();
      Token token4 = xPathLexer0.star();
      assertEquals("X", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.number();
      Token token5 = xPathLexer0.dots();
      assertEquals("c", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("B", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("=", token7.getTokenText());
      
      xPathLexer1.and();
      xPathLexer0.identifier();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.mod();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token8 = xPathLexer4.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("c", token8.getTokenText());
      
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer3.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer3.at();
      assertEquals(16, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer2.nextToken();
      assertEquals("om.werken.saxpath.XPathLexer", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer6.not();
      assertEquals(23, token13.getTokenType());
      
      xPathLexer6.identifier();
      Token token14 = xPathLexer5.minus();
      assertEquals(6, token14.getTokenType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8074775545599038
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.star();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("9", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.dots();
      assertEquals("L", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("`l>>B{s", token6.getTokenText());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals("`", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.slashes();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(">>", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token9 = xPathLexer0.not();
      assertEquals("B", token9.getTokenText());
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals("{", token10.getTokenText());
      assertEquals(11, token10.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token11 = xPathLexer0.rightBracket();
      assertEquals("s", token11.getTokenText());
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      Token token13 = xPathLexer0.getPreviousToken();
      assertEquals("s", token13.getTokenText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1881574419835654
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(9, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (3) (n)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.not();
      assertEquals("!", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals("1", token4.getTokenText());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      String string1 = token0.toString();
      assertEquals("[ (13) (w)", string1);
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer1.pipe();
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("wn>!1H3");
      Token token8 = xPathLexer2.colon();
      assertEquals("w", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer2.pipe();
      assertEquals("n", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.number();
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("6y+{=cF `~-");
      xPathLexer4.nextToken();
      Token token11 = xPathLexer1.not();
      assertEquals(23, token11.getTokenType());
      
      xPathLexer3.leftBracket();
      Token token12 = xPathLexer4.dollar();
      assertEquals("y", token12.getTokenText());
      assertEquals(26, token12.getTokenType());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.476220868051809
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.star();
      assertEquals("f", token0.getTokenText());
      
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer("e}jHa>BX-1P?<HWFj");
      xPathLexer3.comma();
      xPathLexer2.minus();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer3.comma();
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("jQ9ljf");
      Token token5 = xPathLexer4.nextToken();
      assertEquals("jQ9ljf", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer4.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("jQ9ljf");
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer3.doubleColon();
      assertEquals("jH", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer3.dollar();
      assertEquals("a", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      xPathLexer2.mod();
      XPathLexer xPathLexer6 = new XPathLexer(" G3e)GWm@=&&OV:t85");
      Token token10 = xPathLexer4.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer3.relationalOperator();
      assertEquals(9, token11.getTokenType());
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      Token token13 = xPathLexer3.equals();
      assertEquals(21, token13.getTokenType());
      assertEquals("B", token13.getTokenText());
      
      Token token14 = xPathLexer2.nextToken();
      assertEquals((-1), token14.getTokenType());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5360147163036384
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.plus();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.plus();
      xPathLexer0.literal();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      Token token1 = xPathLexer1.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7208837245204818
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.plus();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("q", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer1.div();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      xPathLexer1.whitespace();
      xPathLexer0.star();
      Token token3 = xPathLexer0.comma();
      assertEquals("<", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("4", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("^%EM");
      Token token5 = xPathLexer2.pipe();
      assertEquals("^", token5.getTokenText());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      xPathLexer1.and();
      Token token7 = xPathLexer2.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      XPathLexer xPathLexer4 = new XPathLexer("\"WhH!+9/@");
      xPathLexer2.operatorName();
      xPathLexer4.minus();
      Token token8 = xPathLexer1.minus();
      assertEquals("q", token8.getTokenText());
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer2.leftBracket();
      assertEquals(3, token9.getTokenType());
      assertEquals("E", token9.getTokenText());
      
      Token token10 = xPathLexer3.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightParen();
      assertEquals("K", token11.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer5.number();
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer1.identifierOrOperatorName();
      assertEquals("0", token13.getTokenText());
      
      xPathLexer2.mod();
      xPathLexer2.and();
      Token token14 = xPathLexer1.nextToken();
      assertEquals((-1), token14.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token15 = xPathLexer4.plus();
      assertEquals(5, token15.getTokenType());
      
      xPathLexer6.literal();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token16 = xPathLexer7.at();
      assertEquals(16, token16.getTokenType());
      
      Token token17 = xPathLexer6.identifierOrOperatorName();
      assertEquals(15, token17.getTokenType());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6703512217871535
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("V", token6.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals("\"", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals("}n", token9.getTokenText());
      assertEquals(19, token9.getTokenType());
      
      xPathLexer0.identifier();
      Token token10 = xPathLexer0.minus();
      assertEquals("]", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("QaG", token11.getTokenText());
      
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      assertEquals("Q", token12.getTokenText());
      
      xPathLexer0.or();
      Token token13 = xPathLexer0.rightBracket();
      assertEquals("a", token13.getTokenText());
      assertEquals(4, token13.getTokenType());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5631916770928682
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.plus();
      assertEquals("g", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.pipe();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.dollar();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("`", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("epjHa|BX-?P?<HWFj");
      xPathLexer2.operatorName();
      xPathLexer2.minus();
      Token token4 = xPathLexer2.star();
      assertEquals("p", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer1.star();
      assertEquals(20, token6.getTokenType());
      
      xPathLexer2.comma();
      Token token7 = xPathLexer2.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer2.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("a", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("^;uIx8");
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer1.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer3.dollar();
      assertEquals(26, token11.getTokenType());
      assertEquals("^", token11.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer4 = new XPathLexer(" G3e)GW@=&&OV:t85");
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token13 = xPathLexer0.comma();
      assertEquals(">", token13.getTokenText());
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer1.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6529710309216357
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.setXPath("X~a29zqz]U:]#}d");
      XPathLexer xPathLexer1 = new XPathLexer("X~a29zqz]U:]#}d");
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("X", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.operatorName();
      xPathLexer2.leftBracket();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("~", token4.getTokenText());
      
      Token token5 = xPathLexer1.comma();
      assertEquals("~", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      xPathLexer2.rightParen();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("a29zqz]U:]#}d", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("snh8wD");
      XPathLexer xPathLexer4 = new XPathLexer("34NQ>BJ,=");
      Token token7 = xPathLexer4.doubleColon();
      assertEquals("34", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals("a29zqz", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("snh8wD");
      Token token9 = xPathLexer6.minus();
      assertEquals("s", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer4.nextToken();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer1.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals("a", token11.getTokenText());
      
      Token token12 = xPathLexer5.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      Token token13 = xPathLexer5.slashes();
      assertEquals(11, token13.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token14 = xPathLexer7.dollar();
      assertEquals(26, token14.getTokenType());
      
      Token token15 = xPathLexer4.dots();
      assertEquals(13, token15.getTokenType());
      assertEquals(">", token15.getTokenText());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5751957263041367
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.star();
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer0.nextToken();
      Token token2 = xPathLexer1.slashes();
      token1.toString();
      token0.toString();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.pipe();
      token0.toString();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("[ (20) (})");
      xPathLexer2.slashes();
      xPathLexer2.minus();
      xPathLexer1.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.setPreviousToken(token2);
      XPathLexer xPathLexer6 = new XPathLexer("[ (20) (})");
      xPathLexer2.doubleColon();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.leftParen();
      XPathLexer xPathLexer9 = new XPathLexer("");
      xPathLexer9.dollar();
      xPathLexer9.star();
      xPathLexer9.nextToken();
      xPathLexer0.minus();
      Token token3 = xPathLexer1.relationalOperator();
      assertNull(token3);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4430120602698204
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      Token token0 = xPathLexer0.equals();
      assertEquals("x", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.star();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("H", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer1.slashes();
      token3.toString();
      token1.toString();
      xPathLexer1.setPreviousToken(token1);
      Token token6 = xPathLexer0.pipe();
      assertEquals("", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (20) (})", string0);
      
      Token token7 = xPathLexer0.plus();
      assertEquals("2", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (20) (})");
      Token token8 = xPathLexer2.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("[", token8.getTokenText());
      
      xPathLexer2.minus();
      Token token9 = xPathLexer0.minus();
      xPathLexer1.setPreviousToken(token9);
      assertEquals("V", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (20) (})");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer4.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer1.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token11 = xPathLexer1.nextToken();
      assertEquals(1, token11.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token12 = xPathLexer2.nextToken();
      assertEquals("(", token12.getTokenText());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6585170210507363
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.plus();
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (3) (')", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (30) (0)", string1);
      
      Token token3 = xPathLexer0.star();
      token3.toString();
      token3.toString();
      String string2 = token3.toString();
      assertEquals("[ (20) (v)", string2);
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("T", token5.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("N]zFm");
      XPathLexer xPathLexer2 = new XPathLexer("4Lp8,>qVNr");
      xPathLexer2.nextToken();
      Token token7 = xPathLexer1.dollar();
      assertEquals("N", token7.getTokenText());
      
      xPathLexer1.slashes();
      Token token8 = xPathLexer2.identifierOrOperatorName();
      assertNull(token8);
      
      xPathLexer2.not();
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer2.number();
      Token token10 = xPathLexer2.not();
      assertEquals("p", token10.getTokenText());
      assertEquals(23, token10.getTokenType());
      
      xPathLexer0.slashes();
      Token token11 = xPathLexer2.slashes();
      assertEquals("8", token11.getTokenText());
      assertEquals(11, token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token12 = xPathLexer0.dollar();
      assertEquals(26, token12.getTokenType());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4993504624484368
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.plus();
      assertEquals("g", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("u", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("2", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("!", token4.getTokenText());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("u", token5.getTokenText());
      
      Token token6 = xPathLexer0.comma();
      assertEquals("F", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.pipe();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.dollar();
      String string0 = token1.toString();
      assertEquals("[ (11) (U)", string0);
      
      xPathLexer0.setXPath("ML51hTfG:");
      Token token8 = xPathLexer0.nextToken();
      assertEquals("ML51hTfG", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(18, token9.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.pipe();
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer0.colon();
      Token token12 = xPathLexer0.pipe();
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
      
      Token token14 = xPathLexer0.at();
      assertEquals(16, token14.getTokenType());
      
      Token token15 = xPathLexer0.nextToken();
      assertEquals((-1), token15.getTokenType());
      
      Token token16 = xPathLexer0.not();
      assertEquals(23, token16.getTokenType());
      
      Token token17 = xPathLexer0.identifier();
      assertEquals(15, token17.getTokenType());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.356155860187508
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V'Yk[ OJdnF&m");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("[ ", token2.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (3) (')", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token3 = xPathLexer1.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer1.and();
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      xPathLexer0.hasMoreChars();
      Token token7 = xPathLexer0.leftParen();
      assertEquals("O", token7.getTokenText());
      
      Token token8 = xPathLexer1.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer2.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer1.leftParen();
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      assertEquals("Jd", token11.getTokenText());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6933028454495271
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      Token token6 = xPathLexer0.pipe();
      assertEquals("V", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      Token token7 = xPathLexer0.comma();
      assertEquals("\"", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("Q}", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals("nv", token9.getTokenText());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("]", token10.getTokenText());
      assertEquals(4, token10.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token11 = xPathLexer0.leftBracket();
      assertEquals(3, token11.getTokenType());
      assertEquals("Q", token11.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("E6VB/^t^2NB.m?0w~B");
      Token token12 = xPathLexer2.dollar();
      assertEquals(26, token12.getTokenType());
      assertEquals("E", token12.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.37384420290189
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("'", token1.getTokenText());
      
      xPathLexer0.dollar();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("v", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("T", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      Token token4 = xPathLexer1.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.at();
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.mod();
      Token token6 = xPathLexer1.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("/'0vFT");
      Token token7 = xPathLexer2.nextToken();
      assertEquals(11, token7.getTokenType());
      assertEquals("/", token7.getTokenText());
      
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.colon();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("/'0vFT");
      Token token10 = xPathLexer4.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
      
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer6.colon();
      assertEquals(18, token12.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer7.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      xPathLexer8.slashes();
      xPathLexer7.slashes();
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6566707135335057
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(x7jy^K-ox");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.dots();
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.nextToken();
      token2.toString();
      token0.toString();
      token1.toString();
      String string0 = token2.toString();
      assertEquals("[ (-1) (`(x7jy^K-ox)", string0);
      
      Token token3 = xPathLexer0.star();
      assertEquals("`", token3.getTokenText());
      
      String string1 = token0.toString();
      assertEquals("[ (-2) ()", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (13) (_)", string2);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.and();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("(x", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals("7jy", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals("^", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("K-", token7.getTokenText());
      
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals("o", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token9 = xPathLexer1.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals("x", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7588525681482472
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      Token token0 = xPathLexer0.dots();
      assertEquals("Q", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("j", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("f", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.pipe();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("m~V#(^-@r");
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      Token token5 = xPathLexer2.minus();
      assertEquals("m", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer2.pipe();
      assertEquals("~", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.and();
      Token token9 = xPathLexer2.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("V", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer3.plus();
      assertEquals(5, token10.getTokenType());
      
      xPathLexer3.literal();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token12 = xPathLexer6.notEquals();
      assertEquals(22, token12.getTokenType());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0665554854365376
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.dots();
      assertEquals("w", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.nextToken();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (3) (n)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals(">", token2.getTokenText());
      assertEquals(9, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals("!", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("1", token4.getTokenText());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("H", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals("3", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.2554353833638183
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.getXPath();
      xPathLexer0.endPosition();
      xPathLexer0.isIdentifierStartChar('d');
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.or();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.at();
      xPathLexer0.isIdentifierStartChar(':');
      xPathLexer0.literal();
      xPathLexer0.equals();
      xPathLexer0.consume();
      assertEquals("", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.588573162682118
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.setXPath("");
      xPathLexer0.and();
      xPathLexer0.consume((-878));
      xPathLexer0.consume();
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0684061299799992
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      xPathLexer0.minus();
      xPathLexer0.isIdentifierStartChar('p');
      xPathLexer0.div();
      xPathLexer0.div();
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-607));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.169212334758056
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.pipe();
      Token token4 = xPathLexer0.equals();
      assertEquals("c", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.colon();
      assertEquals("9", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("L", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token2);
      assertEquals("u", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token8 = xPathLexer2.comma();
      assertEquals("g", token8.getTokenText());
      assertEquals(32, token8.getTokenType());
      
      xPathLexer2.LA(1);
      xPathLexer2.or();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("`l", token9.getTokenText());
      
      Token token10 = xPathLexer2.notEquals();
      assertEquals("Uu", token10.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.currentPosition();
      Token token11 = xPathLexer2.identifierOrOperatorName();
      assertEquals("2", token11.getTokenText());
      assertNotNull(token11);
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5028520361683846
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("v", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.number();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("/'0vFT");
      Token token5 = xPathLexer1.leftBracket();
      assertEquals("/", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("/'0vFT");
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer2.and();
      xPathLexer2.identifier();
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer3.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("/", token8.getTokenText());
      
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer3.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("'", token11.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token13 = xPathLexer5.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer0.identifier();
      assertEquals(15, token14.getTokenType());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.669354661778788
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("q", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("{<", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token4 = xPathLexer1.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("vW{");
      Token token6 = xPathLexer2.nextToken();
      assertEquals("vW", token6.getTokenText());
      
      Token token7 = xPathLexer2.dollar();
      assertEquals("{", token7.getTokenText());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer2.identifierOrOperatorName();
      assertNull(token9);
      
      Token token10 = xPathLexer0.not();
      assertEquals(">", token10.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      Token token11 = xPathLexer0.plus();
      assertEquals("A", token11.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      Token token12 = xPathLexer4.number();
      assertEquals(30, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer5.not();
      assertEquals(23, token13.getTokenType());
      
      xPathLexer5.getPreviousToken();
      Token token14 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token14.getTokenType());
      
      Token token15 = xPathLexer4.dollar();
      assertEquals("c", token15.getTokenText());
      assertEquals(26, token15.getTokenType());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.4863298838934904
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("mC`)z}9gtqAY8+M.}");
      Token token2 = xPathLexer1.minus();
      token2.toString();
      token1.toString();
      token0.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (m)", string0);
      
      token0.toString();
      String string1 = token1.toString();
      assertEquals("[ (13) (')", string1);
      
      xPathLexer1.setPreviousToken(token0);
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("C`", token3.getTokenText());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(")", token4.getTokenText());
      
      xPathLexer0.rightParen();
      Token token5 = xPathLexer0.slashes();
      assertEquals("v", token5.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer1.rightParen();
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer1.identifier();
      assertEquals("", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token8 = xPathLexer2.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      xPathLexer2.dollar();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("T", token9.getTokenText());
      
      Token token10 = xPathLexer2.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer1.literal();
      assertEquals(27, token11.getTokenType());
      assertNotNull(token11);
      assertEquals("9gtqAY8+M.", token11.getTokenText());
      
      Token token12 = xPathLexer1.at();
      assertEquals(16, token12.getTokenType());
      
      xPathLexer3.dots();
      Token token13 = xPathLexer2.rightParen();
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer3.dollar();
      assertEquals(26, token14.getTokenType());
      
      Token token15 = xPathLexer0.comma();
      assertEquals(32, token15.getTokenType());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7005163372380365
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.plus();
      assertEquals("g", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("U", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("2", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("!", token4.getTokenText());
      
      Token token5 = xPathLexer0.star();
      assertEquals("u", token5.getTokenText());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("F", token6.getTokenText());
      
      xPathLexer0.literal();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.dollar();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer0.or();
      Token token11 = xPathLexer0.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer0.dollar();
      assertEquals(26, token12.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token13 = xPathLexer2.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer0.identifierOrOperatorName();
      assertNull(token14);
      
      Token token15 = xPathLexer0.not();
      assertEquals(23, token15.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token16 = xPathLexer0.rightBracket();
      assertEquals(4, token16.getTokenType());
      
      Token token17 = xPathLexer1.slashes();
      assertEquals(11, token17.getTokenType());
      
      Token token18 = xPathLexer3.plus();
      assertEquals(5, token18.getTokenType());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.500748713641378
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer0.plus();
      Token token0 = xPathLexer0.slashes();
      assertEquals("U", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("u", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.star();
      Token token3 = xPathLexer0.comma();
      assertEquals("F", token3.getTokenText());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.star();
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.minus();
      xPathLexer1.minus();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer1.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("UL;BK{wy!07cxJ4");
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.doubleColon();
      Token token10 = xPathLexer3.identifier();
      assertEquals(15, token10.getTokenType());
      assertEquals("com.werken.saxpath.XPathLexer", token10.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token11 = xPathLexer5.minus();
      assertEquals("c", token11.getTokenText());
      
      Token token12 = xPathLexer4.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      xPathLexer3.colon();
      xPathLexer5.or();
      xPathLexer5.getPreviousToken();
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer1.doubleColon();
      assertEquals(19, token14.getTokenType());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.405058574268778
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7869465660544186
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.star();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.getPreviousToken();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6297956772846096
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.comma();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer2.rightParen();
      xPathLexer2.setXPath("Vo\"Q}nv]QaG");
      xPathLexer1.nextToken();
      xPathLexer0.mod();
      xPathLexer1.dollar();
      xPathLexer1.colon();
      XPathLexer xPathLexer3 = new XPathLexer("Vo\"Q}nv]QaG");
      xPathLexer3.pipe();
      xPathLexer1.getXPath();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.number();
      xPathLexer4.getXPath();
      Token token0 = xPathLexer3.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.048184903042281
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      String string0 = token2.toString();
      assertEquals("[ (3) (>)", string0);
      
      token0.toString();
      token0.toString();
      Token token3 = xPathLexer0.star();
      String string1 = token0.toString();
      assertEquals("[ (-2) ()", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (13) (n)", string2);
      
      xPathLexer0.setPreviousToken(token0);
      Token token4 = xPathLexer0.not();
      assertEquals("H", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("3", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token3);
      assertEquals("1", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.39607650025828
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Uu2!uFXc9L`l>>B{s");
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.not();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.2725501285628291
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('c');
      assertTrue(boolean0);
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.3451464727765055
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer1.whitespace();
      xPathLexer0.at();
      xPathLexer1.relationalOperator();
      xPathLexer1.star();
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("/'0vFT");
      xPathLexer2.nextToken();
      xPathLexer2.dollar();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.colon();
      xPathLexer0.pipe();
      XPathLexer xPathLexer4 = new XPathLexer("/'0vFT");
      xPathLexer4.number();
      xPathLexer1.at();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.colon();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.leftBracket();
      XPathLexer xPathLexer8 = new XPathLexer("");
      xPathLexer8.slashes();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer2.dollar();
      xPathLexer0.dots();
      int int0 = xPathLexer7.currentPosition();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0071173427899143
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      xPathLexer0.equals();
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.isIdentifierStartChar('@');
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.205014623518904
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",Q@j$x/M0\\bolm");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals(",", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("Q", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("@", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.literal();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1289190295559683
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("&).=4y*@6|Q");
      XPathLexer xPathLexer3 = new XPathLexer("wX.c M");
      Token token3 = xPathLexer3.plus();
      assertEquals("w", token3.getTokenText());
      
      Token token4 = xPathLexer2.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer3.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("X.c", token5.getTokenText());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4846245224497516
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      Token token0 = xPathLexer0.equals();
      assertEquals("g", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      assertEquals("U", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("u", token2.getTokenText());
      
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer1.rightBracket();
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer1.setXPath("X~a29zqz]U:]#}d");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token5 = xPathLexer2.pipe();
      assertEquals(17, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer3.operatorName();
      Token token6 = xPathLexer1.minus();
      assertEquals("X", token6.getTokenText());
      
      Token token7 = xPathLexer2.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer1.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer2.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals("a29zqz", token10.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token11 = xPathLexer1.doubleColon();
      assertEquals(19, token11.getTokenType());
      assertEquals("]U", token11.getTokenText());
      
      Token token12 = xPathLexer2.identifier();
      assertEquals(15, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token13 = xPathLexer6.dollar();
      assertEquals(26, token13.getTokenType());
      
      Token token14 = xPathLexer5.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer2.nextToken();
      assertEquals((-1), token15.getTokenType());
      
      Token token16 = xPathLexer6.colon();
      assertEquals(18, token16.getTokenType());
      
      xPathLexer5.or();
      Token token17 = xPathLexer1.rightBracket();
      assertEquals(":", token17.getTokenText());
      assertEquals(4, token17.getTokenType());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.2055141850816224
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token1.toString();
      token2.toString();
      String string0 = token1.toString();
      assertEquals("[ (32) (q)", string0);
      
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (6) (0)", string1);
      
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("{<", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("4", token4.getTokenText());
      
      xPathLexer0.rightParen();
      Token token5 = xPathLexer0.slashes();
      assertEquals("K", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.comma();
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.plus();
      assertEquals("A", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.isIdentifierChar('=');
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      assertEquals("@", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(30, token9.getTokenType());
      assertEquals("8", token9.getTokenText());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.8674404991244455
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "gUu2!uFXc9\\L`l>>B{s";
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      xPathLexer1.star();
      xPathLexer0.comma();
      xPathLexer1.literal();
      xPathLexer1.pipe();
      xPathLexer1.plus();
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.3461968993883793
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("q", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("{<", token3.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("K", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("SzR=D8FhP8kc)cG");
      Token token6 = xPathLexer1.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("S", token6.getTokenText());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals(">", token7.getTokenText());
      
      xPathLexer1.identifier();
      xPathLexer1.consume();
      Token token8 = xPathLexer1.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("D8FhP8kc", token8.getTokenText());
      
      Token token9 = xPathLexer1.comma();
      assertEquals(")", token9.getTokenText());
      assertEquals(32, token9.getTokenType());
      
      xPathLexer0.isIdentifierChar('9');
      Token token10 = xPathLexer0.not();
      assertEquals("A", token10.getTokenText());
      assertEquals(23, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (6) (0)");
      xPathLexer2.operatorName();
      Token token11 = xPathLexer2.equals();
      assertEquals("[", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer1.dollar();
      assertEquals(26, token12.getTokenType());
      assertEquals("c", token12.getTokenText());
      
      Token token13 = xPathLexer0.star();
      assertEquals("@", token13.getTokenText());
      assertEquals(20, token13.getTokenType());
      
      Token token14 = xPathLexer0.leftParen();
      assertEquals(1, token14.getTokenType());
      assertEquals("8", token14.getTokenText());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.7871802428651704
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("7Mat2<oQ26");
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1844825704875832
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.plus();
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (3) (')", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (30) (0)", string1);
      
      Token token3 = xPathLexer0.star();
      token3.toString();
      token3.toString();
      token3.toString();
      String string2 = token3.toString();
      assertEquals("[ (20) (v)", string2);
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals("F", token5.getTokenText());
      
      xPathLexer0.star();
      xPathLexer1.number();
      Token token6 = xPathLexer1.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer1.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer1.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token9 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token9);
      assertEquals(15, token9.getTokenType());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.590791533838903
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.star();
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer1.slashes();
      token1.toString();
      token0.toString();
      xPathLexer0.pipe();
      token0.toString();
      xPathLexer0.plus();
      xPathLexer1.minus();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifier();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer3.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer(";U-.875_7+jX89g_E{v");
      xPathLexer4.nextToken();
      xPathLexer2.nextToken();
      xPathLexer0.equals();
      Token token2 = xPathLexer0.or();
      assertNull(token2);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6600243591180566
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("q", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (6) (0)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("{<", token2.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("K", token3.getTokenText());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightParen();
      assertEquals("u", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.identifier();
      Token token6 = xPathLexer0.plus();
      assertEquals(">", token6.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("A", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals("@", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("8", token11.getTokenText());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.351673301904631
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.562061175027658
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.not();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7675367595564657
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      Token token0 = xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("gUu2!uFXcB=L`l>GB{s");
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.identifier();
      xPathLexer2.and();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer3 = new XPathLexer("C2mJC1P+<");
      xPathLexer3.doubleColon();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftParen();
      xPathLexer0.nextToken();
      xPathLexer1.minus();
      // Undeclared exception!
      try { 
        xPathLexer3.LA((-1922));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.9284679587203788
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.LA(58);
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.LA(58);
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5112984726081333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gUu2!uFXc9L`l>>B{s");
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("epjHa|BX-?P?<HWFj");
      xPathLexer0.comma();
      xPathLexer2.minus();
      xPathLexer0.minus();
      xPathLexer1.star();
      xPathLexer2.comma();
      xPathLexer2.rightParen();
      xPathLexer2.nextToken();
      xPathLexer1.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer("^;uIx8");
      xPathLexer1.leftBracket();
      xPathLexer1.doubleColon();
      xPathLexer3.dollar();
      xPathLexer2.at();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer3.nextToken();
      xPathLexer4.not();
      xPathLexer3.identifier();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer5.div();
      assertNull(token0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.0828332072730589
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R'(x7jy^K-ox");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("R", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      String string1 = token3.toString();
      assertEquals("[ (-1) ()", string1);
      
      Token token4 = xPathLexer0.star();
      String string2 = token1.toString();
      assertEquals("[ (13) (_)", string2);
      
      xPathLexer0.setPreviousToken(token0);
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token4);
      assertEquals(20, token4.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer1.or();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.0911183708807
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b?vR!i");
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      Token token1 = xPathLexer0.at();
      token1.toString();
      Token token2 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.relationalOperator();
      assertNull(token3);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.518019429417278
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer1.dollar();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.6907276603935286
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.plus();
      assertEquals("/", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("'", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("0", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("v", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.whitespace();
      Token token4 = xPathLexer0.star();
      assertEquals("T", token4.getTokenText());
      
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer0.leftParen();
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer0.star();
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token14 = xPathLexer1.dollar();
      assertEquals(26, token14.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(6, int0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6526774885132378
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.comma();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer1.identifier();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer2.rightParen();
      xPathLexer2.setXPath("Vo\"Q}nv]QaG");
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer1.setXPath("Vo\"Q}nv]QaG");
      xPathLexer2.pipe();
      Token token8 = xPathLexer1.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer2.pipe();
      Token token9 = xPathLexer1.dollar();
      assertEquals("o", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      assertEquals("\"", token10.getTokenText());
      
      Token token11 = xPathLexer1.pipe();
      assertEquals(17, token11.getTokenType());
      assertEquals("Q", token11.getTokenText());
      
      xPathLexer2.getXPath();
      Token token12 = xPathLexer1.number();
      assertEquals(30, token12.getTokenType());
      assertEquals("", token12.getTokenText());
      
      xPathLexer2.getXPath();
      xPathLexer1.operatorName();
      Token token13 = xPathLexer1.comma();
      assertEquals("}", token13.getTokenText());
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.876067582030844
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D47vSGx~h!!*^,N=_T~");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("D", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("4", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("7v", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("S", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.not();
      xPathLexer0.consume();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.consume(1);
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.plus();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.consume((-11));
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("~", token8.getTokenText());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals("", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer0.mod();
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer0.rightBracket();
      assertEquals(4, token13.getTokenType());
      
      Token token14 = xPathLexer0.at();
      assertEquals(16, token14.getTokenType());
      
      xPathLexer0.mod();
      Token token15 = xPathLexer0.equals();
      assertEquals(21, token15.getTokenType());
      
      Token token16 = xPathLexer0.notEquals();
      assertEquals(22, token16.getTokenType());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.6859453246697877
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.880771478606858
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.pipe();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.not();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.star();
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.9427348877157447
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"rtGi-g&9e6lU");
      Token token0 = xPathLexer0.pipe();
      assertEquals("\"", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.minus();
      Token token1 = xPathLexer0.equals();
      assertEquals("t", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("G", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("i-g", token3.getTokenText());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("&", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("9", token5.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token6 = xPathLexer0.minus();
      assertEquals("e", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("6l", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals("U", token8.getTokenText());
      
      xPathLexer0.equals();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer0.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer0.dollar();
      assertEquals(26, token13.getTokenType());
      
      Token token14 = xPathLexer0.colon();
      assertEquals(18, token14.getTokenType());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Vo\"Q}nv]QaG");
      Token token0 = xPathLexer0.not();
      assertEquals("V", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer1.comma();
      Token token1 = xPathLexer1.comma();
      assertEquals(32, token1.getTokenType());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.5209026864206248
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }
}
