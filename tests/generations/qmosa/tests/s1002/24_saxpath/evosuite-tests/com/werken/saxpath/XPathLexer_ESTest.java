/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 09:59:29 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.consume((-1094));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2262850929600364
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.literal();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setXPath("");
      xPathLexer0.consume((-3156));
      xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9032353355652154
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.setXPath("Z^'9|#Z0CkY|6W3X");
      xPathLexer2.setXPath("[ (");
      xPathLexer2.comma();
      xPathLexer2.dollar();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer3 = new XPathLexer(".Wq");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.consume((-367));
      xPathLexer3.colon();
      xPathLexer3.consume();
      xPathLexer2.at();
      xPathLexer1.literal();
      xPathLexer3.doubleColon();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer1.whitespace();
      // Undeclared exception!
      try { 
        xPathLexer4.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8573608397323147
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("!;O$1A|<pAG");
      xPathLexer1.whitespace();
      xPathLexer1.star();
      xPathLexer1.comma();
      xPathLexer0.star();
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("$", token2.getTokenText());
      
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.dollar();
      Token token4 = xPathLexer1.notEquals();
      assertEquals("A|", token4.getTokenText());
      
      xPathLexer0.setXPath("!;O$1A|<pAG");
      Token token5 = xPathLexer0.comma();
      assertEquals("!", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(7, token6.getTokenType());
      assertEquals("<", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("7Mat2<oQ26");
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("pA", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("\fdj$!,n../'Y;");
      Token token8 = xPathLexer3.star();
      assertEquals("\f", token8.getTokenText());
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      assertEquals(";", token9.getTokenText());
      
      xPathLexer0.plus();
      Token token10 = xPathLexer2.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      assertEquals("M", token11.getTokenText());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals(26, token12.getTokenType());
      assertEquals("$", token12.getTokenText());
      
      Token token13 = xPathLexer1.plus();
      assertEquals("G", token13.getTokenText());
      assertEquals(5, token13.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("+c|t!(% @fZ_4-jiIh ");
      Token token14 = xPathLexer1.notEquals();
      assertEquals(22, token14.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8250892095696567
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.not();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.setXPath("1zpOG");
      Token token2 = xPathLexer0.star();
      token2.toString();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("zpOG", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.setXPath("");
      xPathLexer0.plus();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (20) (1)", string0);
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.div();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer0.identifier();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6585285952505424
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      XPathLexer xPathLexer1 = new XPathLexer("|P-Wh;,fr_Res`");
      Token token0 = xPathLexer1.rightParen();
      assertEquals("|", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer1.leftBracket();
      Token token2 = xPathLexer1.minus();
      Token token3 = xPathLexer1.leftBracket();
      token3.toString();
      token3.toString();
      token3.toString();
      token3.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (-)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (3) (P)", string1);
      
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("[ (6) (-)");
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("j", token4.getTokenText());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("Q", token6.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer2.or();
      Token token7 = xPathLexer1.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals(";", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token8 = xPathLexer3.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("[", token8.getTokenText());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.525647496152109
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T$jy");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("T$jy");
      xPathLexer1.comma();
      xPathLexer2.nextToken();
      xPathLexer2.plus();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8413853654415275
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("[ (6) (0)");
      Token token3 = xPathLexer1.comma();
      assertEquals("[", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("(", token4.getTokenText());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("6", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.relationalOperator();
      assertEquals("<", token7.getTokenText());
      assertEquals(7, token7.getTokenType());
      
      xPathLexer0.or();
      Token token8 = xPathLexer1.pipe();
      assertEquals(17, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (6) (0)");
      Token token9 = xPathLexer2.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer2.dollar();
      assertEquals(" ", token10.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer2.minus();
      Token token11 = xPathLexer2.doubleColon();
      assertEquals(19, token11.getTokenType());
      assertEquals("6)", token11.getTokenText());
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3484514219097856
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer0.rightBracket();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer2.endPosition();
      xPathLexer1.comma();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("+:UNZTq-L");
      xPathLexer3.whitespace();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      xPathLexer4.number();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("wHJ\"$s%H r# ");
      xPathLexer3.comma();
      xPathLexer2.div();
      xPathLexer2.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("[ (");
      xPathLexer5.not();
      xPathLexer3.star();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer5.plus();
      xPathLexer5.at();
      xPathLexer2.plus();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer4.or();
      assertNull(token0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2591429906758496
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("R", token0.getTokenText());
      
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer1.endPosition();
      Token token2 = xPathLexer1.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      xPathLexer2.number();
      Token token6 = xPathLexer0.leftParen();
      assertEquals("x", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer2.nextToken();
      assertEquals(3, token7.getTokenType());
      assertEquals("[", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("j", token8.getTokenText());
      
      Token token9 = xPathLexer0.star();
      assertEquals("y", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("_R`(xjy^K-x");
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      assertEquals("", token10.getTokenText());
      
      Token token11 = xPathLexer1.plus();
      assertEquals(5, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer5.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer1.equals();
      assertEquals(21, token13.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer4.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer6.or();
      Token token14 = xPathLexer2.pipe();
      assertEquals(17, token14.getTokenType());
      
      Token token15 = xPathLexer5.dollar();
      assertEquals(26, token15.getTokenType());
      
      Token token16 = xPathLexer0.minus();
      assertEquals("^", token16.getTokenText());
      assertEquals(6, token16.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.208376565706621
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.plus();
      xPathLexer0.consume((-2333));
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0336833364536564
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.star();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("\u0002", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("X", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("Y", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.setXPath(") (");
      XPathLexer xPathLexer1 = new XPathLexer("7Mat2<oQ26");
      xPathLexer1.getPreviousToken();
      Token token6 = xPathLexer1.slashes();
      assertEquals("7", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer1.rightParen();
      assertEquals("M", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("8Etjw/hX8xAmZRG");
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer2.plus();
      xPathLexer0.and();
      xPathLexer0.plus();
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      assertEquals(" ", token9.getTokenText());
      
      Token token10 = xPathLexer1.equals();
      assertEquals("a", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer2.plus();
      assertEquals("/", token12.getTokenText());
      assertEquals(5, token12.getTokenType());
      
      xPathLexer0.or();
      Token token13 = xPathLexer1.colon();
      assertEquals("t", token13.getTokenText());
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.190443981133688
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.minus();
      assertEquals("F", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("Fq0{<4(Ku>A@8");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token2 = xPathLexer2.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("<", token3.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (2) (q)", string0);
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (2) (q)");
      xPathLexer3.at();
      Token token4 = xPathLexer2.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("F", token5.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer2.number();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals("(", token6.getTokenText());
      
      Token token7 = xPathLexer2.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("q", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token10 = xPathLexer4.number();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer2.plus();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("K", token11.getTokenText());
      
      Token token12 = xPathLexer4.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals("u", token13.getTokenText());
      assertEquals(15, token13.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.or();
      Token token14 = xPathLexer6.pipe();
      assertEquals(17, token14.getTokenType());
      
      xPathLexer3.endPosition();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token15 = xPathLexer9.plus();
      assertEquals(5, token15.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2101415617161235
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m");
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.whitespace();
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.endPosition();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      xPathLexer0.equals();
      Token token1 = xPathLexer0.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9595797762227816
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token1 = xPathLexer1.leftBracket();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(1, token2.getTokenType());
      
      token1.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.colon();
      Token token3 = xPathLexer2.at();
      assertEquals(16, token3.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (3) ())", string0);
      
      xPathLexer2.setPreviousToken(token0);
      assertEquals(13, token0.getTokenType());
      
      Token token4 = xPathLexer2.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer2.dollar();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer1.rightParen();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer3.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer3.mod();
      Token token9 = xPathLexer1.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (3) ())");
      xPathLexer0.and();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("7D+GToY");
      Token token10 = xPathLexer5.doubleColon();
      assertEquals(19, token10.getTokenType());
      assertEquals("7D", token10.getTokenText());
      
      xPathLexer5.nextToken();
      xPathLexer2.plus();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.or();
      Token token11 = xPathLexer2.pipe();
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer4.comma();
      assertEquals(" ", token12.getTokenText());
      assertEquals(32, token12.getTokenType());
      
      Token token13 = xPathLexer4.plus();
      assertEquals(5, token13.getTokenType());
      assertEquals("(", token13.getTokenText());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5181386876970646
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      XPathLexer xPathLexer1 = new XPathLexer("jQ9ljf");
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.comma();
      xPathLexer1.nextToken();
      xPathLexer1.plus();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7979650306063317
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      String string0 = "b?vR!i";
      xPathLexer0.consume((-4427));
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9295038557357012
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~eO,S?Ka=G`");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (5) (~)", string0);
      
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals("eO", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(",", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("S", token3.getTokenText());
      
      xPathLexer0.endPosition();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("K", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals("", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals("a", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.067738180093436
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("m\"o|f");
      xPathLexer1.mod();
      xPathLexer0.mod();
      Token token1 = xPathLexer1.plus();
      assertEquals("m", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer1.doubleColon();
      assertEquals("\"", token3.getTokenText());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer1.plus();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("|", token6.getTokenText());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer2.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer2.equals();
      assertEquals(21, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token13 = xPathLexer1.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      Token token14 = xPathLexer3.plus();
      assertEquals(5, token14.getTokenType());
      
      xPathLexer0.or();
      Token token15 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token15);
      assertEquals(15, token15.getTokenType());
      
      Token token16 = xPathLexer2.slashes();
      assertEquals(11, token16.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4225415865057482
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.consume((-2352));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.07292672444731
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.at();
      xPathLexer2.mod();
      xPathLexer1.and();
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer2.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.colon();
      Token token0 = xPathLexer1.minus();
      Token token1 = xPathLexer3.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0242682501432787
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("co", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(".", token2.getTokenText());
      assertEquals(31, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("w", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("erken.saxpath.XPathLexer", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token5 = xPathLexer2.plus();
      assertEquals("c", token5.getTokenText());
      
      Token token6 = xPathLexer1.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer2.relationalOperator();
      xPathLexer1.or();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer1.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals("o", token9.getTokenText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.214638126884478
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.operatorName();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.setXPath("7Mat2<oQ26");
      XPathLexer xPathLexer1 = new XPathLexer("7Mat2<oQ26");
      xPathLexer1.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("7Mat2<oQ26");
      xPathLexer2.number();
      xPathLexer2.plus();
      xPathLexer2.and();
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer2.or();
      xPathLexer2.equals();
      xPathLexer2.nextToken();
      xPathLexer2.at();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1636263833133107
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume(70);
      xPathLexer0.consume((-52));
      xPathLexer0.notEquals();
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.consume((-52));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0914070584971975
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("co", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("m", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("w", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.plus();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("rken.saxpath.XPathLexer", token5.getTokenText());
      
      String string0 = token4.toString();
      assertEquals("[ (5) (e)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (5) (e)");
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals(" (", token7.getTokenText());
      
      xPathLexer0.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer1.nextToken();
      assertEquals("5", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer3.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("c", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.plus();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer5.dots();
      assertEquals(13, token10.getTokenType());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0342907921428726
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("n", token1.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("wn>!1H3");
      Token token2 = xPathLexer1.rightBracket();
      assertEquals("w", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer1.plus();
      assertEquals("n", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("H", token4.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.currentPosition();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(">", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("3", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("");
      xPathLexer2.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("I{l=n=&>[8?(_%E)/");
      Token token8 = xPathLexer3.slashes();
      assertEquals("I", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      xPathLexer3.mod();
      xPathLexer2.and();
      XPathLexer xPathLexer4 = new XPathLexer("I{l=n=&>[8?(_%E)/");
      xPathLexer4.setXPath("");
      Token token9 = xPathLexer4.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer4.notEquals();
      assertEquals(22, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("I{l=n=&>[8?(_%E)/");
      Token token11 = xPathLexer5.nextToken();
      assertEquals("I", token11.getTokenText());
      
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token13 = xPathLexer4.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.38043957574546
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer0.rightBracket();
      xPathLexer1.dots();
      xPathLexer0.minus();
      xPathLexer1.setXPath("Z0&HtVcYG3K[");
      XPathLexer xPathLexer2 = new XPathLexer("Z0&HtVcYG3K[");
      XPathLexer xPathLexer3 = new XPathLexer("Z0&HtVcYG3K[");
      xPathLexer3.pipe();
      xPathLexer0.slashes();
      xPathLexer1.mod();
      xPathLexer1.rightParen();
      xPathLexer2.number();
      xPathLexer1.plus();
      xPathLexer2.mod();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer3.leftBracket();
      xPathLexer2.nextToken();
      xPathLexer3.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer4.and();
      xPathLexer0.relationalOperator();
      xPathLexer1.operatorName();
      xPathLexer1.star();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3028329917680863
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer2.endPosition();
      Token token2 = xPathLexer1.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("`", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("+:UNZTq-L");
      xPathLexer3.whitespace();
      Token token4 = xPathLexer3.nextToken();
      assertEquals(":", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      xPathLexer0.div();
      Token token5 = xPathLexer4.nextToken();
      assertEquals(3, token5.getTokenType());
      assertEquals("[", token5.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifier();
      xPathLexer3.whitespace();
      xPathLexer5.and();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token6 = xPathLexer0.number();
      assertEquals("", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token7 = xPathLexer7.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.div();
      XPathLexer xPathLexer9 = new XPathLexer("CHx");
      Token token8 = xPathLexer9.nextToken();
      assertEquals("CHx", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer4.plus();
      assertEquals(" ", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token10 = xPathLexer2.rightBracket();
      assertEquals("", token10.getTokenText());
      assertEquals(4, token10.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8824351811300553
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.leftBracket();
      token1.toString();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      token1.toString();
      Token token2 = xPathLexer0.at();
      token2.toString();
      token2.toString();
      xPathLexer0.star();
      token0.toString();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("b?vR!i");
      xPathLexer0.div();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer2.at();
      xPathLexer0.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.plus();
      xPathLexer4.plus();
      xPathLexer1.or();
      xPathLexer1.minus();
      Token token3 = xPathLexer2.relationalOperator();
      assertNull(token3);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8683177653824838
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("b?vR!i");
      Token token2 = xPathLexer1.leftBracket();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(">", token3.getTokenText());
      assertEquals(9, token3.getTokenType());
      
      String string0 = token2.toString();
      assertEquals("[ (3) (b)", string0);
      
      Token token4 = xPathLexer1.at();
      String string1 = token4.toString();
      assertEquals("[ (16) (?)", string1);
      
      Token token5 = xPathLexer1.star();
      String string2 = token1.toString();
      assertEquals("[ (13) (n)", string2);
      
      xPathLexer1.setPreviousToken(token5);
      assertEquals("v", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token6 = xPathLexer3.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      Token token7 = xPathLexer1.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals("1", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.consume();
      Token token9 = xPathLexer1.nextToken();
      assertEquals("!", token9.getTokenText());
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer1.comma();
      assertEquals("i", token10.getTokenText());
      assertEquals(32, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.isIdentifierChar('<');
      xPathLexer1.consume();
      xPathLexer1.not();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.slashes();
      xPathLexer5.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer6.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer6.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer1.not();
      assertEquals(23, token13.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.913721127496463
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.plus();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.plus();
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.colon();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.star();
      assertNotSame(token2, token0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5003426177740415
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("b?vR!i");
      xPathLexer1.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("b?vR!i");
      xPathLexer2.comma();
      xPathLexer1.nextToken();
      xPathLexer1.plus();
      xPathLexer2.relationalOperator();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.208879276702343
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("`", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer2.endPosition();
      xPathLexer1.comma();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("+:UNZTq-L");
      Token token6 = xPathLexer3.whitespace();
      assertEquals((-2), token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer3.nextToken();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      xPathLexer2.and();
      Token token8 = xPathLexer3.leftParen();
      assertEquals("U", token8.getTokenText());
      
      xPathLexer3.pipe();
      XPathLexer xPathLexer5 = new XPathLexer("+:UNZTq-L");
      Token token9 = xPathLexer3.colon();
      assertEquals("Z", token9.getTokenText());
      
      Token token10 = xPathLexer2.star();
      assertEquals(20, token10.getTokenType());
      assertEquals("", token10.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("_R`(xjy^K-x");
      Token token11 = xPathLexer5.slashes();
      assertEquals("+", token11.getTokenText());
      assertEquals(11, token11.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer1.and();
      XPathLexer xPathLexer7 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer6.nextToken();
      xPathLexer7.relationalOperator();
      xPathLexer1.or();
      Token token12 = xPathLexer5.pipe();
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer1.dollar();
      assertEquals(26, token13.getTokenType());
      
      Token token14 = xPathLexer1.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer3.doubleColon();
      assertEquals("Tq", token15.getTokenText());
      assertEquals(19, token15.getTokenType());
      
      Token token16 = xPathLexer4.comma();
      assertEquals(32, token16.getTokenType());
      assertEquals("[", token16.getTokenText());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.207300864240114
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      Token token0 = xPathLexer0.at();
      token0.toString();
      token0.toString();
      xPathLexer0.consume();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.rightBracket();
      xPathLexer0.getPreviousToken();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.getPreviousToken();
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.132765165779724
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("R", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer1.setXPath("Z0&HtVcYG3K[");
      XPathLexer xPathLexer2 = new XPathLexer("Z0&HtVcYG3K[");
      XPathLexer xPathLexer3 = new XPathLexer("Z0&HtVcYG3K[");
      xPathLexer3.pipe();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.setXPath(",d}x#vY6_,J:o");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token5 = xPathLexer1.comma();
      assertEquals("d", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      xPathLexer1.div();
      xPathLexer1.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token6 = xPathLexer6.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer5.plus();
      xPathLexer6.relationalOperator();
      xPathLexer5.or();
      Token token7 = xPathLexer3.pipe();
      assertEquals("0", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer4.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer2.leftParen();
      assertEquals("Z", token10.getTokenText());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1344584107779907
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      Token token1 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer1.leftBracket();
      assertEquals("c", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("o", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token4 = xPathLexer2.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("c", token4.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (15) (m.werken.saxpath.XPathLexer)", string0);
      
      Token token5 = xPathLexer2.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer2.dollar();
      assertEquals("o", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer3.setPreviousToken(token0);
      assertEquals("co", token0.getTokenText());
      
      xPathLexer3.mod();
      XPathLexer xPathLexer4 = new XPathLexer("~");
      xPathLexer3.not();
      xPathLexer4.or();
      Token token7 = xPathLexer3.pipe();
      assertEquals("o", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer3.not();
      assertEquals("m", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.minus();
      Token token9 = xPathLexer2.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer4.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("~", token10.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token11 = xPathLexer3.minus();
      assertEquals(".", token11.getTokenText());
      
      xPathLexer3.identifierOrOperatorName();
      Token token12 = xPathLexer3.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer2.notEquals();
      assertEquals(22, token13.getTokenType());
      
      xPathLexer2.mod();
      Token token14 = xPathLexer0.minus();
      assertEquals(6, token14.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.154343449178194
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.notEquals();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.operatorName();
      xPathLexer1.doubleColon();
      xPathLexer1.colon();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer1.mod();
      xPathLexer2.div();
      xPathLexer2.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("L?=");
      xPathLexer1.slashes();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.mod();
      xPathLexer1.and();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer3.nextToken();
      xPathLexer5.plus();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer6.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1240450291301567
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.plus();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("!;O$1A|<pAG");
      xPathLexer1.whitespace();
      xPathLexer1.star();
      Token token4 = xPathLexer1.comma();
      assertEquals("O", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.star();
      Token token5 = xPathLexer1.pipe();
      assertEquals("$", token5.getTokenText());
      
      Token token6 = xPathLexer1.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.dollar();
      Token token7 = xPathLexer1.notEquals();
      assertEquals("A|", token7.getTokenText());
      
      xPathLexer0.setXPath("!;O$1A|<pAG");
      Token token8 = xPathLexer0.nextToken();
      assertEquals("!", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals("<", token9.getTokenText());
      assertEquals(7, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("7Mat2<oQ26");
      Token token10 = xPathLexer1.doubleColon();
      assertEquals("pA", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("\fdj$!,n../'Y;");
      Token token11 = xPathLexer3.star();
      assertEquals(20, token11.getTokenType());
      assertEquals("\f", token11.getTokenText());
      
      Token token12 = xPathLexer2.dollar();
      assertEquals("7", token12.getTokenText());
      assertEquals(26, token12.getTokenType());
      
      xPathLexer0.plus();
      Token token13 = xPathLexer2.at();
      assertEquals(16, token13.getTokenType());
      assertEquals("M", token13.getTokenText());
      
      Token token14 = xPathLexer2.equals();
      assertEquals(21, token14.getTokenType());
      assertEquals("a", token14.getTokenText());
      
      Token token15 = xPathLexer0.nextToken();
      assertEquals("O$1A|<pAG", token15.getTokenText());
      
      Token token16 = xPathLexer1.plus();
      assertEquals(5, token16.getTokenType());
      assertEquals("G", token16.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("+c|t!(% @fZ_4-jiIh ");
      Token token17 = xPathLexer1.notEquals();
      assertEquals(22, token17.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9479362216297709
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.leftBracket();
      token1.toString();
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("!", token2.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (3) (>)", string0);
      
      Token token3 = xPathLexer0.at();
      token3.toString();
      token3.toString();
      String string1 = token3.toString();
      assertEquals("[ (16) (1)", string1);
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("H", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      String string2 = token0.toString();
      assertEquals("[ (13) (n)", string2);
      
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer1.whitespace();
      xPathLexer0.and();
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer3.div();
      xPathLexer3.mod();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer3.whitespace();
      assertEquals((-2), token10.getTokenType());
      assertEquals("", token10.getTokenText());
      
      Token token11 = xPathLexer1.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer3.nextToken();
      assertEquals("(", token12.getTokenText());
      assertEquals(1, token12.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.540320641884016
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!;O$1A|<pAG");
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("7Mat2<oQ26");
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("\fdj$!,n../'Y;");
      xPathLexer2.star();
      xPathLexer1.dollar();
      xPathLexer1.at();
      xPathLexer1.equals();
      xPathLexer2.relationalOperator();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6707223063108005
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer1.comma();
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.pipe();
      Token token2 = xPathLexer2.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer2.doubleColon();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer3.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3344230372669896
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("Q", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("9", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("j", token3.getTokenText());
      
      xPathLexer0.minus();
      xPathLexer0.setXPath("c(1S1>Y_A,6");
      Token token4 = xPathLexer0.pipe();
      assertEquals("c", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.minus();
      assertEquals("(", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.comma();
      assertEquals(32, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.rightParen();
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer2.setXPath("/7mI!P@CE@u`h-tw");
      xPathLexer1.not();
      Token token8 = xPathLexer2.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("1", token9.getTokenText());
      
      Token token10 = xPathLexer0.at();
      assertEquals("S", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      xPathLexer1.getPreviousToken();
      Token token11 = xPathLexer1.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      assertNotNull(token12);
      
      Token token13 = xPathLexer0.not();
      assertEquals(23, token13.getTokenType());
      assertEquals("1", token13.getTokenText());
      
      Token token14 = xPathLexer0.notEquals();
      assertEquals(22, token14.getTokenType());
      assertEquals(">Y", token14.getTokenText());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9251908023990782
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.star();
      String string0 = token0.toString();
      assertEquals("[ (22) (co)", string0);
      
      Token token2 = xPathLexer0.nextToken();
      String string1 = token1.toString();
      assertEquals("[ (20) (m)", string1);
      
      token2.toString();
      String string2 = token2.toString();
      assertEquals("[ (13) (.)", string2);
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.not();
      assertEquals("w", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.star();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertEquals("rken.saxpath.Token", token7.getTokenText());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7824909210026663
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("");
      xPathLexer0.notEquals();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('D');
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("@g;N]Xga3");
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("com.werkpn.saxpath.Token");
      xPathLexer2.leftBracket();
      xPathLexer2.doubleColon();
      xPathLexer2.colon();
      xPathLexer1.star();
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.nextToken();
      boolean boolean0 = xPathLexer4.isIdentifierChar('&');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2146673923184257
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("wn>!1H3");
      Token token2 = xPathLexer1.leftBracket();
      token2.toString();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(">", token3.getTokenText());
      
      String string0 = token2.toString();
      assertEquals("[ (3) (w)", string0);
      
      Token token4 = xPathLexer1.at();
      String string1 = token4.toString();
      assertEquals("[ (16) (n)", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (13) (n)", string2);
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals("1", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      Token token8 = xPathLexer1.number();
      assertEquals("", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.plus();
      assertEquals(">", token9.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer1.and();
      Token token10 = xPathLexer1.nextToken();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer0.nextToken();
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.or();
      Token token12 = xPathLexer1.pipe();
      assertEquals(17, token12.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token13 = xPathLexer1.nextToken();
      assertEquals((-1), token13.getTokenType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2853025621226957
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("b?vR!i");
      Token token1 = xPathLexer1.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      token1.toString();
      Token token2 = xPathLexer1.at();
      token2.toString();
      Token token3 = xPathLexer1.star();
      token0.toString();
      xPathLexer1.setPreviousToken(token3);
      xPathLexer0.not();
      xPathLexer1.star();
      xPathLexer1.number();
      xPathLexer1.plus();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer1.and();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer1.plus();
      xPathLexer2.relationalOperator();
      xPathLexer2.or();
      Token token4 = xPathLexer0.pipe();
      Token token5 = xPathLexer2.nextToken();
      assertNotSame(token5, token4);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.784669068046499
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.leftParen();
      xPathLexer0.at();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer3.pipe();
      xPathLexer3.dollar();
      xPathLexer1.operatorName();
      Token token0 = xPathLexer3.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3329811683438137
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("7Mat2<oQ26");
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.notEquals();
      xPathLexer0.setXPath("7Mat2<oQ26");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("/'0vT");
      xPathLexer0.slashes();
      xPathLexer1.mod();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer("?5=3IiWS@IXhV886H");
      xPathLexer0.nextToken();
      xPathLexer1.doubleColon();
      xPathLexer2.or();
      xPathLexer0.pipe();
      xPathLexer2.dollar();
      xPathLexer0.minus();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer1.leftParen();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0434994648234786
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (3) (q)", string1);
      
      xPathLexer0.plus();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("<", token3.getTokenText());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.plus();
      Token token4 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.pipe();
      assertEquals("u", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(">", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.plus();
      assertEquals("A", token8.getTokenText());
      
      Token token9 = xPathLexer0.at();
      assertEquals("@", token9.getTokenText());
      
      Token token10 = xPathLexer0.getPreviousToken();
      assertEquals("(", token10.getTokenText());
      
      xPathLexer0.minus();
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token12 = xPathLexer0.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer0.pipe();
      assertEquals(17, token14.getTokenType());
      
      Token token15 = xPathLexer0.dots();
      assertEquals(13, token15.getTokenType());
      
      Token token16 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token16.getTokenType());
      assertNotNull(token16);
      
      xPathLexer0.operatorName();
      Token token17 = xPathLexer0.plus();
      assertEquals(5, token17.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8881227822787265
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s(xjylKT");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer1.dots();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer1.setXPath("Z0&HtVcYG3K[");
      XPathLexer xPathLexer2 = new XPathLexer("Z0&HtVcYG3K[");
      XPathLexer xPathLexer3 = new XPathLexer("Z0&HtVcYG3K[");
      Token token4 = xPathLexer3.dots();
      assertEquals("Z", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer3.comma();
      Token token5 = xPathLexer3.pipe();
      assertEquals("&", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.setXPath(",d}x#vY6_,J:o");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("Z0&HtVcYG3K[");
      Token token6 = xPathLexer5.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.comma();
      assertEquals("d", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      xPathLexer1.div();
      xPathLexer1.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token8 = xPathLexer7.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer7.not();
      xPathLexer7.dollar();
      Token token9 = xPathLexer1.not();
      assertEquals("}", token9.getTokenText());
      assertEquals(23, token9.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.plus();
      Token token10 = xPathLexer2.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("Z", token10.getTokenText());
      
      Token token11 = xPathLexer7.plus();
      assertEquals(5, token11.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.or();
      Token token12 = xPathLexer4.identifier();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2968713623172956
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer0.rightBracket();
      xPathLexer1.dots();
      xPathLexer0.minus();
      xPathLexer1.setXPath("Z0&HtVcYG3K[");
      XPathLexer xPathLexer2 = new XPathLexer("Z0&HtVcYG3K[");
      XPathLexer xPathLexer3 = new XPathLexer("Z0&HtVcYG3K[");
      xPathLexer3.pipe();
      xPathLexer0.slashes();
      xPathLexer1.mod();
      xPathLexer1.rightParen();
      xPathLexer2.number();
      xPathLexer2.plus();
      xPathLexer2.mod();
      xPathLexer3.and();
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      xPathLexer3.plus();
      xPathLexer1.relationalOperator();
      xPathLexer2.or();
      xPathLexer3.not();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.identifier();
      Token token0 = xPathLexer3.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8617435818642427
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vT");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("/'", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("0", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("T", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.setXPath("7Mat2<oQ26");
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      assertEquals("7", token6.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.setXPath("%fN^(1Iem");
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("%", token7.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("?5=3IiWS@IXhV886H");
      Token token8 = xPathLexer0.nextToken();
      assertEquals("fN^(1Iem", token8.getTokenText());
      
      xPathLexer1.rightBracket();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals("fN", token9.getTokenText());
      assertEquals(19, token9.getTokenType());
      
      xPathLexer1.or();
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer1.dollar();
      assertEquals("5", token11.getTokenText());
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      assertEquals("(", token12.getTokenText());
      
      Token token13 = xPathLexer0.rightBracket();
      assertEquals(4, token13.getTokenType());
      assertEquals("1", token13.getTokenText());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.0091080400564394
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R'(x7jy^K-ox");
      xPathLexer0.setXPath("_R'(x7jy^K-ox");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      token0.toString();
      token0.toString();
      xPathLexer0.and();
      xPathLexer0.LA(18);
      xPathLexer0.plus();
      xPathLexer0.dollar();
      xPathLexer0.getXPath();
      xPathLexer0.minus();
      xPathLexer0.endPosition();
      xPathLexer0.leftBracket();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.at();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.slashes();
      xPathLexer2.literal();
      xPathLexer1.rightBracket();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.leftParen();
      xPathLexer1.identifier();
      xPathLexer0.dots();
      Token token2 = xPathLexer2.mod();
      assertNull(token2);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1577922415357236
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      xPathLexer0.star();
      token0.toString();
      Token token2 = xPathLexer0.identifier();
      token2.toString();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      Token token3 = xPathLexer0.or();
      assertNull(token3);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6315085664213032
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("q", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (6) (0)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.plus();
      Token token2 = xPathLexer0.dollar();
      assertEquals("<", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals("4", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("(", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("K", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.plus();
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token6 = xPathLexer0.plus();
      assertEquals(">", token6.getTokenText());
      
      Token token7 = xPathLexer0.at();
      assertEquals("A", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.equals();
      assertEquals("@", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(30, token9.getTokenType());
      assertEquals("8", token9.getTokenText());
      
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.35340027311938
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("R", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer1.dots();
      assertEquals(13, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer2.endPosition();
      Token token4 = xPathLexer1.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("+:UNZTq-L");
      Token token5 = xPathLexer3.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer3.leftParen();
      assertEquals(":", token6.getTokenText());
      
      Token token7 = xPathLexer3.nextToken();
      assertEquals("UNZTq-L", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      xPathLexer4.number();
      Token token8 = xPathLexer4.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("[", token8.getTokenText());
      
      Token token9 = xPathLexer4.number();
      assertEquals("", token9.getTokenText());
      assertEquals(30, token9.getTokenType());
      
      xPathLexer1.plus();
      Token token10 = xPathLexer4.rightParen();
      assertEquals(2, token10.getTokenType());
      assertEquals(" ", token10.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer3.equals();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer("+:UNZTq-L");
      Token token11 = xPathLexer0.plus();
      assertEquals("(", token11.getTokenText());
      assertEquals(5, token11.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token12 = xPathLexer4.slashes();
      assertEquals(11, token12.getTokenType());
      assertEquals("(", token12.getTokenText());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5868077410765655
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token0 = xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("Ye*K*b2T(Y7eT|");
      XPathLexer xPathLexer2 = new XPathLexer("Ye*K*b2T(Y7eT|");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0180947570209855
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("co", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("m.", token1.getTokenText());
      assertEquals(14, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.minus();
      Token token3 = xPathLexer0.equals();
      assertEquals("r", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.operatorName();
      Token token4 = xPathLexer1.doubleColon();
      assertEquals("co", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer1.colon();
      assertEquals("m", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals("e", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer2.div();
      xPathLexer2.setXPath("com.werken.saxpath.XPathLexer");
      Token token8 = xPathLexer1.minus();
      assertEquals(6, token8.getTokenType());
      assertEquals(".", token8.getTokenText());
      
      Token token9 = xPathLexer1.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("w", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.mod();
      xPathLexer1.and();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token10 = xPathLexer0.nextToken();
      assertEquals("n.saxpath.XPathLexer", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer4.plus();
      assertEquals(5, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token12 = xPathLexer5.not();
      assertEquals(23, token12.getTokenType());
      assertEquals("c", token12.getTokenText());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8343888557564594
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ye*K*b2T(Y7eT|");
      XPathLexer xPathLexer1 = new XPathLexer("Ye*K*b2T(Y7eT|");
      Token token0 = xPathLexer1.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("Y", token0.getTokenText());
      
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("e", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("!;O$1A|<pAG");
      xPathLexer1.whitespace();
      xPathLexer1.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer3.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer2.star();
      Token token3 = xPathLexer3.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer3.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer2.dollar();
      Token token5 = xPathLexer2.notEquals();
      assertEquals("O$", token5.getTokenText());
      
      xPathLexer2.setXPath("");
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("*", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer(") (");
      Token token8 = xPathLexer2.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("!;O$1A|<pAG");
      Token token9 = xPathLexer3.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer6.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer6.plus();
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("*", token11.getTokenText());
      
      Token token12 = xPathLexer2.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer5.nextToken();
      assertEquals(23, token13.getTokenType());
      assertEquals("!", token13.getTokenText());
      
      Token token14 = xPathLexer6.plus();
      assertEquals(5, token14.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token15 = xPathLexer2.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.068620317953718
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.setXPath("x*5D%5>DD9{-)");
      Token token1 = xPathLexer0.notEquals();
      assertEquals("x*", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      xPathLexer0.comma();
      Token token2 = xPathLexer0.at();
      assertEquals("5", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      Token token4 = xPathLexer0.leftParen();
      assertEquals("{", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals(")", token6.getTokenText());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.identifier();
      assertEquals(15, token10.getTokenType());
      
      xPathLexer0.and();
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer0.comma();
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer0.number();
      assertEquals(30, token14.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0252431551683934
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("x", token0.getTokenText());
      
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("[ (");
      xPathLexer2.comma();
      Token token2 = xPathLexer2.dollar();
      assertEquals(" ", token2.getTokenText());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer(".Wq");
      Token token4 = xPathLexer3.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals(".", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals("", token5.getTokenText());
      
      xPathLexer0.setXPath("x}HG 2VX\u0002XGY>$G`/");
      Token token6 = xPathLexer3.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("Wq", token6.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token7 = xPathLexer3.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer2.mod();
      xPathLexer4.and();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("x", token9.getTokenText());
      
      xPathLexer3.and();
      xPathLexer3.pipe();
      Token token10 = xPathLexer5.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      xPathLexer3.doubleColon();
      Token token11 = xPathLexer4.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer3.plus();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer6.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer4.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer0.pipe();
      assertEquals("}", token14.getTokenText());
      assertEquals(17, token14.getTokenType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.1675522502788005
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (6) (0)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.plus();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("K", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("@", token7.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token8 = xPathLexer0.pipe();
      assertEquals("8", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      xPathLexer0.minus();
      Token token10 = xPathLexer0.leftParen();
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3484709523205884
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer0.rightBracket();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer2.endPosition();
      xPathLexer1.comma();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("+:UNZTq-L");
      xPathLexer3.whitespace();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      xPathLexer4.number();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("wHJ\"$s%H r# ");
      xPathLexer3.comma();
      xPathLexer2.div();
      xPathLexer2.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("[ (");
      xPathLexer7.star();
      xPathLexer5.not();
      xPathLexer3.star();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer5.plus();
      xPathLexer5.at();
      xPathLexer2.plus();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer4.or();
      assertNull(token0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.116654927097716
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.star();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5571584301206918
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token1 = new Token((-1937), "[ (3) ()", (-1937), (-1937));
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.1070660124143323
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      String string0 = token1.toString();
      assertEquals("[ (6) (q)", string0);
      
      xPathLexer0.star();
      String string1 = token0.toString();
      assertEquals("[ (2) (F)", string1);
      
      Token token2 = xPathLexer0.identifier();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("{", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("<", token4.getTokenText());
      
      xPathLexer0.plus();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.slashes();
      assertEquals("K", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("u>", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("A", token8.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1622699621915022
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s(xjylKT");
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("}=");
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer("Ic");
      xPathLexer1.comma();
      xPathLexer1.nextToken();
      xPathLexer0.plus();
      Token token0 = xPathLexer2.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.091943137123108
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token1 = xPathLexer1.leftBracket();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("(", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      token1.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer2.at();
      assertEquals(16, token4.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (3) ())", string0);
      
      xPathLexer2.setPreviousToken(token0);
      assertEquals(13, token0.getTokenType());
      
      Token token5 = xPathLexer2.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer2.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.rightParen();
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer("[ (3) ())");
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token8 = xPathLexer4.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer2.number();
      xPathLexer3.plus();
      xPathLexer1.mod();
      XPathLexer xPathLexer5 = new XPathLexer("f\"`Pof");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer6.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("[ (3) ())");
      Token token10 = xPathLexer5.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("f", token10.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token11 = xPathLexer7.plus();
      assertEquals(5, token11.getTokenType());
      assertEquals("[", token11.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer("[ (3) ())");
      xPathLexer8.relationalOperator();
      xPathLexer5.or();
      Token token12 = xPathLexer2.pipe();
      assertEquals(17, token12.getTokenType());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.035641751800829
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("w", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("e", token4.getTokenText());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("r", token5.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("k", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftBracket();
      String string0 = token7.toString();
      assertEquals("[ (3) (e)", string0);
      
      xPathLexer0.star();
      Token token8 = xPathLexer0.nextToken();
      assertEquals(".", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      String string1 = token9.toString();
      assertEquals("[ (18) (s)", string1);
      
      String string2 = token2.toString();
      assertEquals("[ (14) (m.)", string2);
      
      Token token10 = xPathLexer0.star();
      assertEquals("a", token10.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token11 = xPathLexer0.nextToken();
      assertEquals("xpath.XPathLexer", token11.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (3) (e)");
      Token token12 = xPathLexer1.pipe();
      assertEquals("[", token12.getTokenText());
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer1.slashes();
      assertEquals(" ", token13.getTokenText());
      
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token14 = xPathLexer2.rightParen();
      assertEquals(2, token14.getTokenType());
      
      Token token15 = xPathLexer2.star();
      assertEquals(20, token15.getTokenType());
      
      Token token16 = xPathLexer0.not();
      assertEquals("p", token16.getTokenText());
      assertEquals(23, token16.getTokenType());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.983569147943855
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("om", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      xPathLexer0.leftParen();
      xPathLexer0.mod();
      xPathLexer0.currentPosition();
      xPathLexer0.leftBracket();
      Token token6 = xPathLexer0.literal();
      assertNotNull(token6);
      assertEquals("ken.saxpath.XPathLexe", token6.getTokenText());
      assertEquals(27, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer0.setXPath("pK=|B8\"3%");
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      Token token10 = xPathLexer0.nextToken();
      assertEquals(21, token10.getTokenType());
      assertEquals("=", token10.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token11 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      assertEquals("|", token12.getTokenText());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0412302303197474
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("n", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.minus();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("1", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("wn>!1H3");
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("wn>!1H3");
      xPathLexer1.mod();
      xPathLexer1.mod();
      Token token5 = xPathLexer2.plus();
      assertEquals("w", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftBracket();
      token2.toString();
      token2.toString();
      xPathLexer0.star();
      Token token7 = xPathLexer2.nextToken();
      assertEquals("n", token7.getTokenText());
      
      token0.toString();
      Token token8 = xPathLexer2.colon();
      assertEquals(">", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      token3.toString();
      token2.toString();
      Token token9 = xPathLexer2.number();
      token6.toString();
      String string0 = token9.toString();
      assertEquals("[ (30) ()", string0);
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      String string1 = token0.toString();
      assertEquals("[ (-2) ()", string1);
      
      String string2 = token3.toString();
      assertEquals("[ (6) (!)", string2);
      
      xPathLexer0.star();
      String string3 = token6.toString();
      assertEquals("[ (3) (H)", string3);
      
      xPathLexer0.star();
      Token token11 = xPathLexer1.not();
      assertEquals("w", token11.getTokenText());
      
      xPathLexer0.plus();
      Token token12 = xPathLexer2.at();
      assertEquals("!", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer1.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer2.star();
      assertEquals(20, token14.getTokenType());
      assertEquals("1", token14.getTokenText());
      
      Token token15 = xPathLexer2.not();
      assertEquals(23, token15.getTokenType());
      
      Token token16 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token16.getTokenType());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9309455086747431
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      Token token3 = xPathLexer0.plus();
      token3.toString();
      token2.toString();
      token1.toString();
      token3.toString();
      xPathLexer0.star();
      String string0 = token1.toString();
      assertEquals("[ (3) (q)", string0);
      
      xPathLexer0.nextToken();
      String string1 = token3.toString();
      assertEquals("[ (5) ({)", string1);
      
      token2.toString();
      String string2 = token2.toString();
      assertEquals("[ (6) (0)", string2);
      
      Token token4 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token4);
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("K", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals("", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.plus();
      Token token8 = xPathLexer0.at();
      assertEquals("A", token8.getTokenText());
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.getPreviousToken();
      assertEquals("(", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.1480090447539966
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer0.rightParen();
      xPathLexer2.setXPath("Vo\"Q}nv]QaG");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("Vo\"Q}nv]QaG");
      xPathLexer3.minus();
      xPathLexer3.mod();
      xPathLexer0.and();
      XPathLexer xPathLexer4 = new XPathLexer("PJf(O");
      xPathLexer4.nextToken();
      boolean boolean0 = xPathLexer2.isIdentifierChar('L');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.099232221951251
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("_", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.identifier();
      String string0 = token3.toString();
      assertEquals("[ (15) ()", string0);
      
      token2.toString();
      Token token4 = xPathLexer0.star();
      assertEquals("`", token4.getTokenText());
      
      String string1 = token2.toString();
      assertEquals("[ (17) (R)", string1);
      
      xPathLexer0.setPreviousToken(token2);
      Token token5 = xPathLexer0.not();
      assertEquals("(", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer1.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals("x", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals("j", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      xPathLexer1.getPreviousToken();
      Token token10 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token10);
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.870502224257591
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.setXPath("c(1S1>Y_A,6");
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer1.rightParen();
      xPathLexer2.setXPath("/7mI!P@CE@u`h-tw");
      xPathLexer0.nextToken();
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.nextToken();
      xPathLexer2.nextToken();
      xPathLexer2.plus();
      xPathLexer2.relationalOperator();
      xPathLexer1.or();
      xPathLexer2.pipe();
      xPathLexer1.plus();
      xPathLexer3.slashes();
      xPathLexer1.leftBracket();
      Token token0 = xPathLexer3.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.289577535419121
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s;IK$qrh|e/P1rDH");
      Token token0 = xPathLexer0.at();
      assertEquals("s", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(";IK$qrh|e/P1rDH", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(";", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.dollar();
      assertEquals("I", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7418241903822422
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      assertEquals("c", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token1 = xPathLexer1.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("om.werken.saxpath.XPathLexer", token2.getTokenText());
      
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("o", token3.getTokenText());
      
      Token token4 = xPathLexer1.equals();
      assertEquals("m", token4.getTokenText());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token6 = xPathLexer2.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer2.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer1.number();
      assertEquals("", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.9530189278736625
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.setXPath("snh8wD");
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token5 = xPathLexer0.pipe();
      assertEquals("s", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token6 = xPathLexer1.minus();
      assertEquals(6, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.comma();
      assertEquals(32, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.operatorName();
      xPathLexer4.rightParen();
      xPathLexer3.setXPath("snh8wD");
      Token token8 = xPathLexer3.nextToken();
      assertEquals("snh8wD", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer3.leftBracket();
      Token token9 = xPathLexer3.slashes();
      assertEquals(11, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer4.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer0.mod();
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals("n", token11.getTokenText());
      
      Token token12 = xPathLexer4.rightParen();
      assertEquals(2, token12.getTokenType());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.647000475387501
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      xPathLexer2.comma();
      xPathLexer3.nextToken();
      xPathLexer0.plus();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer3.or();
      assertNull(token0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8570349583302819
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.rightBracket();
      token1.toString();
      token0.toString();
      Token token2 = xPathLexer0.at();
      token2.toString();
      token1.toString();
      token2.toString();
      String string0 = token1.toString();
      assertEquals("[ (4) (q)", string0);
      
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (16) (0)", string1);
      
      String string2 = token0.toString();
      assertEquals("[ (2) (F)", string2);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.plus();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("[ (2) (F)");
      Token token5 = xPathLexer1.plus();
      assertEquals("[", token5.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer1.and();
      xPathLexer1.nextToken();
      Token token6 = xPathLexer1.nextToken();
      assertEquals(30, token6.getTokenType());
      assertEquals("2", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.or();
      Token token8 = xPathLexer1.pipe();
      assertEquals(")", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      assertEquals(">", token9.getTokenText());
      
      Token token10 = xPathLexer0.minus();
      assertEquals("A", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals("@", token11.getTokenText());
      
      Token token12 = xPathLexer0.star();
      assertEquals("8", token12.getTokenText());
      assertEquals(20, token12.getTokenType());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.581235763183602
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R'(x7jy^K-ox");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("R", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      String string1 = token3.toString();
      assertEquals("[ (-1) ()", string1);
      
      Token token4 = xPathLexer0.star();
      String string2 = token1.toString();
      assertEquals("[ (13) (_)", string2);
      
      xPathLexer0.setPreviousToken(token0);
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token4);
      assertEquals(20, token4.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer1.or();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.2142842908455003
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token0.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (3) (c)", string0);
      
      token1.toString();
      String string1 = token1.toString();
      assertEquals("[ (6) (o)", string1);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.plus();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("e", token3.getTokenText());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("r", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals("k", token6.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("en.saxpath.XPathLexer", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("[ (3) (c)");
      xPathLexer1.or();
      Token token10 = xPathLexer1.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      xPathLexer0.minus();
      Token token12 = xPathLexer1.leftParen();
      assertEquals(" ", token12.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token13 = xPathLexer2.star();
      assertEquals(20, token13.getTokenType());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.9040768796960155
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.star();
      Token token3 = xPathLexer0.nextToken();
      token3.toString();
      assertEquals((-1), token3.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (6) (q)", string0);
      
      xPathLexer0.star();
      String string1 = token0.toString();
      assertEquals("[ (2) (F)", string1);
      
      xPathLexer0.setPreviousToken(token2);
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.star();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.plus();
      assertEquals("(", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals("K", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.getPreviousToken();
      assertEquals(20, token8.getTokenType());
      assertEquals("0", token8.getTokenText());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals("u", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0733763680582484
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("Fq0{<4(Ku>A@8");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.leftBracket();
      xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer3 = new XPathLexer("[ (2) (q)");
      xPathLexer3.at();
      xPathLexer2.doubleColon();
      xPathLexer1.dollar();
      xPathLexer0.rightParen();
      xPathLexer1.slashes();
      xPathLexer1.plus();
      xPathLexer2.nextToken();
      xPathLexer3.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer3.colon();
      xPathLexer3.star();
      xPathLexer3.number();
      xPathLexer0.plus();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      xPathLexer0.equals();
      XPathLexer xPathLexer5 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer5.nextToken();
      xPathLexer5.plus();
      Token token1 = xPathLexer0.or();
      assertNull(token1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7305723354155833
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (6) (0)");
      xPathLexer1.comma();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(1, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("avgRV(%8SSzmJvmeTaC");
      Token token4 = xPathLexer2.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("avgRV", token4.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer1.or();
      Token token5 = xPathLexer2.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("(", token5.getTokenText());
      
      Token token6 = xPathLexer1.dollar();
      assertEquals("6", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.minus();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(") ", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (6) (0)");
      Token token8 = xPathLexer3.comma();
      assertEquals("[", token8.getTokenText());
      assertEquals(32, token8.getTokenType());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.280828627006305
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer1.dots();
      xPathLexer1.plus();
      xPathLexer1.star();
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.at();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.dollar();
      xPathLexer2.mod();
      xPathLexer3.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer5.div();
      assertNull(token0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.4638834651106873
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("q", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (6) (0)");
      Token token3 = xPathLexer1.comma();
      assertEquals("[", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(1, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer1.dots();
      assertEquals("6", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      xPathLexer1.or();
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      assertEquals(")", token6.getTokenText());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4591140330954206
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (6) (0)");
      Token token3 = xPathLexer1.comma();
      assertEquals("[", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(1, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer1.dots();
      assertEquals("6", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("{", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer1.nextToken();
      assertEquals(2, token7.getTokenType());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.239763769856895
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (2) (F)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (2) (F)");
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(3, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.or();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("0", token3.getTokenText());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("{", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals("<", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.9814465879489518
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (3) (q)", string1);
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("{", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.plus();
      Token token4 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.pipe();
      assertEquals("K", token5.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.number();
      Token token6 = xPathLexer0.plus();
      assertEquals(">", token6.getTokenText());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("A", token7.getTokenText());
      
      Token token8 = xPathLexer0.getPreviousToken();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.minus();
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals("8", token9.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.pipe();
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer0.dots();
      assertEquals(13, token13.getTokenType());
      
      Token token14 = xPathLexer0.identifierOrOperatorName();
      assertNull(token14);
      
      xPathLexer0.operatorName();
      Token token15 = xPathLexer0.plus();
      assertEquals(5, token15.getTokenType());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.9036135093500375
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (6) (q)", string0);
      
      xPathLexer0.star();
      String string1 = token0.toString();
      assertEquals("[ (2) (F)", string1);
      
      Token token2 = xPathLexer0.identifier();
      xPathLexer0.setPreviousToken(token2);
      XPathLexer xPathLexer1 = new XPathLexer("[ (6) (q)");
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("[ (6) (q)");
      xPathLexer2.and();
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("6", token4.getTokenText());
      
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("[ (6) (q)");
      Token token5 = xPathLexer2.colon();
      assertEquals(" ", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer3.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("8n7osGR5FL");
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("(", token7.getTokenText());
      
      xPathLexer3.mod();
      xPathLexer4.and();
      XPathLexer xPathLexer5 = new XPathLexer("[ (6) (q)");
      XPathLexer xPathLexer6 = new XPathLexer("M5o/+6>\u0003jExsqW&");
      Token token8 = xPathLexer6.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("M5o", token8.getTokenText());
      
      xPathLexer5.relationalOperator();
      xPathLexer0.or();
      Token token9 = xPathLexer4.pipe();
      assertEquals(17, token9.getTokenType());
      assertEquals("8", token9.getTokenText());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer3.minus();
      Token token11 = xPathLexer4.doubleColon();
      assertEquals("n7", token11.getTokenText());
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.1918619232593253
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer0.identifier();
      assertEquals("nv", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals(4, token11.getTokenType());
      assertEquals("]", token11.getTokenText());
      
      xPathLexer0.hasMoreChars();
      Token token12 = xPathLexer0.leftBracket();
      assertEquals("Q", token12.getTokenText());
      assertEquals(3, token12.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      Token token13 = xPathLexer1.dollar();
      assertEquals(26, token13.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer1.operatorName();
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token15 = xPathLexer0.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.164367222803027
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("\"", token5.getTokenText());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("Q}", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals("nv", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(4, token8.getTokenType());
      assertEquals("]", token8.getTokenText());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("Vo\"Q}nv]QaG");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.mod();
      xPathLexer1.and();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.div();
      xPathLexer1.or();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("Vo\"Q}nv]QaG");
      Token token11 = xPathLexer7.pipe();
      assertEquals(17, token11.getTokenType());
      assertEquals("V", token11.getTokenText());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.8642427101425194
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("/'0vT");
      Token token4 = xPathLexer1.dots();
      assertEquals("/", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer1.comma();
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("0", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setXPath("/'0vT");
      XPathLexer xPathLexer3 = new XPathLexer("/'0vT");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("/'0vT");
      Token token6 = xPathLexer4.slashes();
      assertEquals("/", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer4.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals("'", token7.getTokenText());
      
      xPathLexer1.div();
      xPathLexer1.and();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("/'0vT");
      Token token8 = xPathLexer3.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("'0", token8.getTokenText());
      
      xPathLexer4.not();
      Token token9 = xPathLexer6.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals("/", token9.getTokenText());
      
      Token token10 = xPathLexer6.not();
      assertEquals(23, token10.getTokenType());
      assertEquals("'", token10.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token11 = xPathLexer4.plus();
      assertEquals("v", token11.getTokenText());
      
      Token token12 = xPathLexer5.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer5.plus();
      assertEquals(5, token13.getTokenType());
      
      xPathLexer4.relationalOperator();
      xPathLexer4.or();
      Token token14 = xPathLexer3.identifier();
      assertEquals("vT", token14.getTokenText());
      assertEquals(15, token14.getTokenType());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.951664012288763
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("_R'(x7jy^K-ox");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      token0.toString();
      token0.toString();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.getXPath();
      xPathLexer0.number();
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.0704411590718186
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("Q", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("9", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals("j", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("f", token4.getTokenText());
      
      xPathLexer0.setXPath("c(1S1>Y_A,6");
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      Token token5 = xPathLexer0.nextToken();
      assertEquals("Vo", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.setXPath("jQ9ljf");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("j", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      xPathLexer0.and();
      XPathLexer xPathLexer3 = new XPathLexer("Rf1%n^unY;`PJB$RVe");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("Rf1%n^unY;`PJB$RVe");
      xPathLexer4.relationalOperator();
      xPathLexer3.or();
      Token token7 = xPathLexer0.pipe();
      assertEquals("Q", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals("9", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer1.minus();
      assertEquals(6, token9.getTokenType());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.4029782637799006
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("!;O$1A|<pAG");
      xPathLexer1.whitespace();
      xPathLexer1.star();
      Token token4 = xPathLexer1.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
      
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer1.whitespace();
      xPathLexer0.dollar();
      Token token5 = xPathLexer1.notEquals();
      assertEquals("1A", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.setXPath("!;O$1A|<pAG");
      Token token6 = xPathLexer0.nextToken();
      assertEquals(23, token6.getTokenType());
      assertEquals("!", token6.getTokenText());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("\fdj$!,n../'Y;");
      Token token8 = xPathLexer3.star();
      assertEquals("\f", token8.getTokenText());
      assertEquals(20, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer2.number();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer4.dollar();
      xPathLexer4.div();
      xPathLexer2.mod();
      xPathLexer0.and();
      xPathLexer2.relationalOperator();
      Token token11 = xPathLexer1.whitespace();
      assertEquals((-2), token11.getTokenType());
      
      xPathLexer2.not();
      Token token12 = xPathLexer1.nextToken();
      assertEquals(15, token12.getTokenType());
      assertEquals("G", token12.getTokenText());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6596181886964476
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("wn>!1H3");
      Token token2 = xPathLexer1.leftBracket();
      token2.toString();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(9, token3.getTokenType());
      
      String string0 = token2.toString();
      assertEquals("[ (3) (w)", string0);
      
      Token token4 = xPathLexer1.at();
      String string1 = token4.toString();
      assertEquals("[ (16) (n)", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (13) (n)", string2);
      
      Token token5 = xPathLexer0.nextToken();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("1", token6.getTokenText());
      
      String string3 = token5.toString();
      assertEquals("[ (23) (!)", string3);
      
      Token token7 = xPathLexer1.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals(">", token7.getTokenText());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer1.dollar();
      String string4 = token9.toString();
      assertEquals("[ (26) (!)", string4);
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      assertEquals("1", token10.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      Token token11 = xPathLexer2.pipe();
      assertEquals(17, token11.getTokenType());
      assertEquals("[", token11.getTokenText());
      
      xPathLexer2.dollar();
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
      assertEquals("H", token12.getTokenText());
      
      Token token13 = xPathLexer2.slashes();
      assertEquals(11, token13.getTokenType());
      assertEquals("(", token13.getTokenText());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.988202713981084
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("n", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("wn>!1H3");
      Token token1 = xPathLexer1.leftBracket();
      token1.toString();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(9, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
      
      token1.toString();
      Token token3 = xPathLexer1.at();
      String string0 = token3.toString();
      assertEquals("[ (16) (n)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer("wn>!1H3");
      Token token4 = xPathLexer1.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals(23, token5.getTokenType());
      assertEquals("!", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer1.and();
      xPathLexer3.leftParen();
      xPathLexer0.pipe();
      XPathLexer xPathLexer4 = new XPathLexer("+:UNZTq-L");
      xPathLexer2.slashes();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.star();
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("[ (3) (w)");
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("n", token7.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.mod();
      xPathLexer1.and();
      XPathLexer xPathLexer8 = new XPathLexer("[ (");
      Token token8 = xPathLexer1.nextToken();
      assertEquals(30, token8.getTokenType());
      assertEquals("1", token8.getTokenText());
      
      xPathLexer4.relationalOperator();
      xPathLexer8.or();
      Token token9 = xPathLexer0.pipe();
      assertEquals("1", token9.getTokenText());
      
      Token token10 = xPathLexer7.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer6.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer6.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals(" (", token12.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token13 = xPathLexer9.comma();
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.8513922235570661
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("Fq0{<4(Ku>A@8");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer3 = new XPathLexer("[ (2) (q)");
      xPathLexer3.at();
      xPathLexer2.doubleColon();
      xPathLexer1.dollar();
      xPathLexer0.rightParen();
      xPathLexer1.slashes();
      xPathLexer1.plus();
      xPathLexer2.nextToken();
      xPathLexer3.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer3.colon();
      xPathLexer3.star();
      XPathLexer xPathLexer4 = new XPathLexer("wavg8#o");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer4.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer4.and();
      xPathLexer3.relationalOperator();
      xPathLexer1.operatorName();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.7536932230850728
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.getXPath();
      xPathLexer0.endPosition();
      xPathLexer0.isIdentifierStartChar('d');
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.or();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.at();
      xPathLexer0.isIdentifierStartChar(':');
      xPathLexer0.literal();
      xPathLexer0.equals();
      xPathLexer0.consume();
      assertEquals("", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0924703304827705
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath("");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.consume((-123));
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3059));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.081812584172284
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.notEquals();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.currentPosition();
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      xPathLexer0.currentPosition();
      xPathLexer0.comma();
      char char0 = xPathLexer0.LA(9);
      assertEquals('x', char0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.4668826126102972
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      Token token3 = xPathLexer0.nextToken();
      token3.toString();
      assertEquals((-1), token3.getTokenType());
      
      String string1 = token1.toString();
      assertEquals("[ (3) (q)", string1);
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("{", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer0.and();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(7, token5.getTokenType());
      assertEquals("<", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("4", token7.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token9 = xPathLexer0.minus();
      assertEquals("(", token9.getTokenText());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.9594219813650067
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      XPathLexer xPathLexer1 = new XPathLexer("/'0vFT");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.minus();
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer("[ (2) (/)");
      Token token1 = xPathLexer2.star();
      token1.toString();
      token0.toString();
      token1.toString();
      xPathLexer2.star();
      token1.toString();
      Token token2 = xPathLexer1.identifier();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer2.not();
      xPathLexer1.star();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer1.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer1.operatorName();
      xPathLexer3.doubleColon();
      xPathLexer3.colon();
      xPathLexer3.star();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.number();
      xPathLexer1.plus();
      xPathLexer3.at();
      xPathLexer0.equals();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.plus();
      xPathLexer2.or();
      Token token3 = xPathLexer1.operatorName();
      assertNull(token3);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.7135390226618195
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      Token token0 = xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer0.literal();
      xPathLexer1.not();
      xPathLexer2.div();
      Token token1 = xPathLexer0.notEquals();
      token1.toString();
      xPathLexer1.doubleColon();
      token1.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer1.not();
      xPathLexer1.star();
      xPathLexer1.minus();
      xPathLexer0.plus();
      xPathLexer1.at();
      xPathLexer2.at();
      xPathLexer1.dollar();
      xPathLexer0.mod();
      xPathLexer1.plus();
      xPathLexer0.and();
      Token token2 = xPathLexer1.relationalOperator();
      assertNull(token2);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5545286781274081
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.comma();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.663016345581336
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.comma();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer1.operatorName();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7668384752051525
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      token1.toString();
      token1.toString();
      xPathLexer0.star();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.getXPath();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getXPath();
      Token token2 = xPathLexer1.operatorName();
      assertNull(token2);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.857270207056888
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      xPathLexer0.star();
      token0.toString();
      Token token2 = xPathLexer0.nextToken();
      token0.toString();
      token2.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.7919317459593938
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("!;O$1A|<pAG");
      xPathLexer0.and();
      Token token3 = xPathLexer1.leftParen();
      assertEquals("!", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer1.pipe();
      assertEquals(";", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("!;O$1A|<pAG");
      Token token5 = xPathLexer2.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("!", token5.getTokenText());
      
      Token token6 = xPathLexer1.star();
      assertEquals("O", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer2.mod();
      xPathLexer3.and();
      XPathLexer xPathLexer4 = new XPathLexer("!;O$1A|<pAG");
      XPathLexer xPathLexer5 = new XPathLexer("8n7osGR5FL");
      Token token8 = xPathLexer4.nextToken();
      assertEquals(23, token8.getTokenType());
      assertEquals("!", token8.getTokenText());
      
      xPathLexer5.relationalOperator();
      xPathLexer5.or();
      Token token9 = xPathLexer3.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer2.minus();
      assertEquals(";", token11.getTokenText());
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer2.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals("O$", token12.getTokenText());
      
      Token token13 = xPathLexer4.comma();
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.445360354134916
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer1.setXPath("FSRm.G7pW)y:k~");
      xPathLexer1.number();
      xPathLexer0.and();
      xPathLexer1.operatorName();
      xPathLexer0.leftParen();
      xPathLexer1.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.currentPosition();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.literal();
      xPathLexer1.not();
      xPathLexer1.div();
      xPathLexer1.notEquals();
      xPathLexer2.doubleColon();
      xPathLexer3.pipe();
      xPathLexer3.slashes();
      xPathLexer1.whitespace();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.or();
      xPathLexer3.literal();
      xPathLexer1.leftParen();
      xPathLexer0.comma();
      xPathLexer2.star();
      xPathLexer4.plus();
      xPathLexer1.div();
      xPathLexer4.endPosition();
      xPathLexer2.mod();
      Token token0 = xPathLexer3.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7695561165867812
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.and();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('c');
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.3478734561778114
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("com.werken.sapath.XPathLexer");
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.literal();
      String string0 = "bWii9'=isM$xo_!.";
      XPathLexer xPathLexer3 = new XPathLexer("bWii9'=isM$xo_!.");
      xPathLexer3.rightParen();
      String string1 = "/7mI!P@CE@u`h-tw";
      // Undeclared exception!
      try { 
        xPathLexer2.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5044995417427938
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.or();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('@');
      assertFalse(boolean0);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftParen();
      assertEquals(1, token10.getTokenType());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.2389415775264168
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ye*K*b2T(Y7eT|");
      XPathLexer xPathLexer1 = new XPathLexer("Ye*K*b2T(Y7eT|");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.3756036257989352
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m1");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("m1", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.893689401248897
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.minus();
      assertEquals("F", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.star();
      assertEquals("{", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("Fq0{<4(Ku>A@8");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token3 = xPathLexer2.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(7, token4.getTokenType());
      assertEquals("<", token4.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (2) (q)", string0);
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (2) (q)");
      Token token5 = xPathLexer3.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer2.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals("F", token7.getTokenText());
      
      xPathLexer0.rightParen();
      Token token8 = xPathLexer1.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("q", token8.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer2.rightParen();
      xPathLexer3.number();
      xPathLexer3.plus();
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer3.leftParen();
      xPathLexer0.and();
      Token token9 = xPathLexer0.nextToken();
      assertEquals("(", token9.getTokenText());
      assertEquals(1, token9.getTokenType());
      
      xPathLexer3.nextToken();
      Token token10 = xPathLexer2.plus();
      assertEquals(5, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.relationalOperator();
      Token token11 = xPathLexer2.pipe();
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer3.dots();
      assertEquals(")", token12.getTokenText());
      assertEquals(13, token12.getTokenType());
      
      xPathLexer0.or();
      Token token13 = xPathLexer1.nextToken();
      assertEquals(30, token13.getTokenType());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.375200738439526
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m1");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("m1", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.and();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.3988266733857744
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.not();
      xPathLexer0.slashes();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.consume(2124);
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.1329069028714196
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQ9ljf");
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("Q", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.setXPath("c(1S1>Y_A,6");
      Token token2 = xPathLexer0.pipe();
      assertEquals("c", token2.getTokenText());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.minus();
      assertEquals("(", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.comma();
      assertEquals(32, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer1.rightParen();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("1", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("c(1S1>Y_A,6");
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer3.rightBracket();
      assertEquals("(", token7.getTokenText());
      assertEquals(4, token7.getTokenType());
      
      xPathLexer3.and();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("S1>Y_A,6", token8.getTokenText());
      
      xPathLexer1.doubleColon();
      Token token9 = xPathLexer3.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer0.plus();
      assertEquals("S", token10.getTokenText());
      
      Token token11 = xPathLexer3.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("S", token11.getTokenText());
      
      Token token12 = xPathLexer3.plus();
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer1.pipe();
      assertEquals(17, token13.getTokenType());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.8864739426106747
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}G 2VX\u0002XGY>$G`");
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftBracket();
      xPathLexer0.literal();
      xPathLexer2.not();
      xPathLexer3.div();
      xPathLexer0.notEquals();
      xPathLexer1.doubleColon();
      xPathLexer0.pipe();
      xPathLexer1.slashes();
      xPathLexer1.whitespace();
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftParen();
      xPathLexer4.comma();
      xPathLexer1.mod();
      xPathLexer2.and();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierChar('\\');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.8616523912292249
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("Vc1");
      Token token0 = xPathLexer1.notEquals();
      assertEquals("Vc", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.dots();
      Token token1 = xPathLexer1.dots();
      assertEquals("1", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer0.isIdentifierChar('T');
      assertTrue(boolean0);
      
      XPathLexer xPathLexer2 = new XPathLexer("com.wrken.saxpath.Token");
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.plus();
      XPathLexer xPathLexer5 = new XPathLexer("FH3j#");
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.doubleColon();
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer2.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("c", token4.getTokenText());
      
      Token token5 = xPathLexer3.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.plus();
      Token token6 = xPathLexer5.at();
      assertEquals("F", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer6.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer7.doubleColon();
      assertEquals(19, token10.getTokenType());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.9143672346412512
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}HG 2VX\u0002XGY>$G`/");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      Token token2 = xPathLexer0.leftBracket();
      token2.toString();
      Token token3 = xPathLexer0.rightParen();
      Token token4 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (17) (})", string0);
      
      Token token5 = xPathLexer0.at();
      assertEquals("", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      String string1 = token3.toString();
      assertEquals("[ (2) (G)", string1);
      
      String string2 = token4.toString();
      assertEquals("[ (-1) (2VX\u0002XGY>$G`/)", string2);
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("2", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      String string3 = token2.toString();
      assertEquals("[ (3) (H)", string3);
      
      Token token7 = xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("[ (17) (})");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      Token token8 = xPathLexer2.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer1.notEquals();
      assertEquals(" (", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer1.dollar();
      assertEquals("1", token10.getTokenText());
      
      xPathLexer2.whitespace();
      xPathLexer1.and();
      XPathLexer xPathLexer5 = new XPathLexer("[ (-1) (2VX\u0002XGY>$G`/)");
      Token token11 = xPathLexer1.number();
      assertEquals("7", token11.getTokenText());
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer3.dollar();
      assertEquals(26, token12.getTokenType());
      
      xPathLexer2.div();
      XPathLexer xPathLexer6 = new XPathLexer(")");
      xPathLexer6.setPreviousToken(token7);
      xPathLexer6.mod();
      XPathLexer xPathLexer7 = new XPathLexer("[ (-1) (2VX\u0002XGY>$G`/)");
      xPathLexer7.and();
      xPathLexer3.relationalOperator();
      Token token13 = xPathLexer1.whitespace();
      assertEquals("", token13.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token14 = xPathLexer8.not();
      assertEquals(23, token14.getTokenType());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.8882668047906528
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vT");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("/'", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("0", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.pipe();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.setXPath("7Mat2<oQ26");
      Token token5 = xPathLexer0.nextToken();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.setXPath("%fN^(1Iem");
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("%", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("7Mat2<oQ26");
      xPathLexer1.slashes();
      xPathLexer0.mod();
      xPathLexer0.and();
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer("/'0vT");
      Token token8 = xPathLexer4.nextToken();
      assertEquals(11, token8.getTokenType());
      assertEquals("/", token8.getTokenText());
      
      xPathLexer4.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.or();
      Token token9 = xPathLexer4.pipe();
      assertEquals("'", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer1.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer2.minus();
      assertEquals(6, token11.getTokenType());
      assertEquals("7", token11.getTokenText());
      
      Token token12 = xPathLexer1.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer4.comma();
      assertEquals(32, token13.getTokenType());
      assertEquals("0", token13.getTokenText());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.201877361596037
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer2.dollar();
      assertEquals("c", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer1.plus();
      assertEquals(5, token4.getTokenType());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.6609729599894363
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("m\"o|f");
      xPathLexer1.mod();
      xPathLexer0.mod();
      Token token0 = xPathLexer1.plus();
      xPathLexer0.leftBracket();
      token0.toString();
      Token token1 = xPathLexer0.star();
      Token token2 = xPathLexer1.nextToken();
      token2.toString();
      token0.toString();
      token2.toString();
      xPathLexer0.colon();
      token2.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.1353421736324827
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token0.toString();
      token2.toString();
      token1.toString();
      xPathLexer0.star();
      token0.toString();
      xPathLexer0.identifier();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer1.colon();
      xPathLexer1.star();
      xPathLexer0.number();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer2.plus();
      Token token3 = xPathLexer2.or();
      assertNull(token3);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.7813498011751103
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.identifier();
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1640));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.8791875464065138
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.star();
      token0.toString();
      token2.toString();
      Token token3 = xPathLexer0.star();
      token2.toString();
      Token token4 = xPathLexer0.nextToken();
      token0.toString();
      token4.toString();
      token3.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.860208251658341
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")T8BV^XI");
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.LA(54);
      xPathLexer0.pipe();
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token1 = xPathLexer0.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.8831402126208947
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.star();
      String string0 = token1.toString();
      assertEquals("[ (20) (q)", string0);
      
      Token token2 = xPathLexer0.nextToken();
      String string1 = token2.toString();
      assertEquals(30, token2.getTokenType());
      assertEquals("[ (30) (0)", string1);
      
      token0.toString();
      String string2 = token0.toString();
      assertEquals("[ (2) (F)", string2);
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("{", token3.getTokenText());
      
      xPathLexer0.star();
      xPathLexer0.number();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("K", token5.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals("u", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals(">", token7.getTokenText());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.156272429712417
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.leftParen();
      assertEquals(1, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token5 = xPathLexer3.pipe();
      assertEquals("c", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer3.dollar();
      assertEquals("o", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.5607198541435303
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.leftBracket();
      token1.toString();
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      token1.toString();
      Token token3 = xPathLexer0.at();
      token3.toString();
      token3.toString();
      token3.toString();
      xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.whitespace();
      Token token4 = xPathLexer0.nextToken();
      token4.toString();
      token4.toString();
      xPathLexer0.colon();
      token2.toString();
      token3.toString();
      token4.toString();
      token3.toString();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.star();
      // Undeclared exception!
      try { 
        token5.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.4216566648803273
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer1.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer2.slashes();
      assertEquals("c", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      xPathLexer2.mod();
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer3.relationalOperator();
      xPathLexer0.or();
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer2.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("o", token5.getTokenText());
      
      Token token6 = xPathLexer1.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals(".", token6.getTokenText());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.8959996756690782
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R'(x7jy^K-ox");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.dots();
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.nextToken();
      token0.toString();
      token2.toString();
      xPathLexer0.star();
      token1.toString();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.getXPath();
      xPathLexer0.number();
      xPathLexer0.getXPath();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.0162273147219376
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer1.dollar();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.157629569415561
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("_R", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("`", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer1.dots();
      assertEquals(13, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("_R`(xjy^K-x");
      xPathLexer2.endPosition();
      Token token4 = xPathLexer1.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals("(", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer2.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      xPathLexer1.plus();
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.plus();
      Token token9 = xPathLexer0.nextToken();
      assertEquals("xjy^K-x", token9.getTokenText());
      
      xPathLexer3.mod();
      Token token10 = xPathLexer0.doubleColon();
      assertEquals("xj", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
      
      xPathLexer3.colon();
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      assertEquals("y", token11.getTokenText());
      
      xPathLexer3.plus();
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
      assertEquals("K", token13.getTokenText());
      
      Token token14 = xPathLexer0.nextToken();
      assertEquals("-", token14.getTokenText());
      assertEquals(6, token14.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("`US6!]s'3YJ_(VD/");
      Token token15 = xPathLexer4.plus();
      assertEquals(5, token15.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("`US6!]s'3YJ_(VD/");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token16 = xPathLexer6.notEquals();
      assertEquals(22, token16.getTokenType());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.181183419907883
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.2033773039059485
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.consume((-1303));
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.925315057641211
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7Mat2<oQ26");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("7", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("M", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("a", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.6545098587330733
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (15) (q0)", string0);
      
      token0.toString();
      String string1 = token0.toString();
      assertEquals("[ (2) (F)", string1);
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.not();
      assertEquals("{", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("<", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("4", token4.getTokenText());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("(", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals("K", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals("F", token7.getTokenText());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.310170691124819
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.minus();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      token2.toString();
      Token token3 = xPathLexer0.colon();
      String string0 = token2.toString();
      assertEquals("[ (6) (0)", string0);
      
      token3.toString();
      Token token4 = xPathLexer0.slashes();
      token1.toString();
      String string1 = token4.toString();
      assertEquals("[ (11) (<)", string1);
      
      Token token5 = xPathLexer0.comma();
      assertEquals("4", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      String string2 = token3.toString();
      assertEquals("[ (18) ({)", string2);
      
      String string3 = token0.toString();
      assertEquals("[ (2) (F)", string3);
      
      xPathLexer0.star();
      String string4 = token1.toString();
      assertEquals("[ (3) (q)", string4);
      
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("[ (2) (F)");
      Token token6 = xPathLexer1.not();
      assertEquals("[", token6.getTokenText());
      
      xPathLexer0.plus();
      Token token7 = xPathLexer1.at();
      assertEquals(" ", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals(">", token8.getTokenText());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("A", token9.getTokenText());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
  }
}
