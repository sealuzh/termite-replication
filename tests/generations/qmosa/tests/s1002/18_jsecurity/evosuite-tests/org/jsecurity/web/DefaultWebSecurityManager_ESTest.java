/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 09:10:51 GMT 2019
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.Predicate;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationException;
import org.jsecurity.authc.AuthenticationInfo;
import org.jsecurity.authc.AuthenticationListener;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy;
import org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy;
import org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy;
import org.jsecurity.authc.pam.ModularRealmAuthenticator;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.mgt.DefaultSecurityManager;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.subject.DelegatingSubject;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.jsecurity.web.WebRememberMeManager;
import org.jsecurity.web.session.DefaultWebSessionManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7108644721577915
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultWebSecurityManager1.isHttpSessionMode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":xPn!W");
      Object object1 = new Object();
      Predicate.isEqual(object1);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      Boolean boolean0 = Boolean.FALSE;
      Predicate.isEqual((Object) fileSystemHandling1);
      defaultWebSecurityManager1.isHttpSessionMode();
      defaultWebSecurityManager0.setSessionMode("http");
      assertEquals("http", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationException authenticationException0 = new AuthenticationException("L.$U`9");
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{rE$@");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(2=&I");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K;U9,=Y;<0.(");
      Boolean.valueOf(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]Bl<FPl.4Ti;");
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getLocalName();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper0.getLocalName();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Class<WebRememberMeManager> class0 = WebRememberMeManager.class;
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      simplePrincipalCollection1.byType(class0);
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection1);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(simplePrincipalCollection2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o5[t]T 3R(iMET\".");
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(simplePrincipalCollection3, true, inetAddress0, (Session) null, defaultSecurityManager0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper1, servletResponseWrapper0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.097109961247129
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":xPn!W");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(fileSystemHandling0, "D`;l4U");
      simplePrincipalCollection0.spliterator();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(simplePrincipalCollection0, false, inetAddress0, (Session) null, defaultWebSecurityManager1);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, false, (Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper2);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.bind(delegatingSubject0, servletRequestWrapper2, servletResponseWrapper0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      System.setCurrentTimeMillis(951L);
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection1, true, (Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper0);
      assertTrue(subject0.isAuthenticated());
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      System.setCurrentTimeMillis(442L);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null, (ServletRequest) null, servletResponseWrapper0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      linkedHashSet0.parallelStream();
      LinkedHashSet<Realm> linkedHashSet1 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet2 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet3 = new LinkedHashSet<Realm>();
      Object object0 = new Object();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, false);
      Predicate.isEqual(object0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.isAuthenticated((Session) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("elcr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [elcr].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.getPrincipals((Session) null);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0217997374003334
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      linkedHashSet0.parallelStream();
      LinkedHashSet<Realm> linkedHashSet1 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet2 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet3 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet4 = new LinkedHashSet<Realm>();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator(simpleAccountRealm0);
      modularRealmAuthenticator0.getModularAuthenticationStrategy();
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      ModularRealmAuthenticator modularRealmAuthenticator1 = new ModularRealmAuthenticator(linkedList0);
      defaultWebSecurityManager0.isHttpSessionMode();
      defaultWebSecurityManager0.setSessionIdCookieSecure(false);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0263763964392347
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t=:7GzVg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      ModularRealmAuthenticator modularRealmAuthenticator1 = new ModularRealmAuthenticator(linkedList0);
      ModularRealmAuthenticator modularRealmAuthenticator2 = new ModularRealmAuthenticator(linkedList0);
      modularRealmAuthenticator1.add((AuthenticationListener) null);
      ModularRealmAuthenticator modularRealmAuthenticator3 = new ModularRealmAuthenticator(linkedList0);
      modularRealmAuthenticator0.setRealms(linkedList0);
      ModularRealmAuthenticator modularRealmAuthenticator4 = new ModularRealmAuthenticator();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      modularRealmAuthenticator4.setModularAuthenticationStrategy(allSuccessfulModularAuthenticationStrategy0);
      modularRealmAuthenticator3.getModularAuthenticationStrategy();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionIdCookiePath("6[r#NZ=");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.start(inetAddress0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8686121260453956
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet1 = new LinkedHashSet<Realm>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      Boolean boolean0 = Boolean.FALSE;
      Predicate<Object> predicate1 = Predicate.isEqual((Object) boolean0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) simpleAccountRealm0);
      WildcardPermission wildcardPermission0 = new WildcardPermission("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY", true);
      Object object1 = new Object();
      Predicate<Object> predicate4 = Predicate.isEqual(object1);
      Predicate<Object> predicate5 = predicate0.and(predicate3);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate5.or(predicate7);
      Predicate<Object> predicate9 = predicate2.negate();
      predicate6.or(predicate9);
      predicate9.and(predicate7);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate0.or(predicate10);
      Predicate<Object> predicate12 = predicate7.and(predicate1);
      Predicate<Object> predicate13 = predicate10.negate();
      predicate10.or(predicate12);
      Predicate<Object> predicate14 = predicate3.and(predicate8);
      Predicate<Object> predicate15 = predicate14.and(predicate6);
      predicate3.negate();
      predicate15.or(predicate11);
      predicate4.negate();
      Predicate<Object> predicate16 = predicate13.negate();
      predicate2.and(predicate16);
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertEquals("jsecurity", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.018703762168135
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet1 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet2 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet3 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet4 = new LinkedHashSet<Realm>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      Boolean boolean0 = Boolean.FALSE;
      Predicate.isEqual((Object) boolean0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) simpleAccountRealm0);
      WildcardPermission wildcardPermission0 = new WildcardPermission("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY", true);
      Object object1 = new Object();
      Predicate<Object> predicate3 = Predicate.isEqual(object1);
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      Predicate<Object> predicate5 = predicate2.or(predicate1);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate4.or(predicate6);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate7);
      predicate6.or(predicate8);
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate0.or(predicate9);
      Predicate<Object> predicate11 = predicate9.and(predicate0);
      predicate9.or(predicate11);
      Predicate<Object> predicate12 = predicate2.and(predicate7);
      Predicate<Object> predicate13 = predicate12.and(predicate5);
      predicate2.negate();
      predicate13.or(predicate10);
      Predicate<Object> predicate14 = predicate3.negate();
      Predicate<Object> predicate15 = predicate14.and(predicate5);
      Predicate<Object> predicate16 = predicate15.and(predicate14);
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      linkedList0.removeIf(predicate16);
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      defaultWebSecurityManager0.setSessionIdCookieMaxAge(2147483645);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0217997374003334
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("xjuz}C%vzF;P");
      linkedHashSet0.add(simpleAccountRealm0);
      linkedHashSet0.parallelStream();
      LinkedHashSet<Realm> linkedHashSet1 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet2 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet3 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet4 = new LinkedHashSet<Realm>();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator(simpleAccountRealm1);
      modularRealmAuthenticator0.getModularAuthenticationStrategy();
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      ModularRealmAuthenticator modularRealmAuthenticator1 = new ModularRealmAuthenticator(linkedList0);
      defaultWebSecurityManager0.isHttpSessionMode();
      defaultWebSecurityManager0.setSessionIdCookieName("y>!OKisH46\"!I");
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7102476273485032
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "http");
      WildcardPermission wildcardPermission0 = new WildcardPermission("Unable to acquire Blowfish algorithm.  This is required to function.", true);
      Object object0 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Integer integer0 = new Integer((-2838));
      Boolean boolean0 = new Boolean(true);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) boolean0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.and(predicate3);
      predicate5.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate1);
      Predicate<Object> predicate7 = predicate6.and(predicate2);
      predicate1.and(predicate4);
      Predicate<Object> predicate8 = predicate6.negate();
      predicate5.or(predicate7);
      defaultWebSecurityManager0.newSessionManagerInstance();
      // Undeclared exception!
      try { 
        predicate8.and((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.setRequest(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.apache.log4j.Appender", "5log4j:WARN ", false);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper1, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "NY\"N?<rM?");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";TB%kr#OU50tIE~=w?C=");
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";TB%kr#OU50tIE~=w?C=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";TB%kr#OU50tIE~=w?C=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",^$");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte) (-54);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "NY\"N?<rM?");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";TB%kr#OU50tIE~=w?C=");
      defaultWebSecurityManager0.setRememberMeEncryptionCipherKeyBase64("NY\"N?<rM?");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";TB%kr#OU50tIE~=w?C=");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AuthenticationException authenticationException0 = new AuthenticationException("L.$U`9");
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("L.$U`9");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy1 = new AllSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy2 = new AllSuccessfulModularAuthenticationStrategy();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationException authenticationException1 = new AuthenticationException();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy1 = new FirstSuccessfulAuthenticationStrategy();
      simpleAccountRealm0.setName("L.$U`9");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, servletRequestWrapper0, servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "NY\"N?<rM?");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";TB%r#OU50tIE~=w?C=");
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";TB%r#OU50tIE~=w?C=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",c6K;ncWA");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm((String) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getLocalPort();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getLocalPort();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      Integer integer0 = new Integer(0);
      Integer.min((-1734), 0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t=:7GzVg");
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y-Bj]}*IOoq~yq");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.or(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) "t=:7GzVg");
      Predicate<Object> predicate6 = predicate4.negate();
      predicate3.and(predicate5);
      predicate4.and(predicate2);
      Predicate<Object> predicate7 = predicate0.or(predicate6);
      Predicate<Object> predicate8 = predicate4.negate();
      Predicate<Object> predicate9 = predicate4.or(predicate1);
      predicate7.and(predicate0);
      Predicate<Object> predicate10 = predicate4.or(predicate9);
      Predicate<Object> predicate11 = predicate3.and(predicate8);
      predicate3.and(predicate8);
      Predicate<Object> predicate12 = predicate10.negate();
      predicate11.or(predicate2);
      predicate12.negate();
      predicate2.and(predicate6);
      predicate9.and(predicate1);
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      linkedList0.removeIf(predicate12);
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName("iZY=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1569877743224173
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      defaultWebSecurityManager0.setRememberMeCipherKey(byteArray0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      DefaultWebSessionManager defaultWebSessionManager0 = new DefaultWebSessionManager();
      Integer integer0 = new Integer((-1));
      defaultWebSecurityManager0.isHttpSessionMode();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      defaultWebSecurityManager0.setAuthorizer(defaultWebSecurityManager0);
      defaultWebSecurityManager0.getSessionMode();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.setRememberMeCookiePath("/>]_sNv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("http");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ",ci[fneWA");
      predicate0.negate();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.getSession(" is not Serializable and cannot be overflowed to disk");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      modularRealmAuthenticator0.add(authenticationListener0);
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      ModularRealmAuthenticator modularRealmAuthenticator1 = new ModularRealmAuthenticator(linkedList0);
      modularRealmAuthenticator1.setRealms((Collection<Realm>) null);
      ModularRealmAuthenticator modularRealmAuthenticator2 = new ModularRealmAuthenticator(linkedList0);
      modularRealmAuthenticator0.getModularAuthenticationStrategy();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2);
      simpleAccountRealm0.hasRoles((PrincipalCollection) null, list0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("] was unable to find account data for the ");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      assertEquals("http", defaultWebSecurityManager1.getSessionMode());
      
      defaultWebSecurityManager0.setRememberMeCookiePath("http");
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y-Bj]}*IOoq~yq");
      WildcardPermission wildcardPermission0 = new WildcardPermission("Invalid sessionMode [", false);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) wildcardPermission0);
      Object object0 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      Predicate<Object> predicate6 = predicate1.or(predicate3);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate2.and(predicate4);
      Predicate<Object> predicate9 = predicate8.or(predicate1);
      Predicate<Object> predicate10 = predicate0.or(predicate4);
      predicate7.and(predicate5);
      Predicate<Object> predicate11 = predicate2.or(predicate4);
      predicate6.and(predicate1);
      predicate9.and(predicate6);
      predicate11.negate();
      predicate4.negate();
      predicate10.negate();
      predicate10.and(predicate3);
      predicate9.negate();
      predicate6.and(predicate5);
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      linkedList0.removeIf(predicate9);
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath(",ZSmx");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationException authenticationException0 = new AuthenticationException("&<'}V5M^Cq8HS`./");
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy1 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm((String) null);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy1 = new AllSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy2 = new AllSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy3 = new AllSuccessfulModularAuthenticationStrategy();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy1 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationException authenticationException1 = new AuthenticationException();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy2 = new FirstSuccessfulAuthenticationStrategy();
      simpleAccountRealm1.setName("&<'}V5M^Cq8HS`./");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm((String) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getLocalPort();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getLocalPort();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      String string0 = "Fq";
      WildcardPermission wildcardPermission0 = new WildcardPermission("Fq");
      try { 
        simpleAccountRealm0.checkPermission((PrincipalCollection) null, (Permission) wildcardPermission0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User is not permitted [org.jsecurity.authz.permission.WildcardPermission@25]
         //
         verifyException("org.jsecurity.realm.AuthorizingRealm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationException authenticationException0 = new AuthenticationException("L.$U`9");
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("L.$U`9");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy1 = new AllSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy2 = new AllSuccessfulModularAuthenticationStrategy();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy1 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationException authenticationException1 = new AuthenticationException();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy2 = new FirstSuccessfulAuthenticationStrategy();
      simpleAccountRealm0.setName("sessionMode is 'jsecurity'.");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge(44);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "NY\"N?<rM?");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";TB%kr#OU50tIE~=w?C=");
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";TB%kr#OU50tIE~=w?C=");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NY\"N?<rM?");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getAttributeNames();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getAttributeNames();
      Integer integer0 = new Integer((-372));
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SimplePrincipalCollection simplePrincipalCollection0 = null;
      try {
        simplePrincipalCollection0 = new SimplePrincipalCollection((Collection) linkedList0, "jsecurity");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // principals argument cannot be an empty collection.
         //
         verifyException("org.jsecurity.subject.SimplePrincipalCollection", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "NY\"N?<rM?");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";TB%r#OU50tIE~=w?C=");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";TB%r#OU50tIE~=w?C=");
      DefaultWebSecurityManager defaultWebSecurityManager1 = null;
      try {
        defaultWebSecurityManager1 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      linkedHashSet0.add(simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("6`JQtaz4qDPo g8");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("");
      LinkedHashSet<Realm> linkedHashSet1 = new LinkedHashSet<Realm>();
      linkedHashSet1.add(simpleAccountRealm2);
      LinkedHashSet<Realm> linkedHashSet2 = new LinkedHashSet<Realm>();
      linkedHashSet2.parallelStream();
      LinkedHashSet<Realm> linkedHashSet3 = new LinkedHashSet<Realm>();
      LinkedHashSet<Realm> linkedHashSet4 = new LinkedHashSet<Realm>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedHashSet0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm3);
      assertTrue(defaultWebSecurityManager1.isHttpSessionMode());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Collection<Realm>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be null.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationException authenticationException0 = new AuthenticationException("@.$s`9");
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      char[] charArray0 = new char[6];
      charArray0[1] = 'Z';
      charArray0[2] = '}';
      charArray0[3] = 'A';
      charArray0[4] = '1';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("48?Gls=fO]hTy5a*", charArray0);
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy1 = new AllSuccessfulModularAuthenticationStrategy();
      allSuccessfulModularAuthenticationStrategy0.beforeAttempt(simpleAccountRealm0, usernamePasswordToken0, (AuthenticationInfo) null);
      AuthenticationException authenticationException1 = new AuthenticationException();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy1 = new FirstSuccessfulAuthenticationStrategy();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("{++T?q?V@{Bw`am+=");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("{++T?q?V@{Bw`am+=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [{++T?q?V@{Bw`am+=].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t=:7GzVg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P+Z< D|dHb,!!q");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }
}
