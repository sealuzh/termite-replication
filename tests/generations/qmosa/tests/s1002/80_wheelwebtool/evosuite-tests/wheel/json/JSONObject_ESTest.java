/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 08:24:11 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9666762929471178
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("@DgOC^,#G$]");
      Short short0 = new Short((short) (-2201));
      Short.compare((short) (-2201), (short) (-2201));
      linkedList0.removeLastOccurrence(short0);
      linkedList0.add("e");
      linkedList0.add("e");
      linkedList0.clear();
      linkedList0.pollFirst();
      Boolean boolean0 = new Boolean(true);
      Short short1 = new Short((short) (-2362));
      Double double0 = new Double((short) (-2362));
      Double.max(654.9361, (-2973.6498));
      Double.min(Double.NaN, (-45.391631635624066));
      Double.max(931.655011453774, (-2973.6498));
      Double.max(931.655011453774, (short) (-2362));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      Double double1 = new Double((-2973.6498));
      boolean boolean1 = new Boolean(true);
      Double.min((-2627.292285329), Double.NaN);
      linkedList1.add(double0);
      linkedList1.add(double0);
      Double double2 = new Double(1.0);
      linkedList1.add(double2);
      linkedList1.spliterator();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList1);
      assertNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      String string0 = jSONObject0.optString("isvalueOf", "");
      assertEquals(4, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("@DgOC^,#G$]");
      linkedList0.add("e");
      linkedList0.add("e");
      linkedList0.clear();
      linkedList0.pollFirst();
      Short short0 = new Short((short) (-2362));
      Double double0 = new Double((short) (-2362));
      Integer.compare(128, 128);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(8);
      Double double1 = new Double(1378.9);
      Double.min(0, (-5538.451713778));
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, double1, biFunction0);
      Integer integer1 = new Integer(1990);
      Integer integer2 = new Integer((-2325));
      Integer.getInteger("nuIl");
      Integer integer3 = new Integer(1990);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.910671437435341
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Uu<S<!61Dp/F", true);
      jSONObject1.put("Uu<S<!61Dp/F", true);
      jSONObject1.optInt("Uu<S<!61Dp/F", 685);
      jSONObject0.optBoolean("Uu<S<!61Dp/F");
      Byte byte0 = new Byte((byte)88);
      JSONObject.testValidity(byte0);
      jSONObject1.toString(65);
      jSONObject1.optString("t1NQ", "!5H1\"FDwwDr{(");
      JSONObject.doubleToString(1.0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("1");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.274695806047217
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      jSONObject0.optBoolean("*iK^c&p4q$\"wIVirG", true);
      Long long1 = Long.getLong("A JSONAmray text must start with '['", long0);
      jSONObject0.optBoolean("A JSONAmray text must start with '['", false);
      jSONObject0.optInt("A JSONAmray text must start with '['");
      jSONObject0.optJSONArray("A JSONAmray text must start with '['");
      Long.sum(0L, 0L);
      JSONObject jSONObject1 = jSONObject0.put("A JSONAmray text must start with '['", (double) 2616L);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "A JSONAmray text must start with '['");
      jSONObject1.write(stringWriter0);
      jSONObject1.optDouble("A JSONAmray text must start with '['");
      jSONObject0.optLong("*iK^c&p4q$\"wIVirG");
      JSONObject jSONObject2 = jSONObject1.put("A JSONAmray text must start with '['", 2065.165);
      jSONObject2.optBoolean("' and instead saw '");
      jSONObject2.optBoolean("A JSONAmray text must start with '['");
      JSONObject jSONObject3 = jSONObject0.putOpt("true", long1);
      Long.toUnsignedString(0L);
      jSONObject3.optBoolean("A JSONAmray text must start with '['", false);
      jSONObject3.isNull("A JSONAmray text must start with '['");
      jSONObject3.optBoolean("true");
      JSONTokener jSONTokener0 = new JSONTokener("A JSONAmray text must start with '['");
      jSONTokener0.skipTo('Q');
      jSONTokener0.nextTo('f');
      JSONObject.quote("null");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 36 of A JSONAmray text must start with '['
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.647776485143915
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "{FtBTT|:5Fnq=_\\]XA%";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{FtBTT|:5Fnq=_]XA%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {FtBTT|:5Fnq=_]XA%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(898);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      Integer.toUnsignedLong(898);
      Float.max((float) integerArray0[0], 898);
      Float.min((-3278.12F), 1416.7789F);
      Float.min((-3278.12F), 2294.1594F);
      Float.isFinite((-3278.12F));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(4, 120);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7680904259148624
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-356.77794245234304));
      Float float0 = new Float((-356.77794245234304));
      JSONObject jSONObject1 = jSONObject0.put("false", (-280L));
      jSONObject1.get("false");
      String string0 = "QNlTxnX#r$P<y{G";
      jSONObject0.optString("QNlTxnX#r$P<y{G");
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.optInt("QNlTxnX#r$P<y{G");
      jSONObject1.optDouble("false");
      boolean boolean1 = false;
      Boolean.logicalOr(false, true);
      jSONObject0.optLong("QNlTxnX#r$P<y{G", (-1L));
      JSONObject jSONObject2 = jSONObject1.accumulate("", "");
      try { 
        jSONObject2.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8387447197851574
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("8&P|$*ll).`/ufli", "8&P|$*ll).`/ufli");
      Float float0 = new Float(0.0F);
      Long long0 = new Long((-2510L));
      jSONObject0.optDouble("8&P|$*ll).`/ufli", (double) (-2510L));
      Long.sum(4148L, 0L);
      Long.getLong("8&P|$*ll).`/ufli");
      jSONObject1.accumulate("8&P|$*ll).`/ufli", long0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Float.sum(711.0F, 711.0F);
      JSONObject jSONObject3 = jSONObject0.put("9;|3wxR7nnF&e^J.", (-2510L));
      Long long1 = new Long((-406L));
      JSONObject jSONObject4 = jSONObject1.put("8&P|$*ll).`/ufli", (-4251.363));
      Long long2 = new Long((-406L));
      jSONObject3.put("qZR~V0y", (double) (-2510L));
      JSONObject jSONObject5 = jSONObject4.putOpt("owgeYVQQys5h`3/KW9X", "8&P|$*ll).`/ufli");
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Collection<Boolean> collection0 = hashMap0.values();
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(jSONObject5, boolean0);
      JSONObject jSONObject6 = jSONObject5.put("8&P|$*ll).`/ufli", (Map) hashMap0);
      jSONObject4.put("isclear", collection0);
      jSONObject6.optInt("6>s#");
      try { 
        jSONObject6.getBoolean("9;|3wxR7nnF&e^J.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9;|3wxR7nnF&e^J.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9913793307071828
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optLong("A JSONArray text must start with '['");
      jSONObject0.optInt("false");
      jSONObject0.optJSONArray("false");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (long) 0);
      Long.sum(0L, 1L);
      JSONObject jSONObject2 = jSONObject1.put("false", (double) 0L);
      Float.min(0L, 0L);
      Float.min(0L, 2294.1594F);
      Float.isFinite(0L);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject0.toString(120, (-3164));
      JSONObject.numberToString(long1);
      JSONObject jSONObject4 = jSONObject2.put("false", (long) (-3164));
      assertEquals(2, jSONObject4.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5599464664022418
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float(1872.0257379874);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Boolean boolean0 = Boolean.valueOf("x$a");
      JSONObject jSONObject1 = jSONObject0.accumulate("9j{dtUQ-gMm-P", boolean0);
      jSONObject1.optLong("LzJpK");
      jSONObject0.optBoolean("9j{dtUQ-gMm-P");
      jSONObject1.put("9j{dtUQ-gMm-P", (Object) "LzJpK");
      JSONArray jSONArray0 = new JSONArray();
      Double.min(0.0, 0.0);
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject0.get("x$a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x$a\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.265569658716327
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optJSONArray("flse");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 2616L);
      Long.sum(0L, 0L);
      JSONObject jSONObject2 = jSONObject1.put("flse", (double) 2616L);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.write(stringWriter0);
      jSONObject1.optLong("flse");
      jSONObject2.put("A JSONArray text must start with '['", 2065.165);
      JSONObject jSONObject3 = jSONObject0.putOpt("true", long1);
      jSONObject3.getString("true");
      jSONObject3.isNull("A JSONArray text must start with '['");
      jSONObject3.optBoolean("true");
      jSONObject1.getDouble("A JSONArray text must start with '['");
      Long.compare(0L, 1240L);
      jSONObject1.optJSONObject("/&+yZ`JB!Nnz+");
      JSONObject jSONObject4 = jSONObject3.put("/&+yZ`JB!Nnz+", 62);
      assertSame(jSONObject4, jSONObject3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.150152798917509
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Set<Map.Entry<Integer, Double>> set0 = (Set<Map.Entry<Integer, Double>>)hashMap0.entrySet();
      JSONObject.valueToString(set0);
      Long.toUnsignedString(72L);
      Long.divideUnsigned((-1354L), 72L);
      JSONArray jSONArray0 = new JSONArray("[]");
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.getJSONObject("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ",:]}/\\\"[{;=#";
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      String string1 = "6=\\]fs',_Fz";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("6=]fs',_Fz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 6=]fs',_Fz
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8615338252371685
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "de";
      Boolean boolean0 = new Boolean("de");
      Boolean.compare(false, false);
      Boolean.logicalXor(false, false);
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject0 = new JSONObject((Object) "de");
      jSONObject0.optLong("", 0L);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("de", object0);
      JSONObject.valueToString(jSONObject0, (-809), (-809));
      jSONObject0.getString("de");
      String string1 = "IU";
      try { 
        jSONObject0.getBoolean("IU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"IU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5021142749799516
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.divideUnsigned(0L, 264L);
      Long.divideUnsigned(264L, (-1L));
      Long.getLong("A JSONArr text mus start with '['", long0);
      Long.min((-1L), 1L);
      Long.divideUnsigned((-2046L), 1644L);
      Long.getLong("getfloatToIntBits");
      Long.sum(197L, 0L);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) null, (Integer) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A JSONArr text mus start with '['";
      stringArray0[1] = "getfloatToIntBits";
      stringArray0[2] = "getfloatToIntBits";
      stringArray0[4] = "VqC";
      JSONObject.doubleToString(11220647246781964L);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("VqC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of VqC
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Long.divideUnsigned(2245L, 2245L);
      Long.getLong("?'j>");
      Long.sum((-2803L), 1568L);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(146);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap1.put(integer0, integer0);
      Float.isFinite((-2803L));
      Float.isFinite(0.0F);
      Float.min(0.0F, 0.0F);
      Float.isFinite((-263.0F));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.127783764794665
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      String string0 = "ck";
      JSONObject jSONObject1 = jSONObject0.put("ha", true);
      JSONObject.valueToString("ck");
      JSONObject.valueToString("ck");
      jSONObject0.optString("\"java.lang.String@0000000006\"", "\"java.lang.String@0000000006\"");
      jSONObject0.optInt("\"java.lang.String@0000000006\"");
      String[] stringArray1 = JSONObject.getNames((Object) "ck");
      JSONObject jSONObject2 = new JSONObject("ck", stringArray1);
      jSONObject1.remove("gethashCode");
      Float float0 = new Float((double) 0);
      JSONObject jSONObject3 = jSONObject0.putOpt("\"java.lang.String@0000000006\"", float0);
      JSONObject jSONObject4 = new JSONObject(jSONObject1, stringArray0);
      jSONObject4.put("\"java.lang.String@0000000006\"", (long) 0);
      jSONObject4.isNull("vzF2A/<R9");
      jSONObject0.has("\"java.lang.String@0000000006\"");
      try { 
        jSONObject3.getBoolean("%U@LOMQxv/h`*EpCmzk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%U@LOMQxv/h`*EpCmzk\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7810872222854446
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("bBc7", (Collection) linkedList0);
      String string0 = "getwait";
      linkedList0.add("getwait");
      Float float0 = new Float(0.0F);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject2.toJSONArray(jSONArray0);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(557.983);
      doubleArray0[1] = double0;
      Double double1 = new Double(0.0);
      Double.isFinite(0.0);
      JSONObject jSONObject3 = jSONObject1.put("1<", 2563);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      jSONObject3.put("getwait", (Map) hashMap0);
      doubleArray0[1] = double1;
      Double double2 = new Double(383.6295397020715);
      Double double3 = new Double((double) doubleArray0[1]);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('-');
      stringWriter1.flush();
      stringWriter1.append('b');
      stringWriter0.append('4');
      // Undeclared exception!
      jSONObject3.toString(2577);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0822324442130618
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-356.77794245234304));
      Float float0 = new Float((-356.77794245234304));
      JSONObject jSONObject1 = jSONObject0.put("false", (-280L));
      jSONObject1.get("false");
      jSONObject0.optString("QNlTxnX#r$P<y{G");
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.optInt("QNlTxnX#r$P<y{G");
      Boolean.logicalOr(false, true);
      jSONObject0.optLong("QNlTxnX#r$P<y{G", (-1L));
      JSONObject jSONObject2 = jSONObject1.accumulate("whee.jsoa5JSONObject", "");
      jSONObject2.optLong("whee.jsoa5JSONObject");
      jSONObject2.optBoolean("whee.jsoa5JSONObject");
      Long long0 = new Long(0L);
      jSONObject0.optDouble("QNlTxnX#r$P<y{G");
      Boolean boolean1 = new Boolean(true);
      jSONObject2.getDouble("false");
      Boolean boolean2 = new Boolean("");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("", "7Sx`'0");
      jSONObject2.put("}v1rG", true);
      try { 
        jSONObject2.getLong("whee.jsoa5JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"whee.jsoa5JSONObject\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.683859228591611
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "getw7ISOArray";
      jSONObject0.optJSONArray("getw7ISOArray");
      JSONObject jSONObject1 = jSONObject0.put("getw7ISOArray", (-3722L));
      jSONObject1.getInt("getw7ISOArray");
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '0';
      StringWriter stringWriter1 = stringWriter0.append('0');
      int int0 = 1053;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "getw7ISOArray", 1053, 1053);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.309503685139791
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("h8ga", true);
      JSONObject.valueToString("ck");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject0.accumulate("\"java.lang.String@0000000006\"", integer0);
      JSONObject.valueToString("ck");
      JSONObject.valueToString(jSONObject0, 0, 0);
      jSONObject2.getInt("\"java.lang.String@0000000006\"");
      jSONObject0.length();
      jSONObject2.optString("U", "\"java.lang.String@0000000006\"");
      jSONObject2.toString(0, (-2895));
      jSONObject1.optInt("\"java.lang.String@0000000006\"");
      Integer.divideUnsigned(97, (-1229));
      Integer.compare(3, 3298);
      jSONObject1.optLong("{SWy)[<(T:5", 0L);
      jSONObject0.getString("\"java.lang.String@0000000006\"");
      jSONObject0.optBoolean("5(#^']7cE,E/N'&");
      JSONObject jSONObject3 = jSONObject2.put("{\n\"java.lang.String@0000000007\": java.lang.Integer@0000000008,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}", (Map) null);
      jSONObject0.getString("{\n\"java.lang.String@0000000007\": java.lang.Integer@0000000008,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      jSONObject2.optDouble("\"java.lang.String@0000000006\"");
      jSONObject2.has("000");
      try { 
        jSONObject3.getDouble("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.538891850540316
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      float float1 = new Float((-1.0F));
      Integer integer0 = new Integer(31);
      jSONObject1.putOpt("9;|3wR7nnF&e^J.", integer0);
      jSONObject1.optInt("9;|3wR7nnF&e^J.");
      jSONObject0.optJSONArray("J,:]}/\"[{;=#");
      String string0 = "to";
      jSONObject1.optInt("to");
      Long long0 = new Long((-480L));
      jSONObject0.optDouble("9;|3wR7nnF&e^J.", (double) (-1.0F));
      JSONObject.numberToString(integer0);
      jSONObject1.opt(",\n");
      try { 
        jSONObject1.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.388893747114006
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optInt("flse");
      jSONObject0.optJSONArray("flse");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 2616L);
      Long.sum(0L, 0L);
      JSONObject jSONObject2 = jSONObject1.put("flse", (double) 2616L);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.write(stringWriter0);
      jSONObject1.optLong("flse");
      JSONObject jSONObject3 = jSONObject2.put("A JSONArray text must start with '['", 2065.165);
      jSONObject3.put("A JSONArray text must start with '['", 0);
      JSONObject jSONObject4 = jSONObject0.putOpt("true", long1);
      jSONObject4.getString("true");
      jSONObject4.isNull("A JSONArray text must start with '['");
      jSONObject4.optBoolean("true");
      jSONObject1.getDouble("A JSONArray text must start with '['");
      JSONObject.valueToString("true", 0, 0);
      JSONObject jSONObject5 = jSONObject1.optJSONObject("/&+yZ`JB!Nnz+");
      assertNull(jSONObject5);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.020282896574828
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = " not found.";
      jSONObject0.putOpt(" not found.", " not found.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(898);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      JSONObject jSONObject1 = jSONObject0.putOpt("[", integer3);
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((-530));
      integerArray0[5] = integerArray0[2];
      Integer integer6 = new Integer((int) integerArray0[2]);
      integerArray0[6] = integer6;
      linkedList0.toArray(integerArray0);
      linkedList0.clone();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      Integer integer7 = new Integer((-3839));
      int int0 = (-812);
      try { 
        jSONObject1.put((String) null, (Object) integer2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9103784559432646
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("java.lang.Long@0000000005.", (Object) null);
      String string0 = " SONArray text must start wit '['";
      jSONObject0.optJSONArray(" SONArray text must start wit '['");
      JSONObject.quote(" SONArray text must start wit '['");
      String string1 = null;
      int int0 = 62;
      try { 
        jSONObject0.put((String) null, 62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9214405419782552
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(1639L);
      String string0 = "8";
      Long long1 = new Long(1639L);
      Long.parseUnsignedLong("8");
      Long.getLong("8", long1);
      Object object0 = JSONObject.NULL;
      hashMap0.put(long0, object0);
      String string1 = "d";
      JSONObject jSONObject1 = jSONObject0.accumulate("d", (Object) null);
      try { 
        jSONObject1.getLong("AU84dM6r;P01l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"AU84dM6r;P01l\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4400951351245586
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not foud.", "] not foud.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("bBc7", (Collection) linkedList0);
      linkedList0.add("getwait");
      jSONObject2.accumulate("bBc7", "getwait");
      Float float0 = new Float((-7.3814783F));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject2.toJSONArray(jSONArray0);
      Double double0 = new Double(557.983);
      StringWriter stringWriter0 = new StringWriter(801);
      StringWriter stringWriter1 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(801);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0, 47, 47);
      charBuffer0.limit(63);
      stringWriter2.append(']');
      stringWriter2.append((CharSequence) "bBc7");
      stringWriter0.close();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = stringWriter2.append('P');
      StringWriter stringWriter5 = new StringWriter('P');
      stringWriter4.append('Z');
      StringWriter stringWriter6 = stringWriter2.append((CharSequence) charBuffer0);
      StringWriter stringWriter7 = new StringWriter(801);
      stringWriter0.append('P');
      stringWriter0.append((CharSequence) "] not foud.");
      stringWriter0.append((CharSequence) "] not foud.");
      // Undeclared exception!
      try { 
        stringWriter6.append((CharSequence) charBuffer0, 16, 2986);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}.6y3_Z1j[U-'");
      String string0 = "na";
      try { 
        Byte.decode("na");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"na\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.155863215813345
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONAmray text must start with '['";
      long long0 = (-22L);
      Long long1 = new Long((-22L));
      jSONObject0.optBoolean("*iK^c&p4q$\"wIVirG", true);
      Long.getLong("A JSONAmray text must start with '['", long1);
      jSONObject0.optBoolean("A JSONAmray text must start with '['", false);
      String string1 = "flse";
      jSONObject0.optInt("flse");
      jSONObject0.optJSONArray("flse");
      long long2 = 2616L;
      long long3 = 0L;
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.294458537587357
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "jhmvvAO";
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double double1 = new Double(0.0);
      jSONObject0.append("jhmvvAO", double0);
      int int0 = 0;
      jSONObject1.optInt("jhmvvAO", 0);
      Collection<Integer> collection0 = null;
      LinkedList<Integer> linkedList0 = null;
      try {
        linkedList0 = new LinkedList<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(898);
      Integer integer1 = new Integer(1740);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.spliterator();
      String string0 = JSONObject.valueToString(jSONObject0, 878, 878);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7980021635821197
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("e");
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      Byte byte0 = new Byte((byte)40);
      linkedList1.add(byte0);
      linkedList0.containsAll(linkedList1);
      linkedList0.add("islowestOneBit");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short short0 = new Short((short) (-2362));
      Double double0 = new Double((short) (-2362));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8h2GFUqc";
      stringArray0[1] = "islowestOneBit";
      stringArray0[2] = "islowestOneBit";
      stringArray0[3] = "e";
      stringArray0[4] = "islowestOneBit";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optString("e", "vlh2Y}(kksQ7Rf");
      JSONObject jSONObject1 = jSONObject0.accumulate("[w)o5A26$e>w4;0mi", jSONArray0);
      jSONObject0.put("e", false);
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1098171340858656
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text ut start with '['";
      jSONObject0.optLong("s", 0L);
      jSONObject0.put("A JSONArray text ut start with '['", 431L);
      try { 
        jSONObject0.getJSONArray("A JSONArray text ut start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text ut start with '['\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5302341587288435
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(7L);
      Long.compare(7L, 7L);
      Long.getLong("A JSONArraytext ust strt with '['", long0);
      jSONObject0.optInt("fay");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONArraytext ust strt with '['", "A JSONArraytext ust strt with '['");
      Byte byte0 = new Byte((byte)118);
      JSONObject.valueToString(integer0, 0, 0);
      try { 
        jSONObject1.getInt("A JSONArraytext ust strt with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArraytext ust strt with '['\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0606491250694643
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 431L);
      jSONObject1.optDouble("A JSONArray text must start with '['", (double) 431L);
      try { 
        jSONObject0.getJSONArray("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0988143098447356
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("8&P|$*ll).`/ufli", "8&P|$*ll).`/ufli");
      Float float0 = new Float(0.0F);
      Long long0 = new Long((-2510L));
      String string0 = "to";
      jSONObject0.optInt("8&P|$*ll).`/ufli");
      Long long1 = new Long((-2510L));
      try { 
        Double.valueOf("8&P|$*ll).`/ufli");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1589797558494803
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-356.77794245234304));
      Float float0 = new Float((-356.77794245234304));
      JSONObject jSONObject1 = jSONObject0.put("false", (-280L));
      jSONObject1.get("false");
      jSONObject0.optString("QNlTxnX#r$P<y{G");
      Boolean boolean0 = Boolean.TRUE;
      boolean boolean1 = true;
      jSONObject1.optInt("QNlTxnX#r$P<y{G");
      Boolean.logicalOr(true, true);
      jSONObject0.optLong("QNlTxnX#r$P<y{G", (-1L));
      JSONObject jSONObject2 = jSONObject1.accumulate("false", "");
      jSONObject2.optBoolean("false");
      Long long0 = new Long(0);
      jSONObject0.optDouble("QNlTxnX#r$P<y{G");
      jSONObject2.putOpt("false", "getputOpt");
      jSONObject2.isNull((String) null);
      Boolean boolean2 = new Boolean(true);
      try { 
        jSONObject2.getDouble("num");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"num\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1554742129702866
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "[Oi`KGkQnG*C";
      jSONObject0.putOpt("[Oi`KGkQnG*C", "[Oi`KGkQnG*C");
      jSONObject0.optLong("yuaZHDZ|", 1L);
      try { 
        jSONObject0.getJSONObject("[Oi`KGkQnG*C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[Oi`KGkQnG*C\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.965996741983509
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "8&P|$*ll).`/ufli";
      JSONObject jSONObject1 = jSONObject0.putOpt("8&P|$*ll).`/ufli", "8&P|$*ll).`/ufli");
      Float float0 = new Float(0.0F);
      long long0 = 6L;
      Long long1 = Long.getLong("8&P|$*ll).`/ufli", 6L);
      JSONObject jSONObject2 = jSONObject1.accumulate("8&P|$*ll).`/ufli", long1);
      try { 
        jSONObject2.getDouble("8&P|$*ll).`/ufli");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8&P|$*ll).`/ufli\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7048738126830227
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "getw7ISOArray";
      jSONObject0.optJSONArray("getw7ISOArray");
      String string1 = "0";
      jSONObject0.putOpt("getw7ISOArray", "0");
      jSONObject0.put("getw7ISOArray", (-3722L));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('0');
      int int0 = 1053;
      StringWriter stringWriter2 = stringWriter0.append('0');
      jSONObject0.accumulate("getw7ISOArray", stringWriter1);
      StringWriter stringWriter3 = stringWriter2.append('C');
      stringWriter3.append((CharSequence) "getw7ISOArray");
      stringWriter0.flush();
      stringWriter3.append('0');
      StringWriter stringWriter4 = new StringWriter();
      stringWriter4.append('}');
      int int1 = (-2186);
      StringWriter stringWriter5 = null;
      try {
        stringWriter5 = new StringWriter((-2186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1432894163240785
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-356.77794245234304));
      Float float0 = new Float((-356.77794245234304));
      JSONObject jSONObject1 = jSONObject0.put("false", (-280L));
      jSONObject1.get("false");
      jSONObject0.optString("QNlTxnX#r$P<y{G");
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.optInt("QNlTxnX#r$P<y{G");
      double double1 = new Long(0);
      boolean boolean1 = false;
      Boolean.logicalOr(false, true);
      jSONObject0.optLong("QNlTxnX#r$P<y{G", (-1L));
      JSONObject jSONObject2 = jSONObject1.accumulate("", "");
      boolean boolean2 = new Boolean("QNlTxnX#r$P<y{G");
      jSONObject2.optLong("");
      jSONObject2.optBoolean("");
      Long long0 = new Long(0L);
      jSONObject0.optDouble("QNlTxnX#r$P<y{G");
      jSONObject2.isNull((String) null);
      Boolean boolean3 = new Boolean(true);
      String string0 = "getdoubleToString";
      try { 
        jSONObject1.getString("QNlTxnX#r$P<y{G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QNlTxnX#r$P<y{G\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1852693961766474
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "miTa~(<2";
      jSONObject0.putOpt("miTa~(<2", "miTa~(<2");
      jSONObject0.accumulate("miTa~(<2", "miTa~(<2");
      jSONObject0.put("miTa~(<2", 2820.0718771393);
      try { 
        jSONObject0.getJSONObject("miTa~(<2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"miTa~(<2\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.877544877460118
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optInt("flse");
      jSONObject0.optJSONArray("flse");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 2616L);
      JSONObject jSONObject2 = jSONObject1.put("flse", (double) 2616L);
      long long1 = jSONObject1.optLong("flse");
      JSONObject jSONObject3 = jSONObject2.put("A JSONArray text must start with '['", 2065.165);
      jSONObject3.isNull("A JSONArray text must start with '['");
      jSONObject3.optBoolean("true");
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      jSONObject3.get("flse");
      jSONObject0.put("flse", (double) 0);
      long long2 = jSONObject1.getLong("flse");
      assertFalse(long2 == long1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.227322722370718
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Float float1 = new Float(0.0F);
      jSONObject1.optInt("9;|3wxR7nnF&e^J.");
      String string0 = "to";
      jSONObject1.optInt("to");
      jSONObject0.optDouble("9;|3wxR7nnF&e^J.", (double) 0.0F);
      String string1 = ",\n";
      jSONObject1.opt(",\n");
      try { 
        jSONObject1.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.753965716419247
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "[Oi`KGkQnG*C";
      String string1 = null;
      jSONObject0.optInt((String) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("[Oi`KGkQnG*C", "[Oi`KGkQnG*C");
      try { 
        jSONObject1.put((String) null, (long) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.035134335681233
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      boolean boolean0 = false;
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optInt("false");
      jSONObject0.optJSONArray("false");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (long) 0);
      Long.sum(0L, 1L);
      jSONObject1.put("false", (double) 0L);
      jSONObject1.optLong(" of ");
      JSONObject jSONObject2 = jSONObject0.putOpt("true", long1);
      jSONObject2.isNull("A JSONArray text must start with '['");
      jSONObject2.optBoolean("true");
      try { 
        jSONObject1.getDouble(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.523055671295537
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "jhmvvAO";
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      double double1 = new Double(1.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString("jhmvvAO");
      jSONObject1.optInt("\"java.lang.String@0000000009\"");
      Long long0 = new Long(0);
      jSONObject2.optDouble("\"java.lang.String@0000000009\"", 1.0);
      jSONObject1.opt("jhmvvAO");
      try { 
        jSONObject1.getDouble("isdoubleToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdoubleToString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7483298833838874
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      long long0 = (-28L);
      Long long1 = new Long((-28L));
      Long long2 = Long.getLong("A JSONArray text must start with '['", long1);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optInt("false");
      jSONObject0.optJSONArray("false");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 2616L);
      Long.sum((-28L), (-11L));
      JSONObject jSONObject2 = jSONObject1.put("false", (double) 2616L);
      jSONObject1.optLong(" of ");
      jSONObject2.put("A JSONArray text must start with '['", 2065.165);
      String string1 = "true";
      JSONObject jSONObject3 = jSONObject0.putOpt("true", long2);
      try { 
        jSONObject3.put((String) null, 2700.87353);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3~*nN.)qM)Nl%";
      stringArray0[1] = "\f";
      stringArray0[2] = "OZR";
      stringArray0[3] = "sh";
      stringArray0[4] = "l6z0uk26Ljq~sb";
      stringArray0[5] = "RU*K";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("\f", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9105371323052527
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      Long.compareUnsigned(0L, 0L);
      Long.max(2751L, (-1L));
      Long.compare(0L, (-1L));
      Long long2 = Long.getLong("java.lang.Long@0000000005.", long1);
      Long.divideUnsigned(1, (-1L));
      Boolean boolean0 = new Boolean(false);
      String string0 = "false";
      jSONObject0.optInt("false");
      JSONObject jSONObject1 = jSONObject0.put("false", (-1L));
      Long.sum(0, 1);
      JSONObject jSONObject2 = jSONObject1.put("getmin", (double) 2751L);
      Float.min(2751L, 0.0F);
      Float.min((-3072.2F), 911.6082F);
      jSONObject2.putOpt("false", long2);
      Float.isFinite(0.0F);
      String string1 = jSONObject2.toString(0, 543);
      JSONTokener jSONTokener0 = new JSONTokener(string1);
      JSONObject jSONObject3 = new JSONObject(jSONTokener0);
      try { 
        jSONObject3.getBoolean("!X8{`JY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!X8{`JY\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1219223746517097
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = new Double(1270.1890564801);
      Float float0 = new Float(1872.0257379874);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(10);
      Integer integer2 = Integer.valueOf(10);
      Integer.max((-1664), 23);
      Integer integer3 = hashMap0.put(integer1, integer2);
      Long long0 = new Long(2209L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "VqC";
      String string0 = "{}";
      stringArray0[1] = "{}";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optJSONObject("isdoubleToRawLongBits");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('*');
      Integer.getInteger((String) null, (Integer) null);
      hashMap0.put(integer3, (Integer) null);
      JSONObject.valueToString(hashMap0, 23, 61);
      int int0 = (-161);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringArray0[2], (-161), 39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9510804173212684
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("8&P|$*ll).`/ufli", "8&P|$*ll).`/ufli");
      Float float0 = new Float(0.0F);
      Long long0 = new Long((-2510L));
      double double0 = jSONObject0.optDouble("8&P|$*ll).`/ufli", (double) (-2510L));
      assertEquals((-2510.0), double0, 0.01);
      
      Long.getLong("8&P|$*ll).`/ufli");
      JSONObject jSONObject2 = jSONObject1.accumulate("8&P|$*ll).`/ufli", long0);
      double double1 = jSONObject2.optDouble((String) null);
      assertEquals(Double.NaN, double1, 0.01);
      
      Float float1 = new Float((float) (-2510L));
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      assertEquals(1, jSONObject3.length());
      
      Float.sum(711.0F, 711.0F);
      JSONObject jSONObject4 = jSONObject0.put("9;|3wxR7nnF&e^J.", (-2510L));
      Long.sum((-2510L), (-406L));
      JSONObject jSONObject5 = jSONObject1.put("8&P|$*ll).`/ufli", (-4251.363));
      Long long1 = new Long((-406L));
      JSONObject jSONObject6 = jSONObject4.put("qZR~V0y", (double) (-2510L));
      jSONObject5.putOpt("owgeYVQQys5h`3/KW9X", "8&P|$*ll).`/ufli");
      boolean boolean0 = jSONObject5.isNull("8&P|$*ll).`/ufli");
      boolean boolean1 = jSONObject6.optBoolean("qZR~V0y");
      assertTrue(boolean1 == boolean0);
      
      jSONObject2.getDouble("9;|3wxR7nnF&e^J.");
      jSONObject0.put(" at character ", false);
      long long2 = jSONObject2.getLong("qZR~V0y");
      assertEquals((-2510L), long2);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5329257034517254
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-356.7779425));
      Float float0 = new Float((-356.7779425));
      JSONObject jSONObject1 = jSONObject0.put("false", (-280L));
      jSONObject1.get("false");
      String string0 = "QNlTxnX#r$P<y{G";
      jSONObject0.optString("QNlTxnX#r$P<y{G");
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.optLong("false");
      boolean boolean1 = true;
      jSONObject1.optInt("QNlTxnX#r$P<y{G");
      try { 
        jSONObject1.getInt("QNlTxnX#r$P<y{G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QNlTxnX#r$P<y{G\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.296047093811609
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Float.sum((-1.0F), (-1.0F));
      jSONObject1.optInt("9;|3wR7nnF&e^J.");
      jSONObject0.optJSONArray("J,:]}/\"[{;=#");
      String string0 = "to";
      jSONObject1.optInt("to");
      Long long0 = new Long((-480L));
      jSONObject0.optDouble("9;|3wR7nnF&e^J.", (double) (-1.0F));
      jSONObject1.opt(",\n");
      try { 
        jSONObject1.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.039080039721084
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      String string1 = "java.lang.Long@0000000005.";
      Long long1 = new Long(0L);
      Long.compareUnsigned(0L, 0L);
      Long.compare(0L, (-1L));
      Long.getLong("java.lang.Long@0000000005.", long1);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optInt("false");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (long) 0);
      Boolean boolean0 = new Boolean(false);
      jSONObject1.append("9", boolean0);
      Long.sum(0L, 1L);
      JSONObject jSONObject2 = jSONObject1.put("false", (double) 0L);
      Float.min(0L, 0L);
      Float.min(0L, 0);
      Float.isFinite(0L);
      jSONObject2.optLong("java.lang.Long@0000000005.", 834L);
      jSONObject0.toString(120, (-3164));
      try { 
        jSONObject2.getBoolean("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = 1270.1890564801;
      Double double1 = new Double(1270.1890564801);
      Float float0 = new Float(1872.0257379874);
      Float.isFinite(1949.44F);
      Float.sum(1949.44F, (-601.794F));
      Boolean.logicalAnd(false, false);
      Double double2 = new Double(1270.1890564801);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7338288188413133
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      boolean boolean0 = false;
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optInt("false");
      jSONObject0.optJSONArray("false");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (long) 0);
      Long.sum(0L, 1L);
      jSONObject1.put("false", (double) 0L);
      String string1 = " of ";
      jSONObject1.optLong(" of ");
      String string2 = "true";
      try { 
        jSONObject0.append("A JSONArray text must start with '['", long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[A JSONArray text must start with '['] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6950287668272506
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("e");
      linkedList0.removeFirstOccurrence("e");
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      Function<Byte, Integer> function0 = (Function<Byte, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Byte, ? extends Integer>) function0);
      linkedList1.replaceAll(unaryOperator0);
      Byte byte0 = new Byte((byte)40);
      Byte.toUnsignedInt((byte)43);
      linkedList1.add(byte0);
      linkedList0.containsAll(linkedList1);
      linkedList0.add("islowestOneBit");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "islowestOneBit";
      stringArray0[1] = "islowestOneBit";
      stringArray0[2] = "f~/-1p*`X_FTthXvj0k";
      stringArray0[3] = "o*a$M[19SU&QIsrp/";
      stringArray0[4] = "islowestOneBit";
      stringArray0[5] = "o*a$M[19SU&QIsrp/";
      stringArray0[6] = "j#K&UcU>Ov#2x~^";
      stringArray0[7] = "o*a$M[19SU&QIsrp/";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.getBoolean("o*a$M[19SU&QIsrp/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o*a$M[19SU&QIsrp/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7070710523309285
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optJSONArray("sh");
      jSONObject0.optLong((String) null);
      jSONObject0.optInt(",\n");
      JSONObject jSONObject1 = jSONObject0.put("TX!gU5; .l$^Rus", 196);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.put("", (Object) null);
      try { 
        jSONObject2.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float float0 = new Float(1872.0257379874);
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.840827283190615
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.max((-1507.4758F), (-1934.1149F));
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = new Boolean("9RoAPJREmd0b*(QE");
      String string0 = jSONObject0.optString("9RoAPJREmd0b*(QE");
      assertEquals(3, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(898);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean(true);
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6189978958658688
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = new Double(1270.1890564801);
      Double.max(1270.1890564801, 1270.1890564801);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = null;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      stringWriter0.append((CharSequence) null);
      int int0 = (-1339);
      int int1 = 70;
      try { 
        jSONObject0.put((String) null, 1482);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Float float0 = new Float(1872.0257379874);
      Float.isFinite(1949.44F);
      Float.isFinite(1949.44F);
      Float.isFinite(0.0F);
      Float.isFinite(1949.44F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0676032882216056
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.replaceAll(unaryOperator0);
      Byte byte0 = new Byte((byte)4);
      Byte byte1 = new Byte((byte)46);
      Byte byte2 = new Byte((byte)35);
      linkedList0.add(byte1);
      Boolean boolean0 = new Boolean("getreverseBytes");
      Short short0 = new Short((byte)4);
      Double.max(0.0, (byte)46);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.poll();
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(unaryOperator1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.351133166034274
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      String string1 = "ispush";
      jSONObject0.optInt("ispush");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, object0);
      jSONObject1.put("toB", (double) 0);
      jSONObject0.put("n#G8}6(+6`1r2aRoNR*", (-1L));
      try { 
        jSONObject1.getJSONArray("ispush");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ispush\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.705305732516834
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(898);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      Integer.toUnsignedLong(898);
      Float.max((float) integerArray0[0], 898);
      Float.min(898L, 1416.7789F);
      Float.min(898.0F, 2294.1594F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("[");
      jSONObject0.optBoolean("[");
      try { 
        jSONObject0.get("[LF(/~W|og@'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[LF(/~W|og@'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = new Boolean("@DgOC^,#G$]");
      linkedList0.add("e");
      linkedList0.add("e");
      linkedList0.pollFirst();
      linkedList0.clear();
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.replaceAll(unaryOperator0);
      Byte byte0 = new Byte((byte)4);
      Byte byte1 = new Byte((byte)4);
      Byte.toUnsignedLong((byte)4);
      linkedList1.add(byte1);
      linkedList0.containsAll(linkedList1);
      linkedList0.add("e");
      Short short0 = new Short((short) (-2362));
      Double double0 = new Double((byte)4);
      Double.max(0.0, (short) (-2362));
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.poll();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "e";
      stringArray0[1] = "e";
      stringArray0[2] = "o*a$M[19SU&QIsrp/";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3pD8;\"X+?1W7";
      stringArray0[1] = "1";
      stringArray0[2] = "ishashCode";
      stringArray0[3] = "A JSONObject text must end with '}'";
      stringArray0[4] = "] is not a JSONObject.";
      stringArray0[5] = "P`yA_X|BOSB*";
      stringArray0[6] = "isparseDouble";
      stringArray0[7] = "NuB)tZ";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("NuB)tZ", 0.0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float.sum((-313.0F), 1049.0F);
      String string0 = "";
      String string1 = "";
      jSONObject0.optInt("", (-467));
      Collection<Integer> collection0 = null;
      LinkedList<Integer> linkedList0 = null;
      try {
        linkedList0 = new LinkedList<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.128012696744866
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-356.77794245234304));
      Float float0 = new Float((-356.77794245234304));
      JSONObject jSONObject1 = jSONObject0.put("false", (-280L));
      jSONObject1.get("false");
      String string0 = "QNlTxnX#r$P<y{G";
      jSONObject0.optString("QNlTxnX#r$P<y{G");
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.optInt("QNlTxnX#r$P<y{G");
      boolean boolean1 = false;
      Boolean.logicalOr(false, true);
      jSONObject0.optLong("QNlTxnX#r$P<y{G", (-1L));
      JSONObject jSONObject2 = jSONObject1.accumulate("whee.jsoa5JSONObject", "");
      jSONObject2.optLong("whee.jsoa5JSONObject");
      jSONObject2.optBoolean("whee.jsoa5JSONObject");
      Long long0 = new Long(0L);
      jSONObject0.optDouble("QNlTxnX#r$P<y{G");
      jSONObject2.isNull((String) null);
      Boolean boolean2 = new Boolean(true);
      try { 
        jSONObject2.getDouble("num");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"num\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Byte.valueOf((byte)78);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("Unterminated string", (Object) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "miTa~(<2";
      try { 
        jSONObject0.getJSONObject("miTa~(<2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"miTa~(<2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float(1872.0257379874);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("o*");
      linkedList0.add("o*");
      linkedList0.add("o*");
      linkedList0.clear();
      linkedList0.pollFirst();
      Boolean boolean0 = new Boolean(true);
      Double double0 = new Double(0.0);
      Double.max(931.655011453774, 380.554877);
      Double.max(1872.0257379874, 0.0);
      Double.max(1872.0257379874, 0.0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double(931.655011453774);
      boolean boolean1 = new Boolean(true);
      linkedList1.add(double1);
      Double double2 = new Double(0.0);
      boolean boolean2 = new Boolean(true);
      linkedList1.add(double2);
      linkedList1.spliterator();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float(1872.0257379874);
      Float.isFinite(1950.0636F);
      Double double0 = new Double(1950.0636F);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(44);
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      Integer integer1 = new Integer(15);
      Integer integer2 = new Integer(44);
      Integer integer3 = new Integer(87);
      Double double1 = new Double(6.362038876264391);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Short short0 = new Short((short)45);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Dg,|(`eC7~A";
      stringArray0[1] = "Dg,|(`eC7~A";
      stringArray0[2] = "Dg,|(`eC7~A";
      stringArray0[3] = "Dg,|(`eC7~A";
      stringArray0[4] = "Dg,|(`eC7~A";
      stringArray0[5] = "Dg,|(`eC7~A";
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject1.get("Dg,|(`eC7~A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Dg,|(`eC7~A\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.0606491250694643
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text mut start with '['";
      jSONObject0.optJSONArray("A JSONArray text mut start with '['");
      jSONObject0.optDouble("vk@',)$h_'Kd", (double) 431L);
      jSONObject0.put("A JSONArray text mut start with '['", 431L);
      try { 
        jSONObject0.getJSONArray("A JSONArray text mut start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text mut start with '['\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.545202527023502
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optDouble("false");
      try { 
        jSONObject0.getLong("ewO*9saw^f1iQ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ewO*9saw^f1iQ \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.882110387485166
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      JSONObject.valueToString(jSONObject0);
      String string1 = null;
      try { 
        jSONObject0.put((String) null, 62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.549435801175998
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      jSONObject0.optLong(" of ");
      jSONObject0.optInt("{nE>Td'^4cz/0s8S");
      JSONObject jSONObject1 = jSONObject0.put("{nE>Td'^4cz/0s8S", 196);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.put("false", (Object) null);
      String string0 = jSONObject2.optString("-}_%[h");
      assertEquals(1, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double(1.0);
      double double1 = Double.min(0.0, 2332.75249447);
      JSONObject.testValidity(double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.8528935755720175
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.optInt("");
      JSONObject jSONObject2 = jSONObject1.put("has", (-1822));
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.optDouble(0);
      jSONArray0.toJSONObject(jSONArray1);
      jSONObject2.put("has", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.1526736418800336
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      String string0 = "false";
      jSONObject0.optInt("false");
      jSONObject0.optJSONArray("false");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 2616L);
      jSONObject1.remove("\r");
      Long.sum(0L, 1L);
      JSONObject jSONObject2 = jSONObject1.put("false", (double) 2616L);
      jSONObject1.optLong(" of ");
      jSONObject2.put("A JSONArray text must start with '['", 2065.165);
      Long.divideUnsigned(0, 808L);
      JSONObject jSONObject3 = jSONObject0.putOpt("true", long1);
      jSONObject3.isNull("A JSONArray text must start with '['");
      Float float0 = new Float((double) 0);
      jSONObject3.accumulate("A JSONArray text must start with '['", float0);
      jSONObject3.optBoolean("true");
      try { 
        jSONObject1.getDouble(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.368641676411295
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("8&P|$*ll).`/ufli", "8&P|$*ll).`/ufli");
      Float float0 = new Float(0.0F);
      Long long0 = new Long((-2510L));
      jSONObject1.accumulate("8&P|$*ll).`/ufli", long0);
      Float float1 = new Float((float) (-2510L));
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Float.sum(711.0F, 711.0F);
      JSONObject jSONObject3 = jSONObject0.put("9;|3wxR7nnF&e^J.", (-2510L));
      Long.sum((-2510L), (-406L));
      JSONObject jSONObject4 = jSONObject1.put("8&P|$*ll).`/ufli", (-4251.363));
      Long long1 = new Long((-406L));
      jSONObject3.put("qZR~V0y", (double) (-2510L));
      jSONObject4.putOpt("owgeYVQQys5h`3/KW9X", "8&P|$*ll).`/ufli");
      jSONObject0.getString("8&P|$*ll).`/ufli");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer(898);
      Double double0 = new Double(898);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer1 = new Integer(8448);
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      Integer integer2 = new Integer(255);
      hashMap1.keySet();
      Integer integer3 = new Integer(898);
      Integer integer4 = new Integer(128);
      Double double1 = new Double(87);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.getString("Nq!},iT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Nq!},iT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{N}.6yp3_Zs1j[U-'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {N}.6yp3_Zs1j[U-'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.6261976101152196
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "S_mYHrNE[!yDq";
      jSONObject0.optDouble("S_mYHrNE[!yDq");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put("S_mYHrNE[!yDq", (Collection) linkedList0);
      jSONObject0.toString();
      jSONObject0.put("{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}", (Collection) linkedList0);
      jSONObject1.optInt("S_mYHrNE[!yDq", (-4928));
      String string1 = "for";
      Short short0 = new Short((short)0);
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6061920506332319
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(898);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      Integer integer2 = new Integer((int) integerArray0[0]);
      Float.min((float) integerArray0[0], 898);
      Float.isFinite(1499.781F);
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1358.9);
      String string0 = JSONObject.quote(" \",wM{F_+HFfoNg");
      assertEquals("\" \\\",wM{F_+HFfoNg\"", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-356.77794245234304));
      Float float0 = new Float((-356.77794245234304));
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(boolean0);
      Long.toUnsignedString(2891L);
      long long0 = Long.divideUnsigned(1292L, 1292L);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      Long.toUnsignedString(2891L);
      long long0 = Long.divideUnsigned(1292L, 1292L);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(898);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      Integer.toUnsignedLong(898);
      Float.max((float) integerArray0[0], 898);
      Float.min((-3278.12F), 1416.7789F);
      Float.isFinite(1512.201F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(4, 120);
      String string0 = jSONObject0.toString(1591);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.854656785235511
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      Long.compareUnsigned(0L, 0L);
      Long.max(2751L, (-1L));
      Long.compare(0L, (-1L));
      Long long2 = Long.getLong("java.lang.Long@0000000005.", long1);
      Long.divideUnsigned(1, (-1L));
      Boolean boolean0 = new Boolean(false);
      jSONObject0.optInt("false");
      JSONObject jSONObject1 = jSONObject0.put("false", (-1L));
      Long.sum(0, 1);
      JSONObject jSONObject2 = jSONObject1.put("getmin", (double) 2751L);
      Float.min(2751L, 0.0F);
      Float.min((-3072.2F), 911.6082F);
      jSONObject2.putOpt("false", long2);
      Float.isFinite(0.0F);
      jSONObject0.toString();
      JSONObject jSONObject3 = jSONObject2.optJSONObject("wqTKl,`)DNO5?pz1d");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.4914272751797735
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] not foud.";
      JSONObject jSONObject1 = jSONObject0.putOpt("] not foud.", "] not foud.");
      String string1 = "bBc7";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("bBc7", (Collection) linkedList0);
      Long long0 = new Long(0L);
      jSONObject2.append("bBc7", long0);
      linkedList0.add("getwait");
      jSONObject2.accumulate("bBc7", "getwait");
      Float float0 = new Float((-7.3814783F));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) "bBc7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.1098171340858656
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("Unterminated string", 2);
      String string0 = "A JSONArray text ut start with '['";
      jSONObject0.put("A JSONArray text ut start with '['", 431L);
      try { 
        jSONObject0.getJSONArray("A JSONArray text ut start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text ut start with '['\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.306552741647205
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-356.77794245234304));
      Float float0 = new Float((-356.77794245234304));
      JSONObject jSONObject1 = jSONObject0.put("false", (-286L));
      jSONObject0.optLong("false");
      jSONObject0.optString("QNlTxnX#r$P<y{G");
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.optInt("QNlTxnX#r$P<y{G");
      Boolean.logicalOr(false, true);
      jSONObject0.optLong("QNlTxnX#r$P<y{G", (-1L));
      JSONObject jSONObject2 = jSONObject1.accumulate("whee.json.JSONObject", "");
      jSONObject2.optLong("whee.json.JSONObject");
      Boolean.compare(false, false);
      jSONObject2.optBoolean("whee.json.JSONObject");
      Long long0 = new Long(0L);
      jSONObject0.optDouble("QNlTxnX#r$P<y{G");
      jSONObject2.putOpt("false", "getputOpt");
      jSONObject2.isNull((String) null);
      JSONObject.valueToString(boolean0, 0, 0);
      jSONObject0.optBoolean("QNlTxnX#r$P<y{G");
      jSONObject2.optString(")CJ2QwW+5N", "getputOpt");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.put("Unterminated string", (Collection) linkedList0);
      try { 
        jSONObject2.getDouble("num");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"num\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.4947357946173248
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(898);
      integerArray0[0] = integer0;
      Integer.remainderUnsigned((int) integerArray0[0], (int) integerArray0[0]);
      Integer.compareUnsigned((int) integerArray0[0], 44);
      Integer integer1 = new Integer((int) integerArray0[0]);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      hashMap0.clear();
      Integer integer2 = new Integer(210);
      Integer integer3 = new Integer(210);
      Double double0 = new Double(44);
      hashMap0.put(integer3, double0);
      Double double1 = new Double(2376.21598847);
      hashMap0.put(integer2, double1);
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>(210);
      hashMap1.putIfAbsent(integer2, double1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SV~%?h2vb";
      stringArray0[1] = "SV~%?h2vb";
      stringArray0[2] = "o*a$M[19SU&QIsrp/";
      stringArray0[3] = "$F/Y1V=D:/dO`";
      stringArray0[4] = "o*a$M[19SU&QIsrp/";
      stringArray0[5] = "f~/-1p*`X_FTthXv0k";
      JSONObject jSONObject0 = new JSONObject(hashMap1, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put("o*a$M[19SU&QIsrp/", 898);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.946161914882172
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      String string1 = "java.lang.Long@0000000005.";
      Long long0 = new Long(0L);
      Long.compareUnsigned(0L, 0L);
      Long.max(2751L, (-1L));
      Long.compare(0L, (-1L));
      Long.getLong("java.lang.Long@0000000005.", long0);
      Long long1 = new Long((-1L));
      Boolean boolean0 = new Boolean(false);
      String string2 = "false";
      jSONObject0.optInt("false");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (long) 0);
      long long2 = 1L;
      Long.sum(0L, 1L);
      JSONObject jSONObject2 = jSONObject1.put("false", (double) 0L);
      Float.min(0L, 0);
      jSONObject2.putOpt("A JSONArray text must start with '['", long0);
      Boolean boolean1 = new Boolean("A JSONArray text must start with '['");
      jSONObject0.toString(0, (-3164));
      try { 
        jSONObject2.getBoolean("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.3128868859883003
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.divideUnsigned(0L, 264L);
      Long.divideUnsigned(264L, (-1L));
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      Long.min(0L, 1L);
      Long.divideUnsigned((-2046L), 1644L);
      Long.getLong("getfloatToIntBits");
      Long.sum(264L, 0L);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) null, (Integer) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A JSONArray text must start with '['";
      stringArray0[1] = "getfloatToIntBits";
      stringArray0[2] = "getfloatToIntBits";
      stringArray0[3] = "A JSONArray text must start with '['";
      stringArray0[4] = "VqC";
      stringArray0[5] = "VqC";
      JSONObject jSONObject0 = new JSONObject(long1, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("VqC", (Collection) linkedList0);
      jSONObject0.optString("VqC", "A JSONArray text must start with '['");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.7650340500598105
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-356.77794245234304));
      Double.min((-1767.71782784), 0.0);
      String string0 = "false";
      JSONObject jSONObject1 = jSONObject0.put("false", (-298L));
      jSONObject1.get("false");
      String string1 = "QNlTxnX#r$P<y{G";
      jSONObject0.optString("QNlTxnX#r$P<y{G");
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.optInt("QNlTxnX#r$P<y{G");
      Boolean.logicalOr(true, true);
      jSONObject1.length();
      byte byte0 = (byte)46;
      Byte.compare((byte)8, (byte) (-86));
      jSONObject0.optLong("");
      jSONObject0.optBoolean("null");
      String string2 = "'%ed:QqENNQfoK$";
      try { 
        jSONObject0.get("'%ed:QqENNQfoK$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'%ed:QqENNQfoK$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.5245420901524964
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "AR}-D3}J`,;";
      JSONObject.valueToString("AR}-D3}J`,;");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"java.lang.String@0000000004\"", integer0);
      JSONObject.valueToString("AR}-D3}J`,;");
      String string1 = ",\n";
      jSONObject0.optString("\"java.lang.String@0000000004\"", ",\n");
      jSONObject1.getInt("\"java.lang.String@0000000004\"");
      jSONObject0.length();
      jSONObject1.optString(",\n", "\"java.lang.String@0000000004\"");
      try { 
        jSONObject1.getDouble("toJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("e");
      linkedList0.clone();
      linkedList0.add("islowestOneBit");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short short0 = new Short((short) (-2362));
      Double double0 = new Double((short) (-2362));
      Double.max(932.0900070832831, (-2973.6498));
      Double.max(932.0900070832831, (short) (-2362));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      String string0 = JSONObject.quote("V'l:sm/3Lf*] -q");
      assertEquals("\"V'l:sm/3Lf*] -q\"", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.7302101556824834
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-356.77794245234304));
      Float float0 = new Float((-356.77794245234304));
      JSONObject jSONObject1 = jSONObject0.put("false", (-280L));
      jSONObject1.get("false");
      jSONObject0.optString("false");
      jSONObject1.optInt("false");
      boolean boolean0 = false;
      Boolean.logicalOr(false, true);
      jSONObject0.optLong("false", (-1L));
      JSONObject jSONObject2 = new JSONObject((Object) "whee.jsoa5JSONObject");
      jSONObject2.optLong("whee.jsoa5JSONObject");
      boolean boolean1 = new Boolean(true);
      Long long0 = new Long(0L);
      jSONObject0.optDouble("false");
      Boolean boolean2 = new Boolean(true);
      try { 
        jSONObject2.getDouble("num");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"num\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.replaceAll(unaryOperator0);
      Byte byte0 = new Byte((byte) (-12));
      linkedList0.add(byte0);
      Byte byte1 = new Byte((byte)4);
      Byte byte2 = new Byte((byte)4);
      Byte byte3 = new Byte((byte)4);
      linkedList0.add(byte2);
      Double.min(797.001896, (byte)76);
      Double.min((-717.7224120181046), (byte)4);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      linkedList1.add(double0);
      Float.min(0.0F, (byte) (-12));
      Float.min(0.0F, (byte) (-12));
      Float.isFinite((-12.0F));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.6225373421025346
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(15L);
      Long.getLong("A JSONArray text must start with '['", long0);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optInt("false");
      jSONObject0.optJSONArray("false");
      jSONObject0.optBoolean("false", false);
      jSONObject0.optInt("'");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optLong(",7:]}/\"[{;=#");
      JSONObject.valueToString(jSONArray0, 0, 0);
      Double double0 = new Double((-437.701049623));
      JSONObject.valueToString(double0);
      Long long1 = new Long(0);
      Object object0 = jSONObject0.opt("XR k5uzZ2hQ");
      assertNull(object0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.2812162878253246
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(898);
      Integer.compareUnsigned(898, (-1263));
      integerArray0[0] = integer0;
      Integer.remainderUnsigned((int) integerArray0[0], (int) integerArray0[0]);
      Float float0 = new Float((double) 898);
      StringWriter stringWriter0 = new StringWriter(34);
      StringWriter stringWriter1 = stringWriter0.append('8');
      JSONObject jSONObject0 = new JSONObject(stringWriter1);
      JSONObject.valueToString(jSONObject0, 63, 0);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "{\n                                                               \"java.lang.String@0000000004\": \"java.lang.StringBuffer@0000000005\",\n                                                               \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}", 83, 898);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("e");
      linkedList0.add("e");
      linkedList0.clear();
      linkedList0.pollFirst();
      Boolean boolean0 = new Boolean(true);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Float float0 = new Float((-557.279));
      String string0 = JSONObject.quote("/");
      assertEquals("\"/\"", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.quote("X{:1Arp-Ye3A\u000B@)");
      assertEquals("\"X{:1Arp-Ye3A\\u000b@)\"", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.245191585996545
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double double0 = new Double(569.7204955796);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "OFb7";
      stringArray0[1] = "\f";
      stringArray0[2] = "BR5Q9a#!-LIQUKL5Ck";
      stringArray0[3] = "^";
      stringArray0[4] = "' and instead saw '";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject2.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.9229575911759236
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(898);
      integerArray0[0] = integer0;
      Integer.compare((int) integerArray0[0], (int) integerArray0[0]);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Double double0 = new Double(1050.3655910105342);
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integerArray0[0], double0, biFunction0);
      Integer integer1 = new Integer(128);
      Integer integer2 = new Integer(898);
      Integer.getInteger("nuIl");
      Integer integer3 = new Integer(0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\"ay2<I");
      Short short0 = new Short((short) (-2201));
      Short.compare((short)47, (short) (-4061));
      Short.compare((short) (-2201), (short) (-2201));
      linkedList0.offer("A/d");
      linkedList0.removeLastOccurrence(short0);
      linkedList0.add("e");
      linkedList0.add("e");
      linkedList0.clear();
      linkedList0.pollFirst();
      Boolean boolean0 = new Boolean(true);
      Short short1 = new Short((short) (-2362));
      Double double0 = new Double((short) (-2362));
      Double.max(654.9361, (-2973.6498));
      Short short2 = new Short((short) (-2362));
      Double.min(Double.NaN, 0.0);
      Double.max(931.655011453774, (-2973.6498));
      Double.max(931.655011453774, (short) (-2362));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      linkedList1.add(double0);
      Double double1 = new Double(1.0);
      linkedList1.add(double1);
      linkedList1.spliterator();
      JSONObject.getNames((Object) linkedList1);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("@DgOC^,#G$]");
      linkedList0.add("W");
      linkedList0.add("W");
      linkedList0.pollFirst();
      linkedList0.clear();
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.replaceAll(unaryOperator0);
      Byte byte0 = new Byte((byte)4);
      Byte byte1 = new Byte((byte) (-44));
      Byte byte2 = new Byte((byte) (-44));
      linkedList1.add(byte1);
      Boolean boolean0 = new Boolean("@DgOC^,#G$]");
      linkedList0.add("W");
      Double.min(797.001896, (byte)76);
      Double.min((-718.1126383536408), (byte)4);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      linkedList2.add(double0);
      Double double1 = new Double(1019.0);
      Double.min((-718.1126383536408), (-718.1126383536408));
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.0621306065509457
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text mut start with '['";
      jSONObject0.optJSONArray("A JSONArray text mut start with '['");
      long long0 = 431L;
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text mut start with '['", 431L);
      jSONObject1.getInt("A JSONArray text mut start with '['");
      try { 
        jSONObject0.getJSONArray("A JSONArray text mut start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text mut start with '['\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float(1872.0257379874);
      Float.isFinite(1949.44F);
      Float.isFinite(1949.44F);
      Float.isFinite(0.0F);
      Float.isFinite(1949.44F);
      Float.isFinite(0.0F);
      float float1 = new Float((-1022.43F));
      Float.min((-1022.43F), 0.0F);
      Float.min(0.0F, (-1022.43F));
      Float.isFinite(0.0F);
      String string0 = JSONObject.doubleToString((-1022.43F));
      assertEquals("-1022.4299926757812", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.0126200936538066
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ap";
      JSONObject jSONObject1 = jSONObject0.put("ap", 431L);
      Boolean boolean0 = Boolean.valueOf("ap");
      jSONObject1.accumulate("", boolean0);
      try { 
        jSONObject0.getJSONArray("ap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ap\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4140512084176216
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Short.toUnsignedInt((short)2197);
      Float float0 = new Float(0.0);
      Float.isFinite((short)2197);
      Byte byte0 = new Byte((byte)42);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "pu";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.getInt("eqh;qBEww5HEi@aq\"<r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"eqh;qBEww5HEi@aq\\\"<r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.9398012994628564
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("bBc7", (Collection) linkedList0);
      jSONObject2.remove("bBc7");
      assertEquals(1, jSONObject2.length());
      
      linkedList0.add("getwait");
      Float float0 = new Float((-7.3814783F));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer(16);
      Integer.getInteger("tK14&A", 1);
      Double double0 = new Double(1);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer1 = new Integer(115);
      Double double1 = new Double((-1.0));
      hashMap0.put(integer1, double1);
      Integer integer2 = new Integer(1);
      Double double2 = new Double((-1.0));
      hashMap0.putIfAbsent(integer2, double2);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject(integer1);
      assertEquals(1, jSONObject3.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.9302461597379152
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      jSONObject0.optBoolean("*iK^c&p4q$\"wIVirG", true);
      Long long1 = Long.getLong("A JSONAmray text must start with '['", long0);
      jSONObject0.optBoolean("A JSONAmray text must start with '['", false);
      jSONObject0.optInt("flse");
      jSONObject0.optJSONArray("flse");
      Long.sum(0L, 0L);
      JSONObject jSONObject1 = jSONObject0.put("flse", (double) 2616L);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "flse");
      jSONObject0.optLong("flse");
      JSONObject jSONObject2 = jSONObject1.put("A JSONAmray text must start with '['", 2065.165);
      jSONObject2.optBoolean("' and instead saw '");
      jSONObject2.optBoolean("A JSONAmray text must start with '['");
      JSONObject jSONObject3 = jSONObject0.putOpt("true", long1);
      jSONObject3.isNull("A JSONAmray text must start with '['");
      jSONObject3.optBoolean("true");
      JSONTokener jSONTokener0 = new JSONTokener("flse");
      jSONTokener0.skipTo('Q');
      jSONTokener0.nextTo('f');
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of flse
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.9576699287932238
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text ut start with '['";
      jSONObject0.put(":$G)kbg", true);
      jSONObject0.put("A JSONArray text ut start with '['", 431L);
      try { 
        jSONObject0.getJSONArray("A JSONArray text ut start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text ut start with '['\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.545202527023502
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(34);
      Double double0 = new Double(34);
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, double0, biFunction0);
      Integer integer1 = new Integer(1990);
      String string0 = "nuIl";
      Integer integer2 = new Integer(34);
      String string1 = null;
      String string2 = "wheel.json.JSONException";
      jSONObject0.isNull("wheel.json.JSONException");
      Boolean boolean0 = new Boolean(true);
      String string3 = "num";
      try { 
        jSONObject0.getDouble("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.9555995354184823
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 431L);
      jSONObject1.remove("d,B3bx");
      try { 
        jSONObject1.get("(L{^|-wcLbk};A@XE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(L{^|-wcLbk};A@XE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.6239024490962692
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("@DgOC^,#G$]");
      linkedList0.add("e");
      linkedList0.add("e");
      linkedList0.clear();
      linkedList0.pollFirst();
      Boolean boolean0 = new Boolean(true);
      short short0 = (short) (-2362);
      Long long0 = new Long((short) (-2362));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optInt((String) null);
      jSONObject0.optDouble("@DgOC^,#G$]");
      Boolean.logicalOr(true, false);
      String string0 = ",\n";
      jSONObject0.optLong(",\n", (-1L));
      jSONObject0.accumulate("e", (Object) null);
      try { 
        jSONObject0.getBoolean("e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"e\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Long.max(2751L, (-1L));
      Long.remainderUnsigned(2751L, (-1125L));
      Boolean boolean0 = new Boolean(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Expected a ',' or ']'";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "A JSONArray text must start with '['";
      stringArray0[3] = "A JSONArray text must start with '['";
      stringArray0[4] = "KNgMq)P[d \"~GjQ";
      stringArray0[5] = "A JSONArray text must start with '['";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text mut start with '['";
      jSONObject0.optJSONArray("A JSONArray text mut start with '['");
      try { 
        jSONObject0.getJSONArray("A JSONArray text mut start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text mut start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.5952629603288853
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("@DgOC^,#G$]");
      linkedList0.add("W");
      Boolean boolean0 = new Boolean("W");
      linkedList0.pollFirst();
      linkedList0.clear();
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.replaceAll(unaryOperator0);
      Byte byte0 = new Byte((byte)4);
      Double.max(0.0, 271.03743487195);
      Double.min(1089.0, 1089.0);
      Double.max((-1.0), 176.7189898843);
      Double.max(271.03743487195, Double.NaN);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double0 = new Double(176.7189898843);
      linkedList2.add(double0);
      boolean boolean1 = new Boolean(true);
      linkedList2.add((Double) null);
      Double double1 = new Double(176.7189898843);
      linkedList2.add(double1);
      linkedList2.spliterator();
      JSONObject.getNames((Object) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Float float0 = new Float(5149.323F);
      Float.sum(5149.323F, (-1.0F));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("lo");
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("bUj!iq");
      linkedList0.add("getreverseBytes");
      linkedList0.add("getreverseBytes");
      linkedList0.clear();
      linkedList0.pollFirst();
      Boolean boolean0 = new Boolean("bUj!iq");
      Short short0 = new Short((short) (-2362));
      Double double0 = new Double((short) (-2362));
      Double double1 = new Double(654.9361);
      Double.max(931.655011453774, (-2972.681779734793));
      Double.max(931.655011453774, (short) (-2362));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      linkedList1.add(double0);
      linkedList0.add("getreverseBytes");
      Double double2 = new Double(1.0);
      Double.sum(0.0, 0.0);
      Double.sum(32.04053968498322, Double.NaN);
      linkedList1.add(double2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "getreverseBytes";
      stringArray0[3] = "";
      stringArray0[4] = "getreverseBytes";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      String string0 = jSONObject0.toString((-1), (-1));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.039871718747301
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(898);
      integerArray0[0] = integer0;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      hashMap0.clear();
      Integer integer1 = new Integer(426);
      Integer integer2 = new Integer((int) integerArray0[0]);
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>(898);
      Double double0 = new Double(3272.11403);
      hashMap1.putIfAbsent(integer1, double0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "f~/-1p*`X_FTthXv0k";
      stringArray0[1] = "SV~%?h2vb";
      stringArray0[2] = "$F/Y1V=D:/dO`";
      stringArray0[4] = "$F/Y1V=D:/dO`";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.377732574962796
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Float float0 = new Float(1872.0257379874);
      Float.isFinite(1950.0636F);
      Double double0 = new Double(1390.1215);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(44);
      Double double1 = Double.valueOf((double) 44);
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      Integer integer1 = new Integer(15);
      BiFunction<Double, Object, Double> biFunction0 = (BiFunction<Double, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.merge(integer1, double1, biFunction0);
      Integer integer2 = new Integer(9);
      Integer integer3 = new Integer(87);
      Double.max(0.0, (-520.51426502));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double2 = new Double(0.0);
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = jSONObject0.toString();
      String string1 = jSONObject0.toString((-1900), 44);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "null";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.381593110439918
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "get";
      stringArray0[1] = ">Hti.B|t";
      stringArray0[2] = "i%`|z7F";
      stringArray0[3] = "\n";
      stringArray0[4] = "Unterminated string";
      stringArray0[5] = "it";
      stringArray0[6] = "7V^;;B*{]6tqt8\"dXm";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Integer integer0 = new Integer(34);
      Double double0 = new Double(34);
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, double0, biFunction0);
      Integer integer1 = new Integer(1990);
      Integer integer2 = new Integer(34);
      Integer.getInteger("\f", 120);
      Double double1 = new Double(34);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = new Float(1872.0257379874);
      Float.isFinite(1949.44F);
      Float.isFinite(1949.44F);
      Float.isFinite(0.0F);
      Float.isFinite(1949.44F);
      Float.min(0.0F, 483.3456F);
      Float.isFinite(0.0F);
      Float float1 = new Float((-1022.43F));
      Float.min((-1022.43F), 0.0F);
      Float.min(0.0F, (-1022.43F));
      Float.isFinite(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("e");
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      Byte byte0 = new Byte((byte)40);
      linkedList1.add(byte0);
      linkedList0.containsAll(linkedList1);
      linkedList0.add("e");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short short0 = new Short((short) (-2410));
      Double double0 = new Double((short) (-2410));
      Double.sum((-1781.19536947), (-783.5));
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.4947357946173248
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(898);
      integerArray0[0] = integer0;
      Integer.remainderUnsigned((int) integerArray0[0], (int) integerArray0[0]);
      Integer.compareUnsigned((int) integerArray0[0], 44);
      Integer integer1 = new Integer((int) integerArray0[0]);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      hashMap0.clear();
      Integer integer2 = new Integer(210);
      Double double0 = new Double(2376.21598847);
      hashMap0.put(integer2, double0);
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>(210);
      hashMap1.putIfAbsent(integer2, double0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SV~%?h2vb";
      stringArray0[1] = "SV~%?h2vb";
      stringArray0[2] = "o*a$M[19SU&QIsrp/";
      stringArray0[3] = "$F/Y1V=D:/dO`";
      stringArray0[4] = "o*a$M[19SU&QIsrp/";
      stringArray0[5] = "f~/-1p*`X_FTthXv0k";
      JSONObject jSONObject0 = new JSONObject(hashMap1, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Double double1 = new Double((double) integerArray0[0]);
      hashMap1.put((Integer) null, double1);
      jSONObject0.put("Xz)~Wun", (long) 1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.44794332401956
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Long> unaryOperator1 = UnaryOperator.identity();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.replaceAll(unaryOperator0);
      Byte byte0 = new Byte((byte)41);
      Byte byte1 = new Byte((byte)46);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "it";
      stringArray0[1] = "acc";
      stringArray0[2] = "bUj!iq";
      stringArray0[3] = "bUj!iq";
      stringArray0[4] = "R";
      stringArray0[5] = "acc";
      stringArray0[6] = "bUj!iq";
      stringArray0[7] = "it";
      stringArray0[8] = "bUj!iq";
      JSONObject jSONObject0 = new JSONObject("bUj!iq", stringArray0);
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      JSONObject jSONObject1 = new JSONObject(unaryOperator1);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float float0 = new Float(0.0F);
      Float.sum(712.0F, 712.0F);
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString(long0, 4, 65);
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.1884181677496533
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[]");
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString((-1294), 128);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.5745358101958222
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(34);
      Double double0 = new Double(34);
      Byte byte0 = new Byte((byte) (-115));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      Short short0 = new Short((byte) (-115));
      Double double1 = new Double(0.0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double2 = new Double((-1781.19536947));
      linkedList1.add(double2);
      String string0 = JSONObject.valueToString(linkedList1, (byte) (-115), 34);
      assertNotNull(string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 829, 829);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("@DgOC^,#G$]");
      linkedList0.add("e");
      linkedList0.add("e");
      linkedList0.pollFirst();
      linkedList0.clear();
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.replaceAll(unaryOperator0);
      Byte byte0 = new Byte((byte)4);
      Byte byte1 = new Byte((byte) (-44));
      String string0 = JSONObject.quote("isvalueOf");
      assertEquals("\"isvalueOf\"", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("^?pa'f?hb", "9p");
      assertEquals("9p", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(898);
      integerArray0[0] = integer0;
      Integer.remainderUnsigned((int) integerArray0[0], (int) integerArray0[0]);
      Integer.compareUnsigned((int) integerArray0[0], 44);
      Integer integer1 = new Integer((int) integerArray0[0]);
      Integer.remainderUnsigned(0, (-338));
      Integer.compareUnsigned(36, 46);
      Integer integer2 = new Integer(44);
      Float.max(0, 0.0F);
      Float.isFinite((-252.47878F));
      JSONObject jSONObject0 = new JSONObject();
      Long.divideUnsigned((long) integerArray0[0], (long) integerArray0[0]);
      try { 
        jSONObject0.getLong("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
