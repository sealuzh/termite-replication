/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 03:11:06 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3068894077018045
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Long.compare((-5103L), 1L);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.entrySet();
      JSONObject.quote("3GtWgw}3#yB3LMp");
      Long long0 = new Long((-1));
      JSONObject.testValidity(long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("3GtWgw}3#yB3LMp", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("isisFinite", false);
      String string0 = JSONObject.quote("3GtWgw}3#yB3LMp");
      assertEquals("\"3GtWgw}3#yB3LMp\"", string0);
      
      String string1 = jSONObject2.optString("]0`302ynOOYL(,", "");
      assertEquals("", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7442298987645435
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = jSONObject1.accumulate("] not found.", "] not found.");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("Lk>Mr`3@W", (Collection) linkedList0);
      jSONObject3.optBoolean("getvalueOf");
      JSONObject jSONObject4 = jSONObject2.append("] not found.", linkedList0);
      jSONObject4.optInt("");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.add(0, jSONArray0);
      jSONObject0.put("{96z", (long) 0);
      jSONObject4.optLong((String) null);
      JSONObject jSONObject5 = jSONObject3.put("]UMYMMc;Txyh'pNOkEc", 1439.53);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      jSONObject5.put("Lk>Mr`3@W", (Map) hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject6 = jSONObject1.put("4", (Collection) linkedList1);
      linkedList1.add(" of ");
      jSONObject6.optBoolean("y<.y9|Kq#i", false);
      jSONObject6.optJSONObject("Missing value");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject4.write(stringWriter0);
      try { 
        jSONObject0.getJSONObject("hpRi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hpRi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0423161244496075
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.keys();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      jSONObject0.put("null", 0.0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject1 = jSONObject0.put("5Vw#JX3lU`Ha~", (Map) hashMap0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.081094268671258
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      jSONObject0.accumulate("{}", "{}");
      jSONObject0.toString(34);
      JSONObject jSONObject1 = new JSONObject();
      Long.sum(34, 34);
      Long.divideUnsigned(690L, 68L);
      JSONTokener jSONTokener0 = new JSONTokener("i^~U)rHm2LcA&Qxk");
      JSONTokener jSONTokener1 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener1);
      Long long0 = new Long(1299L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long((-1L));
      Short short0 = new Short((short)919);
      Long.sum(0L, 3854L);
      Long.divideUnsigned(0L, (-1L));
      JSONTokener jSONTokener0 = new JSONTokener("{f:f):J+QDlk&]]");
      JSONTokener jSONTokener1 = new JSONTokener("{f:f):J+QDlk&]]");
      String string0 = "MoYf%]MgB0.p";
      jSONTokener0.syntaxError("MoYf%]MgB0.p");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 6 of {f:f):J+QDlk&]]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.156727312748295
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHA!3){V9g9fX{S4s]";
      stringArray0[1] = "jHA!3){V9g9fX{S4s]";
      jSONObject0.optLong("jHA!3){V9g9fX{S4s]");
      JSONObject jSONObject1 = jSONObject0.put("jHA!3){V9g9fX{S4s]", (double) 0L);
      jSONObject1.isNull("jHA!3){V9g9fX{S4s]");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject2 = jSONObject0.put("cl", (Map) hashMap0);
      Short short0 = new Short((short) (-2362));
      jSONObject2.put("ishashCode", (-26752530));
      jSONObject1.getDouble("jHA!3){V9g9fX{S4s]");
      jSONObject0.put("isset", (-1777L));
      try { 
        jSONObject2.getLong("WRStFzUvm*/]O+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WRStFzUvm*_/]O+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9449631545143027
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean boolean0 = new Boolean((String) null);
      Double double0 = new Double((-35.25714065887017));
      Byte byte0 = new Byte((byte)51);
      jSONObject0.isNull("=o|yngkH:%e");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.keySet();
      Object object1 = new Object();
      jSONObject0.put("{", (Object) hashMap0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.026778327384198
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-571), (-571));
      jSONObject0.optDouble("o)7=E0f>%?qip", 0.0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("o)7=E0f>%?qip", false);
      String string0 = null;
      JSONObject.quote((String) null);
      jSONObject1.getBoolean("o)7=E0f>%?qip");
      jSONObject0.keys();
      jSONObject1.toString(8448, (-705));
      jSONObject0.put("jo", (Object) jSONObject1);
      try { 
        jSONObject0.getDouble("/Q-Fu'b:0lbfjeknl!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/Q-Fu'b:0lbfjeknl!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2067368439362582
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "r^1b}le=z_<Gud";
      stringArray0[1] = "RY-#X{Q_kvy:jQvCZ(";
      stringArray0[2] = "2wC}";
      stringArray0[3] = "";
      stringArray0[4] = "Null pointer";
      stringArray0[5] = "java.lang.Float@00000000010";
      stringArray0[6] = "{}";
      stringArray0[7] = "~8QX?^+>RY";
      stringArray0[8] = "";
      jSONObject0.optJSONObject("n+}v'");
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.write(stringWriter0);
      try { 
        jSONObject0.getJSONObject("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5608638598527573
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = jSONObject1.accumulate("] not found.", "] not found.");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("Lk>Mr`3@W", (Collection) linkedList0);
      boolean boolean0 = jSONObject3.optBoolean("getvalueOf");
      JSONObject jSONObject4 = jSONObject2.append("] not found.", linkedList0);
      int int0 = jSONObject4.optInt("");
      assertEquals(0, int0);
      
      jSONObject0.put("JSON does not allow non-finite numbers.", (long) 0);
      long long0 = jSONObject4.optLong((String) null);
      assertEquals(0L, long0);
      
      JSONObject jSONObject5 = jSONObject3.put("]UMYMMc;Txyh'pNOkEc", 1439.53);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      boolean boolean1 = jSONObject5.isNull("' and instead saw '");
      assertFalse(boolean1 == boolean0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap1.keySet();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1186492470699507
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      Long.compare((short) (-2362), (short) (-2362));
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      linkedList1.clone();
      Float float0 = new Float((float) (short) (-2362));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`Cz";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Long long0 = new Long((short) (-2362));
      JSONObject jSONObject1 = jSONObject0.put("`Cz", (Object) long0);
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject0.getLong("`Cz");
      String string0 = jSONObject1.optString((String) null, ": ");
      assertEquals(": ", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray((String) null);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 9, 9);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2679413483002966
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0L);
      Byte byte0 = new Byte((byte)51);
      jSONObject0.isNull("sBC:RcH2p6uZD@(;7");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("sBC:RcH2p6uZD@(;7");
      JSONObject jSONObject2 = jSONObject1.put("sBC:RcH2p6uZD@(;7", 1718.726);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double1 = new Double(1718.726);
      linkedList2.add(double0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject2.optDouble("sBC:RcH2p6uZD@(;7");
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject1.getString("sBC:RcH2p6uZD@(;7");
      JSONObject jSONObject3 = jSONObject0.put("Expected a ':' after a key", 10);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8505215886020756
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      Long.divideUnsigned(264L, (short) (-2362));
      Long.getLong("jHA!3){V9gN9fX{S4s]", (Long) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHA!3){V9gN9fX{S4s]";
      stringArray0[1] = "jHA!3){V9gN9fX{S4s]";
      jSONObject0.optLong("jHA!3){V9gN9fX{S4s]");
      String string0 = "has";
      jSONObject0.put("has", (double) 0L);
      JSONObject jSONObject1 = jSONObject0.put("jHA!3){V9gN9fX{S4s]", (double) 0L);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double0 = new Double((short) (-2362));
      linkedList2.add(double0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList2);
      jSONArray1.put(8, (double) 8);
      jSONArray1.optDouble((int) (short) (-2362));
      jSONObject1.optDouble("jHA!3){V9gN9fX{S4s]");
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray("jHA!3){V9gN9fX{S4s]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of jHA!3){V9gN9fX{S4s]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.22294580887911
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      Long.divideUnsigned(264L, (short) (-2362));
      Long.getLong("jHA!3){V9g9fX{S4s]", (Long) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHA!3){V9g9fX{S4s]";
      stringArray0[1] = "jHA!3){V9g9fX{S4s]";
      jSONObject0.optLong("jHA!3){V9g9fX{S4s]");
      JSONObject jSONObject1 = jSONObject0.put("jHA!3){V9g9fX{S4s]", (double) 0L);
      JSONObject jSONObject2 = jSONObject0.put("R:y'k<w6\"\"6ke>", (long) (short) (-2362));
      jSONObject2.getLong("jHA!3){V9g9fX{S4s]");
      JSONObject jSONObject3 = jSONObject0.putOpt("Missing value", jSONObject1);
      jSONObject3.isNull("jHA!3){V9g9fX{S4s]");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject3.put("false", (Map) hashMap0);
      JSONObject jSONObject4 = new JSONObject();
      JSONArray jSONArray1 = jSONObject4.optJSONArray("Missing value");
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.588763783311361
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer((-1668));
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong("f`N\"%]/Q|_", (long) (-1668));
      jSONObject0.optBoolean("f`N\"%]/Q|_");
      JSONObject.quote("f`N\"%]/Q|_");
      JSONObject jSONObject1 = jSONObject0.put("f`N\"%]/Q|_", (-1668));
      jSONObject0.toString(9, (-1668));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.isNull("{\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\",\n\"java.lang.String@0000000006\": java.lang.Integer@0000000007\n}");
      String string0 = "4IJI;ika\"2<qa4";
      jSONObject1.optInt("4IJI;ika\"2<qa4");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject1.put("f`N\"%]/Q|_", (double) 9);
      jSONObject0.optDouble("\b");
      JSONObject.quote("{\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\",\n\"java.lang.String@0000000006\": java.lang.Integer@0000000007\n}");
      try { 
        jSONObject0.getString("4IJI;ika\"2<qa4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4IJI;ika\\\"2<qa4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.434905767956669
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer((-1668));
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "f`N\"%]/Q|_";
      jSONObject0.optLong("f`N\"%]/Q|_", (long) (-1668));
      jSONObject0.optBoolean("f`N\"%]/Q|_");
      jSONObject0.toString(9, (-1668));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-1.0));
      String string1 = "is";
      Byte byte0 = new Byte((byte)51);
      jSONObject0.optLong("=o|yngkH:%e");
      JSONObject jSONObject1 = jSONObject0.putOpt("getgetClass", "f`N\"%]/Q|_");
      jSONObject1.isNull("=o|yngkH:%e");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.keySet();
      Double double1 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4022049439390782
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      jSONObject1.optBoolean("{}");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject4 = new JSONObject();
      jSONObject1.putOpt("ac", "{}");
      Byte byte0 = new Byte((byte)28);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      jSONObject2.has("ac");
      String string0 = "&t=tGT/RYy";
      Long long0 = new Long(1L);
      Long long1 = Long.getLong("&t=tGT/RYy", long0);
      JSONObject jSONObject5 = new JSONObject(long1, stringArray0);
      try { 
        jSONObject5.get("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.143023539774432
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Double double0 = new Double((-558.2898));
      JSONObject jSONObject0 = new JSONObject(double0);
      Byte byte0 = new Byte((byte)110);
      JSONObject jSONObject1 = jSONObject0.put("getnames", (double) (byte)110);
      jSONObject1.optLong("getnames");
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      JSONObject jSONObject3 = jSONObject0.putOpt("getnames", jSONObject2);
      jSONObject1.isNull("Dp4ih=");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.keySet();
      JSONObject jSONObject4 = jSONObject1.put("getnames", (Map) hashMap0);
      JSONObject.quote("getaccumulate");
      jSONObject3.opt("getnames");
      jSONObject4.getJSONObject("getnames");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = new Integer(47);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean.valueOf("'3<");
      Boolean.compare(false, true);
      Boolean boolean0 = Boolean.valueOf("'3<");
      linkedList0.add(boolean0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<HashMap<Double, Boolean>> linkedList1 = new LinkedList<HashMap<Double, Boolean>>();
      Float float0 = new Float((float) 47);
      Float float1 = new Float((-1.0));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'3<";
      stringArray0[1] = "'";
      stringArray0[2] = "'";
      stringArray0[3] = "'3<";
      stringArray0[4] = "'3<";
      stringArray0[5] = "'3<";
      stringArray0[6] = "'";
      JSONObject jSONObject0 = new JSONObject(float1, stringArray0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<JSONArray, JSONArray> hashMap1 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray0, jSONArray1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0046453186028406
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray(" PQE.q-,>\"");
      Long long0 = new Long(0L);
      Long.sum(968L, 264L);
      Long.divideUnsigned(2525L, 264L);
      Long.getLong("getaddLast", long0);
      Long.sum(978L, 197L);
      jSONObject0.optDouble((String) null);
      jSONObject0.optString("A JSONArray text must start with '['", (String) null);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject.valueToString((Object) null, (-1668), (-1668));
      Integer.divideUnsigned((-1668), 64);
      Integer.compare(110, 0);
      jSONObject0.optBoolean("y/N,~jcxU&W,H");
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("getaddLast", "getaddLast");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4786505568418975
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "";
      Long long0 = new Long(0L);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("Pc", (Collection) linkedList0);
      jSONObject1.optBoolean("getvalueOf");
      Boolean boolean0 = new Boolean("] is not a JSONObject.");
      linkedList0.add(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      JSONObject jSONObject2 = jSONObject1.append("wheel.json.JSONException", boolean1);
      jSONObject2.optInt("");
      jSONObject2.put("wheel.json.JSONException", 0L);
      Object object0 = JSONObject.NULL;
      jSONObject2.append("toS", object0);
      Integer integer0 = new Integer(190);
      Double double0 = new Double(0.0);
      JSONObject.getNames((Object) "");
      jSONObject2.has("wheel.json.JSONException");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wheel.json.JSONException";
      stringArray0[1] = "HW+(2j9IK0O|t]";
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject3.get("Gh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Gh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.40912941612615
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("R_[Cfy\"", biFunction0);
      Integer integer0 = new Integer(2884);
      hashMap0.putIfAbsent("getequals", (Integer) null);
      int int0 = 3931;
      Integer integer1 = new Integer(3931);
      JSONObject jSONObject0 = new JSONObject(integer1);
      String string0 = "mi";
      boolean boolean0 = new Boolean("getequals");
      Object object0 = JSONObject.NULL;
      Integer integer2 = Integer.getInteger("getequals", 2884);
      Integer.getInteger((String) null, integer2);
      try { 
        jSONObject0.accumulate((String) null, "getequals");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.277252273432971
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "jhmvvAO";
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(1.0, 1.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString("jhmvvAO");
      Double.isFinite(0.0);
      jSONObject0.optInt(".5pib~T s}LeM");
      Double.isFinite(0.0);
      JSONObject jSONObject3 = jSONObject1.put("jhmvvAO", 11);
      jSONObject3.optBoolean("] is not a Boolean.");
      Integer.divideUnsigned(11, 34);
      jSONObject3.getDouble("jhmvvAO");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject((Object) jSONObject2, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4523768893905418
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      Byte byte0 = new Byte((byte)17);
      JSONObject jSONObject1 = new JSONObject(byte0);
      jSONObject0.optLong("v*WPepX{MUz'D=s6'", (long) (byte)17);
      jSONObject1.optBoolean("f`N\"%]/Q|_");
      String string0 = "toS";
      JSONObject jSONObject2 = jSONObject1.put("toS", 12);
      jSONObject0.toString((-2178), 9);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject2.isNull("{}");
      jSONObject2.optInt("toS");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject2.put("{}", (double) (-2178));
      jSONObject2.put("toS", (Map) hashMap0);
      JSONObject.quote("toS");
      try { 
        jSONObject0.getString("\"toS\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"toS\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7202025435261346
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("wai", (-267L));
      Long.sum((-267L), 2455L);
      Long.divideUnsigned(2455L, (-267L));
      Long long0 = new Long((-267L));
      Long long1 = new Long(0L);
      Long long2 = new Long(2455L);
      Long.sum((-267L), (-267L));
      jSONObject0.optDouble("wai");
      jSONObject0.optString((String) null, "-7");
      JSONTokener jSONTokener0 = new JSONTokener("iswait");
      Integer.divideUnsigned(11, 104);
      try { 
        jSONObject0.getString("-7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-7\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.229882546625576
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      String string0 = null;
      JSONObject jSONObject1 = jSONObject0.put("getgetJSONObject", (-1059L));
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optLong("getgetJSONObject");
      JSONObject jSONObject3 = jSONObject1.put("getgetJSONObject", (double) (-9L));
      JSONObject jSONObject4 = new JSONObject(jSONObject3, stringArray0);
      jSONObject4.optInt((String) null);
      long long0 = 1L;
      jSONObject3.put("getgetJSONObject", 1L);
      jSONObject0.put("not", (double) 1L);
      String string1 = "";
      jSONObject4.optInt("getgetJSONObject");
      jSONObject3.getLong("not");
      JSONObject jSONObject5 = null;
      try {
        jSONObject5 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.978412416048546
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = new Integer((-1668));
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "f`N\"%]/Q|_";
      jSONObject0.optLong("f`N\"%]/Q|_", (long) (-1668));
      long long0 = (-1059L);
      long long1 = 696L;
      JSONObject jSONObject1 = jSONObject0.put("f`N\"%]/Q|_", 696L);
      jSONObject1.optLong("f`N\"%]/Q|_");
      JSONObject jSONObject2 = jSONObject0.put("%:}V-OE5^GO=`4", (double) 696L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%:}V-OE5^GO=`4";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      String string1 = "C";
      jSONObject1.put("C", 696L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.479870783949871
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer((-1668));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f`N\"%]/Q|_";
      JSONObject jSONObject0 = new JSONObject("f`N\"%]/Q|_", stringArray0);
      jSONObject0.optLong("X", 0L);
      jSONObject0.optBoolean("X");
      JSONObject jSONObject1 = jSONObject0.put("X", (-1668));
      jSONObject1.toString(9, 9);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0L);
      linkedList0.add(double0);
      JSONObject jSONObject2 = jSONObject1.put("3", (Collection) linkedList0);
      try { 
        jSONObject2.getLong("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6283356526043842
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Am>7G]Fz^O";
      jSONObject0.optBoolean("Am>7G]Fz^O", false);
      jSONObject0.put("Am>7G]Fz^O", false);
      try { 
        jSONObject0.getDouble("Am>7G]Fz^O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Am>7G]Fz^O\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7850263853484054
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = new Integer((-1668));
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong("f`N\"%]/Q|_", (long) (-1668));
      jSONObject0.optBoolean("f`N\"%]/Q|_");
      JSONObject jSONObject1 = jSONObject0.put("f`N\"%]/Q|_", (-1668));
      Long.min(2436L, 2436L);
      Object object1 = jSONObject1.opt("f`N\"%]/Q|_");
      assertEquals(2, jSONObject0.length());
      assertEquals((-1668), object1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8572655148730057
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-2362));
      JSONObject jSONObject0 = new JSONObject(short0);
      Long long0 = new Long((short) (-2362));
      Long.divideUnsigned(1633L, 264L);
      Long long1 = new Long(0L);
      Long.getLong("jHA!3){V9g9fX{S4s]", long1);
      String string0 = "isadd";
      jSONObject0.optLong("isadd");
      JSONObject jSONObject1 = jSONObject0.put("]jSD?pA6!A%Q,", 666.13);
      try { 
        jSONObject1.put((String) null, (-1884L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float(0.0F);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap1.computeIfPresent("] not found.", biFunction0);
      BiFunction<String, Object, Integer> biFunction1 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("{N", biFunction1);
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      Float float1 = new Float((double) 0.0F);
      Float.max(0L, 2264.0F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      int int0 = (-611);
      Integer integer0 = new Integer((-611));
      Object object0 = new Object();
      Float float0 = new Float(23.8749);
      jSONObject0.accumulate("Ysb)%]", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Ysb)%]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Ysb)%]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("R_[Cfy\"", biFunction0);
      hashMap0.putIfAbsent("6mmP@G", (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-611));
      Object object0 = new Object();
      Float float0 = new Float(0.0);
      try { 
        jSONObject0.put((String) null, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.527545970607008
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = jSONObject1.accumulate("] not found.", "] not found.");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("Lk>Mr`3@W", (Collection) linkedList0);
      jSONObject3.optBoolean("getvalueOf");
      JSONObject jSONObject4 = jSONObject2.append("] not found.", linkedList0);
      jSONObject4.optInt("");
      jSONObject0.put("JSON does not allow non-finite numbers.", (long) 0);
      jSONObject4.optLong((String) null);
      jSONObject3.put("]UMYMMc;Txyh'pNOkEc", 1439.53);
      jSONObject1.putOpt("is", "");
      jSONObject1.isNull("A JSONArray text must start with '['");
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) jSONObject3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Long.min((-3L), (-3L));
      Byte byte0 = new Byte((byte)33);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("BadLvalue from toJSONString: ");
      assertNull(object0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.remainderUnsigned((-1699L), (-1699L));
      Long.compare(1652L, 0L);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.entrySet();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("{N", biFunction0);
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("{N", biFunction1);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Float.max(0L, 1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.2226119448555581
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = (-267L);
      jSONObject0.put("", (-267L));
      Short short0 = new Short((short)12);
      try { 
        jSONObject0.append("", short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4796577500684815
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = jSONObject1.accumulate("] not found.", "] not found.");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("Lk>Mr`3@W", (Collection) linkedList0);
      jSONObject3.optBoolean("getvalueOf");
      JSONObject jSONObject4 = jSONObject2.append("] not found.", linkedList0);
      jSONObject4.optInt("");
      jSONObject0.put("JSON does not allow non-finite numbers.", (long) 0);
      jSONObject4.optLong((String) null);
      JSONObject jSONObject5 = jSONObject3.put("]UMYMMc;Txyh'pNOkEc", 1439.53);
      jSONObject4.put("", false);
      String string0 = null;
      jSONObject0.optLong((String) null);
      jSONObject2.put("C(h{,:Es-.0g8v{3", (double) 0L);
      jSONObject0.put("C(h{,:Es-.0g8v{3", (-1784L));
      jSONObject4.putOpt((String) null, "C(h{,:Es-.0g8v{3");
      Object object0 = new Object();
      try { 
        jSONObject5.getInt("xMvw`&-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xMvw`&-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5393673998815776
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      String string0 = null;
      JSONObject jSONObject1 = jSONObject0.put("getgetJSONObject", (-1059L));
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optLong("getgetJSONObject");
      JSONObject jSONObject3 = jSONObject1.put("getgetJSONObject", (double) 0L);
      JSONObject jSONObject4 = new JSONObject(jSONObject3, stringArray0);
      JSONObject jSONObject5 = jSONObject4.putOpt((String) null, jSONObject3);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.optJSONObject(44);
      jSONObject5.isNull("JSON does not allow non-finite numbers.");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      JSONTokener jSONTokener0 = new JSONTokener("JSON does not allow non-finite numbers.");
      JSONObject jSONObject6 = null;
      try {
        jSONObject6 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5552510106198139
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "true";
      jSONObject0.put("true", (-261L));
      boolean boolean0 = new Boolean("true");
      Long.getLong("jHA!3){V9g9fX{S4s]", 0L);
      Long long0 = new Long(0L);
      jSONObject0.optLong("true");
      Integer integer0 = new Integer(8192);
      int int0 = 0;
      int int1 = 12;
      int int2 = 9;
      Integer.valueOf(9);
      Integer integer1 = new Integer(70);
      Integer integer2 = new Integer(123);
      int int3 = 1466;
      Integer integer3 = new Integer(1466);
      int int4 = (-671);
      try { 
        jSONObject0.getInt(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.434951844735734
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long.divideUnsigned(0L, 285L);
      Long.getLong("A JSONArray text must start with '['", long0);
      Long.sum(0L, (-92L));
      JSONObject.quote("A JSONArray text must start with '['");
      Long long1 = new Long(0L);
      String string0 = "/A:p?F?U^re(w&A";
      jSONObject0.optInt("/A:p?F?U^re(w&A");
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", 3377L);
      String string1 = "Null pointer";
      jSONObject1.optLong("Null pointer");
      JSONObject jSONObject2 = jSONObject0.put("/A:p?F?U^re(w&A", 444.314809);
      jSONObject1.putOpt("Jb2^R]G", jSONObject2);
      JSONObject jSONObject3 = new JSONObject();
      int int0 = 5084;
      // Undeclared exception!
      JSONObject.valueToString(jSONObject2, 1021, 662);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8113759572611494
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("", (-267L));
      jSONObject0.optInt("");
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("", (Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject3 = jSONObject0.put("WYPUh@L", (Collection) linkedList0);
      jSONObject1.optJSONArray("toS");
      String string0 = JSONObject.quote("");
      Long long0 = new Long((-267L));
      Float float0 = new Float(0.0);
      jSONObject2.optJSONObject("");
      String string1 = jSONObject3.getString("");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.remainderUnsigned((-1699L), (-1699L));
      Float float0 = new Float((double) (-1699L));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long((-1073L));
      Long.compare(155L, 607L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">E6VB/^t^2NB.m";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = new Object();
      try { 
        jSONObject0.append(stringArray0[2], object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3499062784040685
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      short short0 = (short) (-2362);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      String string0 = "jHA!3){V9g\\9fX{S4s]";
      Long.getLong("jHA!3){V9g9fX{S4s]", long0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHA!3){V9g9fX{S4s]";
      stringArray0[1] = "jHA!3){V9g9fX{S4s]";
      jSONObject0.optLong("jHA!3){V9g9fX{S4s]");
      jSONObject0.put("jHA!3){V9g9fX{S4s]", (double) 0L);
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (long) (short) (-2362));
      jSONObject1.isNull("jHA!3){V9g9fX{S4s]");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject2 = jSONObject0.put("cl", (Map) hashMap0);
      jSONObject2.get("ishashCode");
      Short short1 = new Short((short) (-2362));
      jSONObject1.put("4", (int) (short) (-2362));
      jSONObject0.put(".", (int) (short) (-2362));
      jSONObject2.optBoolean("jHA!3){V9g9fX{S4s]");
      try { 
        jSONObject2.getDouble("9/fnKm);!y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9/fnKm);!y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      long long0 = (-1L);
      long long1 = 0L;
      try { 
        jSONObject0.getString("](1LIx*+'n'=PD|,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"](1LIx*+'n'=PD|,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.accumulate("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      int int0 = 34;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONObject@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.768712125492369
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.doubleToString(Double.NaN);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject2 = jSONObject1.put("null", false);
      String string0 = "getcompare";
      String string1 = "JMWeD";
      try { 
        jSONObject2.getJSONObject("JMWeD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JMWeD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.309632530938063
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "JSON does not allow non-finite numbers.";
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      String string1 = null;
      JSONObject jSONObject1 = jSONObject0.put("getgetJSONObject", (-1059L));
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optLong("getgetJSONObject");
      JSONObject jSONObject3 = jSONObject1.put("getgetJSONObject", (double) 0L);
      JSONObject jSONObject4 = new JSONObject(jSONObject3, stringArray0);
      JSONObject jSONObject5 = jSONObject4.putOpt((String) null, jSONObject3);
      JSONArray jSONArray1 = new JSONArray();
      String string2 = "ismin";
      jSONObject5.putOpt("ismin", (Object) null);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray0.optJSONObject(13);
      JSONTokener jSONTokener0 = new JSONTokener("$:O_n|s5\"");
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of $:O_n|s5\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.460325893917832
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("aZHdVw%qtP8A{Ng", true);
      jSONObject1.toString();
      String string0 = "";
      JSONObject jSONObject2 = jSONObject1.accumulate("", "Unterminated string");
      jSONObject1.toString(34);
      jSONObject2.optBoolean("aZHdVw%qtP8A{Ng");
      jSONObject0.toString();
      int int0 = 10;
      try { 
        jSONObject2.getInt("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.484925891109223
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a number.";
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (-267L));
      try { 
        jSONObject1.getBoolean("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Long long0 = new Long((-1073L));
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">E6VB/^t^2NB.m";
      stringArray0[1] = "Unclosed comment";
      Long.max(975L, 975L);
      stringArray0[2] = "isequals";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Double double0 = new Double(975L);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList2 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>(linkedList2);
      LinkedList<Boolean> linkedList4 = new LinkedList<Boolean>();
      Float float0 = new Float(2000.9008F);
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.add("'3<");
      linkedList5.add("ZUZ8Chq\" u#|Y5^s)_w");
      Byte byte0 = new Byte((byte)10);
      Float float1 = new Float(2217.9037284);
      Float.max((-64.0F), (-612.0F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.2104817098009684
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (-267L));
      jSONObject0.optInt("");
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("", (Map) hashMap0);
      String string1 = "WYPUh@L";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("WYPUh@L", (Collection) linkedList0);
      jSONObject2.optInt("WYPUh@L");
      int int0 = 808;
      jSONObject0.put("", 808);
      Object object0 = new Object();
      String string2 = "\\r";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(0.0F);
      long long0 = 0L;
      JSONTokener jSONTokener0 = new JSONTokener("{&|R6");
      jSONTokener0.next();
      jSONTokener0.nextClean();
      jSONTokener0.syntaxError("getgetLong");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 3 of {&|R6
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7343746752363298
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "q$9!";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Short short0 = new Short((short)44);
      JSONObject.valueToString(short0);
      String string1 = "has";
      jSONObject0.optJSONArray("has");
      Long long0 = new Long(25L);
      int int0 = 115;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(115, 9.07902F);
      int int1 = 4;
      try { 
        Integer.valueOf("has", 115);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 115 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5173758181460557
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = jSONObject1.accumulate("] not found.", "] not found.");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("Lk>Mr`3@W", (Collection) linkedList0);
      jSONObject3.optBoolean("getvalueOf");
      JSONObject jSONObject4 = jSONObject2.append("] not found.", linkedList0);
      jSONObject4.optInt("");
      JSONObject jSONObject5 = jSONObject0.put("JSON does not allow non-finite numbers.", (long) 0);
      JSONObject jSONObject6 = jSONObject1.accumulate("Lk>Mr`3@W", "p{3~E?$");
      jSONObject4.optInt("V%M^NUe7ZigSEO-xgR5", 160);
      String string0 = "k!";
      jSONObject3.optInt("k!");
      Byte byte0 = new Byte((byte) (-42));
      Short short0 = new Short((byte) (-42));
      jSONObject6.put("false", (Object) short0);
      JSONObject.numberToString(byte0);
      jSONObject5.isNull((String) null);
      try { 
        jSONObject6.getInt("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6173779330087545
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject((Object) "A JSONArray text must start with '['");
      jSONObject0.optLong(".", 0L);
      jSONObject0.optBoolean(".");
      JSONObject jSONObject2 = jSONObject1.put(" at character ", 48);
      jSONObject1.toString(48, 59);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject2.isNull("su");
      jSONObject2.optInt("f`N\"%]/Q|_");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject2.put("\r", (-41.7));
      jSONObject2.put("tayJ?IJ%_|XnE&Zc96Z", (Map) hashMap0);
      JSONObject.quote("[");
      jSONObject2.getString("tayJ?IJ%_|XnE&Zc96Z");
      JSONObject jSONObject3 = jSONObject2.put("Missing value", 2266);
      jSONObject2.put("fF5d/-'qxt{TJ?uKc", true);
      String string0 = null;
      try { 
        jSONObject3.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5667431692127394
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("R_[Cfy\"", biFunction0);
      Integer integer0 = new Integer(2884);
      hashMap0.putIfAbsent("6mmP@G", (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = new Integer((-611));
      Object object0 = new Object();
      Float float0 = new Float((double) 2884);
      JSONObject jSONObject1 = jSONObject0.accumulate("Ysb)%]", float0);
      jSONObject1.put("6mmP@G", 2884);
      Object object1 = new Object();
      String string0 = "";
      try { 
        jSONObject0.getJSONObject("6mmP@G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6mmP@G\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3718061232922234
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("z~imo];t:k\"[Q!}z", (Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("~i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~i\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "isaddLast";
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "x\"8H0_C/";
      try { 
        jSONObject0.put("isaddLast", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4452500657877787
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      Long.compare((short) (-2362), (short) (-2362));
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      linkedList1.clone();
      Float float0 = new Float((float) (short) (-2362));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`Cz";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optInt("wheel.json.JSONException", 0);
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.put((String) null, (double) (short) (-2362));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8505215886020754
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      short short0 = (short) (-2362);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      Long.getLong("jHA!3){V9g9fX{S4s]", long0);
      String[] stringArray0 = new String[7];
      jSONObject0.optDouble("b;A:/6SIiVhV1Mp!el8", 807.872550857);
      stringArray0[0] = "jHA!3){V9g9fX{S4s]";
      stringArray0[1] = "jHA!3){V9g9fX{S4s]";
      jSONObject0.optLong("jHA!3){V9g9fX{S4s]");
      jSONObject0.put("jHA!3){V9g9fX{S4s]", (double) 0L);
      jSONObject0.put("ishashCode", (long) (short) (-2362));
      int int0 = 773;
      Integer integer0 = new Integer(2826);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.putIfAbsent("jHA!3){V9g9fX{S4s]", integer0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ishashCode
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.170882159265423
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      Long.divideUnsigned(264L, (short) (-2362));
      Long.getLong("jHA!3){V9g9fX{S4s]", long0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHA!3){V9g9fX{S4s]";
      stringArray0[1] = "jHA!3){V9g9fX{S4s]";
      jSONObject0.optLong("jHA!3){V9g9fX{S4s]");
      jSONObject0.put("jHA!3){V9g9fX{S4s]", (double) 0L);
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (long) (short) (-2362));
      jSONObject1.isNull("jHA!3){V9g9fX{S4s]");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("jHA!3){V9g9fX{S4s]", (Object) null);
      jSONObject0.put("false", (Map) hashMap0);
      double double0 = new Long(264L);
      JSONObject jSONObject2 = jSONObject1.put("4", (int) (short) (-2362));
      double double1 = jSONObject2.optDouble("4", (-263.0853899311));
      assertEquals(6, jSONObject1.length());
      assertEquals((-2362.0), double1, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.4511211368306685
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getJSONObject("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer((-1668));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f`N\"%]/Q|_";
      JSONObject jSONObject0 = new JSONObject("f`N\"%]/Q|_", stringArray0);
      jSONObject0.optLong("X", (long) (-1668));
      boolean boolean0 = new Boolean("X");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent((String) null, biFunction0);
      Integer integer1 = new Integer(1677);
      hashMap0.putIfAbsent("X", integer1);
      Integer integer2 = new Integer(97);
      assertFalse(integer2.equals((Object)integer0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.4373576442226272
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = jSONObject1.accumulate("] not found.", "] not found.");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("Lk>Mr`3@W", (Collection) linkedList0);
      jSONObject3.optBoolean("getvalueOf");
      JSONObject jSONObject4 = jSONObject2.append("] not found.", linkedList0);
      jSONObject4.optInt("");
      Byte byte0 = new Byte((byte) (-92));
      jSONObject4.isNull("\f");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap2.keySet();
      String string0 = JSONObject.quote("");
      hashMap1.put("\"\"", (Object) null);
      JSONObject jSONObject5 = jSONObject3.put("wheel.json.JSONException", (Object) "getvalueOf");
      String string1 = jSONObject5.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("x\"8H0_C/");
      String string0 = "#pVYL<NZwGtb4_#";
      jSONObject0.optLong("#pVYL<NZwGtb4_#", 2054L);
      String string1 = "5Y[Ket";
      String string2 = null;
      Long.getLong((String) null, (Long) null);
      jSONObject0.optLong("#pVYL<NZwGtb4_#");
      int int0 = 12;
      int int1 = (-424);
      Integer integer0 = new Integer((-424));
      int int2 = (-108916131);
      HashMap<String, Integer> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, Integer>((-108916131), (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -108916131
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.567364008807279
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = jSONObject1.accumulate("] not found.", "] not found.");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("] not found.", (Collection) linkedList0);
      String string0 = "getvalueOf";
      boolean boolean0 = new Boolean("] not found.");
      JSONObject jSONObject4 = jSONObject2.append("] not found.", linkedList0);
      String string1 = "4";
      jSONObject0.optInt("4", 1428);
      jSONObject4.optInt("");
      jSONObject3.optLong("] not found.");
      JSONObject jSONObject5 = jSONObject4.put("*c}>s]", 916.0393078156);
      jSONObject5.put("' and instead saw '", 0L);
      jSONObject1.isNull((String) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string2 = "cl";
      JSONObject jSONObject6 = null;
      try {
        jSONObject6 = new JSONObject("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ' and instead saw '
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.0220528417380863
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      Long.divideUnsigned(264L, (short) (-2362));
      Long.getLong("jHA!3){V9g9fX{S4s]", long0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHA!3){V9g9fX{S4s]";
      stringArray0[1] = "jHA!3){V9g9fX{S4s]";
      jSONObject0.optLong("jHA!3){V9g9fX{S4s]");
      jSONObject0.put("jHA!3){V9g9fX{S4s]", (double) 0L);
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (long) (short) (-2362));
      boolean boolean0 = new Boolean("jHA!3){V9g9fX{S4s]");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "false";
      JSONObject jSONObject2 = jSONObject0.put("false", (Map) hashMap0);
      jSONObject2.getDouble("ishashCode");
      jSONObject1.put("4", (int) (short) (-2362));
      try { 
        jSONObject2.getDouble("9/fnKm);!y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9/fnKm);!y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.82127296682907
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Long.compare(155L, 607L);
      Long.sum((-3371L), (-2108L));
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">E6VB/^t^2NB.m";
      JSONObject jSONObject0 = new JSONObject((Object) ">E6VB/^t^2NB.m");
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt(">E6VB/^t^2NB.m", object0);
      jSONObject0.isNull("A JSONArray text must start with '['");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.put("Unclosed comment", (Map) hashMap0);
      try { 
        jSONObject0.getDouble(">E6VB/^t^2NB.m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">E6VB/^t^2NB.m\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(47);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean.valueOf("'3<");
      Boolean.compare(false, false);
      Boolean boolean0 = Boolean.valueOf("'3<");
      linkedList0.add(boolean0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<HashMap<Double, Boolean>> linkedList1 = new LinkedList<HashMap<Double, Boolean>>();
      Float float0 = new Float((float) 47);
      Float float1 = new Float((-1.0));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'3<";
      stringArray0[1] = "'";
      stringArray0[2] = "'";
      stringArray0[3] = "'3<";
      stringArray0[4] = "'3<";
      stringArray0[5] = "'3<";
      stringArray0[6] = "'";
      JSONObject jSONObject0 = new JSONObject(float1, stringArray0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<JSONArray, JSONArray> hashMap1 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      JSONArray jSONArray1 = jSONObject1.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "r^1b}le=z_<Gud";
      stringArray0[1] = "RY-#X{Q_kvy:jQvCZ(";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject0.toString(102);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.106577333232116
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "4";
      JSONObject jSONObject1 = jSONObject0.put("4", (-267L));
      jSONObject1.getString("4");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4795008699302592
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      Integer integer0 = new Integer((short) (-2362));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.computeIfPresent("oR?n*(D pt:Z5", biFunction0);
      hashMap1.putIfAbsent("oR?n*(D pt:Z5", integer0);
      Integer integer1 = new Integer((-744));
      try { 
        jSONObject0.getString("oR?n*(D pt:Z5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"oR?n*(D pt:Z5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("R_[Cfy\"", biFunction0);
      Integer integer0 = new Integer(2884);
      hashMap0.putIfAbsent("6mmP@G", (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = new Integer((-611));
      Object object0 = new Object();
      HashMap<Boolean, Boolean> hashMap1 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject2 = jSONObject1.put("6mmP@G", 59);
      Object object1 = new Object();
      Long long0 = new Long(1L);
      Object object2 = new Object();
      jSONObject1.put("", object2);
      jSONObject2.put("6mmP@G", (Object) hashMap1);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(125);
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.remainderUnsigned((-1699L), (-1699L));
      Long.compare(1652L, 0L);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.entrySet();
      hashMap0.clone();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("{N", biFunction0);
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("{N", biFunction1);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Float float0 = new Float((double) 0L);
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap2.putIfAbsent("{N", integer0);
      Integer integer1 = new Integer((-515));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {N
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.min(0L, 0L);
      Boolean boolean0 = new Boolean(false);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      String string0 = "ishashCode";
      jSONObject0.put("ishashCode", (long) (short) (-2362));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((short) (-2362));
      hashMap1.putIfAbsent("Missing value", integer0);
      Integer integer1 = new Integer(672);
      JSONObject.valueToString((Object) null);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.6963338849145788
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer((-1668));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addFirst("Ln4N*$/WDVE9/W>]M");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString();
      assertEquals(4, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Long.remainderUnsigned((short) (-2362), (-1699L));
      Long.min(1L, (short) (-2362));
      Double double0 = new Double(1L);
      Double.max(0.0, 0.0);
      Double.sum(3115L, 0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6957425341696344
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Long long0 = new Long((-1073L));
      Long.compare(155L, 607L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">E6VB/^t^2NB.m";
      stringArray0[2] = "isequals";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = new Object();
      jSONObject0.append("isequals", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.2700316752557592
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long.divideUnsigned(0L, 264L);
      Long.getLong("A JSONArray text must start with '['", long0);
      Long.sum(197L, 0L);
      double double0 = jSONObject0.optDouble("A JSONArray text must start with '['");
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = jSONObject0.optString("A JSONArray text must start with '['", "i`njR?");
      assertEquals("i`njR?", string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("{&|R6");
      Integer.divideUnsigned(110, 11);
      Integer.compare(110, (-2002));
      int int0 = jSONObject0.optInt(",:]}/\"[{;=#", 10);
      assertEquals(10, int0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.2407816528705493
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("aZHdVw%qtP8A{Ng", true);
      jSONObject1.toString();
      String string0 = "Unterminated string";
      jSONObject1.accumulate("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}", "Unterminated string");
      int int0 = 34;
      jSONObject1.toString(34);
      try { 
        jSONObject1.getJSONArray("{\n                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                  \"java.lang.String@0000000004\": \"java.lang.String@0000000005\"\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n                                  \\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003,\\n                                  \\\"java.lang.String@0000000004\\\": \\\"java.lang.String@0000000005\\\"\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.321273974862009
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      Long.divideUnsigned(264L, (short) (-2362));
      Long.getLong("jHA!3){V9g9fX{S4s]", (Long) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHA!3){V9g9fX{S4s]";
      stringArray0[1] = "jHA!3){V9g9fX{S4s]";
      jSONObject0.optLong("jHA!3){V9g9fX{S4s]");
      JSONObject jSONObject1 = jSONObject0.put("jHA!3){V9g9fX{S4s]", (double) 0L);
      jSONObject0.put("ishashCode", (long) (short) (-2362));
      JSONObject jSONObject2 = jSONObject0.putOpt("Missing value", jSONObject1);
      jSONObject2.isNull("jHA!3){V9g9fX{S4s]");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject3 = jSONObject2.put("false", (Map) hashMap0);
      jSONObject3.getDouble("ishashCode");
      jSONObject3.optString("jHA!3){V9g9fX{S4s]", "Missing value");
      jSONObject0.getString("jHA!3){V9g9fX{S4s]");
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.775296392012404
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = ",a";
      jSONObject0.put(",a", (-267L));
      boolean boolean0 = new Boolean(",a");
      jSONObject0.optJSONArray(",a");
      jSONObject0.length();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Long.sum((-1L), 0L);
      String string1 = "mi{9?";
      jSONObject0.optString("mi{9?", ",a");
      JSONTokener jSONTokener0 = new JSONTokener("{&|R6");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {&|R6
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.9782629676683874
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      Long.getLong("jHA!3){V9g9fX{S4s]", long0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHA!3){V9g9fX{S4s]";
      stringArray0[1] = "jHA!3){V9g9fX{S4s]";
      Short short0 = new Short((short) (-2362));
      JSONObject jSONObject1 = jSONObject0.put("jHA!3){V9g9fX{S4s]", (double) short0);
      JSONObject jSONObject2 = jSONObject0.put("ishashCode", (long) (short) (-2362));
      jSONObject2.isNull("jHA!3){V9g9fX{S4s]");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      hashMap1.computeIfAbsent("null", function2);
      Integer.valueOf((int) (short) (-2362));
      Integer integer0 = new Integer(12);
      Integer.compareUnsigned((-1167), (short) (-2362));
      Integer integer1 = new Integer((short) (-2362));
      jSONObject0.opt("null");
      jSONObject1.accumulate("jHA!3){V9g9fX{S4s]", (Object) null);
      jSONObject0.optString("jHA!3){V9g9fX{S4s]");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.547869305259849
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("getgetJSONObject", (-1059L));
      jSONObject0.optLong("getgetJSONObject");
      JSONObject jSONObject2 = jSONObject1.put("getgetJSONObject", (double) 0L);
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      jSONObject2.put("getgetJSONObject", (-1059L));
      JSONObject jSONObject4 = jSONObject0.put("not", (double) (-1059L));
      jSONObject3.optInt("getgetJSONObject");
      JSONObject jSONObject5 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject5.optLong("}A/(m26");
      JSONObject.valueToString(jSONObject0, 0, 123);
      JSONObject jSONObject6 = jSONObject3.put("\r", 522L);
      jSONObject6.accumulate("not", "getgetJSONObject");
      jSONObject4.isNull("");
      Object object0 = jSONObject6.opt("getgetJSONObject");
      assertNull(object0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = (-1668);
      Integer integer0 = new Integer((-1668));
      JSONObject.quote("f`N\"%]/Q|_");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONTokener jSONTokener1 = new JSONTokener("isoptLong");
      jSONTokener1.next();
      jSONTokener1.nextClean();
      JSONTokener jSONTokener2 = new JSONTokener("getgetLong");
      jSONTokener2.skipTo('T');
      jSONTokener1.syntaxError("4IJI;ika\"2<qa4");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.7461860104551654
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      JSONObject.getNames(jSONObject0);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = jSONObject1.accumulate("] not found.", "] not found.");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("Lk>Mr`3@W", (Collection) linkedList0);
      jSONObject3.optBoolean("getvalueOf");
      JSONObject jSONObject4 = jSONObject2.append("] not found.", linkedList0);
      jSONObject4.optInt("");
      jSONObject3.accumulate("getvalueOf", "getvalueOf");
      JSONObject jSONObject5 = jSONObject0.put("JSON does not allow non-finite numbers.", (long) 0);
      jSONObject4.optLong((String) null);
      jSONObject3.put("]UMYMMc;Txyh'pNOkEc", (double) 0.0F);
      jSONObject1.putOpt("is", "");
      jSONObject1.isNull("A JSONArray text must start with '['");
      try { 
        jSONObject5.getInt("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      Long.compare((short) (-2362), (short) (-2362));
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf((String) null);
      Boolean.compare(false, false);
      linkedList1.add(boolean0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      linkedList1.clone();
      Integer integer0 = new Integer(46);
      Integer.valueOf((int) (short) (-2362));
      Integer integer1 = new Integer((-4949));
      Integer integer2 = new Integer((-1905));
      Integer integer3 = new Integer(964);
      jSONArray1.toJSONObject(jSONArray0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.88435274054966
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      Long.divideUnsigned(264L, (short) (-2362));
      Long.getLong("jHA!3){V9g9fX{S4s]", (Long) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHA!3){V9g9fX{S4s]";
      stringArray0[1] = "jHA!3){V9g9fX{S4s]";
      jSONObject0.optLong("jHA!3){V9g9fX{S4s]");
      String string0 = "has";
      JSONObject jSONObject1 = jSONObject0.put("has", (double) 0L);
      jSONObject0.put("jHA!3){V9g9fX{S4s]", (double) 0L);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.pollLast();
      jSONObject1.getInt("jHA!3){V9g9fX{S4s]");
      Double double0 = new Double((short) (-2362));
      linkedList2.add(double0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList2);
      JSONTokener jSONTokener0 = new JSONTokener("jHA!3){V9g9fX{S4s]");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of jHA!3){V9g9fX{S4s]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.026229622995291
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      Long.compare((short) (-2362), 0L);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      linkedList1.clone();
      Float float0 = new Float(0.0F);
      Long long0 = new Long(2219L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@]btL+<KID";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.accumulate("@]btL+<KID", jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject.doubleToString(2180.0797567946);
      int int0 = 898;
      Integer integer0 = new Integer(898);
      HashMap<String, Integer> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, Integer>((-1475), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1475
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject.doubleToString((-3896.0));
      Integer integer0 = new Integer((-1668));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap1.entrySet();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      Integer integer1 = new Integer(35);
      Integer integer2 = Integer.valueOf(35);
      Integer integer3 = new Integer(16);
      Integer integer4 = new Integer((-1668));
      Integer integer5 = new Integer(927);
      hashMap2.putIfAbsent("-3896", integer4);
      Integer integer6 = new Integer((-1616809897));
      assertFalse(integer6.equals((Object)integer2));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.026229622995291
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      Long.compare((short) (-2362), (short) (-2362));
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      linkedList1.clone();
      Float float0 = new Float((float) (short) (-2362));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`z";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.accumulate("`z", jSONArray1);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7422208751274784
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = new Long((-1073L));
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">E6VB/^t^2NB.m";
      String string0 = "Unclosed comment";
      Double.isFinite((-1073L));
      JSONObject jSONObject0 = new JSONObject((Object) ">E6VB/^t^2NB.m");
      JSONObject jSONObject1 = jSONObject0.put(">E6VB/^t^2NB.m", 2295);
      JSONObject jSONObject2 = jSONObject1.put("Unclosed comment", 119);
      jSONObject0.remove(">E6VB/^t^2NB.m");
      Object object0 = new Object();
      try { 
        jSONObject2.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6283356526043842
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Am>7G]Fz^O";
      jSONObject0.optBoolean("Am>7G]Fz^O", true);
      jSONObject0.put("Am>7G]Fz^O", true);
      try { 
        jSONObject0.getDouble("Am>7G]Fz^O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Am>7G]Fz^O\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.784275033922914
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      Long.getLong("jHA!3){V9g9fX{S4s]", long0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHA!3){V9g9fX{S4s]";
      stringArray0[1] = "jHA!3){V9g9fX{S4s]";
      long long1 = new Short((short) (-2362));
      jSONObject0.put("jHA!3){V9g9fX{S4s]", (double) (short) (-2362));
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (long) (short) (-2362));
      jSONObject1.isNull("jHA!3){V9g9fX{S4s]");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      hashMap1.computeIfAbsent("null", function2);
      Integer.valueOf((int) (short) (-2362));
      Integer integer0 = new Integer(12);
      Integer.compareUnsigned((-1167), (short) (-2362));
      Integer integer1 = new Integer((short) (-2362));
      hashMap1.putIfAbsent("NU4j9Tql'9", integer0);
      jSONObject1.put(";|F VJOw+o", false);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONArray> hashMap1 = new HashMap<Double, JSONArray>();
      try { 
        jSONObject0.getDouble("] nNtMfound.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] nNtMfound.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.7041112757296575
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Float float0 = new Float(3018.7F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optBoolean("Sw8IY,s]50Hzv");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.0305183578627015
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(1.0, 1.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString("jhmvvAO");
      Double.isFinite(0.0);
      jSONObject0.optInt(".ib~T[ s}LeM");
      Double.isFinite(0.0);
      JSONObject jSONObject3 = jSONObject1.put("jhmvvAO", 11);
      jSONObject3.put("jhmvvAO", 125);
      jSONObject3.remove(".ib~T[ s}LeM");
      Object object0 = new Object();
      try { 
        jSONObject2.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6565511266966535
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("gKJ+HtF,|hxhB_B", biFunction0);
      Integer integer0 = new Integer(122);
      Integer integer1 = new Integer(2884);
      hashMap0.putIfAbsent("gKJ+HtF,|hxhB_B", integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer2 = new Integer(122);
      Object object0 = new Object();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("1.0", integer2);
      jSONObject1.put("gKJ+HtF,|hxhB_B", (-2335));
      Object object1 = new Object();
      String string0 = "1.00";
      jSONObject1.put("1.00", (Object) null);
      try { 
        jSONObject1.getJSONObject("isjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isjoin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.9561874676604514
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("A JSONArray text must start with '['", "A JSONArray text must start with '['");
      JSONArray jSONArray0 = jSONObject0.names();
      String string0 = "";
      Long long0 = new Long(0L);
      int int0 = 125;
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        Integer.valueOf("add", 4329);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 4329 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(25L);
      Long.divideUnsigned(25L, 264L);
      Long.getLong("A JSONArray text must start with '['", long0);
      Long.sum(197L, 0L);
      String string0 = "mi{9?";
      jSONObject0.optString("A JSONArray text must start with '['", "mi{9?");
      JSONTokener jSONTokener0 = new JSONTokener("{&|R6");
      JSONTokener jSONTokener1 = new JSONTokener("isreverseBytes");
      jSONObject0.toString(110, 0);
      Integer.divideUnsigned(44, (-3368));
      try { 
        jSONObject0.getDouble("{&|R6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{&|R6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float float0 = new Float(1457.1774605);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`qxr`z7";
      stringArray0[1] = "isclear";
      stringArray0[2] = "/iwcl";
      stringArray0[3] = "\"d*}]_ |2uctD!";
      stringArray0[4] = "oEzpz";
      stringArray0[5] = "iscomputeIfAbsent";
      stringArray0[6] = "6Gwk5]?VS0";
      stringArray0[7] = "Unclosed comment";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0579054247036734
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("get", long0);
      Long.remainderUnsigned(268L, 268L);
      String string0 = Long.toUnsignedString(268L);
      Long.getLong("get", 2078L);
      Long.max(0L, (-769L));
      String string1 = JSONObject.valueToString(long1, 0, 0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 115
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Object object0 = new Object();
      JSONObject.getNames(object0);
      int int0 = 68;
      Integer integer0 = new Integer(68);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      int int1 = 93;
      try { 
        Integer.valueOf("[<1$Pn\r", 93);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 93 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.9132338730729916
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((short) (-2362));
      Long.getLong("jHA!3){V9g9fX{S4s]", long0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHA!3){V9g9fX{S4s]";
      stringArray0[1] = "jHA!3){V9g9fX{S4s]";
      jSONObject0.optLong("jHA!3){V9g9fX{S4s]");
      JSONObject jSONObject1 = jSONObject0.put("jHA!3){V9g9fX{S4s]", (double) 0L);
      jSONObject1.optInt("L:H 9UG_~RN", (int) (short) (-2362));
      JSONTokener jSONTokener0 = new JSONTokener("jHA!3){V9g9fX{S4s]");
      JSONTokener jSONTokener1 = new JSONTokener("{&|R6");
      jSONTokener0.next();
      jSONTokener1.nextClean();
      JSONTokener jSONTokener2 = new JSONTokener("8`Me");
      jSONTokener2.syntaxError("ishashCode");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of jHA!3){V9g9fX{S4s]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.851937179228349
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long.sum((-1L), 0L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("ad");
      JSONObject jSONObject1 = jSONObject0.put("wai", 0L);
      String string0 = "Substring bounds error";
      jSONObject0.append("'m><+74", jSONObject1);
      Integer integer0 = new Integer(0);
      Double double0 = new Double(1047);
      JSONObject.getNames((Object) null);
      jSONObject0.has("Substring bounds error");
      try { 
        jSONObject1.get("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.597782813677228
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      jSONObject0.toString(34);
      jSONObject1.toString(123, (-1516));
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}");
      jSONObject1.optBoolean("{}");
      String string0 = "&]t;";
      Long long0 = new Long(34);
      jSONObject0.optDouble("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}", 1.0);
      Long.getLong("&]t;", long0);
      jSONObject1.optLong("false");
      try { 
        jSONObject1.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float(0.0F);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.entrySet();
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("{N", biFunction0);
      BiFunction<String, Object, Integer> biFunction1 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("] not found.", biFunction1);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Float float1 = new Float((double) 0L);
      Float.max((-777.4402F), 0L);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.801748898507305
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      jSONObject0.optInt("] not found.", (-30710023));
      assertEquals(1, jSONObject0.length());
      
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = jSONObject1.accumulate("] not found.", "] not found.");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("Lk>Mr`3@W", (Collection) linkedList0);
      jSONObject3.optBoolean("getvalueOf");
      JSONObject jSONObject4 = jSONObject2.append("] not found.", linkedList0);
      jSONObject3.optDouble("K>Dh!ijjVj", (double) 0.0F);
      jSONObject4.optInt("");
      String string0 = jSONObject4.toString((-30710023), 13);
      jSONObject0.put("] not found.", (long) 0);
      jSONObject4.optLong((String) null);
      jSONObject3.put("]UMYMMc;Txyh'pNOkEc", 1439.53);
      JSONObject jSONObject5 = jSONObject1.putOpt("is", "");
      jSONObject5.optDouble("getvalueOf");
      jSONObject1.isNull("A JSONArray text must start with '['");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "Lk>Mr`3@W");
      String string1 = jSONObject1.toString(24, 52);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.8304718909545767
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Float float0 = new Float(0.0F);
      jSONObject1.accumulate("] not found.", "] not found.");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      Long long0 = new Long((-1449L));
      Long.getLong("JSONArray initial value should be a string or collection or array.", long0);
      Long.remainderUnsigned(4876L, (-1449L));
      Long.toUnsignedString(4876L);
      Long.getLong(">v@H`vs4+J", (-1L));
      Long.max(4876L, 0L);
      JSONObject.valueToString(jSONObject1, (-1000), (-2942));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] not found.", "] not found.");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] not found.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Long long0 = new Long((-1073L));
      Long.compare(155L, 607L);
      Long.sum((-3371L), (-2108L));
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">E6VB/^t^2NB.m";
      stringArray0[1] = "Unclosed comment";
      Long.compareUnsigned((-1), (-732L));
      stringArray0[2] = "isequals";
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer(47);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean.valueOf("'3<");
      Boolean boolean0 = new Boolean("wld$");
      Boolean.compare(false, false);
      linkedList0.add(boolean0);
      Boolean.compare(false, true);
      Boolean boolean1 = Boolean.valueOf("'3<");
      linkedList0.add(boolean1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<HashMap<Double, Boolean>> linkedList1 = new LinkedList<HashMap<Double, Boolean>>();
      Float float0 = new Float((float) 47);
      Float float1 = new Float((-1.0));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'3<";
      stringArray0[1] = "'";
      stringArray0[2] = "'";
      stringArray0[3] = "'3<";
      stringArray0[4] = "'3<";
      stringArray0[5] = "'3<";
      stringArray0[6] = "'";
      JSONObject jSONObject0 = new JSONObject(float1, stringArray0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<JSONArray, JSONArray> hashMap1 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.getJSONArray("'3<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'3<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.put("", (-267L));
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.2732403025492036
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "r^1b}le=z_<Gud";
      stringArray0[1] = "RY-#X{Q_kvy:jQvCZ(";
      stringArray0[2] = "2wC}";
      stringArray0[3] = "";
      stringArray0[4] = "Null pointe!r";
      stringArray0[5] = "java.lqng.Float@00000000010";
      stringArray0[6] = "{}";
      stringArray0[7] = "~8QmX?^+>RY";
      stringArray0[8] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = JSONObject.valueToString("", (-2200), (-2200));
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Long long0 = new Long(2824L);
      Long.compare((-5103L), 1L);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.entrySet();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.keySet();
      String string0 = JSONObject.quote("3GtWw}3#yB3LMp");
      assertEquals("\"3GtWw}3#yB3LMp\"", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Long long0 = new Long((-1073L));
      Long.sum((-3371L), (-2108L));
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">E6VB/^t^2NB.m";
      stringArray0[1] = "Unclosed comment";
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("11S\"  P} ,c+<)?/Z)");
      assertEquals("", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList2 = new LinkedList<Boolean>(linkedList1);
      linkedList2.clone();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("N( kfo,Xm-d#>;z1x");
      linkedList3.add("ZUZ8Chq\" u#|Y5^s)_w");
      Byte byte0 = new Byte((byte)58);
      String[] stringArray0 = new String[7];
      Float float0 = new Float((-184.3222F));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getInt("ZUZ8Chq\" u#|Y5^s)_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZUZ8Chq\\\" u#|Y5^s)_w\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
