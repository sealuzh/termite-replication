* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: client.network.ClientMsgReceiver
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/57_hft-bomberman/evosuite-files/evosuite.properties
* Connecting to master process on port 18042
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:04:48.135 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:04:48.139 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:04:48.149 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 18:04:48.463 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 18:04:48.463 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 18:04:48.463 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 18:04:49.076 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 18:04:49.076 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 18:04:49.077 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 18:04:49.077 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 18:04:49.077 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 18:04:49.077 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 18:04:49.078 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 18:04:49.078 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 18:04:49.079 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 18:04:51.475 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 18:04:51.493 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class client.network.ClientMsgReceiver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/57_hft-bomberman/src/main/java/client/network/ClientMsgReceiver.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1026
* Starting evolution
[MASTER] 18:05:02.845 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 18:05:09.200 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] client.network.ClientMsgReceiver.displayErrorMessage()V
[MASTER] 18:05:25.709 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] client.network.ClientMsgReceiver.closeConnection()V
[MASTER] 18:05:55.339 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] client.network.ClientMsgReceiver.handleConnectionLoss(Ljava/lang/Exception;)V
[MASTER] 18:05:56.000 [logback-1] WARN  ClassResetter - class java.lang.reflect.InvocationTargetException thrown during execution of method  __STATIC_RESET() for class client.BomberClient, java.lang.NullPointerException
* Search finished after 118s and 208 generations, 160230 statements, best individual has fitness: 352.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 47%
* Total number of goals: 36
* Number of covered goals: 17
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 47%
* Total number of goals: 15
* Number of covered goals: 7
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 36%
* Total number of goals: 14
* Number of covered goals: 5
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 47%
* Total number of goals: 15
* Number of covered goals: 7
* Generated 10 tests with total length 271
* Resulting test suite's coverage: 54% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 18:06:55.409 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.awt.HeadlessException: null
[MASTER] 18:06:55.410 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling.shouldAllThrowIOExceptions();
Proxy proxy0 = Proxy.NO_PROXY;
MockSocket mockSocket0 = new MockSocket();
ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
ClassLoader classLoader2 = classLoader1.getParent();
classLoader0.setClassAssertionStatus("GDfRO", true);
classLoader0.setDefaultAssertionStatus(true);
ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
classLoader1.clearAssertionStatus();
ClassLoader classLoader4 = ClassLoader.getSystemClassLoader();
classLoader0.setDefaultAssertionStatus(true);
classLoader4.setPackageAssertionStatus("GDfRO", false);
classLoader0.setClassAssertionStatus("GDfRO", true);
classLoader1.clearAssertionStatus();
ClassLoader classLoader5 = ClassLoader.getSystemClassLoader();
classLoader0.setPackageAssertionStatus("GDfRO", true);
RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
classLoader0.setClassAssertionStatus((String) null, true);
classLoader0.clearAssertionStatus();
ClassLoader.getSystemClassLoader();
ClassLoader.getSystemClassLoader();
classLoader4.setPackageAssertionStatus(":", true);
classLoader5.setPackageAssertionStatus(":", true);
ClassLoader classLoader6 = classLoader3.getParent();
classLoader0.setDefaultAssertionStatus(true);
classLoader6.getParent();
LogManager.setRepositorySelector(repositorySelector0, (Object) null);
classLoader2.setClassAssertionStatus(":", true);
ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
clientMsgReceiver0.handleConnectionLoss((Exception) null);

[MASTER] 18:06:55.714 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.awt.HeadlessException: null
[MASTER] 18:06:55.715 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling.shouldAllThrowIOExceptions();
MockSocket mockSocket0 = new MockSocket();
ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
ClassLoader classLoader1 = classLoader0.getParent();
ClassLoader.getSystemClassLoader();
classLoader1.setDefaultAssertionStatus(false);
classLoader1.setPackageAssertionStatus("Oo&Cj", false);
classLoader0.setClassAssertionStatus("Oo&Cj", false);
classLoader0.setDefaultAssertionStatus(true);
classLoader0.setDefaultAssertionStatus(true);
ClassLoader.getSystemClassLoader();
classLoader1.clearAssertionStatus();
ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
classLoader0.setDefaultAssertionStatus(false);
classLoader2.getParent();
classLoader1.setPackageAssertionStatus("Oo&Cj", false);
classLoader1.clearAssertionStatus();
ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
classLoader0.setPackageAssertionStatus("DRO", true);
classLoader0.clearAssertionStatus();
ClassLoader.getSystemClassLoader();
classLoader2.setPackageAssertionStatus("Co5ldn't createIOjectInputSqream!", true);
classLoader3.setPackageAssertionStatus("Co5ldn't createIOjectInputSqream!", false);
ClassLoader.getSystemClassLoader();
ClassLoader.getSystemClassLoader();
classLoader0.setClassAssertionStatus("Gi@i7'l", false);
classLoader0.setClassAssertionStatus("DRO", false);
ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
clientMsgReceiver0.displayErrorMessage();

[MASTER] 18:06:55.986 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 18:06:55.986 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Proxy proxy0 = Proxy.NO_PROXY;
MockSocket mockSocket0 = new MockSocket(proxy0);
BomberClient bomberClient0 = BomberClient.getInstance();
SessionListMsg sessionListMsg0 = new SessionListMsg();
byte[] byteArray0 = new byte[6];
byte byte0 = (byte) (-6);
byteArray0[0] = byte0;
byteArray0[0] = byte0;
byte byte1 = (byte)1;
byteArray0[2] = byte1;
byte byte2 = (byte) (-1);
byteArray0[3] = byte2;
byte byte3 = (byte) (-123);
byteArray0[4] = byte3;
byte byte4 = (byte) (-61);
byteArray0[4] = byte4;
String string0 = null;
ArrayList<String> arrayList0 = new ArrayList<String>();
byte[] byteArray1 = new byte[4];
byte byte5 = (byte)0;
byteArray1[1] = byte5;
byte byte6 = (byte)100;
byteArray1[2] = byte3;
byte byte7 = (byte)115;
byteArray1[3] = byte7;
String string1 = "1T1l1t+io/d6cM";
ImageIcon imageIcon0 = new ImageIcon(byteArray1, string1);
int int0 = 24;
SessionDetailsMsg sessionDetailsMsg0 = new SessionDetailsMsg(string0, arrayList0, imageIcon0, int0, byte6, byteArray1[2]);
sessionListMsg0.addSessionInfo(sessionDetailsMsg0);
int int1 = (-3366);
CountdownMsg countdownMsg0 = new CountdownMsg(int1);
ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
Message message0 = null;
clientMsgReceiver0.processMsg(message0);
assertFalse(clientMsgReceiver0.isDaemon());


[MASTER] 18:06:56.597 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.awt.HeadlessException: null
[MASTER] 18:06:56.598 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
Proxy proxy0 = Proxy.NO_PROXY;
MockSocket mockSocket0 = new MockSocket(proxy0);
EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 1);
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ERROR");
NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Couldn't create ObjectInputStream!");
FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ERROR");
ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
classLoader0.getParent();
ClassLoader classLoader1 = classLoader0.getParent();
RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
classLoader1.clearAssertionStatus();
LogManager.setRepositorySelector(repositorySelector0, classLoader1);
classLoader1.setClassAssertionStatus("q%JzOL%9P!$*K)", false);
System.setCurrentTimeMillis((-2295L));
System.setCurrentTimeMillis(0L);
ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
GlobalStateMsg globalStateMsg0 = new GlobalStateMsg(1);
clientMsgReceiver0.processMsg(globalStateMsg0);

[MASTER] 18:06:57.242 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 18:06:57.242 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Proxy proxy0 = Proxy.NO_PROXY;
MockSocket mockSocket0 = new MockSocket(proxy0);
BomberClient bomberClient0 = BomberClient.getInstance();
SessionListMsg sessionListMsg0 = new SessionListMsg();
byte[] byteArray0 = new byte[6];
byte byte0 = (byte)0;
byteArray0[0] = byte0;
int int0 = 1;
int int1 = 1;
GlobalStateMsg globalStateMsg0 = new GlobalStateMsg(int1);
Integer integer0 = JLayeredPane.POPUP_LAYER;
Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
String string0 = "";
EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 1);
boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
GlobalChatMsg globalChatMsg0 = new GlobalChatMsg(string0);
MockSocket mockSocket1 = new MockSocket(proxy0);
ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket1, bomberClient0);
SessionParticipationMsg sessionParticipationMsg0 = new SessionParticipationMsg(boolean0, int0, string0);
clientMsgReceiver0.processMsg(sessionParticipationMsg0);
assertFalse(clientMsgReceiver0.isDaemon());


* Permissions denied during test execution: 
  - java.io.FilePermission: 
         read,write,delete /tmp/*: 1
  - java.net.SocketPermission: 
         resolve localhost: 1
  - java.sql.SQLPermission: 
         setLog: 22
* Writing JUnit test case 'ClientMsgReceiver_ESTest' to /home/ubuntu/termite/qmosa/tests/s1026/57_hft-bomberman/evosuite-tests
* Done!

* Computation finished
