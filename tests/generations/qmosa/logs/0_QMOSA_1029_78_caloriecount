* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.application.international.MessageFormatter
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 14422
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:28:03.413 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:28:03.416 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:28:03.417 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:28:03.675 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:28:04.106 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:28:04.116 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.application.international.MessageFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/application/international/MessageFormatter.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1029
* Starting evolution
[MASTER] 01:28:16.506 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 01:31:46.828 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
* Search finished after 623s and 651 generations, 675032 statements, best individual has fitness: 592.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 91%
* Total number of goals: 130
* Number of covered goals: 118
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 52
* Number of covered goals: 46
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 150
* Number of covered goals: 141
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 36%
* Total number of goals: 50
* Number of covered goals: 18
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 52
* Number of covered goals: 46
* Generated 44 tests with total length 754
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 23%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing JUnit test case 'MessageFormatter_ESTest' to /home/ubuntu/termite/qmosa/tests/s1029/78_caloriecount/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.io.ArchiveScanner
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 14423
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:52:39.735 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:52:39.773 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:52:39.774 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:52:40.000 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:52:40.294 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:52:40.295 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.io.ArchiveScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/io/ArchiveScanner.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1029
* Starting evolution
[MASTER] 02:53:33.572 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 02:56:21.976 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 649s and 899 generations, 970412 statements, best individual has fitness: 696.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 75%
* Total number of goals: 67
* Number of covered goals: 50
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 71%
* Total number of goals: 45
* Number of covered goals: 32
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 80%
* Total number of goals: 202
* Number of covered goals: 161
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 71%
* Total number of goals: 45
* Number of covered goals: 32
* Generated 36 tests with total length 1091
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 32%
* Compiling and checking tests
[MASTER] 03:03:42.390 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_30_1574219022368/com/lts/io/ArchiveScanner_30_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_30_1574219022368/com/lts/io/ArchiveScanner_30_tmp__ESTest_scaffolding.java]]
[MASTER] 03:03:42.391 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/78_caloriecount/caloriecount.jar:/home/ubuntu/termite/projects/78_caloriecount/lib/swingx-0.9.2.jar:/home/ubuntu/termite/projects/78_caloriecount/lib/jlfgr-1_0.jar:/home/ubuntu/termite/projects/78_caloriecount/lib/swingx.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/78_caloriecount/caloriecount.jar:/home/ubuntu/termite/projects/78_caloriecount/lib/swingx-0.9.2.jar:/home/ubuntu/termite/projects/78_caloriecount/lib/jlfgr-1_0.jar:/home/ubuntu/termite/projects/78_caloriecount/lib/swingx.jar
[MASTER] 03:03:42.391 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/78_caloriecount/caloriecount.jar:/home/ubuntu/termite/projects/78_caloriecount/lib/swingx-0.9.2.jar:/home/ubuntu/termite/projects/78_caloriecount/lib/jlfgr-1_0.jar:/home/ubuntu/termite/projects/78_caloriecount/lib/swingx.jar
[MASTER] 03:03:42.393 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable boolean1
  location: class com.lts.io.ArchiveScanner_30_tmp__ESTest: 67
[MASTER] 03:03:42.393 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_30_1574219022368/com/lts/io/ArchiveScanner_30_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:03:42.393 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:03:42.394 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_30_1574219022368/com/lts/io/ArchiveScanner_30_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Nov 20 03:03:42 GMT 2019
4:  */
5: 
6: package com.lts.io;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import com.lts.io.ArchiveScanner;
12: import com.lts.io.ImprovedFile;
13: import java.util.Vector;
14: import java.util.function.Consumer;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class ArchiveScanner_30_tmp__ESTest extends ArchiveScanner_30_tmp__ESTest_scaffolding {
22: 
23:   /**
24:   //Test case number: 0
25:   /*Coverage entropy=1.0365141682948127
26:   */
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       ImprovedFile improvedFile0 = new ImprovedFile("U<.4Um8n~LV4[(");
30:       ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
31:       String[] stringArray0 = new String[25];
32:       stringArray0[0] = "U<.4Um8n~LV4[(";
33:       stringArray0[1] = "U<.4Um8n~LV4[(";
34:       stringArray0[9] = "U<.4Um8n~LV4[(";
35:       stringArray0[4] = "U<.4Um8n~LV4[(";
36:       archiveScanner0.excludes = stringArray0;
37:       stringArray0[6] = "U<.4Um8n~LV4[(";
38:       archiveScanner0.includes = stringArray0;
39:       Vector<Object> vector0 = new Vector<Object>();
40:       Vector<Object> vector1 = new Vector<Object>();
41:       Object object0 = new Object();
42:       vector1.add((Object) "U<.4Um8n~LV4[(");
43:       vector0.add(object0);
44:       Object object1 = new Object();
45:       vector1.add((Object) "U<.4Um8n~LV4[(");
46:       Object object2 = new Object();
47:       vector0.add(object2);
48:       vector0.containsAll(vector1);
49:       Object object3 = new Object();
50:       vector1.add((Object) "U<.4Um8n~LV4[(");
51:       vector1.add((Object) vector0);
52:       Vector<Integer> vector2 = new Vector<Integer>();
53:       archiveScanner0.filesExcluded = vector2;
54:       Object object4 = new Object();
55:       Object object5 = new Object();
56:       Object object6 = new Object();
57:       vector1.add(object6);
58:       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
59:       vector1.forEach(consumer0);
60:       vector1.add(object5);
61:       Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
62:       vector1.forEach(consumer1);
63:       Vector<Object> vector3 = new Vector<Object>();
64:       Integer integer0 = new Integer((-1));
65:       archiveScanner0.processFile("U<.4Um8n~LV4[(");
66:       boolean boolean0 = archiveScanner0.haveSlowResults;
67:       assertFalse(boolean0 == boolean1);
68:   }
69: }
RegularFileObject[/tmp/EvoSuite_30_1574219022368/com/lts/io/ArchiveScanner_30_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Nov 20 03:03:42 GMT 2019
5:  */
6: 
7: package com.lts.io;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class ArchiveScanner_30_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "com.lts.io.ArchiveScanner"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
78:     java.lang.System.setProperty("java.awt.headless", "true"); 
79:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
80:     java.lang.System.setProperty("user.country", "US"); 
81:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/78_caloriecount"); 
82:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
83:     java.lang.System.setProperty("user.language", "en"); 
84:     java.lang.System.setProperty("user.name", "ubuntu"); 
85:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
86:   }
87: 
88:   private static void initializeClasses() {
89:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ArchiveScanner_30_tmp__ESTest_scaffolding.class.getClassLoader() ,
90:       "com.lts.LTSException",
91:       "com.lts.io.archive.AbstractTempDirectoryArchive",
92:       "com.lts.io.DirectoryScanner",
93:       "com.lts.io.archive.ArchiveTreeNode",
94:       "com.lts.util.deepcopy.DeepCopier",
95:       "com.lts.io.archive.AbstractNestedArchive",
96:       "com.lts.io.archive.ZipArchive",
97:       "com.lts.io.ArchiveScanner",
98:       "com.lts.io.archive.DefaultNestedArchive",
99:       "com.lts.util.TreeNode",
100:       "com.lts.io.archive.Archive",
101:       "com.lts.io.ImprovedFile",
102:       "com.lts.util.deepcopy.DeepCopyException",
103:       "com.lts.io.IOUtilities",
104:       "com.lts.io.ImprovedFile$FileException",
105:       "com.lts.io.archive.NestedArchive"
106:     );
107:   } 
108:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
109:     mock(Class.forName("java.util.function.Consumer", false, ArchiveScanner_30_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ArchiveScanner_30_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "com.lts.io.DirectoryScanner",
117:       "com.lts.io.ArchiveScanner",
118:       "com.lts.io.ImprovedFile",
119:       "com.lts.io.archive.AbstractNestedArchive",
120:       "com.lts.io.archive.DefaultNestedArchive",
121:       "com.lts.io.archive.AbstractTempDirectoryArchive",
122:       "com.lts.io.archive.ZipArchive",
123:       "com.lts.io.IOUtilities",
124:       "com.lts.util.TreeNode",
125:       "com.lts.io.archive.ArchiveTreeNode",
126:       "com.lts.LTSException",
127:       "com.lts.io.ImprovedFile$FileException",
128:       "com.lts.io.ImprovedFile$Reason"
129:     );
130:   }
131: }

[MASTER] 03:03:42.394 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
ImprovedFile improvedFile0 = new ImprovedFile("U<.4Um8n~LV4[(");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
String[] stringArray0 = new String[25];
stringArray0[0] = "U<.4Um8n~LV4[(";
stringArray0[1] = "U<.4Um8n~LV4[(";
stringArray0[9] = "U<.4Um8n~LV4[(";
stringArray0[4] = "U<.4Um8n~LV4[(";
archiveScanner0.excludes = stringArray0;
stringArray0[6] = "U<.4Um8n~LV4[(";
archiveScanner0.includes = stringArray0;
Vector<Object> vector0 = new Vector<Object>();
Vector<Object> vector1 = new Vector<Object>();
Object object0 = new Object();
vector1.add((Object) "U<.4Um8n~LV4[(");
vector0.add(object0);
Object object1 = new Object();
vector1.add((Object) "U<.4Um8n~LV4[(");
Object object2 = new Object();
vector0.add(object2);
vector0.containsAll(vector1);
Object object3 = new Object();
vector1.add((Object) "U<.4Um8n~LV4[(");
vector1.add((Object) vector0);
Vector<Integer> vector2 = new Vector<Integer>();
archiveScanner0.filesExcluded = vector2;
Object object4 = new Object();
Object object5 = new Object();
Object object6 = new Object();
vector1.add(object6);
Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
vector1.forEach(consumer0);
vector1.add(object5);
Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
vector1.forEach(consumer1);
Vector<Object> vector3 = new Vector<Object>();
Integer integer0 = new Integer((-1));
archiveScanner0.processFile("U<.4Um8n~LV4[(");
boolean boolean0 = archiveScanner0.haveSlowResults;
assertFalse(boolean0 == boolean1);


[MASTER] 03:03:43.224 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 03:03:43.226 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[1];
ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
ImprovedFile improvedFile0 = new ImprovedFile("6dToCy");
ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
MockPrintStream mockPrintStream0 = new MockPrintStream(">a 7c8F ");
CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "6dToCy");
charBuffer0.codePoints();
CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
char[] charArray0 = new char[3];
charArray0[0] = '8';
charArray0[1] = '_';
charArray0[2] = '_';
mockPrintStream0.println(charArray0);
MockPrintStream mockPrintStream2 = new MockPrintStream(improvedFile0);
MockPrintStream mockPrintStream3 = new MockPrintStream(mockPrintStream1, false);
mockPrintStream0.println(0.0);
PrintStream printStream0 = mockPrintStream0.append((CharSequence) charBuffer1);
ImprovedFile.copy(byteArrayInputStream0, printStream0);
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
int int0 = archiveScanner0.toFileType(improvedFile0);
assertEquals(2, int0);


[MASTER] 03:03:43.382 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:03:43.383 [logback-1] WARN  JUnitAnalyzer - Failing test:
 String[] stringArray0 = new String[13];
stringArray0[1] = stringArray0[0];
stringArray0[3] = stringArray0[1];
stringArray0[4] = stringArray0[1];
stringArray0[6] = stringArray0[4];
Vector<Object> vector0 = new Vector<Object>();
Object object0 = new Object();
Object object1 = new Object();
vector0.add((Object) stringArray0[4]);
Object object2 = new Object();
Predicate<Object> predicate0 = Predicate.isEqual(object2);
Predicate<Object> predicate1 = predicate0.negate();
Predicate<Object> predicate2 = predicate0.or(predicate1);
predicate2.test(stringArray0[3]);
Object object3 = new Object();
Object object4 = new Object();
vector0.add(object4);
vector0.add(object3);
vector0.containsAll(vector0);
Object object5 = new Object();
vector0.add((Object) stringArray0[0]);
vector0.add((Object) vector0);
Object object6 = new Object();
Vector<Object> vector1 = new Vector<Object>();
Object object7 = new Object();
vector0.add(object6);
Object object8 = new Object();
vector0.add(object8);
vector0.add(object0);
Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
vector0.forEach(consumer0);
Vector<Object> vector2 = new Vector<Object>();
ImprovedFile improvedFile0 = new ImprovedFile("yyyy-MM-dd@HH:mm:ss", "h0-b9O-pf");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
archiveScanner0.haveSlowResults = true;
boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
assertTrue(boolean0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing JUnit test case 'ArchiveScanner_ESTest' to /home/ubuntu/termite/qmosa/tests/s1029/78_caloriecount/evosuite-tests
* Done!

* Computation finished
