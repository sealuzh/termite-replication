* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 21002
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 13:42:35.531 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 13:42:35.531 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 13:42:35.534 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 13:42:35.575 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 13:42:35.587 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 13:42:35.588 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 13:42:35.692 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 13:42:35.693 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 13:42:35.694 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 13:42:35.694 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 13:42:35.695 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 13:42:35.696 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 13:42:35.696 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 13:42:35.699 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 13:42:35.700 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/assembly/consed/phd/PhdBuilder.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1025
* Starting evolution
* Search finished after 668s and 1172 generations, 440184 statements, best individual has fitness: 240.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 93
* Number of covered goals: 86
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 27
* Number of covered goals: 22
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 47
* Number of covered goals: 43
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 16
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 27
* Number of covered goals: 22
* Generated 24 tests with total length 531
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'PhdBuilder_ESTest' to /home/ubuntu/termite/qmosa/tests/s1025/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 21003
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 14:17:18.678 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 14:17:18.688 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 14:17:18.705 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 14:17:18.748 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1025
* Starting evolution
[MASTER] 14:17:19.767 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 14:17:19.768 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 14:19:32.029 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 841s and 192 generations, 145068 statements, best individual has fitness: 368.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 131
* Number of covered goals: 130
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 99%
* Total number of goals: 74
* Number of covered goals: 73
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 46
* Number of covered goals: 46
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 469
* Number of covered goals: 463
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 63%
* Total number of goals: 52
* Number of covered goals: 33
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 74
* Number of covered goals: 61
* Generated 74 tests with total length 1792
* Resulting test suite's coverage: 95% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 67%
* Compiling and checking tests
[MASTER] 14:32:24.149 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_24_1574173944129/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec_24_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_24_1574173944129/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec_24_tmp__ESTest_scaffolding.java]]
[MASTER] 14:32:24.149 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/92_jcvi-javacommon/jcvi-javacommon.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/92_jcvi-javacommon/jcvi-javacommon.jar
[MASTER] 14:32:24.149 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/92_jcvi-javacommon/jcvi-javacommon.jar
[MASTER] 14:32:24.151 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable byteArray1
  location: class org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec_24_tmp__ESTest: 32
[MASTER] 14:32:24.152 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_24_1574173944129/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec_24_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 19 14:32:24 GMT 2019
4:  */
5: 
6: package org.jcvi.jillion.core.residue.nt;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.Collection;
11: import java.util.Set;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
15: import org.jcvi.jillion.core.residue.nt.Nucleotide;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class DefaultNucleotideCodec_24_tmp__ESTest extends DefaultNucleotideCodec_24_tmp__ESTest_scaffolding {
20: 
21:   /**
22:   //Test case number: 0
23:   /*Coverage entropy=2.5035870903352846
24:   */
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
28:       Nucleotide nucleotide0 = Nucleotide.Guanine;
29:       Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
30:       defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
31:       byte[] byteArray0 = new byte[4];
32:       assertFalse(byteArray0.equals((Object)byteArray1));
33:   }
34: }
RegularFileObject[/tmp/EvoSuite_24_1574173944129/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec_24_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 19 14:32:24 GMT 2019
5:  */
6: 
7: package org.jcvi.jillion.core.residue.nt;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultNucleotideCodec_24_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/92_jcvi-javacommon"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultNucleotideCodec_24_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "org.jcvi.jillion.core.Range$EmptyIntRange",
89:       "org.jcvi.jillion.core.Range$ByteRange",
90:       "org.jcvi.jillion.core.Range$ShortRange",
91:       "org.jcvi.jillion.core.residue.Residue",
92:       "org.jcvi.jillion.core.Range$Builder",
93:       "org.jcvi.jillion.core.io.IOUtil",
94:       "org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache",
95:       "org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache",
96:       "org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec",
97:       "org.jcvi.jillion.core.Range",
98:       "org.jcvi.jillion.core.residue.nt.NucleotideCodec",
99:       "org.jcvi.jillion.core.Rangeable",
100:       "org.jcvi.jillion.core.Range$EmptyByteRange",
101:       "org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange",
102:       "org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl",
103:       "org.jcvi.jillion.core.Range$1",
104:       "org.jcvi.jillion.core.Range$RangeIterator",
105:       "org.jcvi.jillion.core.util.MapUtil",
106:       "org.jcvi.jillion.core.residue.nt.Nucleotide",
107:       "org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange",
108:       "org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream",
109:       "org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange",
110:       "org.jcvi.jillion.core.Range$CoordinateSystem",
111:       "org.jcvi.jillion.core.Range$EmptyShortRange",
112:       "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange",
113:       "org.jcvi.jillion.core.Range$LongRange",
114:       "org.jcvi.jillion.core.Range$LongStartIntLengthRange",
115:       "org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange",
116:       "org.jcvi.jillion.core.Range$IntRange",
117:       "org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange",
118:       "org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange",
119:       "org.jcvi.jillion.core.Range$EmptyLongRange",
120:       "org.jcvi.jillion.internal.core.util.Caches",
121:       "org.jcvi.jillion.internal.core.GlyphCodec",
122:       "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange"
123:     );
124:   } 
125: 
126:   private static void resetClasses() {
127:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultNucleotideCodec_24_tmp__ESTest_scaffolding.class.getClassLoader()); 
128: 
129:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
130:       "org.jcvi.jillion.core.residue.nt.Nucleotide",
131:       "org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec",
132:       "org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl",
133:       "org.jcvi.jillion.internal.core.util.Caches",
134:       "org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache",
135:       "org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache",
136:       "org.jcvi.jillion.core.util.MapUtil",
137:       "org.jcvi.jillion.core.Range",
138:       "org.jcvi.jillion.core.Range$Builder",
139:       "org.jcvi.jillion.core.Range$EmptyByteRange",
140:       "org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange",
141:       "org.jcvi.jillion.core.io.IOUtil",
142:       "org.jcvi.jillion.core.Range$ShortRange",
143:       "org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange",
144:       "org.jcvi.jillion.core.Range$RangeIterator",
145:       "org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange",
146:       "org.jcvi.jillion.core.Range$ByteRange",
147:       "org.jcvi.jillion.core.Range$EmptyShortRange",
148:       "org.jcvi.jillion.core.Range$IntRange",
149:       "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange",
150:       "org.jcvi.jillion.core.Range$LongRange",
151:       "org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange",
152:       "org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange",
153:       "org.jcvi.jillion.core.Ranges",
154:       "org.jcvi.jillion.core.Range$Comparators",
155:       "org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange",
156:       "org.jcvi.jillion.core.Range$LongStartIntLengthRange",
157:       "org.jcvi.jillion.core.residue.nt.Nucleotide$1",
158:       "org.jcvi.jillion.core.Range$EmptyLongRange",
159:       "org.jcvi.jillion.core.Range$EmptyIntRange"
160:     );
161:   }
162: }

[MASTER] 14:32:24.152 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
Nucleotide nucleotide0 = Nucleotide.Guanine;
Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
byte[] byteArray0 = new byte[4];
assertFalse(byteArray0.equals((Object)byteArray1));


[MASTER] 14:32:31.084 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 14:32:31.084 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)60;
byteArray0[1] = (byte)100;
byteArray0[2] = (byte)94;
byteArray0[3] = (byte) (-99);
byteArray0[4] = (byte)68;
byteArray0[5] = (byte) (-52);
byteArray0[6] = (byte)14;
byteArray0[7] = (byte)84;
defaultNucleotideCodec0.toString(byteArray0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'DefaultNucleotideCodec_ESTest' to /home/ubuntu/termite/qmosa/tests/s1025/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.util.FileIterator
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 21002
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 14:48:07.863 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 14:48:08.012 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 14:48:08.017 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 14:48:08.036 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.util.FileIterator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/util/FileIterator.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1025
* Starting evolution
[MASTER] 14:52:49.867 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 840s and 524 generations, 595263 statements, best individual has fitness: 616.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 107
* Number of covered goals: 102
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 67
* Number of covered goals: 65
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 53
* Number of covered goals: 51
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 55%
* Total number of goals: 74
* Number of covered goals: 41
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 67
* Number of covered goals: 61
* Generated 29 tests with total length 566
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 57%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'FileIterator_ESTest' to /home/ubuntu/termite/qmosa/tests/s1025/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.Range
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 21004
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 15:22:24.728 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 15:22:24.757 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 15:22:24.758 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToDoubleFunction
[MASTER] 15:22:24.759 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToIntFunction
[MASTER] 15:22:24.759 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToLongFunction
[MASTER] 15:22:24.847 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 15:22:24.848 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.Range
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/Range.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1025
* Starting evolution
[MASTER] 15:22:59.733 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 147: org.jcvi.jillion.core.Range.canFitInSignedShort(JJ)Z:497 - ReplaceComparisonOperator > -> -2
[MASTER] 15:22:59.737 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 189: org.jcvi.jillion.core.Range.canFitInSignedInt(JJ)Z:501 - ReplaceComparisonOperator > -> -2
[MASTER] 15:22:59.749 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 620: org.jcvi.jillion.core.Range.getLength()J:971 - ReplaceArithmeticOperator - -> +
[MASTER] 15:22:59.751 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 622: org.jcvi.jillion.core.Range.getLength()J:971 - ReplaceArithmeticOperator - -> *
[MASTER] 15:22:59.752 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 627: org.jcvi.jillion.core.Range.getLength()J:971 - ReplaceArithmeticOperator + -> %
[MASTER] 15:22:59.828 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range.canFitInSignedInt(JJ)Z: I13 Branch 15 IFGT L501 - true in context: 
[MASTER] 15:23:25.046 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: Line 535
[MASTER] 15:23:25.047 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: Line 538
[MASTER] 15:23:25.068 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.<init>(IJ)V: Line 1800
[MASTER] 15:23:25.069 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.<init>(IJ)V: Line 1801
[MASTER] 15:23:25.070 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.<init>(IJ)V: Line 1802
[MASTER] 15:23:25.071 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.<init>(IJ)V: Line 1803
[MASTER] 15:23:25.072 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getLength()J: Line 1807
[MASTER] 15:23:25.073 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getBegin()J: Line 1820
[MASTER] 15:23:25.084 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J: Line 1831
[MASTER] 15:23:25.106 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 274: org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;:532 - ReplaceComparisonOperator > -> -2
[MASTER] 15:23:25.107 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 291: org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;:535 - ReplaceComparisonOperator > -> -2
[MASTER] 15:23:25.119 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1371: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator + -> %
[MASTER] 15:23:25.120 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1372: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator + -> -
[MASTER] 15:23:25.120 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1373: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator + -> *
[MASTER] 15:23:25.121 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1374: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator + -> /
[MASTER] 15:23:25.121 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1378: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator - -> +
[MASTER] 15:23:25.122 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1379: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator - -> %
[MASTER] 15:23:25.122 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1380: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator - -> *
[MASTER] 15:23:25.123 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1381: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator - -> /
[MASTER] 15:23:25.143 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getBegin()J: root-Branch in context: 
[MASTER] 15:23:25.144 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I63 Branch 21 IFGT L532 - true in context: 
[MASTER] 15:23:25.151 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getLength()J: root-Branch in context: 
[MASTER] 15:23:25.153 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J: root-Branch in context: 
[MASTER] 15:23:25.155 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I80 Branch 22 IFGT L535 - true in context: 
* Search finished after 666s and 91 generations, 55997 statements, best individual has fitness: 7488.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 72%
* Total number of goals: 632
* Number of covered goals: 452
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 75%
* Total number of goals: 426
* Number of covered goals: 319
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 54%
* Total number of goals: 802
* Number of covered goals: 433
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 77
* Number of covered goals: 39
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 75%
* Total number of goals: 426
* Number of covered goals: 318
* Generated 161 tests with total length 2255
* Resulting test suite's coverage: 64% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 30%
* Compiling and checking tests
[MASTER] 15:35:57.564 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 15:35:57.565 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.Comparators.values();
Range range0 = Range.of(9223372036854775281L);
Long long0 = new Long(9223372036854775281L);
Range range1 = Range.ofLength((long) long0);
List<Range> list0 = range0.complement(range1);
List<Range> list1 = range0.complementFrom(list0);
Range.of((long) long0);
List<Range> list2 = range0.complementFrom(list1);
assertTrue(list2.contains(range0));

Range.Builder range_Builder0 = new Range.Builder(1559L);
Range range2 = Range.ofLength(2285L);
assertFalse(range2.isEmpty());

Range range3 = Range.of(2285L);
Range range4 = range3.intersection(range0);
assertTrue(range4.isEmpty());


[MASTER] 15:36:00.698 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IndexOutOfBoundsException: given length -9223372036854775808 would make range [65535 - ? ] beyond max allowed end offset
[MASTER] 15:36:00.698 [logback-1] WARN  JUnitAnalyzer - Failing test:
 long long0 = (-128L);
Range.Builder range_Builder0 = new Range.Builder(65535L, (-9223372036854775808L));
range_Builder0.build();

[MASTER] 15:36:01.999 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 15:36:01.999 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
Range range1 = Range.of(9223372036854775720L);
List<Range> list0 = range0.complement(range1);
Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
List<Range> list1 = range1.complementFrom(list0);
List<Range> list2 = range1.complement(range2);
Object object0 = new Object();
range2.equals(range1);
range1.equals(list1);
Range range3 = range1.intersection(range2);
Range range4 = range0.intersection(range1);
Range range5 = Range.of(0L);
range3.equals(list2);
boolean boolean0 = range5.equals((Object) null);
assertFalse(range5.isEmpty());
assertFalse(boolean0);

range2.equals(list2);
assertNotSame(range1, range3);
assertTrue(range1.equals((Object)range0));
assertTrue(range1.equals((Object)range4));


[MASTER] 15:36:02.093 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 15:36:02.093 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.Comparators.values();
Range range0 = Range.of(9223372036854775281L);
Long long0 = new Long(9223372036854775281L);
Range range1 = Range.ofLength((long) long0);
List<Range> list0 = range0.complement(range1);
List<Range> list1 = range0.complementFrom(list0);
Range.of((long) long0);
List<Range> list2 = range0.complementFrom(list1);
assertTrue(list2.contains(range0));

Range.Builder range_Builder0 = new Range.Builder(1559L, 9223372036854775281L);
Range range2 = Range.ofLength(2285L);
Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range2.forEach(consumer0);
Range range3 = Range.of(2285L);
Range range4 = range3.intersection(range0);
assertTrue(range4.isEmpty());

Range range5 = Range.of(0L, 9223372036854775720L);
Range range6 = Range.of(904L, 2285L);
range6.equals(range5);
assertFalse(range5.isEmpty());
assertFalse(range5.equals((Object)range3));


[MASTER] 15:36:03.074 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:36:03.075 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range0 = Range.of(range_CoordinateSystem0, (-9223372034707292160L), 680L);
range0.iterator();
range0.iterator();
Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
Long long0 = new Long(680L);
range0.isSubRangeOf(range0);
range0.iterator();
Range range1 = Range.of(range_CoordinateSystem1, (-9223372034707292160L), 680L);
range0.equals(range1);
Range.CoordinateSystem.values();
Range range2 = Range.ofLength(2147483647L);
Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
range2.complement(range0);

[MASTER] 15:36:03.130 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:36:03.131 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range0 = Range.of(range_CoordinateSystem0, (-9223372034707292160L), 680L);
range0.iterator();
range0.iterator();
Range range1 = Range.of(0L, 680L);
Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
Long long0 = new Long(680L);
range0.isSubRangeOf(range1);
range0.iterator();
Range range2 = Range.of(range_CoordinateSystem1, (-9223372034707292160L), 680L);
range0.equals(range2);
Range.CoordinateSystem.values();
Range range3 = Range.ofLength(2147483647L);
range3.complement(range0);

[MASTER] 15:36:03.393 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 15:36:03.394 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
Range range1 = Range.of(89L, 9223372036854775807L);
long long0 = range0.getEnd(range_CoordinateSystem0);
assertEquals(89L, long0);

range0.split(89L);
Range range2 = range1.intersection(range0);
Range range3 = Range.of(89L);
List<Range> list0 = range3.split(2399L);
assertTrue(list0.contains(range3));

Range range4 = Range.of(range_CoordinateSystem0, 89L, 89L);
range4.isSubRangeOf(range3);
range0.getEnd();
range0.intersects(range4);
range0.split(89L);
Range range5 = Range.ofLength(9223372036854775807L);
Object object0 = new Object();
long long1 = range5.getEnd();
assertEquals(9223372036854775806L, long1);

Object object1 = new Object();
boolean boolean0 = range1.equals(range5);
assertFalse(boolean0);

Range.CoordinateSystem.values();
List<Range> list1 = range2.complement(range4);
assertTrue(list1.contains(range1));
assertTrue(range2.equals((Object)range1));


[MASTER] 15:36:03.813 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 15:36:03.814 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.Comparators.values();
Range range0 = Range.of(9223372036854775281L);
Long long0 = new Long(9223372036854775281L);
Range range1 = Range.ofLength((long) long0);
List<Range> list0 = range0.complement(range1);
List<Range> list1 = range0.complementFrom(list0);
Range.of((long) long0);
List<Range> list2 = range0.complementFrom(list1);
assertTrue(list2.contains(range0));

Range.Builder range_Builder0 = new Range.Builder(1559L);
Range range2 = Range.ofLength(2285L);
Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range2.forEach(consumer0);
Range range3 = Range.of(2285L);
Range range4 = range3.intersection(range0);
assertTrue(range4.isEmpty());

range0.equals(list0);
assertTrue(list0.equals((Object)list2));


[MASTER] 15:36:03.899 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 15:36:03.900 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
Range range1 = Range.of(9223372036854775720L);
List<Range> list0 = range0.complement(range1);
Range range2 = range0.asRange();
List<Range> list1 = range1.complementFrom(list0);
List<Range> list2 = range1.complement(range2);
assertFalse(list2.contains(range1));
assertTrue(list2.contains(range0));

Object object0 = new Object();
range2.equals(range1);
range1.equals(list1);
Range range3 = range1.intersection(range2);
Range range4 = range0.intersection(range1);
range3.complementFrom(list0);
range1.equals("@p\"u&},aTm|w8z7.[N");
Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
Range.of(range_CoordinateSystem1, 0L, 155L);
boolean boolean0 = range4.equals((Object) null);
assertSame(range0, range3);
assertFalse(boolean0);


[MASTER] 15:36:04.243 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IndexOutOfBoundsException
[MASTER] 15:36:04.243 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.Builder range_Builder0 = new Range.Builder();
range_Builder0.build();
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
long long0 = 2794L;
Range.of(range_CoordinateSystem0, 2794L, 2794L);
Range.of((-778L), 1737L);
Range range0 = Range.ofLength(9223372036854775807L);
Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
range0.getEnd(range_CoordinateSystem1);
Range.of(2147483646L);
range0.split(9223372036854775807L);

[MASTER] 15:36:04.990 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 15:36:04.990 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Object object0 = new Object();
Object object1 = new Object();
Object object2 = new Object();
Object object3 = new Object();
Object object4 = new Object();
Object object5 = new Object();
Object object6 = new Object();
Object object7 = new Object();
Object object8 = new Object();
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
range0.equals((Object) null);
assertFalse(range0.isEmpty());


[MASTER] 15:36:05.086 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 15:36:05.087 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.ofLength(0L);
Range range1 = Range.of(0L);
LinkedList<Range> linkedList0 = new LinkedList<Range>();
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range.of(range_CoordinateSystem0, 0L, 2147483647L);
range0.complementFrom(linkedList0);
range1.getBegin();
Range range2 = Range.of((-284L));
range0.complement(range1);
Range.of((-3115L), 9223372034707292161L);
range1.complement(range2);
range2.spliterator();
Range range3 = Range.of(1737L, 4294967366L);
Range range4 = Range.of(1052L);
assertFalse(range4.isEmpty());

Range.of((-763L), 32767L);
Range range5 = Range.of(256L);
range3.complement(range5);
assertTrue(range5.isEmpty());

Range range6 = Range.ofLength(255L);
List<Range> list0 = range1.complement(range6);
assertFalse(list0.contains(range1));


[MASTER] 15:36:09.356 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 15:36:09.356 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
Range range1 = Range.of(89L, 9223372036854775807L);
range0.getEnd(range_CoordinateSystem0);
range0.split(89L);
Range range2 = Range.of(89L);
Range range3 = Range.of(range_CoordinateSystem0, 89L, 89L);
Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range0.forEach(consumer0);
long long0 = range2.getEnd();
assertEquals(89L, long0);

range0.getEnd();
range0.intersects(range3);
range0.split(9223372036854775807L);
Range range4 = Range.of(88L, 9223372036854775807L);
Object object0 = new Object();
long long1 = range4.getEnd();
assertEquals(9223372036854775807L, long1);

Object object1 = new Object();
boolean boolean0 = range3.equals(range2);
assertFalse(boolean0);

Range.CoordinateSystem.values();
List<Range> list0 = range0.complement(range4);
assertTrue(list0.contains(range4));

Range range5 = range2.intersection(range0);
assertTrue(range5.equals((Object)range1));


[MASTER] 15:36:09.420 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 15:36:09.420 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
Range range1 = Range.of(9223372036854775720L);
List<Range> list0 = range0.complement(range1);
Range range2 = range0.asRange();
List<Range> list1 = range1.complementFrom(list0);
List<Range> list2 = range1.complement(range2);
assertFalse(list2.contains(range1));

Object object0 = new Object();
range2.equals(range1);
range1.equals(list1);
Range range3 = range1.intersection(range2);
range0.intersection(range1);
List<Range> list3 = range3.complementFrom(list0);
assertEquals(1, list3.size());

boolean boolean0 = range1.equals(range3);
assertSame(range3, range0);
assertFalse(boolean0);


[MASTER] 15:36:09.475 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected same:<[ 9223372036854775807 .. 9223372036854775806 ]/0B> was not:<[ 9223372036854775807 .. 9223372036854775807 ]/0B>
[MASTER] 15:36:09.477 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.ofLength(2147483647L);
Object object0 = new Object();
List<Range> list0 = range0.split(2147483647L);
Range range1 = Range.of(9223372036854775807L);
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
range0.spliterator();
range1.intersects(range0);
boolean boolean0 = range2.intersects(range0);
assertFalse(boolean0);

List<Range> list1 = range0.split(9223372036854775807L);
assertTrue(list1.equals((Object)list0));

Object object1 = new Object();
Object object2 = new Object();
range2.equals(object2);
Range.CoordinateSystem.values();
List<Range> list2 = range0.complement(range0);
Range range3 = range2.intersection(range1);
range3.complementFrom(list2);
assertSame(range3, range1);
assertFalse(range3.isEmpty());
assertFalse(range3.equals((Object)range2));
assertEquals(0, list2.size());

boolean boolean1 = range0.equals((Object) null);
assertTrue(boolean1 == boolean0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'Range_ESTest' to /home/ubuntu/termite/qmosa/tests/s1025/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
