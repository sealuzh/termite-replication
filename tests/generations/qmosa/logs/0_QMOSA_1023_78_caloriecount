* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.application.international.MessageFormatter
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.io.ArchiveScanner
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 11923
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 11926
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:47:58.516 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:47:58.537 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:47:58.538 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 06:47:58.648 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:47:58.656 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:47:58.657 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 06:47:58.790 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:47:58.864 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:47:59.032 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:47:59.033 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.application.international.MessageFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 06:47:59.158 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:47:59.159 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.io.ArchiveScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/application/international/MessageFormatter.java
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/io/ArchiveScanner.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1023
* Starting evolution
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1023
* Starting evolution
[MASTER] 06:48:02.575 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 06:48:12.650 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 06:49:04.408 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[MASTER] 06:49:18.976 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 06:52:13.408 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[MASTER] 06:52:41.642 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
[MASTER] 06:54:57.413 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 631s and 651 generations, 545255 statements, best individual has fitness: 592.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 91%
* Total number of goals: 130
* Number of covered goals: 118
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 52
* Number of covered goals: 46
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 150
* Number of covered goals: 141
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 36%
* Total number of goals: 50
* Number of covered goals: 18
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 96%
* Total number of goals: 24
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 52
* Number of covered goals: 46
* Generated 43 tests with total length 947
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 21%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'MessageFormatter_ESTest' to /home/ubuntu/termite/qmosa/tests/s1023/78_caloriecount/evosuite-tests
* Done!

* Computation finished
* Search finished after 840s and 669 generations, 814583 statements, best individual has fitness: 288.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 87%
* Total number of goals: 67
* Number of covered goals: 58
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 45
* Number of covered goals: 40
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 202
* Number of covered goals: 187
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 45
* Number of covered goals: 40
* Generated 37 tests with total length 1091
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 37%
* Compiling and checking tests
[MASTER] 07:02:11.711 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 07:02:11.711 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ImprovedFile improvedFile0 = new ImprovedFile(">'wn9RBz>]IM`1.jar", ">'wn9RBz>]IM`1.jar");
Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false, false, false).when(enumeration0).hasMoreElements();
SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
byte[] byteArray0 = new byte[9];
byteArray0[4] = (byte) (-56);
PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3844);
SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
sequenceInputStream2.available();
improvedFile0.setReadable(false);
SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
sequenceInputStream3.read(byteArray0);
improvedFile0.copyFrom((InputStream) sequenceInputStream0);
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
archiveScanner0.toFileType(improvedFile0);

[MASTER] 07:02:11.848 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 07:02:11.850 [logback-1] WARN  JUnitAnalyzer - Failing test:
 EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
FileSystemHandling.appendLineToFile(evoSuiteFile0, "'LQ.jar");
FileSystemHandling.createFolder(evoSuiteFile0);
EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
FileSystemHandling.appendLineToFile(evoSuiteFile1, "x=7#L");
FileSystemHandling.setPermissions(evoSuiteFile1, false, true, false);
FileSystemHandling.createFolder(evoSuiteFile1);
FileSystemHandling.createFolder(evoSuiteFile1);
ImprovedFile improvedFile0 = new ImprovedFile("r#NDI/nqyM4=LM2", "txTH#a&[H>,J*|#cH");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
ImprovedFile improvedFile1 = new ImprovedFile("'LQ");
archiveScanner0.toFileType(improvedFile0);

[MASTER] 07:02:11.982 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 07:02:11.982 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ImprovedFile improvedFile0 = new ImprovedFile(">'wn9RBz>]IM`1.jar");
Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration0).hasMoreElements();
SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
PipedInputStream pipedInputStream0 = new PipedInputStream();
SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
sequenceInputStream1.skip(0L);
sequenceInputStream0.available();
sequenceInputStream0.mark(0);
PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
sequenceInputStream1.mark((-1));
pipedOutputStream0.close();
PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 7);
pipedOutputStream0.write(1889);
SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream1);
sequenceInputStream0.mark(1825);
sequenceInputStream0.available();
SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream0, dataInputStream0);
sequenceInputStream3.mark(1825);
PipedInputStream pipedInputStream2 = new PipedInputStream();
PipedInputStream pipedInputStream3 = new PipedInputStream();
PipedInputStream pipedInputStream4 = new PipedInputStream();
PipedInputStream pipedInputStream5 = new PipedInputStream();
PipedInputStream pipedInputStream6 = new PipedInputStream();
sequenceInputStream0.mark(0);
PipedInputStream pipedInputStream7 = new PipedInputStream();
Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration1).hasMoreElements();
SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration1);
SequenceInputStream sequenceInputStream5 = new SequenceInputStream(dataInputStream0, sequenceInputStream3);
PipedInputStream pipedInputStream8 = new PipedInputStream();
DirectoryScanner.matchPatternStart("O,In=n]u", "O,In=n]u");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
archiveScanner0.isArchive(improvedFile0);

[MASTER] 07:02:12.457 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 07:02:12.459 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ImprovedFile improvedFile0 = new ImprovedFile(">'wn9RBz>]IM`1.jar");
Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration0).hasMoreElements();
SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
PipedInputStream pipedInputStream0 = new PipedInputStream();
SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
sequenceInputStream0.available();
sequenceInputStream0.mark(0);
PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
sequenceInputStream1.mark(7);
pipedOutputStream0.close();
PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 7);
SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream1);
sequenceInputStream0.mark(0);
sequenceInputStream0.available();
SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream0, dataInputStream0);
sequenceInputStream3.mark(0);
PipedInputStream pipedInputStream2 = new PipedInputStream();
PipedInputStream pipedInputStream3 = new PipedInputStream();
PipedInputStream pipedInputStream4 = new PipedInputStream();
PipedInputStream pipedInputStream5 = new PipedInputStream();
PipedInputStream pipedInputStream6 = new PipedInputStream();
sequenceInputStream0.mark(0);
pipedInputStream3.close();
PipedInputStream pipedInputStream7 = new PipedInputStream();
Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration1).hasMoreElements();
pipedInputStream7.skip(0);
SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration1);
SequenceInputStream sequenceInputStream5 = new SequenceInputStream(pipedInputStream3, pipedInputStream7);
PipedInputStream pipedInputStream8 = new PipedInputStream();
DirectoryScanner.matchPatternStart("O,In=n]u", ">'wn9RBz>]IM`1.jar");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
archiveScanner0.isArchive(improvedFile0);

[MASTER] 07:02:12.589 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 07:02:12.590 [logback-1] WARN  JUnitAnalyzer - Failing test:
 UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
Function.identity();
unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
Function.identity();
Function.identity();
UnaryOperator.identity();
Function.identity();
UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
UnaryOperator.identity();
unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
Function.identity();
UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
Function<Object, Object> function0 = Function.identity();
unaryOperator0.compose((Function<? super Integer, ?>) function0);
Function.identity();
Function.identity();
Function.identity();
UnaryOperator.identity();
UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
Function.identity();
UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
unaryOperator5.compose((Function<? super Integer, ?>) function0);
unaryOperator5.andThen((Function<? super Object, ?>) unaryOperator4);
Function.identity();
unaryOperator5.apply(unaryOperator4);
Function.identity();
UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
UnaryOperator.identity();
unaryOperator4.compose((Function<? super String, ?>) unaryOperator3);
unaryOperator6.andThen((Function<? super Object, ?>) function0);
unaryOperator6.compose((Function<? super String, ?>) unaryOperator0);
unaryOperator2.apply(unaryOperator1);
UnaryOperator.identity();
unaryOperator6.andThen((Function<? super Object, ?>) function0);
ImprovedFile improvedFile0 = new ImprovedFile("=#z4FpG@0=#z4FpG@.bak.bak1 (3Z;8mF\"j+)].jar.jar");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
archiveScanner0.isArchive(improvedFile0);

[MASTER] 07:02:12.666 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 07:02:12.667 [logback-1] WARN  JUnitAnalyzer - Failing test:
 UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
Function.identity();
unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
Function.identity();
Function.identity();
UnaryOperator.identity();
Function.identity();
UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
UnaryOperator.identity();
unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
Function.identity();
UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
Function<Object, Object> function0 = Function.identity();
unaryOperator0.compose((Function<? super Integer, ?>) function0);
Function.identity();
Function.identity();
Function.identity();
UnaryOperator.identity();
UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
Function.identity();
UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
unaryOperator5.compose((Function<? super Integer, ?>) function0);
unaryOperator5.andThen((Function<? super Object, ?>) unaryOperator4);
Function.identity();
unaryOperator5.apply(unaryOperator4);
Function.identity();
UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
UnaryOperator.identity();
unaryOperator4.compose((Function<? super String, ?>) unaryOperator3);
unaryOperator6.compose((Function<? super String, ?>) unaryOperator0);
unaryOperator2.apply(unaryOperator1);
UnaryOperator.identity();
unaryOperator6.andThen((Function<? super Object, ?>) function0);
ImprovedFile improvedFile0 = new ImprovedFile("=#z4FpG@0=#z4FpG@.bak.bak1 (3Z;8mF\"j+)].jar.jar");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
archiveScanner0.isArchive(improvedFile0);

[MASTER] 07:02:12.770 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 07:02:12.772 [logback-1] WARN  JUnitAnalyzer - Failing test:
 UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
Function.identity();
unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
Function.identity();
Function.identity();
UnaryOperator.identity();
Function.identity();
UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
UnaryOperator.identity();
unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
Function.identity();
Function<Object, Object> function0 = Function.identity();
unaryOperator0.compose((Function<? super Integer, ?>) function0);
Function.identity();
Function.identity();
Function.identity();
UnaryOperator.identity();
UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
Function.identity();
UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
unaryOperator4.compose((Function<? super Integer, ?>) function0);
unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator3);
Function.identity();
unaryOperator4.apply(unaryOperator3);
Function.identity();
UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
UnaryOperator.identity();
unaryOperator3.compose((Function<? super String, ?>) unaryOperator0);
unaryOperator5.andThen((Function<? super Object, ?>) function0);
unaryOperator5.compose((Function<? super String, ?>) unaryOperator0);
unaryOperator2.apply(unaryOperator1);
UnaryOperator.identity();
unaryOperator5.andThen((Function<? super Object, ?>) function0);
ImprovedFile improvedFile0 = new ImprovedFile("=#z4FpG@0=#z4FpG@.bak.bak1 (3Z;8mF\"j+)].jar.jar");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
archiveScanner0.isArchive(improvedFile0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'ArchiveScanner_ESTest' to /home/ubuntu/termite/qmosa/tests/s1023/78_caloriecount/evosuite-tests
* Done!

* Computation finished
