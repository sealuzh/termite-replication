* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.classifiers.bayes.NaiveBayesMultinomialText
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 12626
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:28:32.396 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:28:32.425 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:28:32.426 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 06:28:32.466 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:28:32.483 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:28:32.483 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class weka.classifiers.bayes.NaiveBayesMultinomialText
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/classifiers/bayes/NaiveBayesMultinomialText.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
[MASTER] 06:29:37.618 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 06:29:37.619 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
* Search finished after 842s and 144 generations, 172805 statements, best individual has fitness: 2952.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 73%
* Total number of goals: 338
* Number of covered goals: 247
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 62%
* Total number of goals: 194
* Number of covered goals: 120
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 85%
* Total number of goals: 476
* Number of covered goals: 403
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 112
* Number of covered goals: 58
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 61%
* Total number of goals: 194
* Number of covered goals: 119
* Generated 62 tests with total length 1387
* Resulting test suite's coverage: 74% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 43%
* Compiling and checking tests
[MASTER] 06:46:52.261 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_18_1574059612196/weka/classifiers/bayes/NaiveBayesMultinomialText_18_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_18_1574059612196/weka/classifiers/bayes/NaiveBayesMultinomialText_18_tmp__ESTest_scaffolding.java]]
[MASTER] 06:46:52.261 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 06:46:52.261 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 06:46:52.264 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 58
[MASTER] 06:46:52.264 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 58
[MASTER] 06:46:52.264 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 64
[MASTER] 06:46:52.264 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 64
[MASTER] 06:46:52.264 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 65
[MASTER] 06:46:52.265 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_18_1574059612196/weka/classifiers/bayes/NaiveBayesMultinomialText_18_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Nov 18 06:46:52 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.LinkedHashMap;
11: import java.util.Map;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: import weka.classifiers.AbstractClassifier;
16: import weka.classifiers.bayes.NaiveBayesMultinomialText;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class NaiveBayesMultinomialText_18_tmp__ESTest extends NaiveBayesMultinomialText_18_tmp__ESTest_scaffolding {
20: 
21:   /**
22:   //Test case number: 0
23:   /*Coverage entropy=3.4388332638586396
24:   */
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
28:       double[] doubleArray0 = new double[22];
29:       doubleArray0[0] = (double) (-6);
30:       doubleArray0[1] = (double) (-6);
31:       doubleArray0[3] = (double) (-6);
32:       doubleArray0[4] = (-6.0);
33:       naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
34:       String string0 = naiveBayesMultinomialText0.globalInfo();
35:       assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);
36:       
37:       String string1 = naiveBayesMultinomialText0.stopwordsTipText();
38:       assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
39:       
40:       naiveBayesMultinomialText0.minWordFrequencyTipText();
41:       String string2 = naiveBayesMultinomialText0.normTipText();
42:       assertEquals("The norm of the instances after normalization.", string2);
43:       
44:       naiveBayesMultinomialText0.normalizeDocLengthTipText();
45:       naiveBayesMultinomialText0.getStemmer();
46:       String string3 = naiveBayesMultinomialText0.lowercaseTokensTipText();
47:       assertEquals("Whether to convert all tokens to lowercase", string3);
48:       
49:       AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 658);
50:       String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
51:       assertEquals(12, stringArray0.length);
52:       
53:       naiveBayesMultinomialText0.LNormTipText();
54:       naiveBayesMultinomialText0.normalizeDocLengthTipText();
55:       String string4 = naiveBayesMultinomialText0.LNormTipText();
56:       assertEquals("The LNorm to use for document length normalization.", string4);
57:       
58:       LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
59:       naiveBayesMultinomialText0.m_inputVector = linkedHashMap0;
60:       String string5 = naiveBayesMultinomialText0.minWordFrequencyTipText();
61:       assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string5);
62:       
63:       naiveBayesMultinomialText0.getStemmer();
64:       LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> linkedHashMap1 = new LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
65:       naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) linkedHashMap1;
66:       String string6 = naiveBayesMultinomialText0.useStopListTipText();
67:       assertEquals("If true, ignores all words that are on the stoplist.", string6);
68:       
69:       String string7 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
70:       assertEquals("Use word frequencies rather than binary bag of words representation", string7);
71:       
72:       String string8 = naiveBayesMultinomialText0.stemmerTipText();
73:       assertEquals("The stemming algorithm to use on the words.", string8);
74:       
75:       String string9 = naiveBayesMultinomialText0.periodicPruningTipText();
76:       assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string9);
77:       
78:       String string10 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
79:       assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string10);
80:       
81:       String string11 = naiveBayesMultinomialText0.tokenizerTipText();
82:       assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
83:       assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
84:       assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
85:       assertEquals("The tokenizing algorithm to use on the strings.", string11);
86:       assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
87:   }
88: }
RegularFileObject[/tmp/EvoSuite_18_1574059612196/weka/classifiers/bayes/NaiveBayesMultinomialText_18_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Nov 18 06:46:52 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_18_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_18_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.filters.unsupervised.attribute.NominalToBinary",
90:       "weka.core.TestInstances",
91:       "weka.core.DistanceFunction",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "weka.attributeSelection.AttributeEvaluator",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.classifiers.trees.m5.M5Base",
97:       "weka.filters.UnsupervisedFilter",
98:       "weka.core.neighboursearch.BallTree",
99:       "weka.core.logging.Logger$Level",
100:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
101:       "weka.core.DenseInstance",
102:       "weka.core.stemmers.Stemmer",
103:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
104:       "org.pentaho.packageManagement.DefaultPackageManager",
105:       "org.bounce.net.DefaultAuthenticator",
106:       "weka.core.stemmers.NullStemmer",
107:       "weka.core.EnvironmentHandler",
108:       "weka.classifiers.functions.SGDText",
109:       "weka.core.RelationalLocator",
110:       "weka.core.Utils",
111:       "weka.core.CustomDisplayStringProvider",
112:       "weka.core.tokenizers.Tokenizer",
113:       "weka.core.NormalizableDistance",
114:       "weka.classifiers.functions.SMOreg",
115:       "weka.core.NoSupportForMissingValuesException",
116:       "weka.classifiers.UpdateableClassifier",
117:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
118:       "weka.core.TechnicalInformation$Type",
119:       "weka.core.MultiInstanceCapabilitiesHandler",
120:       "weka.core.Copyable",
121:       "weka.core.Capabilities",
122:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
123:       "weka.core.BinarySparseInstance",
124:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
125:       "weka.core.AttributeLocator",
126:       "weka.filters.supervised.attribute.NominalToBinary",
127:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
128:       "weka.classifiers.functions.supportVector.CachedKernel",
129:       "weka.core.SerializedObject",
130:       "weka.clusterers.UpdateableClusterer",
131:       "weka.core.Summarizable",
132:       "weka.core.AdditionalMeasureProducer",
133:       "org.pentaho.packageManagement.PackageManager$1",
134:       "weka.core.Drawable",
135:       "weka.core.matrix.Matrix",
136:       "weka.core.SingleIndex",
137:       "weka.core.CapabilitiesHandler",
138:       "weka.attributeSelection.ASEvaluation",
139:       "weka.core.AbstractInstance",
140:       "weka.core.scripting.JythonObject",
141:       "weka.classifiers.functions.supportVector.RegOptimizer",
142:       "weka.core.SelectedTag",
143:       "org.pentaho.packageManagement.DefaultPackage",
144:       "weka.core.neighboursearch.balltrees.BallSplitter",
145:       "weka.core.Version",
146:       "weka.filters.unsupervised.attribute.RemoveUseless",
147:       "weka.core.Tag",
148:       "weka.core.TechnicalInformationHandlerJavadoc",
149:       "weka.classifiers.AbstractClassifier",
150:       "weka.filters.unsupervised.attribute.Center",
151:       "weka.core.FindWithCapabilities",
152:       "weka.core.OptionHandler",
153:       "weka.core.WekaException",
154:       "weka.filters.StreamableFilter",
155:       "weka.core.Range",
156:       "weka.core.scripting.JythonSerializableObject",
157:       "weka.classifiers.Classifier",
158:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
159:       "weka.core.Capabilities$Capability",
160:       "weka.core.SparseInstance",
161:       "org.pentaho.packageManagement.PackageManager",
162:       "weka.attributeSelection.AttributeTransformer",
163:       "weka.core.tokenizers.WordTokenizer",
164:       "weka.classifiers.misc.SerializedClassifier",
165:       "weka.classifiers.trees.M5P",
166:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
167:       "weka.attributeSelection.PrincipalComponents",
168:       "weka.core.stemmers.SnowballStemmer",
169:       "weka.core.stemmers.LovinsStemmer",
170:       "weka.classifiers.Evaluation",
171:       "weka.classifiers.functions.supportVector.Kernel",
172:       "weka.core.WekaPackageManager",
173:       "weka.filters.SupervisedFilter",
174:       "weka.core.TechnicalInformationHandler",
175:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
176:       "weka.core.Option",
177:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
178:       "weka.core.neighboursearch.PerformanceStats",
179:       "weka.filters.Sourcable",
180:       "weka.core.Attribute",
181:       "weka.core.Stopwords",
182:       "weka.core.FastVector",
183:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
184:       "weka.classifiers.MultipleClassifiersCombiner",
185:       "weka.core.tokenizers.NGramTokenizer",
186:       "weka.core.UnassignedDatasetException",
187:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
188:       "weka.classifiers.functions.supportVector.RegSMOImproved",
189:       "weka.classifiers.RandomizableClassifier",
190:       "weka.classifiers.SingleClassifierEnhancer",
191:       "weka.core.RevisionUtils",
192:       "weka.core.Instance",
193:       "weka.classifiers.functions.supportVector.RegSMO",
194:       "weka.classifiers.functions.supportVector.PolyKernel",
195:       "weka.core.ProtectedProperties",
196:       "weka.classifiers.meta.Vote",
197:       "weka.core.StringLocator",
198:       "weka.core.AttributeStats",
199:       "weka.core.WeightedInstancesHandler",
200:       "weka.core.neighboursearch.NearestNeighbourSearch",
201:       "weka.core.TechnicalInformation$Field",
202:       "weka.filters.unsupervised.attribute.Remove",
203:       "weka.core.Randomizable",
204:       "weka.core.Javadoc",
205:       "weka.core.EuclideanDistance",
206:       "weka.core.Instances",
207:       "weka.filters.unsupervised.attribute.Normalize",
208:       "weka.core.UnassignedClassException",
209:       "weka.classifiers.rules.ZeroR",
210:       "weka.filters.unsupervised.attribute.Standardize",
211:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
212:       "weka.core.stemmers.IteratedLovinsStemmer",
213:       "weka.core.UnsupportedAttributeTypeException",
214:       "weka.core.TechnicalInformation",
215:       "weka.classifiers.Sourcable",
216:       "weka.core.RevisionHandler",
217:       "weka.classifiers.evaluation.output.prediction.PlainText",
218:       "weka.core.neighboursearch.TreePerformanceStats",
219:       "weka.core.xml.XMLSerialization",
220:       "weka.filters.unsupervised.attribute.MakeIndicator",
221:       "weka.classifiers.xml.XMLClassifier",
222:       "weka.classifiers.meta.ClassificationViaRegression",
223:       "weka.filters.Filter",
224:       "weka.filters.supervised.attribute.Discretize"
225:     );
226:   } 
227: 
228:   private static void resetClasses() {
229:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_18_tmp__ESTest_scaffolding.class.getClassLoader()); 
230: 
231:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
232:       "weka.classifiers.AbstractClassifier",
233:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
234:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
235:       "weka.core.Capabilities$Capability",
236:       "weka.core.tokenizers.Tokenizer",
237:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
238:       "weka.core.tokenizers.WordTokenizer",
239:       "weka.core.stemmers.NullStemmer",
240:       "weka.classifiers.Evaluation",
241:       "weka.core.Utils",
242:       "weka.core.Option",
243:       "weka.core.AbstractInstance",
244:       "weka.core.SparseInstance",
245:       "weka.classifiers.functions.supportVector.Kernel",
246:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
247:       "weka.core.BinarySparseInstance",
248:       "weka.core.UnassignedDatasetException",
249:       "weka.core.RevisionUtils",
250:       "weka.core.neighboursearch.NearestNeighbourSearch",
251:       "weka.core.neighboursearch.CoverTree",
252:       "weka.core.NormalizableDistance",
253:       "weka.core.EuclideanDistance",
254:       "weka.core.Range",
255:       "weka.core.Capabilities",
256:       "org.pentaho.packageManagement.PackageManager",
257:       "org.pentaho.packageManagement.DefaultPackageManager",
258:       "weka.core.Version",
259:       "weka.core.Environment",
260:       "weka.core.WekaPackageManager",
261:       "weka.core.neighboursearch.BallTree",
262:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
263:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
264:       "weka.core.neighboursearch.balltrees.BallSplitter",
265:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
266:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
267:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
268:       "weka.attributeSelection.ASEvaluation",
269:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
270:       "weka.attributeSelection.PrincipalComponents",
271:       "weka.classifiers.RandomizableClassifier",
272:       "weka.core.Tag",
273:       "weka.classifiers.functions.SGDText",
274:       "weka.classifiers.misc.SerializedClassifier",
275:       "weka.filters.Filter",
276:       "weka.filters.supervised.attribute.Discretize",
277:       "weka.classifiers.functions.SMO",
278:       "weka.classifiers.functions.supportVector.CachedKernel",
279:       "weka.classifiers.functions.supportVector.PolyKernel",
280:       "weka.core.SerializedObject",
281:       "weka.core.Instances",
282:       "weka.core.tokenizers.NGramTokenizer",
283:       "weka.classifiers.SingleClassifierEnhancer",
284:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
285:       "weka.classifiers.meta.CostSensitiveClassifier",
286:       "weka.classifiers.rules.ZeroR",
287:       "weka.classifiers.CostMatrix",
288:       "weka.core.stemmers.SnowballStemmer",
289:       "weka.core.DenseInstance",
290:       "weka.core.neighboursearch.balltrees.BallNode",
291:       "weka.core.TestInstances",
292:       "weka.core.Attribute",
293:       "weka.core.ProtectedProperties",
294:       "weka.core.tokenizers.AlphabeticTokenizer",
295:       "weka.core.neighboursearch.LinearNNSearch",
296:       "weka.core.stemmers.LovinsStemmer",
297:       "weka.core.stemmers.IteratedLovinsStemmer",
298:       "weka.classifiers.misc.InputMappedClassifier",
299:       "weka.core.converters.ArffLoader$ArffReader",
300:       "weka.core.Stopwords",
301:       "weka.classifiers.bayes.BayesNet",
302:       "weka.classifiers.bayes.net.BIFReader",
303:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
304:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
305:       "weka.classifiers.bayes.net.search.local.K2",
306:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
307:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
308:       "weka.core.neighboursearch.KDTree",
309:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
310:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
311:       "weka.classifiers.functions.SMOreg",
312:       "weka.classifiers.functions.supportVector.RegOptimizer",
313:       "weka.classifiers.functions.supportVector.RegSMO",
314:       "weka.classifiers.functions.supportVector.RegSMOImproved",
315:       "weka.classifiers.trees.RandomForest",
316:       "weka.classifiers.trees.RandomTree",
317:       "weka.filters.AllFilter",
318:       "weka.classifiers.lazy.IBk",
319:       "weka.core.matrix.Matrix",
320:       "weka.core.stemmers.Stemming",
321:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
322:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
323:       "weka.classifiers.functions.SimpleLogistic",
324:       "weka.core.WekaEnumeration",
325:       "weka.core.Attribute$1",
326:       "weka.classifiers.bayes.NaiveBayes",
327:       "weka.classifiers.bayes.NaiveBayesUpdateable",
328:       "weka.classifiers.bayes.NaiveBayesMultinomial",
329:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
330:       "weka.core.FindWithCapabilities",
331:       "weka.core.SingleIndex",
332:       "weka.classifiers.trees.m5.M5Base",
333:       "weka.classifiers.trees.M5P",
334:       "weka.classifiers.MultipleClassifiersCombiner",
335:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
336:       "weka.classifiers.meta.Vote",
337:       "weka.core.SerializationHelper",
338:       "weka.core.ClassDiscovery",
339:       "weka.classifiers.meta.MultiScheme",
340:       "weka.classifiers.meta.ClassificationViaRegression",
341:       "weka.classifiers.rules.JRip",
342:       "weka.classifiers.meta.CVParameterSelection",
343:       "weka.core.FastVector",
344:       "weka.core.MinkowskiDistance",
345:       "weka.classifiers.functions.supportVector.StringKernel",
346:       "weka.core.SelectedTag",
347:       "weka.classifiers.functions.MultilayerPerceptron",
348:       "weka.filters.unsupervised.attribute.NominalToBinary",
349:       "weka.classifiers.functions.neural.SigmoidUnit",
350:       "weka.classifiers.functions.neural.LinearUnit",
351:       "weka.classifiers.functions.neural.NeuralConnection",
352:       "weka.classifiers.functions.MultilayerPerceptron$NeuralEnd",
353:       "weka.core.TechnicalInformation",
354:       "weka.core.TechnicalInformation$Type",
355:       "weka.core.TechnicalInformation$Field",
356:       "weka.classifiers.functions.VotedPerceptron",
357:       "weka.classifiers.functions.SGD",
358:       "weka.classifiers.trees.DecisionStump",
359:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
360:       "weka.classifiers.functions.LinearRegression",
361:       "weka.classifiers.rules.PART",
362:       "weka.classifiers.rules.part.MakeDecList",
363:       "weka.classifiers.trees.LMT",
364:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
365:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
366:       "weka.classifiers.meta.Stacking",
367:       "weka.classifiers.lazy.LWL",
368:       "weka.core.Javadoc",
369:       "weka.core.TechnicalInformationHandlerJavadoc",
370:       "weka.classifiers.trees.REPTree",
371:       "weka.filters.SimpleFilter",
372:       "weka.filters.SimpleStreamFilter",
373:       "weka.filters.MultiFilter",
374:       "weka.classifiers.trees.J48",
375:       "weka.classifiers.trees.j48.ClassifierTree",
376:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
377:       "weka.core.WekaException",
378:       "weka.core.UnsupportedAttributeTypeException",
379:       "weka.classifiers.meta.FilteredClassifier",
380:       "weka.filters.supervised.attribute.AttributeSelection",
381:       "weka.attributeSelection.AttributeSelection",
382:       "weka.attributeSelection.CfsSubsetEval",
383:       "weka.attributeSelection.ASSearch",
384:       "weka.attributeSelection.GreedyStepwise",
385:       "weka.attributeSelection.BestFirst",
386:       "weka.attributeSelection.WrapperSubsetEval",
387:       "weka.classifiers.functions.supportVector.RBFKernel",
388:       "weka.classifiers.functions.GaussianProcesses",
389:       "weka.classifiers.meta.MultiClassClassifier",
390:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
391:       "weka.classifiers.functions.Logistic",
392:       "weka.classifiers.IteratedSingleClassifierEnhancer",
393:       "weka.classifiers.meta.AdditiveRegression",
394:       "weka.attributeSelection.ReliefFAttributeEval",
395:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
396:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
397:       "weka.classifiers.meta.RandomCommittee",
398:       "weka.classifiers.functions.SimpleLinearRegression",
399:       "weka.attributeSelection.InfoGainAttributeEval"
400:     );
401:   }
402: }

[MASTER] 06:46:52.266 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
double[] doubleArray0 = new double[22];
doubleArray0[0] = (double) (-6);
doubleArray0[1] = (double) (-6);
doubleArray0[3] = (double) (-6);
doubleArray0[4] = (-6.0);
naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
String string0 = naiveBayesMultinomialText0.globalInfo();
assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);

String string1 = naiveBayesMultinomialText0.stopwordsTipText();
assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);

naiveBayesMultinomialText0.minWordFrequencyTipText();
String string2 = naiveBayesMultinomialText0.normTipText();
assertEquals("The norm of the instances after normalization.", string2);

naiveBayesMultinomialText0.normalizeDocLengthTipText();
naiveBayesMultinomialText0.getStemmer();
String string3 = naiveBayesMultinomialText0.lowercaseTokensTipText();
assertEquals("Whether to convert all tokens to lowercase", string3);

AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 658);
String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
assertEquals(12, stringArray0.length);

naiveBayesMultinomialText0.LNormTipText();
naiveBayesMultinomialText0.normalizeDocLengthTipText();
String string4 = naiveBayesMultinomialText0.LNormTipText();
assertEquals("The LNorm to use for document length normalization.", string4);

LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
naiveBayesMultinomialText0.m_inputVector = linkedHashMap0;
String string5 = naiveBayesMultinomialText0.minWordFrequencyTipText();
assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string5);

naiveBayesMultinomialText0.getStemmer();
LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> linkedHashMap1 = new LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) linkedHashMap1;
String string6 = naiveBayesMultinomialText0.useStopListTipText();
assertEquals("If true, ignores all words that are on the stoplist.", string6);

String string7 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
assertEquals("Use word frequencies rather than binary bag of words representation", string7);

String string8 = naiveBayesMultinomialText0.stemmerTipText();
assertEquals("The stemming algorithm to use on the words.", string8);

String string9 = naiveBayesMultinomialText0.periodicPruningTipText();
assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string9);

String string10 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string10);

String string11 = naiveBayesMultinomialText0.tokenizerTipText();
assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
assertEquals("The tokenizing algorithm to use on the strings.", string11);
assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);


[MASTER] 06:46:52.434 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_23_1574059612377/weka/classifiers/bayes/NaiveBayesMultinomialText_23_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_23_1574059612377/weka/classifiers/bayes/NaiveBayesMultinomialText_23_tmp__ESTest_scaffolding.java]]
[MASTER] 06:46:52.434 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 06:46:52.434 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 06:46:52.434 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 50
[MASTER] 06:46:52.435 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 50
[MASTER] 06:46:52.435 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 51
[MASTER] 06:46:52.435 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_23_1574059612377/weka/classifiers/bayes/NaiveBayesMultinomialText_23_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Nov 18 06:46:52 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.LinkedHashMap;
11: import java.util.Map;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: import weka.classifiers.AbstractClassifier;
16: import weka.classifiers.bayes.NaiveBayesMultinomialText;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class NaiveBayesMultinomialText_23_tmp__ESTest extends NaiveBayesMultinomialText_23_tmp__ESTest_scaffolding {
20: 
21:   /**
22:   //Test case number: 0
23:   /*Coverage entropy=3.4388332638586396
24:   */
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
28:       assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
29:       
30:       double[] doubleArray0 = new double[5];
31:       doubleArray0[2] = (double) 1;
32:       naiveBayesMultinomialText0.setNorm(0.0);
33:       doubleArray0[1] = (double) 1;
34:       doubleArray0[3] = (double) 1;
35:       doubleArray0[4] = 1.0;
36:       naiveBayesMultinomialText0.getRevision();
37:       naiveBayesMultinomialText0.stopwordsTipText();
38:       naiveBayesMultinomialText0.minWordFrequencyTipText();
39:       naiveBayesMultinomialText0.normTipText();
40:       naiveBayesMultinomialText0.normalizeDocLengthTipText();
41:       naiveBayesMultinomialText0.getStemmer();
42:       naiveBayesMultinomialText0.lowercaseTokensTipText();
43:       AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 658);
44:       naiveBayesMultinomialText0.getOptions();
45:       naiveBayesMultinomialText0.LNormTipText();
46:       naiveBayesMultinomialText0.normalizeDocLengthTipText();
47:       naiveBayesMultinomialText0.LNormTipText();
48:       naiveBayesMultinomialText0.minWordFrequencyTipText();
49:       naiveBayesMultinomialText0.getStemmer();
50:       LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> linkedHashMap0 = new LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
51:       naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) linkedHashMap0;
52:       naiveBayesMultinomialText0.useStopListTipText();
53:       naiveBayesMultinomialText0.useWordFrequenciesTipText();
54:       naiveBayesMultinomialText0.stemmerTipText();
55:       naiveBayesMultinomialText0.periodicPruningTipText();
56:       naiveBayesMultinomialText0.normalizeDocLengthTipText();
57:       assertEquals(0.0, naiveBayesMultinomialText0.getNorm(), 0.01);
58:   }
59: }
RegularFileObject[/tmp/EvoSuite_23_1574059612377/weka/classifiers/bayes/NaiveBayesMultinomialText_23_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Nov 18 06:46:52 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_23_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_23_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.filters.unsupervised.attribute.NominalToBinary",
90:       "weka.core.TestInstances",
91:       "weka.core.DistanceFunction",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "weka.attributeSelection.AttributeEvaluator",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.classifiers.trees.m5.M5Base",
97:       "weka.filters.UnsupervisedFilter",
98:       "weka.core.neighboursearch.BallTree",
99:       "weka.core.logging.Logger$Level",
100:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
101:       "weka.core.DenseInstance",
102:       "weka.core.stemmers.Stemmer",
103:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
104:       "org.pentaho.packageManagement.DefaultPackageManager",
105:       "org.bounce.net.DefaultAuthenticator",
106:       "weka.core.stemmers.NullStemmer",
107:       "weka.core.EnvironmentHandler",
108:       "weka.classifiers.functions.SGDText",
109:       "weka.core.RelationalLocator",
110:       "weka.core.Utils",
111:       "weka.core.CustomDisplayStringProvider",
112:       "weka.core.tokenizers.Tokenizer",
113:       "weka.core.NormalizableDistance",
114:       "weka.classifiers.functions.SMOreg",
115:       "weka.core.NoSupportForMissingValuesException",
116:       "weka.classifiers.UpdateableClassifier",
117:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
118:       "weka.core.TechnicalInformation$Type",
119:       "weka.core.MultiInstanceCapabilitiesHandler",
120:       "weka.core.Copyable",
121:       "weka.core.Capabilities",
122:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
123:       "weka.core.BinarySparseInstance",
124:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
125:       "weka.core.AttributeLocator",
126:       "weka.filters.supervised.attribute.NominalToBinary",
127:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
128:       "weka.classifiers.functions.supportVector.CachedKernel",
129:       "weka.core.SerializedObject",
130:       "weka.clusterers.UpdateableClusterer",
131:       "weka.core.Summarizable",
132:       "weka.core.AdditionalMeasureProducer",
133:       "org.pentaho.packageManagement.PackageManager$1",
134:       "weka.core.Drawable",
135:       "weka.core.matrix.Matrix",
136:       "weka.core.SingleIndex",
137:       "weka.core.CapabilitiesHandler",
138:       "weka.attributeSelection.ASEvaluation",
139:       "weka.core.AbstractInstance",
140:       "weka.core.scripting.JythonObject",
141:       "weka.classifiers.functions.supportVector.RegOptimizer",
142:       "weka.core.SelectedTag",
143:       "org.pentaho.packageManagement.DefaultPackage",
144:       "weka.core.neighboursearch.balltrees.BallSplitter",
145:       "weka.core.Version",
146:       "weka.filters.unsupervised.attribute.RemoveUseless",
147:       "weka.core.Tag",
148:       "weka.core.TechnicalInformationHandlerJavadoc",
149:       "weka.classifiers.AbstractClassifier",
150:       "weka.filters.unsupervised.attribute.Center",
151:       "weka.core.FindWithCapabilities",
152:       "weka.core.OptionHandler",
153:       "weka.core.WekaException",
154:       "weka.filters.StreamableFilter",
155:       "weka.core.Range",
156:       "weka.core.scripting.JythonSerializableObject",
157:       "weka.classifiers.Classifier",
158:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
159:       "weka.core.Capabilities$Capability",
160:       "weka.core.SparseInstance",
161:       "org.pentaho.packageManagement.PackageManager",
162:       "weka.attributeSelection.AttributeTransformer",
163:       "weka.core.tokenizers.WordTokenizer",
164:       "weka.classifiers.misc.SerializedClassifier",
165:       "weka.classifiers.trees.M5P",
166:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
167:       "weka.attributeSelection.PrincipalComponents",
168:       "weka.core.stemmers.SnowballStemmer",
169:       "weka.core.stemmers.LovinsStemmer",
170:       "weka.classifiers.Evaluation",
171:       "weka.classifiers.functions.supportVector.Kernel",
172:       "weka.core.WekaPackageManager",
173:       "weka.filters.SupervisedFilter",
174:       "weka.core.TechnicalInformationHandler",
175:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
176:       "weka.core.Option",
177:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
178:       "weka.core.neighboursearch.PerformanceStats",
179:       "weka.filters.Sourcable",
180:       "weka.core.Attribute",
181:       "weka.core.Stopwords",
182:       "weka.core.FastVector",
183:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
184:       "weka.classifiers.MultipleClassifiersCombiner",
185:       "weka.core.tokenizers.NGramTokenizer",
186:       "weka.core.UnassignedDatasetException",
187:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
188:       "weka.classifiers.functions.supportVector.RegSMOImproved",
189:       "weka.classifiers.RandomizableClassifier",
190:       "weka.classifiers.SingleClassifierEnhancer",
191:       "weka.core.RevisionUtils",
192:       "weka.core.Instance",
193:       "weka.classifiers.functions.supportVector.RegSMO",
194:       "weka.classifiers.functions.supportVector.PolyKernel",
195:       "weka.core.ProtectedProperties",
196:       "weka.classifiers.meta.Vote",
197:       "weka.core.StringLocator",
198:       "weka.core.AttributeStats",
199:       "weka.core.WeightedInstancesHandler",
200:       "weka.core.neighboursearch.NearestNeighbourSearch",
201:       "weka.core.TechnicalInformation$Field",
202:       "weka.filters.unsupervised.attribute.Remove",
203:       "weka.core.Randomizable",
204:       "weka.core.Javadoc",
205:       "weka.core.EuclideanDistance",
206:       "weka.core.Instances",
207:       "weka.filters.unsupervised.attribute.Normalize",
208:       "weka.core.UnassignedClassException",
209:       "weka.classifiers.rules.ZeroR",
210:       "weka.filters.unsupervised.attribute.Standardize",
211:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
212:       "weka.core.stemmers.IteratedLovinsStemmer",
213:       "weka.core.UnsupportedAttributeTypeException",
214:       "weka.core.TechnicalInformation",
215:       "weka.classifiers.Sourcable",
216:       "weka.core.RevisionHandler",
217:       "weka.classifiers.evaluation.output.prediction.PlainText",
218:       "weka.core.neighboursearch.TreePerformanceStats",
219:       "weka.core.xml.XMLSerialization",
220:       "weka.filters.unsupervised.attribute.MakeIndicator",
221:       "weka.classifiers.xml.XMLClassifier",
222:       "weka.classifiers.meta.ClassificationViaRegression",
223:       "weka.filters.Filter",
224:       "weka.filters.supervised.attribute.Discretize"
225:     );
226:   } 
227: 
228:   private static void resetClasses() {
229:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_23_tmp__ESTest_scaffolding.class.getClassLoader()); 
230: 
231:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
232:       "weka.classifiers.AbstractClassifier",
233:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
234:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
235:       "weka.core.Capabilities$Capability",
236:       "weka.core.tokenizers.Tokenizer",
237:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
238:       "weka.core.tokenizers.WordTokenizer",
239:       "weka.core.stemmers.NullStemmer",
240:       "weka.classifiers.Evaluation",
241:       "weka.core.Utils",
242:       "weka.core.Option",
243:       "weka.core.AbstractInstance",
244:       "weka.core.SparseInstance",
245:       "weka.classifiers.functions.supportVector.Kernel",
246:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
247:       "weka.core.BinarySparseInstance",
248:       "weka.core.UnassignedDatasetException",
249:       "weka.core.RevisionUtils",
250:       "weka.core.neighboursearch.NearestNeighbourSearch",
251:       "weka.core.neighboursearch.CoverTree",
252:       "weka.core.NormalizableDistance",
253:       "weka.core.EuclideanDistance",
254:       "weka.core.Range",
255:       "weka.core.Capabilities",
256:       "org.pentaho.packageManagement.PackageManager",
257:       "org.pentaho.packageManagement.DefaultPackageManager",
258:       "weka.core.Version",
259:       "weka.core.Environment",
260:       "weka.core.WekaPackageManager",
261:       "weka.core.neighboursearch.BallTree",
262:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
263:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
264:       "weka.core.neighboursearch.balltrees.BallSplitter",
265:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
266:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
267:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
268:       "weka.attributeSelection.ASEvaluation",
269:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
270:       "weka.attributeSelection.PrincipalComponents",
271:       "weka.classifiers.RandomizableClassifier",
272:       "weka.core.Tag",
273:       "weka.classifiers.functions.SGDText",
274:       "weka.classifiers.misc.SerializedClassifier",
275:       "weka.filters.Filter",
276:       "weka.filters.supervised.attribute.Discretize",
277:       "weka.classifiers.functions.SMO",
278:       "weka.classifiers.functions.supportVector.CachedKernel",
279:       "weka.classifiers.functions.supportVector.PolyKernel",
280:       "weka.core.SerializedObject",
281:       "weka.core.Instances",
282:       "weka.core.tokenizers.NGramTokenizer",
283:       "weka.classifiers.SingleClassifierEnhancer",
284:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
285:       "weka.classifiers.meta.CostSensitiveClassifier",
286:       "weka.classifiers.rules.ZeroR",
287:       "weka.classifiers.CostMatrix",
288:       "weka.core.stemmers.SnowballStemmer",
289:       "weka.core.DenseInstance",
290:       "weka.core.neighboursearch.balltrees.BallNode",
291:       "weka.core.TestInstances",
292:       "weka.core.Attribute",
293:       "weka.core.ProtectedProperties",
294:       "weka.core.tokenizers.AlphabeticTokenizer",
295:       "weka.core.neighboursearch.LinearNNSearch",
296:       "weka.core.stemmers.LovinsStemmer",
297:       "weka.core.stemmers.IteratedLovinsStemmer",
298:       "weka.classifiers.misc.InputMappedClassifier",
299:       "weka.core.converters.ArffLoader$ArffReader",
300:       "weka.core.Stopwords",
301:       "weka.classifiers.bayes.BayesNet",
302:       "weka.classifiers.bayes.net.BIFReader",
303:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
304:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
305:       "weka.classifiers.bayes.net.search.local.K2",
306:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
307:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
308:       "weka.core.neighboursearch.KDTree",
309:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
310:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
311:       "weka.classifiers.functions.SMOreg",
312:       "weka.classifiers.functions.supportVector.RegOptimizer",
313:       "weka.classifiers.functions.supportVector.RegSMO",
314:       "weka.classifiers.functions.supportVector.RegSMOImproved",
315:       "weka.classifiers.trees.RandomForest",
316:       "weka.classifiers.trees.RandomTree",
317:       "weka.filters.AllFilter",
318:       "weka.classifiers.lazy.IBk",
319:       "weka.core.matrix.Matrix",
320:       "weka.core.stemmers.Stemming",
321:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
322:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
323:       "weka.classifiers.functions.SimpleLogistic",
324:       "weka.core.WekaEnumeration",
325:       "weka.core.Attribute$1",
326:       "weka.classifiers.bayes.NaiveBayes",
327:       "weka.classifiers.bayes.NaiveBayesUpdateable",
328:       "weka.classifiers.bayes.NaiveBayesMultinomial",
329:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
330:       "weka.core.FindWithCapabilities",
331:       "weka.core.SingleIndex",
332:       "weka.classifiers.trees.m5.M5Base",
333:       "weka.classifiers.trees.M5P",
334:       "weka.classifiers.MultipleClassifiersCombiner",
335:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
336:       "weka.classifiers.meta.Vote",
337:       "weka.core.SerializationHelper",
338:       "weka.core.ClassDiscovery",
339:       "weka.classifiers.meta.MultiScheme",
340:       "weka.classifiers.meta.ClassificationViaRegression",
341:       "weka.classifiers.rules.JRip",
342:       "weka.classifiers.meta.CVParameterSelection",
343:       "weka.core.FastVector",
344:       "weka.core.MinkowskiDistance",
345:       "weka.classifiers.functions.supportVector.StringKernel",
346:       "weka.core.SelectedTag",
347:       "weka.classifiers.functions.MultilayerPerceptron",
348:       "weka.filters.unsupervised.attribute.NominalToBinary",
349:       "weka.classifiers.functions.neural.SigmoidUnit",
350:       "weka.classifiers.functions.neural.LinearUnit",
351:       "weka.classifiers.functions.neural.NeuralConnection",
352:       "weka.classifiers.functions.MultilayerPerceptron$NeuralEnd",
353:       "weka.core.TechnicalInformation",
354:       "weka.core.TechnicalInformation$Type",
355:       "weka.core.TechnicalInformation$Field",
356:       "weka.classifiers.functions.VotedPerceptron",
357:       "weka.classifiers.functions.SGD",
358:       "weka.classifiers.trees.DecisionStump",
359:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
360:       "weka.classifiers.functions.LinearRegression",
361:       "weka.classifiers.rules.PART",
362:       "weka.classifiers.rules.part.MakeDecList",
363:       "weka.classifiers.trees.LMT",
364:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
365:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
366:       "weka.classifiers.meta.Stacking",
367:       "weka.classifiers.lazy.LWL",
368:       "weka.core.Javadoc",
369:       "weka.core.TechnicalInformationHandlerJavadoc",
370:       "weka.classifiers.trees.REPTree",
371:       "weka.filters.SimpleFilter",
372:       "weka.filters.SimpleStreamFilter",
373:       "weka.filters.MultiFilter",
374:       "weka.classifiers.trees.J48",
375:       "weka.classifiers.trees.j48.ClassifierTree",
376:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
377:       "weka.core.WekaException",
378:       "weka.core.UnsupportedAttributeTypeException",
379:       "weka.classifiers.meta.FilteredClassifier",
380:       "weka.filters.supervised.attribute.AttributeSelection",
381:       "weka.attributeSelection.AttributeSelection",
382:       "weka.attributeSelection.CfsSubsetEval",
383:       "weka.attributeSelection.ASSearch",
384:       "weka.attributeSelection.GreedyStepwise",
385:       "weka.attributeSelection.BestFirst",
386:       "weka.attributeSelection.WrapperSubsetEval",
387:       "weka.classifiers.functions.supportVector.RBFKernel",
388:       "weka.classifiers.functions.GaussianProcesses",
389:       "weka.classifiers.meta.MultiClassClassifier",
390:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
391:       "weka.classifiers.functions.Logistic",
392:       "weka.classifiers.IteratedSingleClassifierEnhancer",
393:       "weka.classifiers.meta.AdditiveRegression",
394:       "weka.attributeSelection.ReliefFAttributeEval",
395:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
396:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
397:       "weka.classifiers.meta.RandomCommittee",
398:       "weka.classifiers.functions.SimpleLinearRegression",
399:       "weka.attributeSelection.InfoGainAttributeEval"
400:     );
401:   }
402: }

[MASTER] 06:46:52.436 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);

double[] doubleArray0 = new double[5];
doubleArray0[2] = (double) 1;
naiveBayesMultinomialText0.setNorm(0.0);
doubleArray0[1] = (double) 1;
doubleArray0[3] = (double) 1;
doubleArray0[4] = 1.0;
naiveBayesMultinomialText0.getRevision();
naiveBayesMultinomialText0.stopwordsTipText();
naiveBayesMultinomialText0.minWordFrequencyTipText();
naiveBayesMultinomialText0.normTipText();
naiveBayesMultinomialText0.normalizeDocLengthTipText();
naiveBayesMultinomialText0.getStemmer();
naiveBayesMultinomialText0.lowercaseTokensTipText();
AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 658);
naiveBayesMultinomialText0.getOptions();
naiveBayesMultinomialText0.LNormTipText();
naiveBayesMultinomialText0.normalizeDocLengthTipText();
naiveBayesMultinomialText0.LNormTipText();
naiveBayesMultinomialText0.minWordFrequencyTipText();
naiveBayesMultinomialText0.getStemmer();
LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> linkedHashMap0 = new LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) linkedHashMap0;
naiveBayesMultinomialText0.useStopListTipText();
naiveBayesMultinomialText0.useWordFrequenciesTipText();
naiveBayesMultinomialText0.stemmerTipText();
naiveBayesMultinomialText0.periodicPruningTipText();
naiveBayesMultinomialText0.normalizeDocLengthTipText();
assertEquals(0.0, naiveBayesMultinomialText0.getNorm(), 0.01);


[MASTER] 06:46:52.825 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_39_1574059612806/weka/classifiers/bayes/NaiveBayesMultinomialText_39_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_39_1574059612806/weka/classifiers/bayes/NaiveBayesMultinomialText_39_tmp__ESTest_scaffolding.java]]
[MASTER] 06:46:52.825 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 06:46:52.825 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 06:46:52.825 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 44
[MASTER] 06:46:52.825 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 44
[MASTER] 06:46:52.825 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_39_1574059612806/weka/classifiers/bayes/NaiveBayesMultinomialText_39_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Nov 18 06:46:52 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.LinkedHashMap;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: import weka.classifiers.bayes.NaiveBayesMultinomialText;
16: import weka.classifiers.misc.SerializedClassifier;
17: import weka.core.tokenizers.Tokenizer;
18: import weka.core.tokenizers.WordTokenizer;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class NaiveBayesMultinomialText_39_tmp__ESTest extends NaiveBayesMultinomialText_39_tmp__ESTest_scaffolding {
22: 
23:   /**
24:   //Test case number: 0
25:   /*Coverage entropy=2.63263049877407
26:   */
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
30:       SerializedClassifier serializedClassifier0 = new SerializedClassifier();
31:       naiveBayesMultinomialText0.setUseStopList(true);
32:       naiveBayesMultinomialText0.pruneDictionary();
33:       naiveBayesMultinomialText0.getNorm();
34:       WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
35:       String[] stringArray0 = new String[6];
36:       stringArray0[0] = ")";
37:       stringArray0[1] = "\t";
38:       stringArray0[2] = "-tokenizer";
39:       stringArray0[3] = "\t";
40:       stringArray0[4] = "T(j!l:ERISP";
41:       stringArray0[5] = " t ";
42:       Tokenizer.runTokenizer(wordTokenizer0, stringArray0);
43:       naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
44:       LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
45:       naiveBayesMultinomialText0.minWordFrequencyTipText();
46:       NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
47:       try { 
48:         naiveBayesMultinomialText1.setOptions(stringArray0);
49:         fail("Expecting exception: Exception");
50:       
51:       } catch(Exception e) {
52:          //
53:          // Invalid tokenizer specification string
54:          //
55:          verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
56:       }
57:   }
58: }
RegularFileObject[/tmp/EvoSuite_39_1574059612806/weka/classifiers/bayes/NaiveBayesMultinomialText_39_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Nov 18 06:46:52 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_39_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_39_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.filters.unsupervised.attribute.NominalToBinary",
90:       "weka.core.TestInstances",
91:       "weka.core.DistanceFunction",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "weka.attributeSelection.AttributeEvaluator",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.classifiers.trees.m5.M5Base",
97:       "weka.filters.UnsupervisedFilter",
98:       "weka.core.neighboursearch.BallTree",
99:       "weka.core.logging.Logger$Level",
100:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
101:       "weka.core.DenseInstance",
102:       "weka.core.stemmers.Stemmer",
103:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
104:       "org.pentaho.packageManagement.DefaultPackageManager",
105:       "org.bounce.net.DefaultAuthenticator",
106:       "weka.core.stemmers.NullStemmer",
107:       "weka.core.EnvironmentHandler",
108:       "weka.classifiers.functions.SGDText",
109:       "weka.core.RelationalLocator",
110:       "weka.core.Utils",
111:       "weka.core.CustomDisplayStringProvider",
112:       "weka.core.tokenizers.Tokenizer",
113:       "weka.core.NormalizableDistance",
114:       "weka.classifiers.functions.SMOreg",
115:       "weka.core.NoSupportForMissingValuesException",
116:       "weka.classifiers.UpdateableClassifier",
117:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
118:       "weka.core.TechnicalInformation$Type",
119:       "weka.core.MultiInstanceCapabilitiesHandler",
120:       "weka.core.Copyable",
121:       "weka.core.Capabilities",
122:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
123:       "weka.core.BinarySparseInstance",
124:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
125:       "weka.core.AttributeLocator",
126:       "weka.filters.supervised.attribute.NominalToBinary",
127:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
128:       "weka.classifiers.functions.supportVector.CachedKernel",
129:       "weka.core.SerializedObject",
130:       "weka.clusterers.UpdateableClusterer",
131:       "weka.core.Summarizable",
132:       "weka.core.AdditionalMeasureProducer",
133:       "org.pentaho.packageManagement.PackageManager$1",
134:       "weka.core.Drawable",
135:       "weka.core.matrix.Matrix",
136:       "weka.core.SingleIndex",
137:       "weka.core.CapabilitiesHandler",
138:       "weka.attributeSelection.ASEvaluation",
139:       "weka.core.AbstractInstance",
140:       "weka.core.scripting.JythonObject",
141:       "weka.classifiers.functions.supportVector.RegOptimizer",
142:       "weka.core.SelectedTag",
143:       "org.pentaho.packageManagement.DefaultPackage",
144:       "weka.core.neighboursearch.balltrees.BallSplitter",
145:       "weka.core.Version",
146:       "weka.filters.unsupervised.attribute.RemoveUseless",
147:       "weka.core.Tag",
148:       "weka.core.TechnicalInformationHandlerJavadoc",
149:       "weka.classifiers.AbstractClassifier",
150:       "weka.filters.unsupervised.attribute.Center",
151:       "weka.core.FindWithCapabilities",
152:       "weka.core.OptionHandler",
153:       "weka.core.WekaException",
154:       "weka.filters.StreamableFilter",
155:       "weka.core.Range",
156:       "weka.core.scripting.JythonSerializableObject",
157:       "weka.classifiers.Classifier",
158:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
159:       "weka.core.Capabilities$Capability",
160:       "weka.core.SparseInstance",
161:       "org.pentaho.packageManagement.PackageManager",
162:       "weka.attributeSelection.AttributeTransformer",
163:       "weka.core.tokenizers.WordTokenizer",
164:       "weka.classifiers.misc.SerializedClassifier",
165:       "weka.classifiers.trees.M5P",
166:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
167:       "weka.attributeSelection.PrincipalComponents",
168:       "weka.core.stemmers.SnowballStemmer",
169:       "weka.core.stemmers.LovinsStemmer",
170:       "weka.classifiers.Evaluation",
171:       "weka.classifiers.functions.supportVector.Kernel",
172:       "weka.core.WekaPackageManager",
173:       "weka.filters.SupervisedFilter",
174:       "weka.core.TechnicalInformationHandler",
175:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
176:       "weka.core.Option",
177:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
178:       "weka.core.neighboursearch.PerformanceStats",
179:       "weka.filters.Sourcable",
180:       "weka.core.Attribute",
181:       "weka.core.Stopwords",
182:       "weka.core.FastVector",
183:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
184:       "weka.classifiers.MultipleClassifiersCombiner",
185:       "weka.core.tokenizers.NGramTokenizer",
186:       "weka.core.UnassignedDatasetException",
187:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
188:       "weka.classifiers.functions.supportVector.RegSMOImproved",
189:       "weka.classifiers.RandomizableClassifier",
190:       "weka.classifiers.SingleClassifierEnhancer",
191:       "weka.core.RevisionUtils",
192:       "weka.core.Instance",
193:       "weka.classifiers.functions.supportVector.RegSMO",
194:       "weka.classifiers.functions.supportVector.PolyKernel",
195:       "weka.core.ProtectedProperties",
196:       "weka.classifiers.meta.Vote",
197:       "weka.core.StringLocator",
198:       "weka.core.AttributeStats",
199:       "weka.core.WeightedInstancesHandler",
200:       "weka.core.neighboursearch.NearestNeighbourSearch",
201:       "weka.core.TechnicalInformation$Field",
202:       "weka.filters.unsupervised.attribute.Remove",
203:       "weka.core.Randomizable",
204:       "weka.core.Javadoc",
205:       "weka.core.EuclideanDistance",
206:       "weka.core.Instances",
207:       "weka.filters.unsupervised.attribute.Normalize",
208:       "weka.core.UnassignedClassException",
209:       "weka.classifiers.rules.ZeroR",
210:       "weka.filters.unsupervised.attribute.Standardize",
211:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
212:       "weka.core.stemmers.IteratedLovinsStemmer",
213:       "weka.core.UnsupportedAttributeTypeException",
214:       "weka.core.TechnicalInformation",
215:       "weka.classifiers.Sourcable",
216:       "weka.core.RevisionHandler",
217:       "weka.classifiers.evaluation.output.prediction.PlainText",
218:       "weka.core.neighboursearch.TreePerformanceStats",
219:       "weka.core.xml.XMLSerialization",
220:       "weka.filters.unsupervised.attribute.MakeIndicator",
221:       "weka.classifiers.xml.XMLClassifier",
222:       "weka.classifiers.meta.ClassificationViaRegression",
223:       "weka.filters.Filter",
224:       "weka.filters.supervised.attribute.Discretize"
225:     );
226:   } 
227: 
228:   private static void resetClasses() {
229:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_39_tmp__ESTest_scaffolding.class.getClassLoader()); 
230: 
231:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
232:       "weka.classifiers.AbstractClassifier",
233:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
234:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
235:       "weka.core.Capabilities$Capability",
236:       "weka.core.tokenizers.Tokenizer",
237:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
238:       "weka.core.tokenizers.WordTokenizer",
239:       "weka.core.stemmers.NullStemmer",
240:       "weka.classifiers.Evaluation",
241:       "weka.core.Utils",
242:       "weka.core.Option",
243:       "weka.core.AbstractInstance",
244:       "weka.core.SparseInstance",
245:       "weka.classifiers.functions.supportVector.Kernel",
246:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
247:       "weka.core.BinarySparseInstance",
248:       "weka.core.UnassignedDatasetException",
249:       "weka.core.RevisionUtils",
250:       "weka.core.neighboursearch.NearestNeighbourSearch",
251:       "weka.core.neighboursearch.CoverTree",
252:       "weka.core.NormalizableDistance",
253:       "weka.core.EuclideanDistance",
254:       "weka.core.Range",
255:       "weka.core.Capabilities",
256:       "org.pentaho.packageManagement.PackageManager",
257:       "org.pentaho.packageManagement.DefaultPackageManager",
258:       "weka.core.Version",
259:       "weka.core.Environment",
260:       "weka.core.WekaPackageManager",
261:       "weka.core.neighboursearch.BallTree",
262:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
263:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
264:       "weka.core.neighboursearch.balltrees.BallSplitter",
265:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
266:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
267:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
268:       "weka.attributeSelection.ASEvaluation",
269:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
270:       "weka.attributeSelection.PrincipalComponents",
271:       "weka.classifiers.RandomizableClassifier",
272:       "weka.core.Tag",
273:       "weka.classifiers.functions.SGDText",
274:       "weka.classifiers.misc.SerializedClassifier",
275:       "weka.filters.Filter",
276:       "weka.filters.supervised.attribute.Discretize",
277:       "weka.classifiers.functions.SMO",
278:       "weka.classifiers.functions.supportVector.CachedKernel",
279:       "weka.classifiers.functions.supportVector.PolyKernel",
280:       "weka.core.SerializedObject",
281:       "weka.core.Instances",
282:       "weka.core.tokenizers.NGramTokenizer",
283:       "weka.classifiers.SingleClassifierEnhancer",
284:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
285:       "weka.classifiers.meta.CostSensitiveClassifier",
286:       "weka.classifiers.rules.ZeroR",
287:       "weka.classifiers.CostMatrix",
288:       "weka.core.stemmers.SnowballStemmer",
289:       "weka.core.DenseInstance",
290:       "weka.core.neighboursearch.balltrees.BallNode",
291:       "weka.core.TestInstances",
292:       "weka.core.Attribute",
293:       "weka.core.ProtectedProperties",
294:       "weka.core.tokenizers.AlphabeticTokenizer",
295:       "weka.core.neighboursearch.LinearNNSearch",
296:       "weka.core.stemmers.LovinsStemmer",
297:       "weka.core.stemmers.IteratedLovinsStemmer",
298:       "weka.classifiers.misc.InputMappedClassifier",
299:       "weka.core.converters.ArffLoader$ArffReader",
300:       "weka.core.Stopwords",
301:       "weka.classifiers.bayes.BayesNet",
302:       "weka.classifiers.bayes.net.BIFReader",
303:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
304:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
305:       "weka.classifiers.bayes.net.search.local.K2",
306:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
307:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
308:       "weka.core.neighboursearch.KDTree",
309:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
310:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
311:       "weka.classifiers.functions.SMOreg",
312:       "weka.classifiers.functions.supportVector.RegOptimizer",
313:       "weka.classifiers.functions.supportVector.RegSMO",
314:       "weka.classifiers.functions.supportVector.RegSMOImproved",
315:       "weka.classifiers.trees.RandomForest",
316:       "weka.classifiers.trees.RandomTree",
317:       "weka.filters.AllFilter",
318:       "weka.classifiers.lazy.IBk",
319:       "weka.core.matrix.Matrix",
320:       "weka.core.stemmers.Stemming",
321:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
322:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
323:       "weka.classifiers.functions.SimpleLogistic",
324:       "weka.core.WekaEnumeration",
325:       "weka.core.Attribute$1",
326:       "weka.classifiers.bayes.NaiveBayes",
327:       "weka.classifiers.bayes.NaiveBayesUpdateable",
328:       "weka.classifiers.bayes.NaiveBayesMultinomial",
329:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
330:       "weka.core.FindWithCapabilities",
331:       "weka.core.SingleIndex",
332:       "weka.classifiers.trees.m5.M5Base",
333:       "weka.classifiers.trees.M5P",
334:       "weka.classifiers.MultipleClassifiersCombiner",
335:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
336:       "weka.classifiers.meta.Vote",
337:       "weka.core.SerializationHelper",
338:       "weka.core.ClassDiscovery",
339:       "weka.classifiers.meta.MultiScheme",
340:       "weka.classifiers.meta.ClassificationViaRegression",
341:       "weka.classifiers.rules.JRip",
342:       "weka.classifiers.meta.CVParameterSelection",
343:       "weka.core.FastVector",
344:       "weka.core.MinkowskiDistance",
345:       "weka.classifiers.functions.supportVector.StringKernel",
346:       "weka.core.SelectedTag",
347:       "weka.classifiers.functions.MultilayerPerceptron",
348:       "weka.filters.unsupervised.attribute.NominalToBinary",
349:       "weka.classifiers.functions.neural.SigmoidUnit",
350:       "weka.classifiers.functions.neural.LinearUnit",
351:       "weka.classifiers.functions.neural.NeuralConnection",
352:       "weka.classifiers.functions.MultilayerPerceptron$NeuralEnd",
353:       "weka.core.TechnicalInformation",
354:       "weka.core.TechnicalInformation$Type",
355:       "weka.core.TechnicalInformation$Field",
356:       "weka.classifiers.functions.VotedPerceptron",
357:       "weka.classifiers.functions.SGD",
358:       "weka.classifiers.trees.DecisionStump",
359:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
360:       "weka.classifiers.functions.LinearRegression",
361:       "weka.classifiers.rules.PART",
362:       "weka.classifiers.rules.part.MakeDecList",
363:       "weka.classifiers.trees.LMT",
364:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
365:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
366:       "weka.classifiers.meta.Stacking",
367:       "weka.classifiers.lazy.LWL",
368:       "weka.core.Javadoc",
369:       "weka.core.TechnicalInformationHandlerJavadoc",
370:       "weka.classifiers.trees.REPTree",
371:       "weka.filters.SimpleFilter",
372:       "weka.filters.SimpleStreamFilter",
373:       "weka.filters.MultiFilter",
374:       "weka.classifiers.trees.J48",
375:       "weka.classifiers.trees.j48.ClassifierTree",
376:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
377:       "weka.core.WekaException",
378:       "weka.core.UnsupportedAttributeTypeException",
379:       "weka.classifiers.meta.FilteredClassifier",
380:       "weka.filters.supervised.attribute.AttributeSelection",
381:       "weka.attributeSelection.AttributeSelection",
382:       "weka.attributeSelection.CfsSubsetEval",
383:       "weka.attributeSelection.ASSearch",
384:       "weka.attributeSelection.GreedyStepwise",
385:       "weka.attributeSelection.BestFirst",
386:       "weka.attributeSelection.WrapperSubsetEval",
387:       "weka.classifiers.functions.supportVector.RBFKernel",
388:       "weka.classifiers.functions.GaussianProcesses",
389:       "weka.classifiers.meta.MultiClassClassifier",
390:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
391:       "weka.classifiers.functions.Logistic",
392:       "weka.classifiers.IteratedSingleClassifierEnhancer",
393:       "weka.classifiers.meta.AdditiveRegression",
394:       "weka.attributeSelection.ReliefFAttributeEval",
395:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
396:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
397:       "weka.classifiers.meta.RandomCommittee",
398:       "weka.classifiers.functions.SimpleLinearRegression",
399:       "weka.attributeSelection.InfoGainAttributeEval"
400:     );
401:   }
402: }

[MASTER] 06:46:52.826 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
SerializedClassifier serializedClassifier0 = new SerializedClassifier();
naiveBayesMultinomialText0.setUseStopList(true);
naiveBayesMultinomialText0.pruneDictionary();
naiveBayesMultinomialText0.getNorm();
WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
String[] stringArray0 = new String[6];
stringArray0[0] = ")";
stringArray0[1] = "\t";
stringArray0[2] = "-tokenizer";
stringArray0[3] = "\t";
stringArray0[4] = "T(j!l:ERISP";
stringArray0[5] = " t ";
Tokenizer.runTokenizer(wordTokenizer0, stringArray0);
naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
naiveBayesMultinomialText0.minWordFrequencyTipText();
NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText1.setOptions(stringArray0);

[MASTER] 06:46:52.921 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_42_1574059612883/weka/classifiers/bayes/NaiveBayesMultinomialText_42_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_42_1574059612883/weka/classifiers/bayes/NaiveBayesMultinomialText_42_tmp__ESTest_scaffolding.java]]
[MASTER] 06:46:52.921 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 06:46:52.921 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 06:46:52.921 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 46
[MASTER] 06:46:52.921 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 46
[MASTER] 06:46:52.921 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_42_1574059612883/weka/classifiers/bayes/NaiveBayesMultinomialText_42_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Nov 18 06:46:52 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.LinkedHashMap;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.Random;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: import weka.classifiers.bayes.NaiveBayesMultinomialText;
19: import weka.core.tokenizers.NGramTokenizer;
20: import weka.core.tokenizers.Tokenizer;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
23: public class NaiveBayesMultinomialText_42_tmp__ESTest extends NaiveBayesMultinomialText_42_tmp__ESTest_scaffolding {
24: 
25:   /**
26:   //Test case number: 0
27:   /*Coverage entropy=2.9798775079892375
28:   */
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
32:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
33:       naiveBayesMultinomialText0.getOptions();
34:       naiveBayesMultinomialText0.setUseStopList(false);
35:       NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
36:       String[] stringArray0 = new String[6];
37:       stringArray0[0] = "p@K(=-z{Ti:K{hA.";
38:       stringArray0[1] = "SIOO?p9Y.3GeD$";
39:       stringArray0[2] = "-M";
40:       stringArray0[3] = "Names differ: ";
41:       stringArray0[4] = "CO#b;KZ6DBJG";
42:       stringArray0[5] = "a";
43:       String[] stringArray1 = Tokenizer.tokenize((Tokenizer) nGramTokenizer0, stringArray0);
44:       nGramTokenizer0.setNGramMinSize(1946);
45:       Tokenizer.runTokenizer(nGramTokenizer0, stringArray1);
46:       LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
47:       linkedHashMap0.entrySet();
48:       try { 
49:         naiveBayesMultinomialText0.setOptions(stringArray0);
50:         fail("Expecting exception: NumberFormatException");
51:       
52:       } catch(NumberFormatException e) {
53:       }
54:   }
55: }
RegularFileObject[/tmp/EvoSuite_42_1574059612883/weka/classifiers/bayes/NaiveBayesMultinomialText_42_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Nov 18 06:46:52 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_42_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_42_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.filters.unsupervised.attribute.NominalToBinary",
90:       "weka.core.TestInstances",
91:       "weka.core.DistanceFunction",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "weka.attributeSelection.AttributeEvaluator",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.classifiers.trees.m5.M5Base",
97:       "weka.filters.UnsupervisedFilter",
98:       "weka.core.neighboursearch.BallTree",
99:       "weka.core.logging.Logger$Level",
100:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
101:       "weka.core.DenseInstance",
102:       "weka.core.stemmers.Stemmer",
103:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
104:       "org.pentaho.packageManagement.DefaultPackageManager",
105:       "org.bounce.net.DefaultAuthenticator",
106:       "weka.core.stemmers.NullStemmer",
107:       "weka.core.EnvironmentHandler",
108:       "weka.classifiers.functions.SGDText",
109:       "weka.core.RelationalLocator",
110:       "weka.core.Utils",
111:       "weka.core.CustomDisplayStringProvider",
112:       "weka.core.tokenizers.Tokenizer",
113:       "weka.core.NormalizableDistance",
114:       "weka.classifiers.functions.SMOreg",
115:       "weka.core.NoSupportForMissingValuesException",
116:       "weka.classifiers.UpdateableClassifier",
117:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
118:       "weka.core.TechnicalInformation$Type",
119:       "weka.core.MultiInstanceCapabilitiesHandler",
120:       "weka.core.Copyable",
121:       "weka.core.Capabilities",
122:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
123:       "weka.core.BinarySparseInstance",
124:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
125:       "weka.core.AttributeLocator",
126:       "weka.filters.supervised.attribute.NominalToBinary",
127:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
128:       "weka.classifiers.functions.supportVector.CachedKernel",
129:       "weka.core.SerializedObject",
130:       "weka.clusterers.UpdateableClusterer",
131:       "weka.core.Summarizable",
132:       "weka.core.AdditionalMeasureProducer",
133:       "org.pentaho.packageManagement.PackageManager$1",
134:       "weka.core.Drawable",
135:       "weka.core.matrix.Matrix",
136:       "weka.core.SingleIndex",
137:       "weka.core.CapabilitiesHandler",
138:       "weka.attributeSelection.ASEvaluation",
139:       "weka.core.AbstractInstance",
140:       "weka.core.scripting.JythonObject",
141:       "weka.classifiers.functions.supportVector.RegOptimizer",
142:       "weka.core.SelectedTag",
143:       "org.pentaho.packageManagement.DefaultPackage",
144:       "weka.core.neighboursearch.balltrees.BallSplitter",
145:       "weka.core.Version",
146:       "weka.filters.unsupervised.attribute.RemoveUseless",
147:       "weka.core.Tag",
148:       "weka.core.TechnicalInformationHandlerJavadoc",
149:       "weka.classifiers.AbstractClassifier",
150:       "weka.filters.unsupervised.attribute.Center",
151:       "weka.core.FindWithCapabilities",
152:       "weka.core.OptionHandler",
153:       "weka.core.WekaException",
154:       "weka.filters.StreamableFilter",
155:       "weka.core.Range",
156:       "weka.core.scripting.JythonSerializableObject",
157:       "weka.classifiers.Classifier",
158:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
159:       "weka.core.Capabilities$Capability",
160:       "weka.core.SparseInstance",
161:       "org.pentaho.packageManagement.PackageManager",
162:       "weka.attributeSelection.AttributeTransformer",
163:       "weka.core.tokenizers.WordTokenizer",
164:       "weka.classifiers.misc.SerializedClassifier",
165:       "weka.classifiers.trees.M5P",
166:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
167:       "weka.attributeSelection.PrincipalComponents",
168:       "weka.core.stemmers.SnowballStemmer",
169:       "weka.core.stemmers.LovinsStemmer",
170:       "weka.classifiers.Evaluation",
171:       "weka.classifiers.functions.supportVector.Kernel",
172:       "weka.core.WekaPackageManager",
173:       "weka.filters.SupervisedFilter",
174:       "weka.core.TechnicalInformationHandler",
175:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
176:       "weka.core.Option",
177:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
178:       "weka.core.neighboursearch.PerformanceStats",
179:       "weka.filters.Sourcable",
180:       "weka.core.Attribute",
181:       "weka.core.Stopwords",
182:       "weka.core.FastVector",
183:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
184:       "weka.classifiers.MultipleClassifiersCombiner",
185:       "weka.core.tokenizers.NGramTokenizer",
186:       "weka.core.UnassignedDatasetException",
187:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
188:       "weka.classifiers.functions.supportVector.RegSMOImproved",
189:       "weka.classifiers.RandomizableClassifier",
190:       "weka.classifiers.SingleClassifierEnhancer",
191:       "weka.core.RevisionUtils",
192:       "weka.core.Instance",
193:       "weka.classifiers.functions.supportVector.RegSMO",
194:       "weka.classifiers.functions.supportVector.PolyKernel",
195:       "weka.core.ProtectedProperties",
196:       "weka.classifiers.meta.Vote",
197:       "weka.core.StringLocator",
198:       "weka.core.AttributeStats",
199:       "weka.core.WeightedInstancesHandler",
200:       "weka.core.neighboursearch.NearestNeighbourSearch",
201:       "weka.core.TechnicalInformation$Field",
202:       "weka.filters.unsupervised.attribute.Remove",
203:       "weka.core.Randomizable",
204:       "weka.core.Javadoc",
205:       "weka.core.EuclideanDistance",
206:       "weka.core.Instances",
207:       "weka.filters.unsupervised.attribute.Normalize",
208:       "weka.core.UnassignedClassException",
209:       "weka.classifiers.rules.ZeroR",
210:       "weka.filters.unsupervised.attribute.Standardize",
211:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
212:       "weka.core.stemmers.IteratedLovinsStemmer",
213:       "weka.core.UnsupportedAttributeTypeException",
214:       "weka.core.TechnicalInformation",
215:       "weka.classifiers.Sourcable",
216:       "weka.core.RevisionHandler",
217:       "weka.classifiers.evaluation.output.prediction.PlainText",
218:       "weka.core.neighboursearch.TreePerformanceStats",
219:       "weka.core.xml.XMLSerialization",
220:       "weka.filters.unsupervised.attribute.MakeIndicator",
221:       "weka.classifiers.xml.XMLClassifier",
222:       "weka.classifiers.meta.ClassificationViaRegression",
223:       "weka.filters.Filter",
224:       "weka.filters.supervised.attribute.Discretize"
225:     );
226:   } 
227: 
228:   private static void resetClasses() {
229:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_42_tmp__ESTest_scaffolding.class.getClassLoader()); 
230: 
231:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
232:       "weka.classifiers.AbstractClassifier",
233:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
234:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
235:       "weka.core.Capabilities$Capability",
236:       "weka.core.tokenizers.Tokenizer",
237:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
238:       "weka.core.tokenizers.WordTokenizer",
239:       "weka.core.stemmers.NullStemmer",
240:       "weka.classifiers.Evaluation",
241:       "weka.core.Utils",
242:       "weka.core.Option",
243:       "weka.core.AbstractInstance",
244:       "weka.core.SparseInstance",
245:       "weka.classifiers.functions.supportVector.Kernel",
246:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
247:       "weka.core.BinarySparseInstance",
248:       "weka.core.UnassignedDatasetException",
249:       "weka.core.RevisionUtils",
250:       "weka.core.neighboursearch.NearestNeighbourSearch",
251:       "weka.core.neighboursearch.CoverTree",
252:       "weka.core.NormalizableDistance",
253:       "weka.core.EuclideanDistance",
254:       "weka.core.Range",
255:       "weka.core.Capabilities",
256:       "org.pentaho.packageManagement.PackageManager",
257:       "org.pentaho.packageManagement.DefaultPackageManager",
258:       "weka.core.Version",
259:       "weka.core.Environment",
260:       "weka.core.WekaPackageManager",
261:       "weka.core.neighboursearch.BallTree",
262:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
263:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
264:       "weka.core.neighboursearch.balltrees.BallSplitter",
265:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
266:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
267:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
268:       "weka.attributeSelection.ASEvaluation",
269:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
270:       "weka.attributeSelection.PrincipalComponents",
271:       "weka.classifiers.RandomizableClassifier",
272:       "weka.core.Tag",
273:       "weka.classifiers.functions.SGDText",
274:       "weka.classifiers.misc.SerializedClassifier",
275:       "weka.filters.Filter",
276:       "weka.filters.supervised.attribute.Discretize",
277:       "weka.classifiers.functions.SMO",
278:       "weka.classifiers.functions.supportVector.CachedKernel",
279:       "weka.classifiers.functions.supportVector.PolyKernel",
280:       "weka.core.SerializedObject",
281:       "weka.core.Instances",
282:       "weka.core.tokenizers.NGramTokenizer",
283:       "weka.classifiers.SingleClassifierEnhancer",
284:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
285:       "weka.classifiers.meta.CostSensitiveClassifier",
286:       "weka.classifiers.rules.ZeroR",
287:       "weka.classifiers.CostMatrix",
288:       "weka.core.stemmers.SnowballStemmer",
289:       "weka.core.DenseInstance",
290:       "weka.core.neighboursearch.balltrees.BallNode",
291:       "weka.core.TestInstances",
292:       "weka.core.Attribute",
293:       "weka.core.ProtectedProperties",
294:       "weka.core.tokenizers.AlphabeticTokenizer",
295:       "weka.core.neighboursearch.LinearNNSearch",
296:       "weka.core.stemmers.LovinsStemmer",
297:       "weka.core.stemmers.IteratedLovinsStemmer",
298:       "weka.classifiers.misc.InputMappedClassifier",
299:       "weka.core.converters.ArffLoader$ArffReader",
300:       "weka.core.Stopwords",
301:       "weka.classifiers.bayes.BayesNet",
302:       "weka.classifiers.bayes.net.BIFReader",
303:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
304:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
305:       "weka.classifiers.bayes.net.search.local.K2",
306:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
307:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
308:       "weka.core.neighboursearch.KDTree",
309:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
310:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
311:       "weka.classifiers.functions.SMOreg",
312:       "weka.classifiers.functions.supportVector.RegOptimizer",
313:       "weka.classifiers.functions.supportVector.RegSMO",
314:       "weka.classifiers.functions.supportVector.RegSMOImproved",
315:       "weka.classifiers.trees.RandomForest",
316:       "weka.classifiers.trees.RandomTree",
317:       "weka.filters.AllFilter",
318:       "weka.classifiers.lazy.IBk",
319:       "weka.core.matrix.Matrix",
320:       "weka.core.stemmers.Stemming",
321:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
322:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
323:       "weka.classifiers.functions.SimpleLogistic",
324:       "weka.core.WekaEnumeration",
325:       "weka.core.Attribute$1",
326:       "weka.classifiers.bayes.NaiveBayes",
327:       "weka.classifiers.bayes.NaiveBayesUpdateable",
328:       "weka.classifiers.bayes.NaiveBayesMultinomial",
329:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
330:       "weka.core.FindWithCapabilities",
331:       "weka.core.SingleIndex",
332:       "weka.classifiers.trees.m5.M5Base",
333:       "weka.classifiers.trees.M5P",
334:       "weka.classifiers.MultipleClassifiersCombiner",
335:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
336:       "weka.classifiers.meta.Vote",
337:       "weka.core.SerializationHelper",
338:       "weka.core.ClassDiscovery",
339:       "weka.classifiers.meta.MultiScheme",
340:       "weka.classifiers.meta.ClassificationViaRegression",
341:       "weka.classifiers.rules.JRip",
342:       "weka.classifiers.meta.CVParameterSelection",
343:       "weka.core.FastVector",
344:       "weka.core.MinkowskiDistance",
345:       "weka.classifiers.functions.supportVector.StringKernel",
346:       "weka.core.SelectedTag",
347:       "weka.classifiers.functions.MultilayerPerceptron",
348:       "weka.filters.unsupervised.attribute.NominalToBinary",
349:       "weka.classifiers.functions.neural.SigmoidUnit",
350:       "weka.classifiers.functions.neural.LinearUnit",
351:       "weka.classifiers.functions.neural.NeuralConnection",
352:       "weka.classifiers.functions.MultilayerPerceptron$NeuralEnd",
353:       "weka.core.TechnicalInformation",
354:       "weka.core.TechnicalInformation$Type",
355:       "weka.core.TechnicalInformation$Field",
356:       "weka.classifiers.functions.VotedPerceptron",
357:       "weka.classifiers.functions.SGD",
358:       "weka.classifiers.trees.DecisionStump",
359:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
360:       "weka.classifiers.functions.LinearRegression",
361:       "weka.classifiers.rules.PART",
362:       "weka.classifiers.rules.part.MakeDecList",
363:       "weka.classifiers.trees.LMT",
364:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
365:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
366:       "weka.classifiers.meta.Stacking",
367:       "weka.classifiers.lazy.LWL",
368:       "weka.core.Javadoc",
369:       "weka.core.TechnicalInformationHandlerJavadoc",
370:       "weka.classifiers.trees.REPTree",
371:       "weka.filters.SimpleFilter",
372:       "weka.filters.SimpleStreamFilter",
373:       "weka.filters.MultiFilter",
374:       "weka.classifiers.trees.J48",
375:       "weka.classifiers.trees.j48.ClassifierTree",
376:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
377:       "weka.core.WekaException",
378:       "weka.core.UnsupportedAttributeTypeException",
379:       "weka.classifiers.meta.FilteredClassifier",
380:       "weka.filters.supervised.attribute.AttributeSelection",
381:       "weka.attributeSelection.AttributeSelection",
382:       "weka.attributeSelection.CfsSubsetEval",
383:       "weka.attributeSelection.ASSearch",
384:       "weka.attributeSelection.GreedyStepwise",
385:       "weka.attributeSelection.BestFirst",
386:       "weka.attributeSelection.WrapperSubsetEval",
387:       "weka.classifiers.functions.supportVector.RBFKernel",
388:       "weka.classifiers.functions.GaussianProcesses",
389:       "weka.classifiers.meta.MultiClassClassifier",
390:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
391:       "weka.classifiers.functions.Logistic",
392:       "weka.classifiers.IteratedSingleClassifierEnhancer",
393:       "weka.classifiers.meta.AdditiveRegression",
394:       "weka.attributeSelection.ReliefFAttributeEval",
395:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
396:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
397:       "weka.classifiers.meta.RandomCommittee",
398:       "weka.classifiers.functions.SimpleLinearRegression",
399:       "weka.attributeSelection.InfoGainAttributeEval"
400:     );
401:   }
402: }

[MASTER] 06:46:52.922 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("p[\\e2xMNo9");
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText0.getOptions();
naiveBayesMultinomialText0.setUseStopList(false);
NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
String[] stringArray0 = new String[6];
stringArray0[0] = "p@K(=-z{Ti:K{hA.";
stringArray0[1] = "SIOO?p9Y.3GeD$";
stringArray0[2] = "-M";
stringArray0[3] = "Names differ: ";
stringArray0[4] = "CO#b;KZ6DBJG";
stringArray0[5] = "a";
String[] stringArray1 = Tokenizer.tokenize((Tokenizer) nGramTokenizer0, stringArray0);
nGramTokenizer0.setNGramMinSize(1946);
Tokenizer.runTokenizer(nGramTokenizer0, stringArray1);
LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
linkedHashMap0.entrySet();
naiveBayesMultinomialText0.setOptions(stringArray0);

* Writing JUnit test case 'NaiveBayesMultinomialText_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.classifiers.rules.JRip
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 12627
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 07:03:08.519 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 07:03:08.527 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 07:03:08.532 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 07:03:09.162 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 07:03:09.385 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 07:03:09.386 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.classifiers.rules.JRip
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/classifiers/rules/JRip.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
[MASTER] 07:05:10.759 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z: Line 908
[MASTER] 07:05:10.760 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z: Line 909
[MASTER] 07:05:10.763 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z: Line 918
[MASTER] 07:05:10.783 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z: I10 Branch 169 IFNE L907 - false
[MASTER] 07:05:10.784 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z: I16 Branch 170 IFNE L908 - false
[MASTER] 07:05:10.786 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z: I26 Branch 171 IFLE L909 - true
[MASTER] 07:05:10.814 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 832: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:907 - ReplaceComparisonOperator != -> ==
[MASTER] 07:05:10.815 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 833: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:908 - ReplaceVariable value -> cover
[MASTER] 07:05:10.817 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 834: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:908 - ReplaceVariable value -> accu
[MASTER] 07:05:10.818 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 835: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:908 - ReplaceVariable value -> accuRate
[MASTER] 07:05:10.819 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 836: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:908 - ReplaceVariable value -> maxInfoGain
[MASTER] 07:05:10.821 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 837: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:908 - InsertUnaryOp Negation
[MASTER] 07:05:10.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 838: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:908 - ReplaceComparisonOperator != -> -1
[MASTER] 07:05:10.823 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 841: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:909 - ReplaceVariable splitPoint -> cover
[MASTER] 07:05:10.824 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 842: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:909 - ReplaceVariable splitPoint -> accu
[MASTER] 07:05:10.826 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 843: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:909 - ReplaceVariable splitPoint -> value
[MASTER] 07:05:10.827 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 844: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:909 - ReplaceVariable splitPoint -> accuRate
[MASTER] 07:05:10.828 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 845: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:909 - ReplaceVariable splitPoint -> maxInfoGain
[MASTER] 07:05:10.830 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 846: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:909 - InsertUnaryOp Negation
[MASTER] 07:05:10.831 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 848: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:909 - ReplaceComparisonOperator <= -> ==
[MASTER] 07:05:10.832 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 862: weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z:918 - InsertUnaryOp Negation of isCover
[MASTER] 07:05:10.840 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.rules.JRip.NumericAntd.covers(Lweka/core/Instance;)Z
[MASTER] 07:05:10.843 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z: I16 Branch 170 IFNE L908 - false in context: 
[MASTER] 07:05:10.844 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z: I26 Branch 171 IFLE L909 - true in context: 
[MASTER] 07:05:10.846 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.rules.JRip$NumericAntd.covers(Lweka/core/Instance;)Z: I10 Branch 169 IFNE L907 - false in context: 
[MASTER] 07:06:43.890 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 842s and 220 generations, 222622 statements, best individual has fitness: 12616.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 36%
* Total number of goals: 705
* Number of covered goals: 252
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 26%
* Total number of goals: 416
* Number of covered goals: 107
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 56%
* Total number of goals: 993
* Number of covered goals: 559
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 93
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 26%
* Total number of goals: 416
* Number of covered goals: 107
* Generated 79 tests with total length 1790
* Resulting test suite's coverage: 43% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 22%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'JRip_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.experiment.ResultMatrix
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 12626
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 07:33:41.570 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 07:33:41.573 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 07:33:41.575 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 07:33:41.596 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.experiment.ResultMatrix
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/experiment/ResultMatrix.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
* Search finished after 851s and 36 generations, 33826 statements, best individual has fitness: 2744.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 647
* Number of covered goals: 611
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 441
* Number of covered goals: 402
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 678
* Number of covered goals: 609
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 244
* Number of covered goals: 106
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 124
* Number of covered goals: 123
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 124
* Number of covered goals: 122
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 441
* Number of covered goals: 384
* Generated 184 tests with total length 3296
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 07:53:26.900 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6687270833333333% of time used, but only 77/184 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 20%
* Compiling and checking tests
[MASTER] 07:54:45.568 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing JUnit test case 'ResultMatrix_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.classifiers.Evaluation
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 12626
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 08:44:19.373 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:44:19.377 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:44:19.378 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:44:19.822 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 08:44:20.212 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 08:44:20.213 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 08:44:21.519 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 08:44:21.539 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 08:44:21.539 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 08:44:21.539 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 08:44:21.539 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 08:44:21.540 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 08:44:21.540 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 08:44:21.540 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 08:44:21.541 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 08:44:21.576 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 08:44:21.586 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class weka.classifiers.Evaluation
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/classifiers/Evaluation.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
[MASTER] 08:44:30.786 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
[MASTER] 08:45:52.253 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: Line 1614
[MASTER] 08:45:52.259 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I3 Branch 165 IFNULL L1574 - true
[MASTER] 08:45:52.261 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;:Null
[MASTER] 08:45:52.263 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;
[MASTER] 08:45:52.264 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I3 Branch 165 IFNULL L1574 - true in context: 
[MASTER] 08:47:52.099 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 845s and 92 generations, 72087 statements, best individual has fitness: 15640.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 56%
* Total number of goals: 1378
* Number of covered goals: 778
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 43%
* Total number of goals: 809
* Number of covered goals: 345
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 53
* Number of covered goals: 53
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 59%
* Total number of goals: 424
* Number of covered goals: 251
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 21%
* Total number of goals: 278
* Number of covered goals: 58
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 41%
* Total number of goals: 809
* Number of covered goals: 331
* Generated 132 tests with total length 2592
* Resulting test suite's coverage: 51% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
[MASTER] 09:03:43.601 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 09:03:43.722 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.AllJavadoc: null
[MASTER] 09:03:43.909 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 09:03:43.909 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
[MASTER] 09:03:44.007 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.AllJavadoc
[MASTER] 09:03:44.629 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
* Writing JUnit test case 'Evaluation_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.core.Optimization
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.core.stemmers.LovinsStemmer
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.filters.unsupervised.attribute.Discretize
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 12623
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 12628
* Connecting to master process on port 12625
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.core.stemmers.LovinsStemmer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/core/stemmers/LovinsStemmer.java
[MASTER] 09:04:43.716 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 09:04:43.722 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 09:04:43.723 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 09:04:43.766 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 09:04:43.769 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 09:04:43.773 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
* Finished analyzing classpath
* Generating tests for class weka.filters.unsupervised.attribute.Discretize
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/filters/unsupervised/attribute/Discretize.java
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 09:04:45.791 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 09:04:45.793 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 09:04:45.793 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 09:04:45.797 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.core.Optimization
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/core/Optimization.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
[MASTER] 09:04:48.977 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.core.Optimization.DynamicIntArray.<init>(Lweka/core/Optimization;I)V
[MASTER] 09:06:30.559 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 09:06:30.560 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 09:08:04.546 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
[MASTER] 09:08:22.244 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 274s and 128 generations, 138293 statements, best individual has fitness: 16704.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 10%
* Total number of goals: 620
* Number of covered goals: 59
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 926
* Number of covered goals: 258
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 10%
* Total number of goals: 21
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Generated 13 tests with total length 250
* Resulting test suite's coverage: 17% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
* Writing JUnit test case 'Optimization_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/107_weka/evosuite-tests
* Done!

* Computation finished
* Search finished after 824s and 369 generations, 334205 statements, best individual has fitness: 4344.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 70%
* Total number of goals: 370
* Number of covered goals: 260
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 55%
* Total number of goals: 242
* Number of covered goals: 134
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 74%
* Total number of goals: 713
* Number of covered goals: 530
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 72
* Number of covered goals: 39
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 55%
* Total number of goals: 242
* Number of covered goals: 134
* Generated 80 tests with total length 1731
* Resulting test suite's coverage: 69% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 842s and 103 generations, 122595 statements, best individual has fitness: 2856.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 86%
* Total number of goals: 217
* Number of covered goals: 186
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 66%
* Total number of goals: 428
* Number of covered goals: 281
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 260
* Number of covered goals: 238
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 18
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 66%
* Total number of goals: 428
* Number of covered goals: 281
* Generated 56 tests with total length 1060
* Resulting test suite's coverage: 74% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 80%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'LovinsStemmer_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 25%
* Compiling and checking tests
[MASTER] 09:20:56.859 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 09:20:57.466 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 09:21:11.421 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 09:21:11.422 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
Instances instances0 = new Instances(";dbxg+XRC", arrayList0, 2908);
MockRandom mockRandom0 = new MockRandom();
Instances instances1 = new Instances(instances0);
MockRandom mockRandom1 = new MockRandom(2908);
MockRandom mockRandom2 = new MockRandom();
MockRandom mockRandom3 = new MockRandom();
mockRandom2.nextInt();
MockRandom mockRandom4 = new MockRandom();
mockRandom4.nextDouble();
mockRandom2.longs();
mockRandom4.doubles(0.1, 2587.5);
Attribute attribute0 = new Attribute("@data", instances1, (-1));
mockRandom4.nextLong();
arrayList0.add(attribute0);
MockRandom mockRandom5 = new MockRandom();
mockRandom4.nextInt((-1));
MockRandom mockRandom6 = new MockRandom();
MockRandom mockRandom7 = new MockRandom();
mockRandom6.nextInt((-270));
MockRandom mockRandom8 = new MockRandom();
mockRandom7.longs();
MockRandom mockRandom9 = new MockRandom();
attribute0.enumerateValues();
mockRandom7.nextInt();
MockRandom mockRandom10 = new MockRandom(4);
SystemInUtil.addInputLine("%n(-g&p!v@G86IYY}<H");
mockRandom7.nextInt();
mockRandom0.nextLong();
MockRandom mockRandom11 = new MockRandom(0L);
ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
Discretize discretize0 = new Discretize();
discretize0.setInputFormat(instances0);

[MASTER] 09:21:12.662 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 09:21:12.663 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
Instances instances0 = new Instances(";dbxg+XRC", arrayList0, 2908);
MockRandom mockRandom0 = new MockRandom();
Instances instances1 = new Instances(instances0);
MockRandom mockRandom1 = new MockRandom();
MockRandom mockRandom2 = new MockRandom();
MockRandom mockRandom3 = new MockRandom();
mockRandom2.nextInt();
MockRandom mockRandom4 = new MockRandom();
mockRandom4.nextDouble();
mockRandom2.longs();
mockRandom4.doubles(0.1, 2587.5);
Attribute attribute0 = new Attribute("@data", instances1, (-1));
mockRandom4.nextLong();
arrayList0.add(attribute0);
MockRandom mockRandom5 = new MockRandom();
mockRandom4.nextInt((-1));
MockRandom mockRandom6 = new MockRandom();
MockRandom mockRandom7 = new MockRandom();
mockRandom6.nextInt((-270));
MockRandom mockRandom8 = new MockRandom();
mockRandom7.longs();
MockRandom mockRandom9 = new MockRandom();
attribute0.enumerateValues();
mockRandom7.nextInt();
MockRandom mockRandom10 = new MockRandom(4);
SystemInUtil.addInputLine("%n(-g&p!v@G86IYY}<H");
mockRandom7.nextInt();
mockRandom0.nextLong();
MockRandom mockRandom11 = new MockRandom(0L);
ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
Discretize discretize0 = new Discretize();
discretize0.setInputFormat(instances0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'Discretize_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/107_weka/evosuite-tests
* Done!

* Computation finished
