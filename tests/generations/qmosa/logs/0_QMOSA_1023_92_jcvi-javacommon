* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.Range
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 11925
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 07:33:28.392 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 07:33:28.474 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 07:33:28.475 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToDoubleFunction
[MASTER] 07:33:28.476 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToIntFunction
[MASTER] 07:33:28.477 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToLongFunction
[MASTER] 07:33:28.575 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 07:33:28.576 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.Range
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/Range.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1023
* Starting evolution
[MASTER] 07:33:59.742 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: Line 538
[MASTER] 07:33:59.767 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.<init>(IJ)V: Line 1800
[MASTER] 07:33:59.768 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.<init>(IJ)V: Line 1801
[MASTER] 07:33:59.768 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.<init>(IJ)V: Line 1802
[MASTER] 07:33:59.769 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.<init>(IJ)V: Line 1803
[MASTER] 07:33:59.770 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getLength()J: Line 1807
[MASTER] 07:33:59.770 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getBegin()J: Line 1820
[MASTER] 07:33:59.771 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J: Line 1831
[MASTER] 07:33:59.780 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 291: org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;:535 - ReplaceComparisonOperator > -> -2
[MASTER] 07:33:59.794 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1371: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator + -> %
[MASTER] 07:33:59.795 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1372: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator + -> -
[MASTER] 07:33:59.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1373: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator + -> *
[MASTER] 07:33:59.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1374: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator + -> /
[MASTER] 07:33:59.797 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1378: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator - -> +
[MASTER] 07:33:59.798 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1379: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator - -> %
[MASTER] 07:33:59.798 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1380: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator - -> *
[MASTER] 07:33:59.799 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1381: org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J:1831 - ReplaceArithmeticOperator - -> /
[MASTER] 07:33:59.818 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 2126: org.jcvi.jillion.core.Range$Builder.build()Lorg/jcvi/jillion/core/Range;:2555 - ReplaceComparisonOperator >= -> >
[MASTER] 07:33:59.845 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getBegin()J: root-Branch in context: 
[MASTER] 07:33:59.854 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getLength()J: root-Branch in context: 
[MASTER] 07:33:59.857 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange.getEnd()J: root-Branch in context: 
[MASTER] 07:33:59.862 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I80 Branch 22 IFGT L535 - true in context: 
[MASTER] 07:35:02.779 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 97: org.jcvi.jillion.core.Range.canFitInSignedByte(JJ)Z:493 - ReplaceComparisonOperator < -> <=
[MASTER] 07:35:02.781 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 117: org.jcvi.jillion.core.Range.canFitInSignedByte(JJ)Z:493 - ReplaceComparisonOperator < -> <=
[MASTER] 07:35:02.784 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 189: org.jcvi.jillion.core.Range.canFitInSignedInt(JJ)Z:501 - ReplaceComparisonOperator > -> -2
[MASTER] 07:35:02.789 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 565: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:947 - ReplaceComparisonOperator >= -> >
[MASTER] 07:35:02.845 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range.canFitInSignedInt(JJ)Z: I13 Branch 15 IFGT L501 - true in context: 
[MASTER] 07:35:03.044 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$EmptyShortRange.isEmpty()Z: Line 2198
[MASTER] 07:35:03.089 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$EmptyShortRange.isEmpty()Z: root-Branch
[MASTER] 07:35:03.240 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$EmptyShortRange.isEmpty()Z: root-Branch in context: 
[MASTER] 07:35:14.637 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.jcvi.jillion.core.Range.parseRange(Ljava/lang/String;Lorg/jcvi/jillion/core/Range$CoordinateSystem;)Lorg/jcvi/jillion/core/Range;
[MASTER] 07:40:22.115 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 569: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:951 - ReplaceComparisonOperator >= -> ==
[MASTER] 07:41:05.007 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 503: org.jcvi.jillion.core.Range.complement(Lorg/jcvi/jillion/core/Range;)Ljava/util/List;:843 - ReplaceComparisonOperator == -> -2
[MASTER] 07:41:05.101 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range.complement(Lorg/jcvi/jillion/core/Range;)Ljava/util/List;: I61 Branch 52 IFEQ L843 - true in context: org.jcvi.jillion.core.Range:complement(Lorg/jcvi/jillion/core/Range;)Ljava/util/List;
* Search finished after 844s and 91 generations, 58914 statements, best individual has fitness: 7920.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 69%
* Total number of goals: 632
* Number of covered goals: 436
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 72%
* Total number of goals: 426
* Number of covered goals: 305
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 53%
* Total number of goals: 802
* Number of covered goals: 425
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 77
* Number of covered goals: 39
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 71%
* Total number of goals: 426
* Number of covered goals: 302
* Generated 155 tests with total length 2533
* Resulting test suite's coverage: 62% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 25%
* Compiling and checking tests
[MASTER] 07:49:07.140 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IndexOutOfBoundsException
[MASTER] 07:49:07.140 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.ofLength(9223372036854775807L);
range0.endsBefore(range0);
range0.isSubRangeOf(range0);
range0.spliterator();
Range range1 = Range.ofLength(9223372036854775807L);
LinkedList<Range> linkedList0 = new LinkedList<Range>();
range0.complementFrom(linkedList0);
range0.isSubRangeOf(range1);
LinkedList<Range> linkedList1 = new LinkedList<Range>();
range1.split(9223372036854775807L);

[MASTER] 07:49:08.704 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IndexOutOfBoundsException: given length -9223372036854775786 would make range [1210 - ? ] beyond max allowed end offset
[MASTER] 07:49:08.704 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
Range.Builder range_Builder2 = range_Builder0.contractEnd((-2445L));
range_Builder1.contractEnd((-2445L));
Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
Range.of(1210L, (-9223372036854775786L));

[MASTER] 07:49:11.072 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IndexOutOfBoundsException
[MASTER] 07:49:11.072 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
long long0 = 9223372036854775806L;
Range range0 = Range.of(9223372036854775806L);
Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775806L, 9223372036854775806L);
range0.endsBefore(range1);
Range range2 = Range.of((-3299L));
range1.startsBefore(range2);
Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
range2.getEnd(range_CoordinateSystem1);
LinkedList<Range> linkedList0 = new LinkedList<Range>();
range2.complementFrom(linkedList0);
range0.intersects(range1);
LinkedList<Range> linkedList1 = new LinkedList<Range>();
range1.complement(range2);

[MASTER] 07:49:15.984 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 07:49:15.985 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.ofLength(9223372036854774451L);
Range range1 = Range.of(9223372036854774451L);
range1.endsBefore(range0);
Range range2 = range0.intersection(range1);
Range range3 = range2.intersection(range0);
Range range4 = Range.of(9223372036854774451L);
boolean boolean0 = range0.endsBefore(range4);
assertFalse(boolean0);

range2.startsBefore(range4);
LinkedList<Range> linkedList0 = new LinkedList<Range>();
Consumer<Range> consumer0 = (Consumer<Range>) mock(Consumer.class, new ViolatedAssumptionAnswer());
linkedList0.forEach(consumer0);
List<Range> list0 = range3.complementFrom(linkedList0);
range0.intersects(range3);
boolean boolean1 = range2.intersects(range0);
LinkedList<Range> linkedList1 = new LinkedList<Range>();
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range5 = Range.of(range_CoordinateSystem0, 1287L, 2873L);
boolean boolean2 = range2.intersects(range5);
assertFalse(boolean2 == boolean1);

LinkedList<Range> linkedList2 = new LinkedList<Range>();
Range.of(range_CoordinateSystem0, 192L, 2311L);
List<Range> list1 = range0.complement(range3);
assertFalse(list1.contains(range2));

range4.complementFrom(list0);
assertSame(range3, range2);

LinkedList<Range> linkedList3 = new LinkedList<Range>();
Range.of((-1L), 4294967295L);
Range range6 = Range.ofLength(65579L);
Range range7 = range6.intersection(range4);
range7.intersection(range6);
assertNotSame(range4, range2);
assertNotSame(range4, range3);


[MASTER] 07:49:16.038 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 07:49:16.039 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.ofLength(9223372036854774451L);
Range range1 = Range.of(9223372036854774451L);
boolean boolean0 = range1.endsBefore(range0);
assertFalse(boolean0);

Range range2 = range0.intersection(range1);
Range range3 = range2.intersection(range0);
Range range4 = Range.of(9223372036854774451L);
range0.endsBefore(range4);
boolean boolean1 = range2.startsBefore(range4);
assertTrue(boolean1 == boolean0);

LinkedList<Range> linkedList0 = new LinkedList<Range>();
List<Range> list0 = range3.complementFrom(linkedList0);
range2.complementFrom(list0);
List<Range> list1 = range4.complement(range3);
List<Range> list2 = range4.complementFrom(list1);
assertFalse(list2.contains(range2));
assertTrue(list2.contains(range1));

List<Range> list3 = range0.complement(range4);
assertTrue(list3.contains(range0));

Range range5 = range0.intersection(range4);
assertSame(range5, range3);

Range range6 = Range.ofLength(0L);
assertTrue(range6.isEmpty());


[MASTER] 07:49:16.678 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 07:49:16.678 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.ofLength(9223372036854775807L);
Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
range1.endsBefore(range0);
range1.isSubRangeOf(range0);
range0.spliterator();
Range range2 = Range.ofLength(9223372036854775807L);
LinkedList<Range> linkedList0 = new LinkedList<Range>();
range0.complementFrom(linkedList0);
boolean boolean0 = range1.intersects(range2);
assertTrue(boolean0);

LinkedList<Range> linkedList1 = new LinkedList<Range>();
List<Range> list0 = range2.complement(range1);
assertTrue(list0.contains(range0));

range2.endsBefore(range0);
LinkedList<Range> linkedList2 = new LinkedList<Range>();
LinkedList<Range> linkedList3 = new LinkedList<Range>();
Range range3 = range2.intersection(range1);
Long long0 = new Long((-2654L));
long long1 = range3.getLength();
assertFalse(range3.isEmpty());
assertSame(range2, range0);
assertEquals(0L, long1);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing JUnit test case 'Range_ESTest' to /home/ubuntu/termite/qmosa/tests/s1023/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.util.FileIterator
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 11926
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 07:53:17.101 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 07:53:17.236 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 07:53:17.237 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 07:53:17.240 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.util.FileIterator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/util/FileIterator.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1023
* Starting evolution
* Search finished after 840s and 467 generations, 399679 statements, best individual has fitness: 600.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 107
* Number of covered goals: 102
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 99%
* Total number of goals: 67
* Number of covered goals: 66
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 98%
* Total number of goals: 53
* Number of covered goals: 52
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 74
* Number of covered goals: 40
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 67
* Number of covered goals: 62
* Generated 28 tests with total length 720
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 54%
* Compiling and checking tests
* Writing JUnit test case 'FileIterator_ESTest' to /home/ubuntu/termite/qmosa/tests/s1023/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 11924
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 08:25:46.634 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:25:46.660 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:25:46.661 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:25:46.731 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1023
* Starting evolution
[MASTER] 08:26:07.944 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 08:26:07.944 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 08:26:26.441 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 842s and 132 generations, 140492 statements, best individual has fitness: 344.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 131
* Number of covered goals: 130
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 99%
* Total number of goals: 74
* Number of covered goals: 73
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 48
* Number of covered goals: 48
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 469
* Number of covered goals: 466
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 63%
* Total number of goals: 52
* Number of covered goals: 33
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 74
* Number of covered goals: 61
* Generated 78 tests with total length 2066
* Resulting test suite's coverage: 95% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 68%
* Compiling and checking tests
[MASTER] 08:40:58.021 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 08:40:58.022 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
linkedList0.forEach(consumer0);
DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
byte[] byteArray0 = new byte[9];
byteArray0[0] = (byte)99;
byteArray0[1] = (byte)3;
byteArray0[2] = (byte)1;
byteArray0[3] = (byte)8;
byteArray0[4] = (byte)53;
byteArray0[5] = (byte)1;
byteArray0[6] = (byte)14;
byteArray0[7] = (byte) (-24);
byteArray0[8] = (byte)83;
defaultNucleotideCodec1.toString(byteArray0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'DefaultNucleotideCodec_ESTest' to /home/ubuntu/termite/qmosa/tests/s1023/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 11925
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 08:59:49.829 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 08:59:49.830 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 08:59:49.832 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 08:59:49.861 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:59:49.865 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:59:49.866 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:59:49.965 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 08:59:49.966 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 08:59:49.980 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 08:59:49.980 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 08:59:49.981 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 08:59:49.981 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 08:59:49.982 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 08:59:49.986 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 08:59:49.987 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/assembly/consed/phd/PhdBuilder.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1023
* Starting evolution
[MASTER] 09:03:59.830 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
* Search finished after 840s and 1116 generations, 757795 statements, best individual has fitness: 136.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 93
* Number of covered goals: 91
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 27
* Number of covered goals: 25
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 47
* Number of covered goals: 44
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 16
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 27
* Number of covered goals: 25
* Generated 25 tests with total length 569
* Resulting test suite's coverage: 93% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 6%
* Compiling and checking tests
* Writing JUnit test case 'PhdBuilder_ESTest' to /home/ubuntu/termite/qmosa/tests/s1023/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
