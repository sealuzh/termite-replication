* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 12624
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 07:03:06.502 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 07:03:06.506 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 07:03:06.507 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 07:03:06.539 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
[MASTER] 07:03:07.673 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 07:03:07.673 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 07:03:32.959 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 07:05:09.538 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 841s and 158 generations, 175485 statements, best individual has fitness: 400.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 131
* Number of covered goals: 130
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 74
* Number of covered goals: 72
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 46
* Number of covered goals: 46
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 469
* Number of covered goals: 464
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 58%
* Total number of goals: 52
* Number of covered goals: 30
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 74
* Number of covered goals: 60
* Generated 71 tests with total length 1742
* Resulting test suite's coverage: 94% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 64%
* Compiling and checking tests
[MASTER] 07:18:12.192 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 07:18:12.193 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
byte[] byteArray0 = new byte[6];
byte byte0 = (byte)102;
byteArray0[0] = (byte)102;
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)0;
byteArray0[3] = (byte) (-43);
byteArray0[4] = (byte) (-15);
byteArray0[5] = (byte)0;
defaultNucleotideCodec0.decode(byteArray0, (byte)0);
defaultNucleotideCodec0.toString(byteArray0);

[MASTER] 07:18:12.692 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 07:18:12.693 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[6];
DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
Byte byte0 = new Byte((byte)54);
LinkedList<Object> linkedList0 = new LinkedList<Object>();
Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
defaultNucleotideCodec0.isGap(byteArray0, (-1380));
linkedList0.sort(comparator0);
LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
linkedList1.clone();
LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
linkedList1.parallelStream();
LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
linkedList1.retainAll(linkedList0);
defaultNucleotideCodec0.getUngappedLength(byteArray0);
Byte byte1 = new Byte((byte)54);
defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)54);
byte[] byteArray1 = new byte[4];
byteArray1[0] = (byte)54;
byteArray1[1] = (byte) (-60);
byteArray1[2] = (byte)54;
byteArray1[3] = (byte)54;
defaultNucleotideCodec0.toString(byteArray1);

* Writing JUnit test case 'DefaultNucleotideCodec_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 12624
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 07:19:08.306 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 07:19:08.311 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 07:19:08.322 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 07:19:08.361 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 07:19:08.372 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 07:19:08.373 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 07:19:08.465 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 07:19:08.466 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 07:19:08.467 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 07:19:08.468 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 07:19:08.486 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 07:19:08.487 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 07:19:08.487 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 07:19:08.490 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 07:19:08.491 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/assembly/consed/phd/PhdBuilder.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
[MASTER] 07:20:31.409 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
[MASTER] 07:31:41.480 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 840s and 871 generations, 1018008 statements, best individual has fitness: 136.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 93
* Number of covered goals: 91
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 27
* Number of covered goals: 25
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 47
* Number of covered goals: 44
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 16
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 27
* Number of covered goals: 25
* Generated 27 tests with total length 771
* Resulting test suite's coverage: 93% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing JUnit test case 'PhdBuilder_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.util.FileIterator
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.Range
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 12624
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 12623
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 08:10:11.215 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:10:11.356 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:10:11.357 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:10:11.388 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.util.FileIterator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/util/FileIterator.java
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 08:10:12.178 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:10:12.207 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 08:10:12.208 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToDoubleFunction
[MASTER] 08:10:12.209 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToIntFunction
[MASTER] 08:10:12.209 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToLongFunction
[MASTER] 08:10:12.256 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:10:12.279 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.Range
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/Range.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
[MASTER] 08:12:24.392 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 565: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:947 - ReplaceComparisonOperator >= -> >
[MASTER] 08:12:24.392 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 569: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:951 - ReplaceComparisonOperator >= -> ==
[MASTER] 08:19:16.642 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 633s and 91 generations, 52711 statements, best individual has fitness: 7896.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 69%
* Total number of goals: 632
* Number of covered goals: 435
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 71%
* Total number of goals: 426
* Number of covered goals: 304
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 53%
* Total number of goals: 802
* Number of covered goals: 422
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 77
* Number of covered goals: 38
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 36%
* Total number of goals: 107
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 36%
* Total number of goals: 107
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 71%
* Total number of goals: 426
* Number of covered goals: 301
* Generated 154 tests with total length 1804
* Resulting test suite's coverage: 62% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 27%
* Compiling and checking tests
[MASTER] 08:22:18.183 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-1> but was:<0>
[MASTER] 08:22:18.184 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of((-1L));
LinkedList<Range> linkedList0 = new LinkedList<Range>();
LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
Range range1 = Range.of((-1L), 1L);
assertFalse(range1.isEmpty());

Object object0 = new Object();
LinkedList<Range> linkedList2 = new LinkedList<Range>();
Long long0 = new Long((-1L));
LinkedList<Range> linkedList3 = new LinkedList<Range>();
linkedList3.remove((Object) linkedList2);
LinkedList<Range> linkedList4 = new LinkedList<Range>();
Range range2 = Range.of(1L);
assertFalse(range2.isEmpty());

Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
long long1 = range0.getEnd(range_CoordinateSystem0);
assertEquals((-1L), long1);


[MASTER] 08:22:18.238 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-2> but was:<-1>
[MASTER] 08:22:18.239 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of((-1L));
LinkedList<Range> linkedList0 = new LinkedList<Range>();
linkedList0.removeLastOccurrence(range0);
Long long0 = new Long((-2147483648L));
linkedList0.remove((Object) "Zero Based");
LinkedList<Range> linkedList1 = new LinkedList<Range>();
Long long1 = new Long(9223372036854775807L);
LinkedList<Range> linkedList2 = new LinkedList<Range>();
linkedList2.remove((Object) long0);
LinkedList<Range> linkedList3 = new LinkedList<Range>();
Range range1 = Range.of((-1L));
range1.getEnd();
Range range2 = Range.of((-1L));
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
long long2 = range2.getEnd(range_CoordinateSystem0);
assertEquals((-2L), long2);


[MASTER] 08:22:18.299 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 08:22:18.299 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of((-1L), (-1L));
Range range1 = Range.ofLength(1001L);
List<Range> list0 = range1.split(1001L);
assertTrue(list0.contains(range1));
assertEquals(1, list0.size());

range1.getLength();
Range range2 = Range.of(1126L);
List<Range> list1 = range0.complement(range1);
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range3 = Range.of(range_CoordinateSystem0, (-4258L), 1L);
Range.ofLength(1001L);
Range range4 = Range.ofLength(1211L);
List<Range> list2 = range4.complementFrom(list1);
Range range5 = Range.of(1001L, 1001L);
Range range6 = range5.intersection(range3);
assertFalse(range3.isEmpty());
assertTrue(range6.isEmpty());

range5.asRange();
String string0 = range2.toString();
assertEquals("[ 1126 .. 1126 ]/0B", string0);

range2.complementFrom(list2);
assertTrue(range0.isEmpty());
assertTrue(list2.contains(range0));


[MASTER] 08:22:18.585 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 08:22:18.586 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(2147485927L);
assertTrue(range0.isEmpty());

Range.Builder range_Builder0 = new Range.Builder();
Range.Builder range_Builder1 = range_Builder0.shift(2147485927L);
range_Builder1.expandEnd(2147485927L);
Range.Builder range_Builder2 = range_Builder0.expandBegin(960L);
Range range1 = Range.of(960L);
assertFalse(range1.isEmpty());

range_Builder2.shift(2147485927L);
Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
Range.Builder range_Builder4 = new Range.Builder(0L);
Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
Range.Builder range_Builder6 = new Range.Builder(range_Builder0);
Range range2 = Range.ofLength(255L);
Range range3 = Range.of(0L);
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
Range range4 = Range.of(9353L);
long long0 = range4.getBegin(range_CoordinateSystem0);
assertEquals(9353L, long0);

Range range5 = range4.intersection(range3);
assertTrue(range5.isEmpty());
assertNotSame(range3, range2);
assertFalse(range4.isEmpty());


[MASTER] 08:22:18.714 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 08:22:18.714 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of((-1L));
Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range0.forEach(consumer0);
Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range0.forEach(consumer1);
Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range0.forEach(consumer2);
Long long0 = new Long((-32768L));
Range.Builder range_Builder0 = new Range.Builder(range0);
range_Builder0.expandBegin(2147483647L);
Consumer<Long> consumer3 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range0.forEach(consumer3);
Range range1 = Range.of((-744L), (-55L));
Consumer<Object> consumer4 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range1.forEach(consumer4);
Range range2 = range1.intersection(range0);
assertTrue(range0.isEmpty());
assertTrue(range2.isEmpty());
assertFalse(range1.isEmpty());


[MASTER] 08:22:18.958 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 08:22:18.958 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(2147485927L);
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range1 = Range.of(range_CoordinateSystem0, (-1L), 355L);
range1.endsBefore(range0);
range1.complement(range0);
range0.endsBefore(range1);
Range range2 = Range.of(range_CoordinateSystem0, (-856L), (-1L));
Range range3 = range1.intersection(range0);
boolean boolean0 = range2.endsBefore(range3);
range3.startsBefore(range2);
boolean boolean1 = range0.endsBefore(range2);
assertFalse(boolean1 == boolean0);

Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
Range range4 = Range.of(range_CoordinateSystem1, (-1L), 127L);
Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
range4.getBegin(range_CoordinateSystem2);
Range range5 = Range.of(range_CoordinateSystem1, 2147485927L, 2147485927L);
boolean boolean2 = range5.equals(range0);
assertTrue(range5.equals((Object)range3));
assertNotSame(range5, range3);
assertTrue(boolean2);


[MASTER] 08:22:19.651 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 08:22:19.651 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(2147485927L);
Range range1 = Range.of(2147485927L, 2147485927L);
range1.isSubRangeOf(range0);
range0.endsBefore(range1);
range1.endsBefore(range0);
boolean boolean0 = range1.isEmpty();
assertTrue(boolean0);


[MASTER] 08:22:20.647 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IndexOutOfBoundsException: given length -9223372036854775808 would make range [1815 - ? ] beyond max allowed end offset
[MASTER] 08:22:20.647 [logback-1] WARN  JUnitAnalyzer - Failing test:
 long long0 = 2147483647L;
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
Range.of(1815L, (-9223372036854775808L));

[MASTER] 08:22:24.120 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 08:22:24.120 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.Builder range_Builder0 = new Range.Builder(9223372036854775005L);
Range.Builder range_Builder1 = range_Builder0.contractBegin(9223372036854775005L);
Range.Builder range_Builder2 = range_Builder1.copy();
range_Builder2.shift(9223372036854775005L);
Range range0 = range_Builder1.build();
Range range1 = range_Builder1.build();
boolean boolean0 = range0.equals("");
assertFalse(boolean0);

range1.spliterator();
Range.Builder range_Builder3 = new Range.Builder(252L);
Range.Builder range_Builder4 = new Range.Builder();
Range range2 = range_Builder2.build();
assertTrue(range2.isEmpty());

Long.compareUnsigned(677L, 9223372036854775005L);
Range range3 = range_Builder0.build();
Range range4 = range_Builder0.build();
assertFalse(range4.isEmpty());
assertSame(range4, range3);


[MASTER] 08:22:25.474 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 08:22:25.474 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
Range range0 = Range.ofLength(32767L);
Object object0 = new Object();
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
Range.of(range_CoordinateSystem0, 4813L, 2147453161L);
Range.of(2147487038L);
Range range1 = Range.of(32767L);
Range range2 = range1.intersection(range0);
assertFalse(range2.isEmpty());


* Writing JUnit test case 'Range_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* Search finished after 840s and 631 generations, 679771 statements, best individual has fitness: 640.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 107
* Number of covered goals: 102
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 67
* Number of covered goals: 65
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 53
* Number of covered goals: 51
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 74
* Number of covered goals: 40
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 67
* Number of covered goals: 59
* Generated 36 tests with total length 933
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 59%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'FileIterator_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
