* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.application.international.MessageFormatter
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 10118
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 12:26:00.627 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 12:26:00.633 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 12:26:00.634 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 12:26:00.857 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 12:26:01.138 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 12:26:01.150 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.application.international.MessageFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/application/international/MessageFormatter.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1017
* Starting evolution
[MASTER] 12:26:04.282 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 12:27:39.940 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
[MASTER] 12:29:44.643 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 840s and 590 generations, 512900 statements, best individual has fitness: 624.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 91%
* Total number of goals: 130
* Number of covered goals: 118
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 52
* Number of covered goals: 46
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 150
* Number of covered goals: 141
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 32%
* Total number of goals: 50
* Number of covered goals: 16
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 52
* Number of covered goals: 46
* Generated 36 tests with total length 705
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing JUnit test case 'MessageFormatter_ESTest' to /home/ubuntu/termite/qmosa/tests/s1017/78_caloriecount/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.io.ArchiveScanner
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 10117
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 13:20:56.904 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 13:20:56.951 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 13:20:56.952 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 13:20:57.190 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 13:20:57.386 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 13:20:57.387 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.io.ArchiveScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/io/ArchiveScanner.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1017
* Starting evolution
[MASTER] 13:21:05.411 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 13:22:08.125 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 708s and 899 generations, 695936 statements, best individual has fitness: 504.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 81%
* Total number of goals: 67
* Number of covered goals: 54
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 80%
* Total number of goals: 45
* Number of covered goals: 36
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 202
* Number of covered goals: 173
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 45
* Number of covered goals: 36
* Generated 36 tests with total length 1193
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 36%
* Compiling and checking tests
[MASTER] 13:32:57.280 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:32:57.282 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ImprovedFile improvedFile0 = new ImprovedFile(",cX. ");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
Object object0 = new Object();
Vector<Object> vector0 = new Vector<Object>();
Vector<Object> vector1 = new Vector<Object>();
Vector<Object> vector2 = new Vector<Object>();
Object object1 = new Object();
Object object2 = new Object();
vector2.add((Object) ",cX. ");
vector1.add(object2);
vector2.add(object0);
Object object3 = new Object();
Object object4 = new Object();
Object object5 = new Object();
Vector<Object> vector3 = new Vector<Object>();
Vector<Object> vector4 = new Vector<Object>();
Object object6 = new Object();
vector4.add(object6);
UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
vector4.remove((Object) vector4);
UnaryOperator.identity();
Vector<Object> vector5 = new Vector<Object>();
UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
vector4.replaceAll(unaryOperator1);
Object object7 = new Object();
Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
unaryOperator2.compose((Function<? super Object, ?>) unaryOperator0);
UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
unaryOperator3.compose((Function<? super Object, ?>) function2);
vector2.replaceAll(unaryOperator3);
Object object8 = new Object();
Object object9 = new Object();
boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
assertTrue(boolean0);


[MASTER] 13:32:57.553 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 13:32:57.554 [logback-1] WARN  JUnitAnalyzer - Failing test:
 UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
Function<Object, Locale.LanguageRange> function0 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
unaryOperator0.compose((Function<? super String, ?>) function0);
Function<Object, Object> function1 = Function.identity();
Function<Object, Object> function2 = unaryOperator0.andThen((Function<? super Object, ?>) function1);
Function.identity();
Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
function2.apply(function4);
unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
Function.identity();
Function.identity();
Function<Object, Locale.LanguageRange> function5 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
Function<Object, Locale.LanguageRange> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function5);
Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
UnaryOperator.identity();
Function.identity();
Function<Locale.LanguageRange, String> function8 = (Function<Locale.LanguageRange, String>) mock(Function.class, new ViolatedAssumptionAnswer());
UnaryOperator.identity();
Function<Locale.LanguageRange, String> function9 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends String>) function8);
Function<Locale.LanguageRange, String> function10 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends String>) function9);
Function<Object, String> function11 = function6.andThen((Function<? super Locale.LanguageRange, ? extends String>) function10);
UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
Function<Object, Integer> function12 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
function11.andThen((Function<? super String, ? extends Locale.LanguageRange>) function6);
Function<Object, Integer> function13 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function12);
function13.andThen((Function<? super Integer, ?>) function6);
function7.andThen((Function<? super Integer, ? extends Integer>) function13);
Function<Object, Locale.LanguageRange> function14 = unaryOperator2.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function6);
function14.andThen((Function<? super Locale.LanguageRange, ?>) function9);
unaryOperator2.compose((Function<? super Object, ?>) function14);
unaryOperator2.andThen((Function<? super Object, ?>) function4);
function2.andThen((Function<? super Object, ?>) function7);
unaryOperator2.apply(function1);
unaryOperator0.compose((Function<? super Object, ?>) function11);
ImprovedFile improvedFile0 = new ImprovedFile(".JAR", ".JAR");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
assertFalse(boolean0);


[MASTER] 13:32:57.893 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 13:32:57.893 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Object object0 = new Object();
Vector<Object> vector0 = new Vector<Object>();
Vector<Object> vector1 = new Vector<Object>();
Vector<Object> vector2 = new Vector<Object>();
vector1.clear();
Object object1 = new Object();
Object object2 = new Object();
vector2.add((Object) ",cX. ");
vector1.add(object2);
vector2.add(object0);
Object object3 = new Object();
Object object4 = new Object();
Vector<Object> vector3 = new Vector<Object>();
Vector<Object> vector4 = new Vector<Object>();
Object object5 = new Object();
UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
UnaryOperator.identity();
Vector<Object> vector5 = new Vector<Object>();
UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
Function.identity();
unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
vector4.replaceAll(unaryOperator1);
Object object6 = new Object();
Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
doReturn((Object) null).when(function0).apply(any());
Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
unaryOperator0.compose((Function<? super Object, ?>) unaryOperator0);
UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
function2.apply(unaryOperator1);
unaryOperator2.compose((Function<? super Object, ?>) function2);
vector2.replaceAll(unaryOperator2);
Object object7 = new Object();
Object object8 = new Object();
ImprovedFile improvedFile0 = new ImprovedFile(" 82=F8WijoKP");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
int int0 = archiveScanner0.toFileType(improvedFile0);
assertEquals(2, int0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 11
* Writing JUnit test case 'ArchiveScanner_ESTest' to /home/ubuntu/termite/qmosa/tests/s1017/78_caloriecount/evosuite-tests
* Done!

* Computation finished
