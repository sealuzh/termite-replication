* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.io.ArchiveScanner
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 5241
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 04:54:19.957 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 04:54:19.976 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 04:54:19.977 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 04:54:20.218 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 04:54:20.463 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 04:54:20.464 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.io.ArchiveScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/io/ArchiveScanner.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1022
* Starting evolution
[MASTER] 04:54:35.221 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 05:03:51.900 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[MASTER] 05:04:11.790 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 724s and 899 generations, 739558 statements, best individual has fitness: 296.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 85%
* Total number of goals: 67
* Number of covered goals: 57
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 45
* Number of covered goals: 40
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 202
* Number of covered goals: 187
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 45
* Number of covered goals: 40
* Generated 42 tests with total length 1351
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 33%
* Compiling and checking tests
[MASTER] 05:06:34.162 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 05:06:34.163 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vector<Object> vector0 = new Vector<Object>();
Vector<Object> vector1 = new Vector<Object>();
Vector<Object> vector2 = new Vector<Object>();
Vector<Object> vector3 = new Vector<Object>();
Vector<Object> vector4 = new Vector<Object>();
Vector<Object> vector5 = new Vector<Object>();
vector2.add((Object) null);
vector3.listIterator();
Object[] objectArray0 = new Object[2];
objectArray0[0] = (Object) vector4;
objectArray0[1] = (Object) vector4;
vector4.toArray(objectArray0);
Object object0 = new Object();
vector5.add(object0);
Vector<Object> vector6 = new Vector<Object>();
Object[] objectArray1 = new Object[5];
Object object1 = new Object();
objectArray1[0] = object1;
objectArray1[3] = (Object) vector2;
objectArray1[2] = (Object) null;
objectArray1[3] = (Object) null;
vector6.toArray(objectArray1);
Object object2 = new Object();
vector6.add(object2);
vector4.add((Object) vector6);
vector4.add((Object) vector1);
Object object3 = new Object();
vector2.add((Object) null);
Vector<Object> vector7 = new Vector<Object>();
vector7.add((Object) vector3);
vector7.add(object0);
Vector<Object> vector8 = new Vector<Object>();
Object object4 = new Object();
Object object5 = new Object();
vector8.add(object5);
ImprovedFile improvedFile0 = new ImprovedFile("_nXq*ISnSusDuD&)&YG", "_nXq*ISnSusDuD&)&YG");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
assertTrue(boolean0);


[MASTER] 05:06:34.308 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 05:06:34.315 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vector<Object> vector0 = new Vector<Object>();
Vector<Object> vector1 = new Vector<Object>();
Vector<Object> vector2 = new Vector<Object>();
Vector<Object> vector3 = new Vector<Object>();
Vector<Object> vector4 = new Vector<Object>();
Vector<Object> vector5 = new Vector<Object>();
vector2.add((Object) null);
vector3.listIterator();
Object[] objectArray0 = new Object[2];
objectArray0[0] = (Object) vector4;
objectArray0[1] = (Object) vector4;
vector4.toArray(objectArray0);
Object object0 = new Object();
vector5.add(object0);
Vector<Object> vector6 = new Vector<Object>();
Object[] objectArray1 = new Object[4];
Object object1 = new Object();
objectArray1[0] = object1;
objectArray1[3] = (Object) vector2;
objectArray1[2] = (Object) null;
objectArray1[3] = (Object) null;
vector6.toArray(objectArray1);
Object object2 = new Object();
vector6.add(object2);
vector4.add((Object) vector6);
vector4.add((Object) vector1);
Object object3 = new Object();
vector2.add((Object) null);
vector2.add((Object) vector3);
vector3.add(object0);
Vector<Object> vector7 = new Vector<Object>();
Object object4 = new Object();
Object object5 = new Object();
vector7.add(object5);
ImprovedFile improvedFile0 = new ImprovedFile("_nXq*ISnSusDuD&)&YG", "_nXq*ISnSusDuD&)&YG");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
assertTrue(boolean0);


[MASTER] 05:06:35.795 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 05:06:35.797 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vector<Object> vector0 = new Vector<Object>();
Vector<Object> vector1 = new Vector<Object>();
Vector<Object> vector2 = new Vector<Object>();
Vector<Object> vector3 = new Vector<Object>();
Vector<Object> vector4 = new Vector<Object>();
Vector<Object> vector5 = new Vector<Object>();
vector2.add((Object) null);
vector5.listIterator();
Object[] objectArray0 = new Object[2];
objectArray0[1] = (Object) vector4;
objectArray0[1] = (Object) vector4;
vector4.toArray(objectArray0);
Object object0 = new Object();
vector5.add(object0);
Vector<Object> vector6 = new Vector<Object>();
Object[] objectArray1 = new Object[4];
Object object1 = new Object();
objectArray1[0] = object1;
objectArray1[3] = (Object) vector2;
objectArray1[2] = (Object) null;
objectArray1[3] = (Object) null;
vector6.toArray(objectArray1);
Object object2 = new Object();
vector6.add(object2);
vector4.add((Object) vector6);
vector4.add((Object) vector1);
Object object3 = new Object();
vector2.add((Object) null);
Vector<Object> vector7 = new Vector<Object>();
vector7.add((Object) vector3);
vector7.add(object0);
Vector<Object> vector8 = new Vector<Object>();
Object object4 = new Object();
Object object5 = new Object();
vector8.add(object5);
ImprovedFile improvedFile0 = new ImprovedFile("^_nXq*ISnSusDuD&)&YG", "^_nXq*ISnSusDuD&)&YG");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
assertTrue(boolean0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'ArchiveScanner_ESTest' to /home/ubuntu/termite/qmosa/tests/s1022/78_caloriecount/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.application.international.MessageFormatter
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 5241
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:02:12.122 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:02:12.164 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:02:12.166 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 06:02:12.477 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:02:12.768 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:02:12.770 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.application.international.MessageFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/application/international/MessageFormatter.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1022
* Starting evolution
[MASTER] 06:02:15.567 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 06:04:30.186 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[MASTER] 06:06:16.606 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
* Search finished after 840s and 651 generations, 568617 statements, best individual has fitness: 672.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 89%
* Total number of goals: 130
* Number of covered goals: 116
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 52
* Number of covered goals: 46
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 150
* Number of covered goals: 140
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 32%
* Total number of goals: 50
* Number of covered goals: 16
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 52
* Number of covered goals: 43
* Generated 49 tests with total length 949
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 20%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 8
* Writing JUnit test case 'MessageFormatter_ESTest' to /home/ubuntu/termite/qmosa/tests/s1022/78_caloriecount/evosuite-tests
* Done!

* Computation finished
