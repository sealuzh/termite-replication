* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 7484
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 03:35:43.568 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 03:35:43.580 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 03:35:43.581 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 03:35:43.603 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1014
* Starting evolution
[MASTER] 03:35:44.921 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:35:44.921 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 03:42:13.685 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 841s and 191 generations, 154808 statements, best individual has fitness: 384.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 131
* Number of covered goals: 130
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 74
* Number of covered goals: 72
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 46
* Number of covered goals: 46
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 469
* Number of covered goals: 463
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 63%
* Total number of goals: 52
* Number of covered goals: 33
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 74
* Number of covered goals: 60
* Generated 79 tests with total length 1801
* Resulting test suite's coverage: 95% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 68%
* Compiling and checking tests
[MASTER] 03:50:26.516 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_7_1574049026451/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec_7_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_7_1574049026451/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec_7_tmp__ESTest_scaffolding.java]]
[MASTER] 03:50:26.516 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/92_jcvi-javacommon/jcvi-javacommon.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/92_jcvi-javacommon/jcvi-javacommon.jar
[MASTER] 03:50:26.516 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/92_jcvi-javacommon/jcvi-javacommon.jar
[MASTER] 03:50:26.519 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable byteArray1
  location: class org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec_7_tmp__ESTest: 38
[MASTER] 03:50:26.519 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_7_1574049026451/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec_7_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:50:26.519 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:50:26.520 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_7_1574049026451/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec_7_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Nov 18 03:50:26 GMT 2019
4:  */
5: 
6: package org.jcvi.jillion.core.residue.nt;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Collection;
12: import java.util.Comparator;
13: import java.util.LinkedList;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.ViolatedAssumptionAnswer;
17: import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
18: import org.jcvi.jillion.core.residue.nt.Nucleotide;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
22: public class DefaultNucleotideCodec_7_tmp__ESTest extends DefaultNucleotideCodec_7_tmp__ESTest_scaffolding {
23: 
24:   /**
25:   //Test case number: 0
26:   /*Coverage entropy=2.376742981833967
27:   */
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
31:       LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
32:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
33:       linkedList0.sort(comparator0);
34:       Nucleotide nucleotide0 = Nucleotide.Adenine;
35:       linkedList0.add(nucleotide0);
36:       defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
37:       byte[] byteArray0 = new byte[16];
38:       assertFalse(byteArray0.equals((Object)byteArray1));
39:   }
40: }
RegularFileObject[/tmp/EvoSuite_7_1574049026451/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec_7_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Nov 18 03:50:26 GMT 2019
5:  */
6: 
7: package org.jcvi.jillion.core.residue.nt;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class DefaultNucleotideCodec_7_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
78:     java.lang.System.setProperty("java.awt.headless", "true"); 
79:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
80:     java.lang.System.setProperty("user.country", "US"); 
81:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/92_jcvi-javacommon"); 
82:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
83:     java.lang.System.setProperty("user.language", "en"); 
84:     java.lang.System.setProperty("user.name", "ubuntu"); 
85:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
86:   }
87: 
88:   private static void initializeClasses() {
89:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultNucleotideCodec_7_tmp__ESTest_scaffolding.class.getClassLoader() ,
90:       "org.jcvi.jillion.core.Range$EmptyIntRange",
91:       "org.jcvi.jillion.core.Range$ByteRange",
92:       "org.jcvi.jillion.core.Range$ShortRange",
93:       "org.jcvi.jillion.core.residue.Residue",
94:       "org.jcvi.jillion.core.Range$Builder",
95:       "org.jcvi.jillion.core.io.IOUtil",
96:       "org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache",
97:       "org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache",
98:       "org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec",
99:       "org.jcvi.jillion.core.Range",
100:       "org.jcvi.jillion.core.Range$Comparators$1",
101:       "org.jcvi.jillion.core.residue.nt.NucleotideCodec",
102:       "org.jcvi.jillion.core.Rangeable",
103:       "org.jcvi.jillion.core.Range$Comparators$3",
104:       "org.jcvi.jillion.core.Range$EmptyByteRange",
105:       "org.jcvi.jillion.core.Range$Comparators$2",
106:       "org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange",
107:       "org.jcvi.jillion.core.Range$Comparators$4",
108:       "org.jcvi.jillion.core.Range$Comparators",
109:       "org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl",
110:       "org.jcvi.jillion.core.Range$1",
111:       "org.jcvi.jillion.core.Range$RangeIterator",
112:       "org.jcvi.jillion.core.util.MapUtil",
113:       "org.jcvi.jillion.core.residue.nt.Nucleotide",
114:       "org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange",
115:       "org.jcvi.jillion.core.Ranges",
116:       "org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream",
117:       "org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange",
118:       "org.jcvi.jillion.core.Range$CoordinateSystem",
119:       "org.jcvi.jillion.core.Range$EmptyShortRange",
120:       "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange",
121:       "org.jcvi.jillion.core.Range$LongRange",
122:       "org.jcvi.jillion.core.Range$LongStartIntLengthRange",
123:       "org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange",
124:       "org.jcvi.jillion.core.Range$IntRange",
125:       "org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange",
126:       "org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange",
127:       "org.jcvi.jillion.core.Range$EmptyLongRange",
128:       "org.jcvi.jillion.internal.core.util.Caches",
129:       "org.jcvi.jillion.internal.core.GlyphCodec",
130:       "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange"
131:     );
132:   } 
133:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
134:     mock(Class.forName("java.util.Comparator", false, DefaultNucleotideCodec_7_tmp__ESTest_scaffolding.class.getClassLoader()));
135:   }
136: 
137:   private static void resetClasses() {
138:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultNucleotideCodec_7_tmp__ESTest_scaffolding.class.getClassLoader()); 
139: 
140:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
141:       "org.jcvi.jillion.core.residue.nt.Nucleotide",
142:       "org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec",
143:       "org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl",
144:       "org.jcvi.jillion.internal.core.util.Caches",
145:       "org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache",
146:       "org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache",
147:       "org.jcvi.jillion.core.util.MapUtil",
148:       "org.jcvi.jillion.core.Range",
149:       "org.jcvi.jillion.core.Range$Builder",
150:       "org.jcvi.jillion.core.Range$ByteRange",
151:       "org.jcvi.jillion.core.Range$LongRange",
152:       "org.jcvi.jillion.core.Range$EmptyByteRange",
153:       "org.jcvi.jillion.core.Range$ShortRange",
154:       "org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange",
155:       "org.jcvi.jillion.core.io.IOUtil",
156:       "org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange",
157:       "org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange",
158:       "org.jcvi.jillion.core.Ranges",
159:       "org.jcvi.jillion.core.Range$Comparators",
160:       "org.jcvi.jillion.core.Range$RangeIterator",
161:       "org.jcvi.jillion.core.Range$EmptyLongRange",
162:       "org.jcvi.jillion.core.Range$EmptyShortRange",
163:       "org.jcvi.jillion.core.Range$EmptyIntRange",
164:       "org.jcvi.jillion.core.Range$IntRange",
165:       "org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange",
166:       "org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange",
167:       "org.jcvi.jillion.internal.core.util.JillionUtil"
168:     );
169:   }
170: }

[MASTER] 03:50:26.520 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
linkedList0.sort(comparator0);
Nucleotide nucleotide0 = Nucleotide.Adenine;
linkedList0.add(nucleotide0);
defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
byte[] byteArray0 = new byte[16];
assertFalse(byteArray0.equals((Object)byteArray1));


[MASTER] 03:50:30.612 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 03:50:30.612 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)87;
byteArray0[1] = (byte)21;
byteArray0[2] = (byte) (-1);
byteArray0[3] = (byte) (-89);
byteArray0[4] = (byte)113;
byteArray0[5] = (byte)52;
byteArray0[6] = (byte)3;
byteArray0[7] = (byte) (-64);
defaultNucleotideCodec0.toString(byteArray0);

* Writing JUnit test case 'DefaultNucleotideCodec_ESTest' to /home/ubuntu/termite/qmosa/tests/s1014/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 7482
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 04:32:52.385 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 04:32:52.388 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 04:32:52.390 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 04:32:52.450 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 04:32:52.455 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 04:32:52.457 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 04:32:52.532 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 04:32:52.544 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 04:32:52.545 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 04:32:52.546 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 04:32:52.555 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 04:32:52.558 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 04:32:52.559 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 04:32:52.567 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 04:32:52.568 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/assembly/consed/phd/PhdBuilder.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1014
* Starting evolution
* Search finished after 840s and 1045 generations, 931113 statements, best individual has fitness: 240.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 93
* Number of covered goals: 86
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 27
* Number of covered goals: 22
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 47
* Number of covered goals: 43
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 16
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 27
* Number of covered goals: 22
* Generated 23 tests with total length 531
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'PhdBuilder_ESTest' to /home/ubuntu/termite/qmosa/tests/s1014/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.util.FileIterator
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 7483
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 05:56:46.536 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 05:56:46.691 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 05:56:46.695 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 05:56:46.699 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.util.FileIterator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/util/FileIterator.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1014
* Starting evolution
* Search finished after 841s and 505 generations, 578309 statements, best individual has fitness: 616.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 107
* Number of covered goals: 102
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 67
* Number of covered goals: 65
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 53
* Number of covered goals: 51
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 55%
* Total number of goals: 74
* Number of covered goals: 41
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 67
* Number of covered goals: 61
* Generated 28 tests with total length 585
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 52%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'FileIterator_ESTest' to /home/ubuntu/termite/qmosa/tests/s1014/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.Range
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 7485
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:11:26.307 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:11:26.335 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:11:26.336 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToDoubleFunction
[MASTER] 06:11:26.337 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToIntFunction
[MASTER] 06:11:26.354 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToLongFunction
[MASTER] 06:11:26.390 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:11:26.391 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.Range
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/Range.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1014
* Starting evolution
[MASTER] 06:11:59.030 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: Line 540
[MASTER] 06:11:59.030 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: Line 541
[MASTER] 06:11:59.030 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: Line 542
[MASTER] 06:11:59.044 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.<init>(JJ)V: Line 1887
[MASTER] 06:11:59.044 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.<init>(JJ)V: Line 1888
[MASTER] 06:11:59.044 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.<init>(JJ)V: Line 1889
[MASTER] 06:11:59.044 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.<init>(JJ)V: Line 1890
[MASTER] 06:11:59.044 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getLength()J: Line 1894
[MASTER] 06:11:59.045 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getBegin()J: Line 1907
[MASTER] 06:11:59.045 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getEnd()J: Line 1918
[MASTER] 06:11:59.056 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 263: org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;:531 - ReplaceComparisonOperator > -> -2
[MASTER] 06:11:59.057 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 315: org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;:540 - ReplaceComparisonOperator > -> !=
[MASTER] 06:11:59.057 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 326: org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;:541 - ReplaceComparisonOperator > -> !=
[MASTER] 06:11:59.059 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 569: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:951 - ReplaceComparisonOperator >= -> ==
[MASTER] 06:11:59.072 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1465: org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getEnd()J:1918 - ReplaceArithmeticOperator + -> %
[MASTER] 06:11:59.072 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1466: org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getEnd()J:1918 - ReplaceArithmeticOperator + -> -
[MASTER] 06:11:59.072 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1467: org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getEnd()J:1918 - ReplaceArithmeticOperator + -> *
[MASTER] 06:11:59.072 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1468: org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getEnd()J:1918 - ReplaceArithmeticOperator + -> /
[MASTER] 06:11:59.072 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1472: org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getEnd()J:1918 - ReplaceArithmeticOperator - -> +
[MASTER] 06:11:59.072 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1473: org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getEnd()J:1918 - ReplaceArithmeticOperator - -> %
[MASTER] 06:11:59.072 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1474: org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getEnd()J:1918 - ReplaceArithmeticOperator - -> *
[MASTER] 06:11:59.072 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1475: org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getEnd()J:1918 - ReplaceArithmeticOperator - -> /
[MASTER] 06:11:59.102 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getBegin()J: root-Branch in context: 
[MASTER] 06:11:59.119 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getLength()J: root-Branch in context: 
[MASTER] 06:11:59.126 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I57 Branch 20 IFGT L531 - true in context: 
[MASTER] 06:11:59.130 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getEnd()J: root-Branch in context: 
[MASTER] 06:11:59.130 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I112 Branch 24 IFGT L541 - false in context: 
[MASTER] 06:11:59.131 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I106 Branch 23 IFGT L540 - false in context: 
* Search finished after 593s and 91 generations, 49452 statements, best individual has fitness: 7920.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 69%
* Total number of goals: 632
* Number of covered goals: 437
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 72%
* Total number of goals: 426
* Number of covered goals: 305
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 53%
* Total number of goals: 802
* Number of covered goals: 423
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 77
* Number of covered goals: 39
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 71%
* Total number of goals: 426
* Number of covered goals: 303
* Generated 163 tests with total length 1941
* Resulting test suite's coverage: 62% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 29%
* Compiling and checking tests
[MASTER] 06:23:38.493 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IndexOutOfBoundsException: given length -9223372036854775808 would make range [679 - ? ] beyond max allowed end offset
[MASTER] 06:23:38.493 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Object object0 = new Object();
long long0 = 761L;
Object object1 = new Object();
Range.of(679L, (-9223372036854775808L));

[MASTER] 06:23:40.624 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 06:23:40.624 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(0L, 0L);
Object object0 = new Object();
Object object1 = new Object();
Range range1 = Range.ofLength(0L);
Object object2 = new Object();
Object object3 = new Object();
Object object4 = new Object();
Object object5 = new Object();
boolean boolean0 = range1.equals(object5);
assertFalse(boolean0);
assertNotSame(range1, range0);
assertFalse(range1.isEmpty());


[MASTER] 06:23:40.956 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 06:23:40.956 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of((-257L), 127L);
Range.Builder range_Builder0 = new Range.Builder();
Range.Builder range_Builder1 = new Range.Builder();
Range.Builder range_Builder2 = range_Builder1.copy();
Range range1 = range_Builder2.build();
assertFalse(range1.isEmpty());

range0.equals(range_Builder2);
long long0 = range0.getLength();
assertEquals(385L, long0);


[MASTER] 06:23:41.322 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 06:23:41.322 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.of((-3355L));
Range range0 = Range.of((-9223372036854775786L));
Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range0.forEach(consumer0);
Range range1 = Range.of((-9223372036854775786L), (-501L));
assertNotSame(range1, range0);

Range range2 = Range.of(4294967295L);
assertTrue(range2.isEmpty());


[MASTER] 06:23:42.114 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 06:23:42.114 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Long long0 = new Long(0L);
Range range0 = Range.ofLength(9223372036854775259L);
Long.valueOf(0L);
Range.Builder range_Builder0 = new Range.Builder(0L);
Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
Range range1 = range_Builder1.build();
boolean boolean0 = range1.isSubRangeOf(range0);
assertFalse(range0.isEmpty());
assertTrue(boolean0);

range_Builder0.build();
Range range2 = Range.of(0L);
range1.intersection(range2);
Range range3 = Range.of(0L);
boolean boolean1 = range1.isSubRangeOf(range3);
assertTrue(range1.isEmpty());
assertFalse(range3.isEmpty());
assertTrue(boolean1);

Range range4 = Range.of(4294967295L, 4294967295L);
Range range5 = range4.asRange();
assertTrue(range5.isEmpty());


[MASTER] 06:23:43.502 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 06:23:43.502 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Object object0 = new Object();
Object object1 = new Object();
Object object2 = new Object();
Range range0 = Range.of(4294967295L, 4294967295L);
assertTrue(range0.isEmpty());

Object object3 = new Object();
Object object4 = new Object();
Range.Builder range_Builder0 = new Range.Builder();
Range.Builder range_Builder1 = range_Builder0.contractEnd((-32768L));
Range.Builder range_Builder2 = range_Builder1.expandBegin((-32768L));
range_Builder2.build();
Range range1 = range_Builder1.build();
assertTrue(range1.isEmpty());


[MASTER] 06:23:43.947 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 06:23:43.947 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(4294967295L, 4294967295L);
range0.complement(range0);
Range range1 = Range.ofLength(1417L);
Range range2 = range0.intersection(range1);
range2.intersects(range0);
Range.of((-6621L), 4294967295L);
Range range3 = Range.ofLength(4294967295L);
boolean boolean0 = range2.equals(range3);
assertTrue(range0.isEmpty());
assertFalse(range3.isEmpty());
assertFalse(boolean0);


[MASTER] 06:23:44.138 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 06:23:44.138 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(1696L, 1696L);
range0.getBegin();
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
long long0 = range0.getEnd(range_CoordinateSystem0);
assertEquals(1697L, long0);

range0.getBegin();
Range range1 = Range.of(range_CoordinateSystem0, (-493L), (-493L));
range0.endsBefore(range0);
Range range2 = range1.intersection(range0);
Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range2.forEach(consumer0);
range2.getBegin();
range2.getBegin();
boolean boolean0 = range0.isSubRangeOf(range1);
range0.startsBefore(range1);
boolean boolean1 = range1.equals("S\"");
assertFalse(boolean1);

range1.getBegin();
Range range3 = Range.ofLength(1697L);
assertFalse(range3.isEmpty());

boolean boolean2 = range1.isSubRangeOf(range0);
assertTrue(boolean2 == boolean0);

List<Range> list0 = range0.split(1L);
Range range4 = Range.of((-493L));
List<Range> list1 = range1.complementFrom(list0);
assertTrue(list1.contains(range0));

range4.complement(range1);
Range range5 = range4.asRange();
assertTrue(range4.equals((Object)range1));
assertNotSame(range5, range1);


[MASTER] 06:23:44.454 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 06:23:44.455 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of((-257L), 4294967295L);
assertFalse(range0.isEmpty());

Range range1 = Range.of((-257L));
Range range2 = Range.ofLength(4294967295L);
Range range3 = range1.intersection(range2);
assertFalse(range1.isEmpty());
assertTrue(range3.isEmpty());

Range.Builder range_Builder0 = new Range.Builder(4294967295L);
Range.Builder range_Builder1 = range_Builder0.contractEnd((-3217L));
Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
Range range4 = range_Builder2.build();
Range range5 = Range.of(4294967295L, 4294967295L);
assertTrue(range5.isEmpty());

Long long0 = new Long(761L);
List<Range> list0 = range4.complement(range2);
assertEquals(1, list0.size());
assertFalse(list0.contains(range4));


[MASTER] 06:23:44.736 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 06:23:44.736 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Object object0 = new Object();
Object object1 = new Object();
Object object2 = new Object();
Range range0 = Range.of(4294967295L, 4294967295L);
Object object3 = new Object();
Object object4 = new Object();
Object object5 = new Object();
Object object6 = new Object();
range0.equals(object6);
assertTrue(range0.isEmpty());


[MASTER] 06:23:46.957 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IndexOutOfBoundsException
[MASTER] 06:23:46.957 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(9223372036854775807L);
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
long long0 = (-4048L);
Range range1 = Range.of((-4048L), (-4048L));
range0.startsBefore(range1);
range1.intersects(range0);
Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
List<Range> list0 = range0.complement(range2);
List<Range> list1 = range0.complementFrom(list0);
long long1 = (-1546L);
Range range3 = Range.of((-1546L), (-1546L));
range3.getLength();
range2.startsBefore(range2);
range1.complementFrom(list1);

[MASTER] 06:23:48.058 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 06:23:48.058 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.ofLength(9223372036854775553L);
Range range1 = Range.of(9223372036854775553L);
List<Range> list0 = range0.complement(range1);
assertTrue(list0.contains(range0));

Range range2 = Range.ofLength(9223372034707289772L);
Object object0 = new Object();
Object object1 = new Object();
boolean boolean0 = range2.equals(range0);
assertFalse(boolean0);

List<Range> list1 = range1.complement(range0);
assertFalse(list1.contains(range1));


* Writing JUnit test case 'Range_ESTest' to /home/ubuntu/termite/qmosa/tests/s1014/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
