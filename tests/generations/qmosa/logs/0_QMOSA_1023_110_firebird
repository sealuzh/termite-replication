* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.firebirdsql.jdbc.FBCachedFetcher
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.firebirdsql.jdbc.FBProcedureCall
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Connecting to master process on port 11926
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Connecting to master process on port 11927
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.jdbc.FBProcedureCall
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/110_firebird/src/main/java/org/firebirdsql/jdbc/FBProcedureCall.java
[MASTER] 08:08:50.293 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:08:50.296 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:08:50.318 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:08:50.603 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 08:08:51.143 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 08:08:51.144 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 08:08:51.158 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1023
* Starting evolution
[MASTER] 08:08:51.698 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 08:08:51.717 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 08:08:51.718 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 08:08:51.765 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 08:08:51.765 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 08:08:51.766 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 08:08:51.766 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 08:08:51.767 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 08:08:51.767 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 08:08:52.008 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 08:08:52.179 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.jdbc.FBCachedFetcher
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/110_firebird/src/main/java/org/firebirdsql/jdbc/FBCachedFetcher.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1023
* Starting evolution
[MASTER] 08:09:02.368 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: org.firebirdsql.jdbc.FBCachedFetcher.next()Z:False
[MASTER] 08:09:02.369 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] org.firebirdsql.jdbc.FBCachedFetcher.next()Z
[MASTER] 08:09:02.371 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.firebirdsql.jdbc.FBCachedFetcher.next()Z
[MASTER] 08:09:02.371 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.firebirdsql.jdbc.FBCachedFetcher.next()Z: I4 Branch 22 IFEQ L132 - false in context: org.firebirdsql.jdbc.FBCachedFetcher:next()Z
[MASTER] 08:09:06.348 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class org.firebirdsql.jdbc.FBConnection canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 08:09:13.305 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 08:09:16.668 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: org.firebirdsql.jdbc.FBCachedFetcher.isAfterLast()Z:False
[MASTER] 08:09:16.670 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] org.firebirdsql.jdbc.FBCachedFetcher.isAfterLast()Z
[MASTER] 08:09:16.670 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.firebirdsql.jdbc.FBCachedFetcher.isAfterLast()Z
[MASTER] 08:09:16.671 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.firebirdsql.jdbc.FBCachedFetcher.isAfterLast()Z: I7 Branch 46 IF_ICMPLE L276 - true in context: org.firebirdsql.jdbc.FBCachedFetcher:isAfterLast()Z
[MASTER] 08:15:16.214 [logback-2] ERROR AbstractStatement - Error assigning value of type Callable[] defined at statement Callable<JMXPrincipal>[] callableArray0 = (Callable<JMXPrincipal>[]) Array.newInstance(Callable.class, 8), assignment statement: callableArray0[0] = (Callable<JMXPrincipal>) callableArray0; SUT=org.firebirdsql.jdbc.FBCachedFetcher
[MASTER] 08:15:36.951 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.firebirdsql.jdbc.FBCachedFetcher.<init>(Lorg/firebirdsql/gds/impl/GDSHelper;IILorg/firebirdsql/gds/impl/AbstractIscStmtHandle;Lorg/firebirdsql/jdbc/FBObjectListener$FetcherListener;Z)V
* Search finished after 840s and 498 generations, 571497 statements, best individual has fitness: 688.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 117
* Number of covered goals: 111
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 98
* Number of covered goals: 85
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 15
* Number of covered goals: 15
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 347
* Number of covered goals: 316
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 70%
* Total number of goals: 70
* Number of covered goals: 49
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 18
* Number of covered goals: 17
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 94%
* Total number of goals: 18
* Number of covered goals: 17
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 98
* Number of covered goals: 85
* Generated 60 tests with total length 1380
* Resulting test suite's coverage: 89% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 842s and 245 generations, 306801 statements, best individual has fitness: 1352.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 71%
* Total number of goals: 158
* Number of covered goals: 112
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 59%
* Total number of goals: 118
* Number of covered goals: 70
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 15
* Number of covered goals: 15
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 347
* Number of covered goals: 335
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 93%
* Total number of goals: 28
* Number of covered goals: 26
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 48%
* Total number of goals: 118
* Number of covered goals: 57
* Generated 57 tests with total length 1815
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 62%
* Compiling and checking tests
* Resulting test suite's mutation score: 77%
* Compiling and checking tests
[MASTER] 08:23:25.879 [logback-2] ERROR ClassStateSupport - Could not initialize org.firebirdsql.gds.impl.jni.JniGDSImpl: no jaybird22_x64 in java.library.path
[MASTER] 08:23:25.926 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class org.firebirdsql.gds.impl.jni.JniGDSImpl
[MASTER] 08:23:27.697 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-1410> but was:<-1>
[MASTER] 08:23:27.700 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureParam fBProcedureParam0 = new FBProcedureParam();
fBProcedureParam0.setIndex(106);
FBProcedureParam fBProcedureParam1 = new FBProcedureParam();
FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
fBProcedureCall0.addParam(106, "070");
FBProcedureParam fBProcedureParam2 = new FBProcedureParam(769, "\n");
fBProcedureParam2.setType(2929);
fBProcedureParam0.setType(769);
fBProcedureParam2.setType((-1476));
fBProcedureCall0.addOutputParam(fBProcedureParam0);
fBProcedureCall0.addInputParam(fBProcedureParam1);
FBProcedureParam fBProcedureParam3 = fBProcedureCall0.getInputParam(106);
assertEquals(106, fBProcedureParam3.getIndex());

FBProcedureParam fBProcedureParam4 = new FBProcedureParam(106, "\n");
fBProcedureCall0.addInputParam(fBProcedureParam0);
FBProcedureParam fBProcedureParam5 = new FBProcedureParam();
fBProcedureCall0.registerOutParam(106, (-1264));
FBProcedureParam fBProcedureParam6 = fBProcedureCall0.getInputParam(696);
assertEquals((-1410), fBProcedureParam6.getIndex());


[MASTER] 08:23:27.850 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1095> but was:<0>
[MASTER] 08:23:27.850 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
fBProcedureCall0.addParam(3991, "You cannot set value of an non-existing parameter.");
FBProcedureParam fBProcedureParam0 = new FBProcedureParam(1519, "qY");
fBProcedureParam0.setIndex(1519);
fBProcedureParam0.setIndex(63);
fBProcedureCall0.addOutputParam(fBProcedureParam0);
fBProcedureCall0.addParam(1519, "qY");
fBProcedureCall0.addParam(468, "qY");
FBProcedureParam fBProcedureParam1 = fBProcedureCall0.getOutputParam(63);
assertEquals(0, fBProcedureParam1.getType());

FBProcedureParam fBProcedureParam2 = fBProcedureCall0.getInputParam(1519);
assertEquals(1095, fBProcedureParam2.getType());

fBProcedureCall0.getOutputParams();
fBProcedureCall0.getOutputParams();
fBProcedureCall0.clone();
fBProcedureParam1.setType(63);
FBProcedureCall fBProcedureCall1 = new FBProcedureCall();
fBProcedureCall0.getInputParam(1615);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'FBProcedureCall_ESTest' to /home/ubuntu/termite/qmosa/tests/s1023/110_firebird/evosuite-tests
* Done!

* Computation finished
[MASTER] 08:23:44.476 [logback-1] WARN  ClassResetter - java.lang.reflect.InvocationTargetException, caused by: java.lang.NoClassDefFoundError: Could not initialize class org.firebirdsql.gds.impl.jni.JniGDSImpl
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
  - javax.security.auth.AuthPermission: 
         getSubject: 1
* Writing JUnit test case 'FBCachedFetcher_ESTest' to /home/ubuntu/termite/qmosa/tests/s1023/110_firebird/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.firebirdsql.encodings.EncodingFactory
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Connecting to master process on port 11926
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.encodings.EncodingFactory
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/110_firebird/src/main/java/org/firebirdsql/encodings/EncodingFactory.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1023
* Starting evolution
* Search finished after 841s and 296 generations, 95363 statements, best individual has fitness: 680.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 242
* Number of covered goals: 227
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 195
* Number of covered goals: 187
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 387
* Number of covered goals: 347
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 25
* Number of covered goals: 12
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 195
* Number of covered goals: 187
* Generated 99 tests with total length 430
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 34%
* Compiling and checking tests
* Writing JUnit test case 'EncodingFactory_ESTest' to /home/ubuntu/termite/qmosa/tests/s1023/110_firebird/evosuite-tests
* Done!

* Computation finished
