* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.application.international.MessageFormatter
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 18811
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:23:52.778 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:23:52.785 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:23:52.809 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:23:52.995 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:23:53.218 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:23:53.219 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.application.international.MessageFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/application/international/MessageFormatter.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1021
* Starting evolution
[MASTER] 01:24:02.735 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 01:35:35.360 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 840s and 644 generations, 590266 statements, best individual has fitness: 576.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 89%
* Total number of goals: 130
* Number of covered goals: 116
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 52
* Number of covered goals: 46
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 150
* Number of covered goals: 141
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 34%
* Total number of goals: 50
* Number of covered goals: 17
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 96%
* Total number of goals: 24
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 52
* Number of covered goals: 46
* Generated 45 tests with total length 930
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 21%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'MessageFormatter_ESTest' to /home/ubuntu/termite/qmosa/tests/s1021/78_caloriecount/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.io.ArchiveScanner
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 18808
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:38:24.702 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:38:24.705 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:38:24.705 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:38:24.919 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:38:25.195 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:38:25.200 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.io.ArchiveScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/io/ArchiveScanner.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1021
* Starting evolution
[MASTER] 01:38:44.885 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 01:43:21.697 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 770s and 899 generations, 952589 statements, best individual has fitness: 256.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 87%
* Total number of goals: 67
* Number of covered goals: 58
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 45
* Number of covered goals: 40
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 202
* Number of covered goals: 191
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 45
* Number of covered goals: 40
* Generated 43 tests with total length 1331
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 38%
* Compiling and checking tests
[MASTER] 01:51:30.853 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 01:51:30.854 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[0];
Object object0 = new Object();
Predicate<Object> predicate0 = Predicate.isEqual(object0);
Predicate<Object> predicate1 = predicate0.negate();
Predicate<Object> predicate2 = predicate1.and(predicate0);
Predicate<Object> predicate3 = predicate1.negate();
Predicate<Object> predicate4 = predicate3.and(predicate2);
Predicate<Object> predicate5 = predicate4.negate();
Predicate<Object> predicate6 = predicate2.negate();
Predicate<Object> predicate7 = predicate6.and(predicate2);
Predicate<Object> predicate8 = predicate2.or(predicate5);
PipedInputStream pipedInputStream0 = new PipedInputStream();
Predicate<Object> predicate9 = predicate4.and(predicate5);
predicate1.test(predicate0);
Predicate<Object> predicate10 = predicate7.negate();
Predicate<Object> predicate11 = predicate10.negate();
predicate4.negate();
predicate11.or(predicate3);
Vector<Object> vector0 = new Vector<Object>();
predicate9.and(predicate6);
predicate8.negate();
predicate11.negate();
Predicate<Object> predicate12 = predicate8.or(predicate11);
Predicate<Object> predicate13 = predicate12.negate();
predicate13.negate();
Predicate<Object> predicate14 = predicate5.or(predicate8);
predicate14.or(predicate8);
predicate0.test(predicate9);
vector0.removeIf(predicate8);
ImprovedFile improvedFile0 = new ImprovedFile("jomEBo=z'9pM", "q*r=2MpG");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
assertTrue(boolean0);


[MASTER] 01:51:31.350 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 01:51:31.351 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Object object0 = new Object();
Predicate<Object> predicate0 = Predicate.isEqual(object0);
Predicate<Object> predicate1 = predicate0.negate();
Predicate<Object> predicate2 = predicate1.and(predicate0);
Predicate<Object> predicate3 = predicate0.negate();
Predicate<Object> predicate4 = predicate3.negate();
Predicate<Object> predicate5 = predicate0.negate();
Predicate<Object> predicate6 = predicate5.negate();
Predicate<Object> predicate7 = predicate2.or(predicate5);
predicate1.test(predicate0);
Predicate<Object> predicate8 = predicate6.negate();
Predicate<Object> predicate9 = predicate1.negate();
Predicate<Object> predicate10 = predicate1.negate();
Predicate<Object> predicate11 = predicate9.or(predicate8);
predicate5.test(predicate4);
Predicate<Object> predicate12 = predicate10.or(predicate8);
Predicate<Object> predicate13 = predicate11.negate();
Predicate<Object> predicate14 = predicate10.negate();
Predicate<Object> predicate15 = predicate10.or(predicate13);
Vector<Object> vector0 = new Vector<Object>();
predicate12.negate();
Predicate<Object> predicate16 = predicate7.or(predicate10);
Predicate<Object> predicate17 = predicate4.negate();
Predicate<Object> predicate18 = predicate10.negate();
Predicate<Object> predicate19 = predicate6.and(predicate17);
Predicate<Object> predicate20 = predicate3.and(predicate18);
Predicate<Object> predicate21 = predicate14.negate();
predicate15.negate();
Predicate.isEqual((Object) predicate19);
Predicate<Object> predicate22 = predicate9.or(predicate1);
Predicate<Object> predicate23 = predicate20.negate();
predicate22.negate();
predicate23.negate();
predicate13.test(predicate4);
vector0.removeIf(predicate21);
predicate16.or(predicate0);
ImprovedFile improvedFile0 = new ImprovedFile("2f");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
int int0 = archiveScanner0.toFileType(improvedFile0);
assertEquals(2, int0);


[MASTER] 01:51:31.930 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: Exception
[MASTER] 01:51:31.931 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ImprovedFile improvedFile0 = new ImprovedFile("NZIA.jazr");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
archiveScanner0.addDefaultExcludes();
Vector<String> vector0 = new Vector<String>();
String[] stringArray0 = new String[2];
stringArray0[0] = "*M2BP#R;]H-~[0G";
stringArray0[1] = "NZIA.jazr";
archiveScanner0.setIncludes(stringArray0);
Vector<String> vector1 = new Vector<String>();
archiveScanner0.filesIncluded = vector1;
archiveScanner0.setIncludes(stringArray0);
DirectoryScanner.matchPath("*M2BP#R;]H-~[0G", "NZIA.jazr");
ImprovedFile improvedFile1 = new ImprovedFile("");
ImprovedFile.createTempImprovedFile("<Separator>", "*M2BP#R;]H-~[0G", improvedFile1);
DirectoryScanner.match("", "*M2BP#R;]H-~[0G");
ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile1);
archiveScanner1.includes = stringArray0;
archiveScanner0.scandir(improvedFile1, "*!32pXm5^Q", true);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'ArchiveScanner_ESTest' to /home/ubuntu/termite/qmosa/tests/s1021/78_caloriecount/evosuite-tests
* Done!

* Computation finished
