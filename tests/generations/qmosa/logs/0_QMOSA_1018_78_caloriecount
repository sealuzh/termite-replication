* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.io.ArchiveScanner
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 18381
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 17:14:51.699 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 17:14:51.702 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 17:14:51.703 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 17:14:51.893 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 17:14:52.109 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 17:14:52.110 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.io.ArchiveScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/io/ArchiveScanner.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1018
* Starting evolution
[MASTER] 17:15:15.644 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 17:17:07.846 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 17:20:54.918 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 669s and 899 generations, 779189 statements, best individual has fitness: 608.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 78%
* Total number of goals: 67
* Number of covered goals: 52
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 78%
* Total number of goals: 45
* Number of covered goals: 35
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 81%
* Total number of goals: 202
* Number of covered goals: 163
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 45
* Number of covered goals: 35
* Generated 33 tests with total length 948
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 48%
* Compiling and checking tests
[MASTER] 17:26:17.350 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 17:26:17.350 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vector<Object> vector0 = new Vector<Object>();
Object object0 = new Object();
UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
Function.identity();
vector0.replaceAll(unaryOperator0);
Object object1 = new Object();
FileSystemHandling.shouldAllThrowIOExceptions();
vector0.add(object1);
Object object2 = new Object();
UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
Object object3 = new Object();
Object object4 = new Object();
Object object5 = new Object();
vector0.add(object5);
Object object6 = new Object();
Vector<Object> vector1 = new Vector<Object>();
Vector<Object> vector2 = new Vector<Object>();
vector1.add((Object) unaryOperator0);
Vector<Object> vector3 = new Vector<Object>();
Object object7 = new Object();
ImprovedFile improvedFile0 = new ImprovedFile("91XJmN?qNv", "kjl-B");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
System.setCurrentTimeMillis(392L);
int int0 = archiveScanner0.toFileType(improvedFile0);
assertEquals(2, int0);


[MASTER] 17:26:17.508 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 17:26:17.508 [logback-1] WARN  JUnitAnalyzer - Failing test:
 UnaryOperator.identity();
Function<String, String> function0 = Function.identity();
Object object0 = new Object();
Predicate<Object> predicate0 = Predicate.isEqual((Object) function0);
Predicate<Object> predicate1 = predicate0.negate();
Predicate<Object> predicate2 = predicate0.and(predicate1);
Predicate<Object> predicate3 = predicate1.and(predicate2);
Predicate<Object> predicate4 = predicate1.or(predicate3);
Predicate<Object> predicate5 = predicate0.and(predicate3);
Predicate<Object> predicate6 = predicate0.negate();
Predicate<Object> predicate7 = predicate4.or(predicate6);
Predicate<Object> predicate8 = predicate0.negate();
predicate8.test(predicate3);
predicate4.negate();
Predicate<Object> predicate9 = predicate0.and(predicate5);
Predicate<Object> predicate10 = predicate4.negate();
predicate10.negate();
Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate3);
Predicate<Object> predicate12 = predicate11.or(predicate6);
predicate9.test(predicate4);
Predicate<Object> predicate13 = predicate11.and(predicate6);
predicate5.negate();
Predicate<Object> predicate14 = predicate13.negate();
Predicate<Object> predicate15 = predicate5.or(predicate1);
Predicate<Object> predicate16 = predicate5.or(predicate14);
Predicate<Object> predicate17 = predicate12.negate();
predicate2.negate();
predicate3.negate();
Predicate<Object> predicate18 = Predicate.isEqual((Object) predicate0);
Predicate<Object> predicate19 = predicate7.or(predicate18);
predicate13.or(predicate19);
predicate16.or(predicate3);
predicate15.negate();
predicate16.and(predicate9);
predicate17.or(predicate6);
predicate9.and(predicate4);
predicate6.test(predicate0);
ImprovedFile improvedFile0 = new ImprovedFile("*V42~3qJ~$SM!T");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
assertTrue(boolean0);


[MASTER] 17:26:17.896 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 17:26:17.896 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFile mockFile0 = new MockFile("");
mockFile0.setReadOnly();
MockFile mockFile1 = new MockFile("");
mockFile0.setExecutable(false);
mockFile0.createNewFile();
mockFile1.deleteOnExit();
mockFile0.toURL();
File file0 = mockFile0.getAbsoluteFile();
mockFile0.getCanonicalPath();
mockFile0.createNewFile();
mockFile1.setReadable(true);
File file1 = file0.getCanonicalFile();
mockFile0.setExecutable(true);
file1.deleteOnExit();
file0.delete();
file1.getAbsolutePath();
file1.setReadOnly();
ImprovedFile improvedFile0 = new ImprovedFile(file1);
mockFile0.createNewFile();
file1.setReadable(true);
file1.setReadOnly();
File file2 = MockFile.createTempFile(".WAR", ".WAR", (File) mockFile1);
File file3 = file2.getAbsoluteFile();
MockFile mockFile2 = new MockFile(file1, "Yp+mUpqkd^+ 8x");
file3.mkdirs();
file3.deleteOnExit();
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
file1.setWritable(true);
System.setCurrentTimeMillis(0);
int int0 = archiveScanner0.toFileType(mockFile2);
assertEquals(2, int0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing JUnit test case 'ArchiveScanner_ESTest' to /home/ubuntu/termite/qmosa/tests/s1018/78_caloriecount/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.application.international.MessageFormatter
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 18383
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:20:19.096 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:20:19.116 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:20:19.117 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 18:20:19.320 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 18:20:19.573 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 18:20:19.580 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.application.international.MessageFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/application/international/MessageFormatter.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1018
* Starting evolution
[MASTER] 18:20:37.797 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 18:22:51.520 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[MASTER] 18:26:21.560 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
[MASTER] 18:28:33.794 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 756s and 651 generations, 690018 statements, best individual has fitness: 560.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 91%
* Total number of goals: 130
* Number of covered goals: 118
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 52
* Number of covered goals: 46
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 150
* Number of covered goals: 141
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 50
* Number of covered goals: 20
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 52
* Number of covered goals: 46
* Generated 52 tests with total length 1265
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 20%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing JUnit test case 'MessageFormatter_ESTest' to /home/ubuntu/termite/qmosa/tests/s1018/78_caloriecount/evosuite-tests
* Done!

* Computation finished
