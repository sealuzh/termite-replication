* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: Newzgrabber.Base64Decoder
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/99_newzgrabber/evosuite-files/evosuite.properties
* Connecting to master process on port 18380
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:20:19.412 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:20:19.422 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:20:19.422 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 18:20:20.431 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 18:20:20.511 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 18:20:20.517 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 18:20:22.557 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 18:20:22.579 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 18:20:22.580 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 18:20:22.580 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 18:20:22.581 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 18:20:22.582 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 18:20:22.583 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 18:20:22.583 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 18:20:22.584 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 18:20:22.617 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
* Finished analyzing classpath
* Generating tests for class Newzgrabber.Base64Decoder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/99_newzgrabber/src/main/java/Newzgrabber/Base64Decoder.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1018
* Starting evolution
[MASTER] 18:20:31.707 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Newzgrabber.Base64Decoder.decodeStream()V: Line 20
[MASTER] 18:20:31.707 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Newzgrabber.Base64Decoder.decodeStream()V: Line 21
[MASTER] 18:20:31.707 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Newzgrabber.Base64Decoder.decodeStream()V: Line 23
[MASTER] 18:20:31.708 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 0: Newzgrabber.Base64Decoder.decodeStream()V:21 - InsertUnaryOp Negation
[MASTER] 18:20:31.709 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1: Newzgrabber.Base64Decoder.decodeStream()V:21 - ReplaceComparisonOperator == -> !=
[MASTER] 18:20:31.713 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] Newzgrabber.Base64Decoder.decodeStream()V
[MASTER] 18:20:31.714 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] Newzgrabber.Base64Decoder.decodeStream()V
[MASTER] 18:20:31.714 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch Newzgrabber.Base64Decoder.decodeStream()V: I7 Branch 1 IFEQ L21 - true in context: Newzgrabber.Base64Decoder:decodeStream()V
[MASTER] 18:21:15.841 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 514s and 128 generations, 139804 statements, best individual has fitness: 352.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 76%
* Total number of goals: 76
* Number of covered goals: 58
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 59
* Number of covered goals: 48
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 1
* Number of covered goals: 1
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 69
* Number of covered goals: 65
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 59
* Number of covered goals: 48
* Generated 10 tests with total length 320
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 69%
* Compiling and checking tests
[MASTER] 18:29:32.767 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-89929> but was:<-89867>
[MASTER] 18:29:32.769 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s`Ujh $`");
MockPrintStream mockPrintStream0 = new MockPrintStream("s`Ujh $`");
mockPrintStream0.println(true);
MockFileInputStream mockFileInputStream0 = new MockFileInputStream("s`Ujh $`");
mockPrintStream0.print((Object) mockFileInputStream0);
mockPrintStream0.println();
mockPrintStream0.println((double) (byte)0);
MockFileInputStream mockFileInputStream1 = new MockFileInputStream("s`Ujh $`");
mockFileOutputStream0.flush();
mockFileInputStream1.markSupported();
BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, false);
Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
base64Decoder0.updateProgress();
BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(mockFileInputStream1, false);
Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream1, mockFileOutputStream0);
base64Decoder1.decodeStream();
Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
base64Decoder0.decodeStream();
base64Decoder1.decodeStream();
base64Decoder1.setReader(bufferedCustomInputStream1);
String[] stringArray0 = new String[5];
stringArray0[0] = "s`Ujh $`";
stringArray0[1] = "s`Ujh $`";
stringArray0[2] = "215";
stringArray0[3] = "s`Ujh $`";
stringArray0[4] = "s`Ujh $`";
Newzgrabber.main(stringArray0);
base64Decoder1.decodeStream();
base64Decoder1.setBegin(false);
Base64Decoder base64Decoder3 = new Base64Decoder(bufferedCustomInputStream1, mockFileOutputStream0);
base64Decoder3.decodeStream();
base64Decoder3.decodeStream();
base64Decoder0.decodeStream();
base64Decoder2.decodeStream();
base64Decoder3.decodeStream();
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
base64Decoder2.decodeStream();
base64Decoder1.decodeStream();
base64Decoder3.decodeStream();
base64Decoder3.decodeStream();
assertEquals((-89929), mockFileInputStream1.available());


[MASTER] 18:29:33.875 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-110011> but was:<-110008>
[MASTER] 18:29:33.876 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("e");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
mockPrintStream0.println(true);
MockFileInputStream mockFileInputStream0 = new MockFileInputStream("e");
BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, true);
Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
base64Decoder0.MARKLIMIT = 117;
base64Decoder0.decodeStream();
boolean boolean0 = base64Decoder0.foundbegin;
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
bufferedCustomInputStream0.setTempfile("e");
base64Decoder0.decodeStream();
Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
base64Decoder1.decodeStream();
base64Decoder1.setLineCount(117);
Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
base64Decoder1.setLineCount(117);
base64Decoder2.foundbegin = false;
base64Decoder2.ABORT = false;
base64Decoder2.decodeStream();
Newzgrabber.verbose = true;
base64Decoder2.decodeStream();
base64Decoder1.decodeStream();
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
base64Decoder2.decodeStream();
assertEquals((-110011), mockFileInputStream0.available());


[MASTER] 18:29:34.395 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-19939> but was:<-19896>
[MASTER] 18:29:34.396 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s`Ujh $`");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
char[] charArray0 = new char[5];
charArray0[0] = 'T';
charArray0[2] = '-';
charArray0[3] = 'T';
Object[][] objectArray0 = new Object[6][7];
Object object0 = new Object();
Object object1 = new Object();
Object[] objectArray1 = new Object[15];
objectArray1[0] = (Object) '-';
objectArray1[1] = (Object) 'T';
objectArray1[2] = (Object) '-';
objectArray1[3] = (Object) '-';
objectArray1[4] = (Object) mockPrintStream0;
objectArray1[5] = object0;
objectArray1[6] = (Object) mockPrintStream0;
DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
mockPrintStream0.print(objectArray1[2]);
mockPrintStream0.println();
mockPrintStream0.println((double) (byte)0);
DefaultTableModel defaultTableModel1 = new DefaultTableModel();
mockPrintStream0.print((Object) defaultTableModel0);
mockPrintStream0.println();
mockPrintStream0.println(0.0);
mockPrintStream0.println((-916));
MockFileInputStream mockFileInputStream0 = new MockFileInputStream("s`Ujh $`");
BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, true);
Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
Newzgrabber.verbose = false;
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
assertEquals((-19939), mockFileInputStream0.available());
assertEquals(5L, base64Decoder0.getLineCount());


[MASTER] 18:29:35.670 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test8 -> class java.lang.AssertionError: expected:<-99987> but was:<-99986>
[MASTER] 18:29:35.672 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
Object object0 = new Object();
DefaultTableModel defaultTableModel0 = new DefaultTableModel();
mockPrintStream0.print((Object) ".");
mockPrintStream0.println();
mockPrintStream0.println((-1630.06574));
MockFileInputStream mockFileInputStream0 = new MockFileInputStream(".");
mockFileOutputStream0.flush();
mockFileInputStream0.markSupported();
BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, false);
BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(mockFileInputStream0, 3);
Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream1, mockFileOutputStream0);
BufferedCustomInputStream bufferedCustomInputStream2 = new BufferedCustomInputStream(bufferedCustomInputStream0, false);
Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream1, mockFileOutputStream0);
base64Decoder1.decodeStream();
Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream2, mockPrintStream0);
base64Decoder0.decodeStream();
Base64Decoder base64Decoder3 = new Base64Decoder(bufferedCustomInputStream1, (OutputStream) null);
base64Decoder3.decodeStream();
Base64Decoder base64Decoder4 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
base64Decoder4.decodeStream();
Base64Decoder base64Decoder5 = new Base64Decoder(bufferedCustomInputStream2, (OutputStream) null);
base64Decoder5.setBegin(false);
base64Decoder1.decodeStream();
base64Decoder1.decodeStream();
base64Decoder4.decodeStream();
base64Decoder0.decodeStream();
base64Decoder3.decodeStream();
base64Decoder3.decodeStream();
base64Decoder0.decodeStream();
assertEquals((-99987), mockFileInputStream0.available());
assertEquals(1L, base64Decoder0.getLineCount());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 18
* Writing JUnit test case 'Base64Decoder_ESTest' to /home/ubuntu/termite/qmosa/tests/s1018/99_newzgrabber/evosuite-tests
* Done!

* Computation finished
