* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.Range
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 18811
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:11:50.464 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:11:50.499 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:11:50.500 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToDoubleFunction
[MASTER] 00:11:50.501 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToIntFunction
[MASTER] 00:11:50.502 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToLongFunction
[MASTER] 00:11:50.574 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:11:50.575 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.Range
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/Range.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1021
* Starting evolution
[MASTER] 00:13:30.652 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 214: org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;:521 - ReplaceComparisonOperator > -> >=
[MASTER] 00:15:14.789 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$Comparators$1.compare(Lorg/jcvi/jillion/core/Range;Lorg/jcvi/jillion/core/Range;)I: Line 179
[MASTER] 00:15:14.802 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$LongRange.equals(Ljava/lang/Object;)Z: Line 1084
[MASTER] 00:15:14.920 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 2242: org.jcvi.jillion.core.Range$Comparators$1.compare(Lorg/jcvi/jillion/core/Range;Lorg/jcvi/jillion/core/Range;)I:177 - ReplaceComparisonOperator != -> -1
[MASTER] 00:15:14.936 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$LongRange.equals(Ljava/lang/Object;)Z: I4 Branch 78 IF_ACMPNE L1083 - false in context: 
[MASTER] 00:19:32.351 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 2244: org.jcvi.jillion.core.Range$Comparators$1.compare(Lorg/jcvi/jillion/core/Range;Lorg/jcvi/jillion/core/Range;)I:177 - ReplaceComparisonOperator != -> >
* Search finished after 712s and 91 generations, 60033 statements, best individual has fitness: 7304.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 72%
* Total number of goals: 632
* Number of covered goals: 458
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 76%
* Total number of goals: 426
* Number of covered goals: 325
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 55%
* Total number of goals: 802
* Number of covered goals: 439
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 77
* Number of covered goals: 39
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 426
* Number of covered goals: 322
* Generated 170 tests with total length 2370
* Resulting test suite's coverage: 65% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 30%
* Compiling and checking tests
[MASTER] 00:26:43.714 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 00:26:43.714 [logback-1] WARN  JUnitAnalyzer - Failing test:
 long long0 = 4294967329L;
long long1 = 4294967295L;
Range.of(4294967295L);
long long2 = 693L;
Range range0 = Range.of(693L, 4294967329L);
Range range1 = Range.ofLength(4294967295L);
range1.getBegin();
range1.complement(range0);

[MASTER] 00:26:44.318 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<4> but was:<0>
[MASTER] 00:26:44.319 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(4294967295L, 4294967295L);
Range range1 = Range.of(4294967295L);
range1.spliterator();
Range range2 = Range.of(4294967295L, 4294967295L);
range2.endsBefore(range0);
range0.intersects(range2);
range2.isSubRangeOf(range2);
range1.equals(range0);
Range range3 = Range.ofLength(4294967295L);
Range range4 = Range.of(4294967295L);
List<Range> list0 = range4.complement(range0);
assertSame(range4, range0);

List<Range> list1 = range4.complementFrom(list0);
List<Range> list2 = range2.complementFrom(list1);
assertEquals(4, list2.size());

Range range5 = Range.of((-2174L));
range5.intersects(range3);
assertFalse(range3.isEmpty());


[MASTER] 00:26:44.818 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 00:26:44.818 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.Builder range_Builder0 = new Range.Builder(0L);
Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
Range range0 = range_Builder0.build();
Range range1 = Range.of(1470L);
Range range2 = range0.intersection(range1);
Range range3 = Range.of(0L, 0L);
assertNotSame(range3, range2);
assertTrue(range3.isEmpty());
assertTrue(range3.equals((Object)range0));


[MASTER] 00:26:45.159 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 00:26:45.159 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.Builder range_Builder0 = new Range.Builder();
Range range0 = Range.of(0L, 0L);
Range range1 = Range.of(0L);
range0.spliterator();
boolean boolean0 = range1.isSubRangeOf(range0);
Range range2 = Range.of(0L, 4294967295L);
range1.spliterator();
range1.endsBefore(range2);
boolean boolean1 = range1.intersects(range0);
boolean boolean2 = range1.isSubRangeOf(range2);
assertTrue(boolean2 == boolean1);

Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range3 = Range.of(range_CoordinateSystem0, 153L, 4294967295L);
Range range4 = Range.of(9223372032559808513L);
range3.equals(range4);
Range range5 = Range.of((-1L));
boolean boolean3 = range5.endsBefore(range2);
assertFalse(boolean3 == boolean0);

range5.isSubRangeOf(range0);
Range range6 = range2.intersection(range3);
assertSame(range3, range6);
assertFalse(range6.isEmpty());


[MASTER] 00:26:45.990 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IndexOutOfBoundsException: given length -9223372036854775783 would make range [7151120544509 - ? ] beyond max allowed end offset
[MASTER] 00:26:45.991 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of((-9223372036854775783L));
range0.complement(range0);
long long0 = (-3257L);
Range.of((-3257L), (-1235L));
range0.isSubRangeOf(range0);
Range range1 = Range.of((-1846L));
Range.Builder range_Builder0 = new Range.Builder(range1);
range_Builder0.expandBegin(65163L);
Range range2 = range_Builder0.build();
range2.intersects(range1);
long long1 = 7151120544509L;
range_Builder0.build();
Range range3 = Range.of(7151120544509L);
range3.intersection(range0);

[MASTER] 00:26:46.127 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 00:26:46.128 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range0.forEach(consumer0);
Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
Object object0 = new Object();
Range range1 = Range.of((-2561L), 1549L);
range0.startsBefore(range1);
Object object1 = new Object();
Object object2 = new Object();
Range range2 = Range.ofLength(1549L);
Range.ofLength(9223372036854774999L);
Range range3 = range0.intersection(range0);
assertTrue(range3.equals((Object)range2));
assertNotSame(range3, range2);


[MASTER] 00:26:48.230 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 00:26:48.231 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Object object0 = new Object();
Range range0 = Range.of((-9223372036854710272L), 1L);
Object object1 = new Object();
Range range1 = Range.ofLength(1L);
Object object2 = new Object();
List<Range> list0 = range0.complement(range1);
List<Range> list1 = range0.complementFrom(list0);
List<Range> list2 = range0.complementFrom(list1);
assertFalse(list2.equals((Object)list0));
assertEquals(2, list2.size());
assertTrue(list2.equals((Object)list1));

Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range1.forEach(consumer0);
Range range2 = range0.intersection(range1);
assertFalse(range2.isEmpty());


[MASTER] 00:26:50.239 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:26:50.240 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of((-9223372036854710272L), 1L);
Object object0 = new Object();
Object object1 = new Object();
List<Range> list0 = range0.complement(range0);
List<Range> list1 = range0.complementFrom(list0);
range0.complementFrom(list1);
assertEquals(1, list1.size());

range0.intersects(range0);
range0.equals(list0);
assertFalse(list0.contains(range0));


[MASTER] 00:26:50.472 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IndexOutOfBoundsException: given length -9223372036854775808 would make range [32787 - ? ] beyond max allowed end offset
[MASTER] 00:26:50.473 [logback-1] WARN  JUnitAnalyzer - Failing test:
 long long0 = (-1L);
Range range0 = Range.of((-1L), 2147483647L);
Long long1 = new Long((-1L));
Range range1 = Range.of((-1L), 32787L);
Object object0 = new Object();
Object object1 = new Object();
range1.equals(range0);
Object object2 = new Object();
Object object3 = new Object();
Object object4 = new Object();
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
Range range2 = Range.of(range_CoordinateSystem0, 32787L, 32787L);
range2.equals(object0);
Object object5 = new Object();
Object object6 = new Object();
Object object7 = new Object();
range1.equals(object7);
Range range3 = Range.of((-9223372036854775808L));
Range.of((-9223372036854775808L));
range2.intersection(range3);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing JUnit test case 'Range_ESTest' to /home/ubuntu/termite/qmosa/tests/s1021/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.util.FileIterator
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 18812
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:38:24.615 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:38:24.771 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:38:24.787 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:38:24.793 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.util.FileIterator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/util/FileIterator.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1021
* Starting evolution
* Search finished after 841s and 588 generations, 544735 statements, best individual has fitness: 600.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 107
* Number of covered goals: 102
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 99%
* Total number of goals: 67
* Number of covered goals: 66
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 98%
* Total number of goals: 53
* Number of covered goals: 52
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 74
* Number of covered goals: 40
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 67
* Number of covered goals: 62
* Generated 27 tests with total length 604
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 62%
* Compiling and checking tests
* Writing JUnit test case 'FileIterator_ESTest' to /home/ubuntu/termite/qmosa/tests/s1021/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 18808
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 18813
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:08:49.099 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:08:49.100 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:08:49.105 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 02:08:49.138 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:08:49.144 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:08:49.144 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:08:49.226 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:08:49.233 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 02:08:49.234 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 02:08:49.234 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 02:08:49.234 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 02:08:49.235 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 02:08:49.235 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 02:08:49.237 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 02:08:49.243 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/assembly/consed/phd/PhdBuilder.java
[MASTER] 02:08:49.739 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:08:49.743 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:08:49.743 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:08:49.778 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1021
* Starting evolution
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1021
* Starting evolution
[MASTER] 02:08:51.878 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 02:08:51.878 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 02:09:03.885 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 02:16:07.079 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 02:17:14.012 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 840s and 1155 generations, 1186448 statements, best individual has fitness: 240.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 93
* Number of covered goals: 86
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 27
* Number of covered goals: 22
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 47
* Number of covered goals: 43
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 16
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 27
* Number of covered goals: 22
* Generated 24 tests with total length 656
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 840s and 165 generations, 151128 statements, best individual has fitness: 344.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 131
* Number of covered goals: 130
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 99%
* Total number of goals: 74
* Number of covered goals: 73
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 46
* Number of covered goals: 46
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 469
* Number of covered goals: 465
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 65%
* Total number of goals: 52
* Number of covered goals: 34
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 74
* Number of covered goals: 61
* Generated 78 tests with total length 2174
* Resulting test suite's coverage: 95% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'PhdBuilder_ESTest' to /home/ubuntu/termite/qmosa/tests/s1021/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 66%
* Compiling and checking tests
[MASTER] 02:23:59.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 02:23:59.735 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
Nucleotide nucleotide0 = Nucleotide.Cytosine;
linkedList0.addFirst(nucleotide0);
linkedList0.add(nucleotide0);
Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
Predicate<Object> predicate1 = predicate0.and(predicate0);
Predicate<Object> predicate2 = predicate0.negate();
Predicate<Object> predicate3 = predicate2.negate();
Predicate<Object> predicate4 = predicate3.and(predicate0);
predicate0.test(predicate0);
predicate4.or(predicate0);
predicate0.test("must be >=0");
Predicate<Object> predicate5 = predicate1.or(predicate0);
Predicate<Object> predicate6 = predicate5.negate();
Predicate<Object> predicate7 = predicate6.negate();
Predicate<Object> predicate8 = predicate1.and(predicate0);
predicate4.negate();
Predicate<Object> predicate9 = predicate0.and(predicate1);
predicate3.and(predicate7);
Predicate.isEqual((Object) predicate7);
Byte byte0 = new Byte((byte)77);
Byte.toUnsignedInt((byte)77);
Predicate<Object> predicate10 = predicate4.or(predicate3);
predicate9.negate();
Predicate<Object> predicate11 = predicate0.and(predicate8);
Predicate.isEqual((Object) predicate5);
Predicate<Object> predicate12 = predicate6.negate();
predicate10.and(predicate7);
predicate3.or(predicate9);
predicate10.and(predicate11);
predicate10.and(predicate1);
predicate12.negate();
Integer integer0 = new Integer((-1078));
byte[] byteArray0 = new byte[7];
byteArray0[0] = (byte)77;
byteArray0[1] = (byte)77;
byteArray0[2] = (byte)77;
byteArray0[3] = (byte)77;
byteArray0[4] = (byte)77;
byteArray0[5] = (byte)77;
byteArray0[6] = (byte)77;
defaultNucleotideCodec0.toString(byteArray0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'DefaultNucleotideCodec_ESTest' to /home/ubuntu/termite/qmosa/tests/s1021/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
