* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.core.stemmers.LovinsStemmer
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.classifiers.Evaluation
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 15871
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 15873
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.core.stemmers.LovinsStemmer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1006
* Starting evolution
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 04:29:23.838 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 04:29:23.842 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 04:29:23.843 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 04:29:24.314 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 04:29:24.812 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 04:29:24.813 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 04:29:26.556 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 04:29:26.586 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 04:29:26.587 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 04:29:26.587 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 04:29:26.587 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 04:29:26.588 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 04:29:26.588 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 04:29:26.589 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 04:29:26.590 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 04:29:26.647 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 04:29:26.658 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class weka.classifiers.Evaluation
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1006
* Starting evolution
[MASTER] 04:29:30.900 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
[MASTER] 04:30:24.431 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 04:31:10.388 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 166 IFEQ L1574 - true
[MASTER] 04:31:10.389 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 856: weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;:1574 - ReplaceComparisonOperator == -> -2
[MASTER] 04:31:10.392 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 166 IFEQ L1574 - true in context: 
[MASTER] 04:31:32.358 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.Evaluation.updateStatsForConditionalDensityEstimator(Lweka/classifiers/ConditionalDensityEstimator;Lweka/core/Instance;D)V
* Search finished after 272s and 243 generations, 125285 statements, best individual has fitness: 2768.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 88%
* Total number of goals: 217
* Number of covered goals: 191
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 68%
* Total number of goals: 428
* Number of covered goals: 289
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 260
* Number of covered goals: 228
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 18
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 68%
* Total number of goals: 428
* Number of covered goals: 289
* Generated 89 tests with total length 253
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 277s and 118 generations, 86036 statements, best individual has fitness: 15184.0
* Resulting test suite's mutation score: 73%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 53%
* Total number of goals: 1378
* Number of covered goals: 734
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 47%
* Total number of goals: 809
* Number of covered goals: 381
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 83
* Number of covered goals: 83
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 63%
* Total number of goals: 424
* Number of covered goals: 267
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 20%
* Total number of goals: 278
* Number of covered goals: 56
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 47%
* Total number of goals: 809
* Number of covered goals: 378
* Generated 185 tests with total length 2413
* Resulting test suite's coverage: 52% (average coverage for all fitness functions)
* Generating assertions
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing JUnit test case 'LovinsStemmer_ESTest' to /home/ubuntu/termite/rmosa/tests/s1006/107_weka/evosuite-tests
* Done!

* Computation finished
[MASTER] 04:42:17.521 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
[MASTER] 04:42:26.712 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 04:42:27.082 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 04:42:27.082 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
[MASTER] 04:42:28.527 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing JUnit test case 'Evaluation_ESTest' to /home/ubuntu/termite/rmosa/tests/s1006/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.filters.unsupervised.attribute.Discretize
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.classifiers.rules.JRip
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 15872
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 15873
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 04:43:30.627 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 04:43:30.669 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 04:43:30.670 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 04:43:30.877 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 04:43:30.883 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 04:43:30.885 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.filters.unsupervised.attribute.Discretize
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1006
* Starting evolution
[MASTER] 04:43:35.410 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 04:43:35.434 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 04:43:35.443 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 04:43:38.541 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 04:43:39.412 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 04:43:39.467 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.classifiers.rules.JRip
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1006
* Starting evolution
[MASTER] 04:43:45.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.RipperRule.<init>(Lweka/classifiers/rules/JRip;)V
[MASTER] 04:45:36.743 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 221s and 262 generations, 127677 statements, best individual has fitness: 12568.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 36%
* Total number of goals: 705
* Number of covered goals: 254
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 26%
* Total number of goals: 416
* Number of covered goals: 109
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 56%
* Total number of goals: 993
* Number of covered goals: 559
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 93
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 26%
* Total number of goals: 416
* Number of covered goals: 109
* Generated 73 tests with total length 577
* Resulting test suite's coverage: 43% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 22%
* Compiling and checking tests
* Search finished after 296s and 369 generations, 183014 statements, best individual has fitness: 5176.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 69%
* Total number of goals: 370
* Number of covered goals: 254
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 55%
* Total number of goals: 242
* Number of covered goals: 132
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 34
* Number of covered goals: 34
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 61%
* Total number of goals: 713
* Number of covered goals: 436
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 72
* Number of covered goals: 38
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 55%
* Total number of goals: 242
* Number of covered goals: 132
* Generated 89 tests with total length 709
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'JRip_ESTest' to /home/ubuntu/termite/rmosa/tests/s1006/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 23%
* Compiling and checking tests
[MASTER] 04:52:31.124 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 04:52:31.936 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 04:52:46.713 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 04:52:46.714 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
Attribute attribute0 = new Attribute("UhY", 1);
Attribute attribute1 = attribute0.copy("[Tp");
ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
attribute1.equalsMsg("[Tp");
Instances instances0 = new Instances("Copy with last attribute set to \"first\": ", arrayList0, 2);
Attribute attribute2 = new Attribute(" /", instances0, 691);
arrayList0.add(attribute2);
Instances instances1 = new Instances("string", arrayList0, 1);
discretize0.setInputFormat(instances0);

[MASTER] 04:52:55.858 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 04:52:55.860 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
Attribute attribute0 = new Attribute("    result = new Instance(1.0, values);\n");
Instances instances0 = new Instances("of", arrayList0, 10098);
Attribute attribute1 = new Attribute("Original array (ints): ", instances0);
arrayList0.add(attribute1);
Instances instances1 = new Instances("Original array (ints): ", arrayList0, 3974);
discretize0.setInputFormat(instances1);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing JUnit test case 'Discretize_ESTest' to /home/ubuntu/termite/rmosa/tests/s1006/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.classifiers.bayes.NaiveBayesMultinomialText
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.experiment.ResultMatrix
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 15872
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 15875
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 05:04:16.011 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 05:04:16.044 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 05:04:16.044 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 05:04:16.169 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.experiment.ResultMatrix
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1006
* Starting evolution
[MASTER] 05:04:18.265 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 05:04:18.266 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 05:04:18.268 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 05:04:18.339 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 05:04:18.354 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 05:04:18.365 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class weka.classifiers.bayes.NaiveBayesMultinomialText
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1006
* Starting evolution
[MASTER] 05:04:24.636 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 05:04:24.636 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 05:04:27.178 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.normalizeDocLengthTipText()Ljava/lang/String;: Line 714
[MASTER] 05:04:27.185 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.normalizeDocLengthTipText()Ljava/lang/String;: root-Branch
[MASTER] 05:04:27.187 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 288: weka.classifiers.bayes.NaiveBayesMultinomialText.normalizeDocLengthTipText()Ljava/lang/String;:714 - ReplaceConstant - If true then document length is normalized according to the settings for norm and lnorm -> 
[MASTER] 05:04:27.188 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.bayes.NaiveBayesMultinomialText.normalizeDocLengthTipText()Ljava/lang/String;:NonEmptyString
[MASTER] 05:04:27.188 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.setLowercaseTokens(Z)V
[MASTER] 05:04:27.188 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.normalizeDocLengthTipText()Ljava/lang/String;
[MASTER] 05:04:27.189 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.setLowercaseTokens(Z)V
[MASTER] 05:04:27.189 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.normalizeDocLengthTipText()Ljava/lang/String;
[MASTER] 05:04:27.189 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.normalizeDocLengthTipText()Ljava/lang/String;: root-Branch in context: weka.classifiers.bayes.NaiveBayesMultinomialText:normalizeDocLengthTipText()Ljava/lang/String;
[MASTER] 05:04:27.189 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setLowercaseTokens(Z)V: root-Branch in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setLowercaseTokens(Z)V
[MASTER] 05:04:27.404 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.pruneDictionary()V: Line 487
[MASTER] 05:04:27.405 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.pruneDictionary()V: Line 488
[MASTER] 05:04:27.405 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getUseWordFrequencies()Z: Line 605
[MASTER] 05:04:27.405 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getLNorm()D: Line 780
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 969
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 973
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 980
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 984
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1001
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1002
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1004
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1005
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1006
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1007
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1008
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1009
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1016
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1017
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1019
[MASTER] 05:04:27.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1020
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1021
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1022
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: Line 1024
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1034
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1036
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1039
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1040
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1042
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1045
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1046
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1047
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1048
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1050
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1053
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1057
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1058
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1059
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1060
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1062
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1064
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1065
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1066
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1067
[MASTER] 05:04:27.407 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1071
[MASTER] 05:04:27.408 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1074
[MASTER] 05:04:27.408 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getRevision()Ljava/lang/String;: Line 1144
[MASTER] 05:04:27.408 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getUseWordFrequencies()Z: root-Branch
[MASTER] 05:04:27.408 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getLNorm()D: root-Branch
[MASTER] 05:04:27.408 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getRevision()Ljava/lang/String;: root-Branch
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.pruneDictionary()V: I4 Branch 42 IFLE L487 - true
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I26 Branch 51 IFLE L968 - false
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I43 Branch 52 IFLE L972 - false
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I67 Branch 53 IFLE L979 - false
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I84 Branch 54 IFLE L983 - false
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I153 Branch 56 IFNE L998 - true
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I171 Branch 57 IFNE L1002 - true
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I215 Branch 58 IFEQ L1007 - false
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I236 Branch 59 IFNE L1013 - true
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I252 Branch 60 IFNE L1017 - true
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I296 Branch 61 IFEQ L1022 - true
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I10 Branch 62 IFEQ L1036 - true
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I57 Branch 63 IFEQ L1042 - true
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I104 Branch 64 IFEQ L1047 - false
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I115 Branch 65 IFEQ L1050 - true
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I127 Branch 66 IFNE L1053 - true
[MASTER] 05:04:27.409 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I158 Branch 67 IFEQ L1059 - false
[MASTER] 05:04:27.439 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I186 Branch 68 IFNULL L1064 - false
[MASTER] 05:04:27.439 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I205 Branch 69 IFEQ L1067 - true
[MASTER] 05:04:27.477 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 191: weka.classifiers.bayes.NaiveBayesMultinomialText.pruneDictionary()V:487 - InsertUnaryOp Negation
[MASTER] 05:04:27.477 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 192: weka.classifiers.bayes.NaiveBayesMultinomialText.pruneDictionary()V:487 - InsertUnaryOp +1
[MASTER] 05:04:27.477 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 193: weka.classifiers.bayes.NaiveBayesMultinomialText.pruneDictionary()V:487 - InsertUnaryOp -1
[MASTER] 05:04:27.478 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 196: weka.classifiers.bayes.NaiveBayesMultinomialText.pruneDictionary()V:487 - ReplaceComparisonOperator <= -> <
[MASTER] 05:04:27.478 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 248: weka.classifiers.bayes.NaiveBayesMultinomialText.setUseWordFrequencies(Z)V:595 - ReplaceVariable u -> m_lowercaseTokens
[MASTER] 05:04:27.478 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 254: weka.classifiers.bayes.NaiveBayesMultinomialText.getUseWordFrequencies()Z:605 - ReplaceVariable m_wordFrequencies -> m_lowercaseTokens
[MASTER] 05:04:27.478 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 255: weka.classifiers.bayes.NaiveBayesMultinomialText.getUseWordFrequencies()Z:605 - InsertUnaryOp Negation
[MASTER] 05:04:27.479 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 264: weka.classifiers.bayes.NaiveBayesMultinomialText.getLowercaseTokens()Z:635 - ReplaceVariable m_lowercaseTokens -> m_normalize
[MASTER] 05:04:27.479 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 265: weka.classifiers.bayes.NaiveBayesMultinomialText.getLowercaseTokens()Z:635 - ReplaceVariable m_lowercaseTokens -> m_wordFrequencies
[MASTER] 05:04:27.479 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 266: weka.classifiers.bayes.NaiveBayesMultinomialText.getLowercaseTokens()Z:635 - ReplaceVariable m_lowercaseTokens -> m_useStopList
[MASTER] 05:04:27.479 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 313: weka.classifiers.bayes.NaiveBayesMultinomialText.getLNorm()D:780 - ReplaceVariable m_lnorm -> m_norm
[MASTER] 05:04:27.479 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 314: weka.classifiers.bayes.NaiveBayesMultinomialText.getLNorm()D:780 - ReplaceVariable m_lnorm -> m_minWordP
[MASTER] 05:04:27.479 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 315: weka.classifiers.bayes.NaiveBayesMultinomialText.getLNorm()D:780 - ReplaceVariable m_lnorm -> m_t
[MASTER] 05:04:27.479 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 316: weka.classifiers.bayes.NaiveBayesMultinomialText.getLNorm()D:780 - ReplaceVariable m_lnorm -> m_leplace
[MASTER] 05:04:27.479 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 317: weka.classifiers.bayes.NaiveBayesMultinomialText.getLNorm()D:780 - InsertUnaryOp Negation
[MASTER] 05:04:27.479 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 334: weka.classifiers.bayes.NaiveBayesMultinomialText.getUseStopList()Z:817 - ReplaceVariable m_useStopList -> m_lowercaseTokens
[MASTER] 05:04:27.480 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 385: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:968 - ReplaceComparisonOperator <= -> -1
[MASTER] 05:04:27.480 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 389: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:972 - ReplaceVariable minFreq -> pruneFreqS
[MASTER] 05:04:27.480 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 390: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:972 - ReplaceComparisonOperator <= -> -1
[MASTER] 05:04:27.480 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 393: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:973 - ReplaceVariable minFreq -> pruneFreqS
[MASTER] 05:04:27.480 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 396: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:979 - ReplaceVariable normFreqS -> minFreq
[MASTER] 05:04:27.480 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 397: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:979 - ReplaceVariable normFreqS -> pruneFreqS
[MASTER] 05:04:27.491 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 398: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:979 - ReplaceComparisonOperator <= -> -1
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 401: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:980 - ReplaceVariable normFreqS -> minFreq
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 402: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:980 - ReplaceVariable normFreqS -> pruneFreqS
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 404: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:983 - ReplaceVariable lnormFreqS -> minFreq
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 405: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:983 - ReplaceVariable lnormFreqS -> pruneFreqS
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 406: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:983 - ReplaceVariable lnormFreqS -> normFreqS
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 407: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:983 - ReplaceComparisonOperator <= -> -1
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 410: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:984 - ReplaceVariable lnormFreqS -> minFreq
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 411: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:984 - ReplaceVariable lnormFreqS -> pruneFreqS
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 412: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:984 - ReplaceVariable lnormFreqS -> normFreqS
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 416: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:991 - ReplaceVariable stopwordsS -> minFreq
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 417: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:991 - ReplaceVariable stopwordsS -> pruneFreqS
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 418: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:991 - ReplaceVariable stopwordsS -> normFreqS
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 419: weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V:991 - ReplaceVariable stopwordsS -> lnormFreqS
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 423: weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;:1036 - ReplaceComparisonOperator == -> !=
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 425: weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;:1039 - ReplaceConstant - -P -> 
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 426: weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;:1040 - ReplaceConstant - -M -> 
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 427: weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;:1042 - ReplaceComparisonOperator == -> !=
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 429: weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;:1045 - ReplaceConstant - -norm -> 
[MASTER] 05:04:27.492 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 430: weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;:1046 - ReplaceConstant - -lnorm -> 
[MASTER] 05:04:27.493 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 431: weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;:1047 - ReplaceComparisonOperator == -> !=
[MASTER] 05:04:27.493 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 432: weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;:1048 - ReplaceConstant - -lowercase -> 
[MASTER] 05:04:27.493 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 433: weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;:1050 - ReplaceComparisonOperator == -> !=
[MASTER] 05:04:27.493 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 473: weka.classifiers.bayes.NaiveBayesMultinomialText.getRevision()Ljava/lang/String;:1144 - ReplaceConstant - $Revision: 9122 $ -> 
[MASTER] 05:04:27.493 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.bayes.NaiveBayesMultinomialText.getRevision()Ljava/lang/String;:NonEmptyString
[MASTER] 05:04:27.493 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;:NonEmptyArray
[MASTER] 05:04:27.493 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.pruneDictionary()V
[MASTER] 05:04:27.494 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.getRevision()Ljava/lang/String;
[MASTER] 05:04:27.494 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;
[MASTER] 05:04:27.495 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.pruneDictionary()V
[MASTER] 05:04:27.496 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.getRevision()Ljava/lang/String;
[MASTER] 05:04:27.496 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;
[MASTER] 05:04:27.496 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I67 Branch 53 IFLE L979 - false in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setOptions([Ljava/lang/String;)V
[MASTER] 05:04:27.496 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I10 Branch 62 IFEQ L1036 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getOptions()[Ljava/lang/String;
[MASTER] 05:04:27.496 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I43 Branch 52 IFLE L972 - false in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setOptions([Ljava/lang/String;)V
[MASTER] 05:04:27.496 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I296 Branch 61 IFEQ L1022 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setOptions([Ljava/lang/String;)V
[MASTER] 05:04:27.496 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I104 Branch 64 IFEQ L1047 - false in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getOptions()[Ljava/lang/String;
[MASTER] 05:04:27.496 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I127 Branch 66 IFNE L1053 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getOptions()[Ljava/lang/String;
[MASTER] 05:04:27.496 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I236 Branch 59 IFNE L1013 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setOptions([Ljava/lang/String;)V
[MASTER] 05:04:27.496 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I171 Branch 57 IFNE L1002 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setOptions([Ljava/lang/String;)V
[MASTER] 05:04:27.496 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I84 Branch 54 IFLE L983 - false in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setOptions([Ljava/lang/String;)V
[MASTER] 05:04:27.497 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I57 Branch 63 IFEQ L1042 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getOptions()[Ljava/lang/String;
[MASTER] 05:04:27.497 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I158 Branch 67 IFEQ L1059 - false in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getOptions()[Ljava/lang/String;
[MASTER] 05:04:27.497 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I26 Branch 51 IFLE L968 - false in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setOptions([Ljava/lang/String;)V
[MASTER] 05:04:27.497 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I186 Branch 68 IFNULL L1064 - false in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getOptions()[Ljava/lang/String;
[MASTER] 05:04:27.497 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I153 Branch 56 IFNE L998 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setOptions([Ljava/lang/String;)V
[MASTER] 05:04:27.497 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I215 Branch 58 IFEQ L1007 - false in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setOptions([Ljava/lang/String;)V
[MASTER] 05:04:27.497 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I115 Branch 65 IFEQ L1050 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getOptions()[Ljava/lang/String;
[MASTER] 05:04:27.497 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I205 Branch 69 IFEQ L1067 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getOptions()[Ljava/lang/String;
[MASTER] 05:04:27.497 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getRevision()Ljava/lang/String;: root-Branch in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getRevision()Ljava/lang/String;
[MASTER] 05:04:27.497 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.pruneDictionary()V: I4 Branch 42 IFLE L487 - true in context: 
[MASTER] 05:04:27.497 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setOptions([Ljava/lang/String;)V: I252 Branch 60 IFNE L1017 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setOptions([Ljava/lang/String;)V
[MASTER] 05:04:29.762 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setStopwords(Ljava/io/File;)V: I34 Branch 49 IFEQ L832 - true
[MASTER] 05:04:29.765 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setStopwords(Ljava/io/File;)V: I34 Branch 49 IFEQ L832 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setStopwords(Ljava/io/File;)V
[MASTER] 05:04:29.797 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I104 Branch 64 IFEQ L1047 - true
[MASTER] 05:04:29.801 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I104 Branch 64 IFEQ L1047 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getOptions()[Ljava/lang/String;
[MASTER] 05:04:36.332 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 195: weka.classifiers.bayes.NaiveBayesMultinomialText.pruneDictionary()V:487 - ReplaceComparisonOperator <= -> ==
[MASTER] 05:04:43.697 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.useStopListTipText()Ljava/lang/String;: Line 799
[MASTER] 05:04:43.697 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.useStopListTipText()Ljava/lang/String;: root-Branch
[MASTER] 05:04:43.697 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 324: weka.classifiers.bayes.NaiveBayesMultinomialText.useStopListTipText()Ljava/lang/String;:799 - ReplaceConstant - If true, ignores all words that are on the stoplist. -> 
[MASTER] 05:04:43.699 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.bayes.NaiveBayesMultinomialText.useStopListTipText()Ljava/lang/String;:NonEmptyString
[MASTER] 05:04:43.699 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.useStopListTipText()Ljava/lang/String;
[MASTER] 05:04:43.700 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.useStopListTipText()Ljava/lang/String;
[MASTER] 05:04:43.701 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.useStopListTipText()Ljava/lang/String;: root-Branch in context: weka.classifiers.bayes.NaiveBayesMultinomialText:useStopListTipText()Ljava/lang/String;
[MASTER] 05:05:57.511 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 05:07:15.250 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 260s and 49 generations, 40930 statements, best individual has fitness: 2736.0
* Search finished after 260s and 315 generations, 213426 statements, best individual has fitness: 1352.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 338
* Number of covered goals: 310
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 194
* Number of covered goals: 166
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 476
* Number of covered goals: 446
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 112
* Number of covered goals: 61
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 194
* Number of covered goals: 164
* Generated 89 tests with total length 985
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 647
* Number of covered goals: 612
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 441
* Number of covered goals: 403
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 678
* Number of covered goals: 609
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 244
* Number of covered goals: 106
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 124
* Number of covered goals: 123
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 99%
* Total number of goals: 124
* Number of covered goals: 123
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 441
* Number of covered goals: 383
* Generated 191 tests with total length 3180
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 61%
* Compiling and checking tests
[MASTER] 05:14:22.629 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_32_1575263662594/weka/classifiers/bayes/NaiveBayesMultinomialText_32_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_32_1575263662594/weka/classifiers/bayes/NaiveBayesMultinomialText_32_tmp__ESTest_scaffolding.java]]
[MASTER] 05:14:22.629 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 05:14:22.629 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 05:14:22.632 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 31
[MASTER] 05:14:22.633 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 31
[MASTER] 05:14:22.634 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_32_1575263662594/weka/classifiers/bayes/NaiveBayesMultinomialText_32_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Dec 02 05:14:22 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.HashMap;
12: import java.util.LinkedHashMap;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: import weka.classifiers.bayes.NaiveBayesMultinomialText;
17: import weka.core.BinarySparseInstance;
18: import weka.core.Stopwords;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class NaiveBayesMultinomialText_32_tmp__ESTest extends NaiveBayesMultinomialText_32_tmp__ESTest_scaffolding {
22: 
23:   /**
24:   //Test case number: 0
25:   /*Coverage entropy=0.4
26:   */
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
30:       Stopwords stopwords0 = new Stopwords();
31:       HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
32:       int[] intArray0 = new int[7];
33:       intArray0[0] = 124;
34:       intArray0[1] = 124;
35:       intArray0[2] = 124;
36:       intArray0[3] = 124;
37:       naiveBayesMultinomialText0.m_periodicP = 17;
38:       intArray0[4] = 124;
39:       intArray0[5] = 124;
40:       intArray0[6] = 124;
41:       BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2475.0064, intArray0, 69);
42:       // Undeclared exception!
43:       try { 
44:         naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
45:         fail("Expecting exception: RuntimeException");
46:       
47:       } catch(RuntimeException e) {
48:          //
49:          // DenseInstance doesn't have access to a dataset!
50:          //
51:          verifyException("weka.core.AbstractInstance", e);
52:       }
53:   }
54: }
RegularFileObject[/tmp/EvoSuite_32_1575263662594/weka/classifiers/bayes/NaiveBayesMultinomialText_32_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Dec 02 05:14:22 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_32_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_32_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.filters.unsupervised.attribute.NominalToBinary",
91:       "weka.core.DistanceFunction",
92:       "weka.core.neighboursearch.balltrees.BottomUpConstructor$TempNode",
93:       "org.pentaho.packageManagement.PackageConstraint",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.classifiers.CostMatrix",
97:       "weka.classifiers.bayes.net.search.local.K2",
98:       "weka.filters.UnsupervisedFilter",
99:       "weka.core.neighboursearch.BallTree",
100:       "weka.core.logging.Logger$Level",
101:       "weka.core.neighboursearch.CoverTree$DistanceNode",
102:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
103:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
104:       "weka.core.DenseInstance",
105:       "weka.classifiers.functions.LinearRegression",
106:       "weka.core.stemmers.Stemmer",
107:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
108:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
109:       "org.pentaho.packageManagement.DefaultPackageManager",
110:       "org.bounce.net.DefaultAuthenticator",
111:       "weka.core.neighboursearch.CoverTree$MyHeap",
112:       "weka.estimators.IncrementalEstimator",
113:       "weka.estimators.Estimator$Builder",
114:       "weka.core.neighboursearch.KDTree",
115:       "weka.core.stemmers.NullStemmer",
116:       "weka.core.EnvironmentHandler",
117:       "weka.classifiers.functions.SGDText",
118:       "weka.core.RelationalLocator",
119:       "weka.core.Utils",
120:       "weka.core.CustomDisplayStringProvider",
121:       "weka.core.tokenizers.Tokenizer",
122:       "weka.core.NormalizableDistance",
123:       "weka.core.NoSupportForMissingValuesException",
124:       "weka.classifiers.UpdateableClassifier",
125:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
126:       "weka.core.TechnicalInformation$Type",
127:       "weka.core.MultiInstanceCapabilitiesHandler",
128:       "weka.core.Copyable",
129:       "weka.core.Capabilities",
130:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
131:       "weka.core.AttributeLocator",
132:       "weka.core.BinarySparseInstance",
133:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
134:       "weka.filters.supervised.attribute.NominalToBinary",
135:       "weka.classifiers.functions.supportVector.CachedKernel",
136:       "weka.core.SerializedObject",
137:       "weka.clusterers.UpdateableClusterer",
138:       "weka.core.Summarizable",
139:       "weka.core.AdditionalMeasureProducer",
140:       "weka.core.neighboursearch.balltrees.BallNode",
141:       "org.pentaho.packageManagement.PackageManager$1",
142:       "weka.core.OptionHandlerJavadoc",
143:       "weka.core.Drawable",
144:       "weka.core.matrix.Matrix",
145:       "weka.classifiers.ConditionalDensityEstimator",
146:       "weka.core.SingleIndex",
147:       "weka.core.CapabilitiesHandler",
148:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
149:       "weka.core.AbstractInstance",
150:       "weka.core.scripting.JythonObject",
151:       "weka.core.SelectedTag",
152:       "org.pentaho.packageManagement.DefaultPackage",
153:       "weka.estimators.DiscreteEstimator",
154:       "weka.core.neighboursearch.balltrees.BallSplitter",
155:       "weka.classifiers.bayes.BayesNet",
156:       "weka.classifiers.misc.InputMappedClassifier",
157:       "weka.core.Version",
158:       "weka.filters.AllFilter",
159:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
160:       "weka.core.Tag",
161:       "weka.core.neighboursearch.CoverTree",
162:       "weka.classifiers.AbstractClassifier",
163:       "weka.core.FindWithCapabilities",
164:       "weka.core.OptionHandler",
165:       "weka.core.WekaException",
166:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
167:       "weka.core.Range",
168:       "weka.core.scripting.JythonSerializableObject",
169:       "weka.classifiers.Classifier",
170:       "weka.core.neighboursearch.NearestNeighbourSearch$NeighborList",
171:       "weka.core.Capabilities$Capability",
172:       "weka.core.SparseInstance",
173:       "org.pentaho.packageManagement.PackageManager",
174:       "weka.estimators.PoissonEstimator",
175:       "weka.core.tokenizers.WordTokenizer",
176:       "weka.classifiers.misc.SerializedClassifier",
177:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
178:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
179:       "weka.core.stemmers.SnowballStemmer",
180:       "weka.core.stemmers.LovinsStemmer",
181:       "weka.classifiers.Evaluation",
182:       "weka.classifiers.functions.supportVector.Kernel",
183:       "weka.core.WekaPackageManager",
184:       "weka.filters.SupervisedFilter",
185:       "weka.core.TechnicalInformationHandler",
186:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
187:       "weka.classifiers.functions.SimpleLogistic",
188:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
189:       "weka.core.Option",
190:       "weka.classifiers.meta.CostSensitiveClassifier",
191:       "weka.core.neighboursearch.PerformanceStats",
192:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
193:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
194:       "weka.filters.Sourcable",
195:       "weka.core.Attribute",
196:       "weka.core.Stopwords",
197:       "weka.core.tokenizers.AlphabeticTokenizer",
198:       "weka.core.FastVector",
199:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
200:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
201:       "weka.core.UnassignedDatasetException",
202:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
203:       "weka.classifiers.RandomizableClassifier",
204:       "weka.classifiers.SingleClassifierEnhancer",
205:       "weka.core.RevisionUtils",
206:       "weka.core.Instance",
207:       "weka.classifiers.functions.supportVector.PolyKernel",
208:       "weka.estimators.Estimator",
209:       "weka.core.ProtectedProperties",
210:       "weka.classifiers.IntervalEstimator",
211:       "weka.core.StringLocator",
212:       "weka.classifiers.bayes.net.ADNode",
213:       "weka.core.AttributeStats",
214:       "weka.core.WeightedInstancesHandler",
215:       "weka.core.neighboursearch.NearestNeighbourSearch",
216:       "weka.classifiers.functions.GaussianProcesses",
217:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
218:       "weka.core.TechnicalInformation$Field",
219:       "weka.core.neighboursearch.covertrees.Stack",
220:       "weka.core.Javadoc",
221:       "weka.core.Randomizable",
222:       "weka.core.EuclideanDistance",
223:       "weka.core.Instances",
224:       "weka.core.neighboursearch.CoverTree$CoverTreeNode",
225:       "weka.filters.unsupervised.attribute.Normalize",
226:       "weka.core.UnassignedClassException",
227:       "weka.classifiers.bayes.net.BIFReader",
228:       "weka.classifiers.bayes.net.ParentSet",
229:       "weka.classifiers.rules.ZeroR",
230:       "weka.core.stemmers.IteratedLovinsStemmer",
231:       "weka.filters.unsupervised.attribute.Standardize",
232:       "weka.core.TechnicalInformation",
233:       "weka.core.UnsupportedAttributeTypeException",
234:       "weka.classifiers.Sourcable",
235:       "weka.core.RevisionHandler",
236:       "weka.classifiers.evaluation.output.prediction.PlainText",
237:       "weka.core.neighboursearch.TreePerformanceStats",
238:       "weka.core.xml.XMLSerialization",
239:       "weka.classifiers.xml.XMLClassifier",
240:       "weka.filters.Filter",
241:       "weka.filters.supervised.attribute.Discretize"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_32_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "weka.classifiers.AbstractClassifier",
250:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
251:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
252:       "weka.core.Capabilities$Capability",
253:       "weka.core.tokenizers.Tokenizer",
254:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
255:       "weka.core.tokenizers.WordTokenizer",
256:       "weka.core.stemmers.NullStemmer",
257:       "weka.core.Utils",
258:       "weka.attributeSelection.ASEvaluation",
259:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
260:       "weka.attributeSelection.PrincipalComponents",
261:       "weka.classifiers.Evaluation",
262:       "weka.core.Option",
263:       "weka.core.AbstractInstance",
264:       "weka.core.SparseInstance",
265:       "weka.core.UnassignedDatasetException",
266:       "weka.classifiers.bayes.NaiveBayes",
267:       "weka.core.Capabilities",
268:       "org.pentaho.packageManagement.PackageManager",
269:       "org.pentaho.packageManagement.DefaultPackageManager",
270:       "weka.core.Version",
271:       "weka.core.Environment",
272:       "weka.core.WekaPackageManager",
273:       "weka.classifiers.bayes.BayesNet",
274:       "weka.classifiers.bayes.net.BIFReader",
275:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
276:       "weka.core.Tag",
277:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
278:       "weka.classifiers.bayes.net.search.local.K2",
279:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
280:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
281:       "weka.classifiers.SingleClassifierEnhancer",
282:       "weka.classifiers.misc.InputMappedClassifier",
283:       "weka.classifiers.rules.ZeroR",
284:       "weka.core.neighboursearch.NearestNeighbourSearch",
285:       "weka.core.neighboursearch.KDTree",
286:       "weka.core.NormalizableDistance",
287:       "weka.core.EuclideanDistance",
288:       "weka.core.Range",
289:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
290:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
291:       "weka.core.DenseInstance",
292:       "weka.filters.Filter",
293:       "weka.filters.supervised.attribute.Discretize",
294:       "weka.core.BinarySparseInstance",
295:       "weka.core.SerializedObject",
296:       "weka.core.neighboursearch.CoverTree",
297:       "weka.core.neighboursearch.BallTree",
298:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
299:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
300:       "weka.core.neighboursearch.balltrees.BallSplitter",
301:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
302:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
303:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
304:       "weka.core.stemmers.LovinsStemmer",
305:       "weka.core.stemmers.IteratedLovinsStemmer",
306:       "weka.core.TechnicalInformation",
307:       "weka.core.TechnicalInformation$Type",
308:       "weka.core.TechnicalInformation$Field",
309:       "weka.classifiers.functions.supportVector.Kernel",
310:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
311:       "weka.core.Stopwords",
312:       "weka.core.RevisionUtils",
313:       "weka.classifiers.RandomizableClassifier",
314:       "weka.classifiers.functions.SGDText",
315:       "weka.core.Instances",
316:       "weka.core.TestInstances",
317:       "weka.classifiers.lazy.KStar",
318:       "weka.core.SelectedTag",
319:       "weka.core.Javadoc",
320:       "weka.core.OptionHandlerJavadoc",
321:       "weka.core.WekaException",
322:       "weka.core.stemmers.Stemming",
323:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
324:       "weka.classifiers.meta.CostSensitiveClassifier",
325:       "weka.classifiers.CostMatrix",
326:       "weka.core.FindWithCapabilities",
327:       "weka.core.SingleIndex",
328:       "weka.core.ClassDiscovery",
329:       "weka.core.ProtectedProperties",
330:       "weka.core.Attribute",
331:       "weka.core.neighboursearch.balltrees.BallNode",
332:       "weka.filters.AllFilter",
333:       "weka.core.converters.ArffLoader$ArffReader",
334:       "weka.core.WekaEnumeration",
335:       "weka.core.Attribute$1",
336:       "weka.core.tokenizers.NGramTokenizer",
337:       "weka.core.stemmers.SnowballStemmer",
338:       "weka.filters.SimpleFilter",
339:       "weka.filters.SimpleStreamFilter",
340:       "weka.filters.MultiFilter",
341:       "weka.core.tokenizers.AlphabeticTokenizer",
342:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
343:       "weka.classifiers.lazy.IBk",
344:       "weka.core.neighboursearch.LinearNNSearch",
345:       "weka.classifiers.functions.GaussianProcesses",
346:       "weka.classifiers.functions.supportVector.CachedKernel",
347:       "weka.classifiers.functions.supportVector.PolyKernel",
348:       "weka.core.UnassignedClassException",
349:       "weka.classifiers.misc.SerializedClassifier",
350:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
351:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
352:       "weka.classifiers.MultipleClassifiersCombiner",
353:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
354:       "weka.classifiers.meta.MultiScheme",
355:       "weka.classifiers.functions.SimpleLogistic",
356:       "weka.core.neighboursearch.kdtrees.MedianOfWidestDimension",
357:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
358:       "weka.classifiers.bayes.NaiveBayesMultinomial",
359:       "weka.core.neighboursearch.PerformanceStats",
360:       "weka.core.neighboursearch.TreePerformanceStats",
361:       "weka.core.MinkowskiDistance",
362:       "weka.core.TechnicalInformationHandlerJavadoc",
363:       "weka.attributeSelection.GainRatioAttributeEval",
364:       "weka.attributeSelection.OneRAttributeEval",
365:       "weka.core.Check",
366:       "weka.core.CheckOptionHandler",
367:       "weka.estimators.Estimator",
368:       "weka.classifiers.rules.OneR",
369:       "weka.classifiers.IteratedSingleClassifierEnhancer",
370:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
371:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
372:       "weka.classifiers.meta.RandomSubSpace",
373:       "weka.classifiers.trees.REPTree",
374:       "weka.classifiers.meta.FilteredClassifier",
375:       "weka.filters.supervised.attribute.AttributeSelection",
376:       "weka.attributeSelection.AttributeSelection",
377:       "weka.attributeSelection.CfsSubsetEval",
378:       "weka.attributeSelection.ASSearch",
379:       "weka.attributeSelection.GreedyStepwise",
380:       "weka.attributeSelection.BestFirst",
381:       "weka.classifiers.trees.J48",
382:       "weka.core.UnsupportedAttributeTypeException",
383:       "weka.classifiers.rules.DecisionTable",
384:       "weka.attributeSelection.ReliefFAttributeEval",
385:       "weka.classifiers.meta.CVParameterSelection",
386:       "weka.core.FastVector",
387:       "weka.classifiers.functions.supportVector.StringKernel",
388:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
389:       "weka.classifiers.meta.RandomCommittee",
390:       "weka.classifiers.trees.RandomTree",
391:       "weka.classifiers.functions.LinearRegression",
392:       "weka.estimators.KernelEstimator",
393:       "weka.attributeSelection.CorrelationAttributeEval",
394:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
395:       "weka.classifiers.meta.AdaBoostM1",
396:       "weka.classifiers.trees.DecisionStump",
397:       "weka.classifiers.meta.RegressionByDiscretization",
398:       "weka.filters.unsupervised.attribute.Discretize",
399:       "weka.classifiers.trees.j48.ClassifierTree",
400:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
401:       "weka.classifiers.functions.SGD",
402:       "weka.classifiers.trees.m5.M5Base",
403:       "weka.classifiers.rules.M5Rules",
404:       "weka.attributeSelection.WrapperSubsetEval",
405:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
406:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
407:       "weka.classifiers.meta.Stacking",
408:       "weka.classifiers.functions.SMOreg",
409:       "weka.classifiers.functions.supportVector.RegOptimizer",
410:       "weka.classifiers.functions.supportVector.RegSMO",
411:       "weka.classifiers.functions.supportVector.RegSMOImproved",
412:       "weka.classifiers.meta.Vote",
413:       "weka.classifiers.functions.Logistic",
414:       "weka.classifiers.trees.LMT",
415:       "weka.estimators.DiscreteEstimator",
416:       "weka.classifiers.functions.VotedPerceptron",
417:       "weka.classifiers.meta.AdditiveRegression",
418:       "weka.classifiers.functions.SMO",
419:       "weka.classifiers.functions.MultilayerPerceptron",
420:       "weka.filters.unsupervised.attribute.NominalToBinary",
421:       "weka.classifiers.functions.neural.SigmoidUnit",
422:       "weka.classifiers.functions.neural.LinearUnit",
423:       "weka.estimators.PoissonEstimator",
424:       "weka.core.converters.ConverterUtils$DataSource",
425:       "weka.core.converters.AbstractLoader",
426:       "weka.core.converters.AbstractFileLoader",
427:       "weka.core.converters.ArffLoader",
428:       "weka.core.matrix.Matrix",
429:       "weka.estimators.MahalanobisEstimator",
430:       "weka.classifiers.functions.supportVector.Puk",
431:       "weka.classifiers.meta.Bagging",
432:       "weka.classifiers.meta.AttributeSelectedClassifier",
433:       "weka.classifiers.rules.PART",
434:       "weka.classifiers.rules.part.MakeDecList",
435:       "weka.classifiers.trees.RandomForest",
436:       "weka.classifiers.lazy.LWL",
437:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
438:       "weka.classifiers.meta.MultiClassClassifier",
439:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
440:       "weka.attributeSelection.InfoGainAttributeEval",
441:       "weka.classifiers.functions.supportVector.RBFKernel",
442:       "weka.classifiers.meta.LogitBoost",
443:       "weka.classifiers.meta.ClassificationViaRegression",
444:       "weka.classifiers.trees.M5P",
445:       "weka.classifiers.functions.SimpleLinearRegression",
446:       "weka.core.SerializationHelper",
447:       "weka.classifiers.rules.JRip",
448:       "weka.classifiers.bayes.NaiveBayesUpdateable",
449:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
450:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
451:       "weka.estimators.NormalEstimator",
452:       "weka.classifiers.functions.neural.NeuralConnection",
453:       "weka.classifiers.functions.MultilayerPerceptron$NeuralEnd",
454:       "weka.core.AttributeStats",
455:       "weka.experiment.Stats",
456:       "weka.classifiers.bayes.net.ParentSet",
457:       "weka.core.CheckGOE"
458:     );
459:   }
460: }

[MASTER] 05:14:22.635 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
Stopwords stopwords0 = new Stopwords();
HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
int[] intArray0 = new int[7];
intArray0[0] = 124;
intArray0[1] = 124;
intArray0[2] = 124;
intArray0[3] = 124;
naiveBayesMultinomialText0.m_periodicP = 17;
intArray0[4] = 124;
intArray0[5] = 124;
intArray0[6] = 124;
BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2475.0064, intArray0, 69);
naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);

[MASTER] 05:14:22.736 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_35_1575263662709/weka/classifiers/bayes/NaiveBayesMultinomialText_35_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_35_1575263662709/weka/classifiers/bayes/NaiveBayesMultinomialText_35_tmp__ESTest_scaffolding.java]]
[MASTER] 05:14:22.736 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 05:14:22.736 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 05:14:22.736 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 29
[MASTER] 05:14:22.737 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_35_1575263662709/weka/classifiers/bayes/NaiveBayesMultinomialText_35_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Dec 02 05:14:22 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.LinkedHashMap;
11: import java.util.Map;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.Random;
15: import org.junit.runner.RunWith;
16: import weka.classifiers.bayes.NaiveBayesMultinomialText;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class NaiveBayesMultinomialText_35_tmp__ESTest extends NaiveBayesMultinomialText_35_tmp__ESTest_scaffolding {
20: 
21:   /**
22:   //Test case number: 0
23:   /*Coverage entropy=2.562200162369491
24:   */
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
28:       naiveBayesMultinomialText0.getPeriodicPruning();
29:       Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> map0 = naiveBayesMultinomialText0.m_probOfWordGivenClass;
30:       NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
31:       naiveBayesMultinomialText1.getPeriodicPruning();
32:       naiveBayesMultinomialText1.toString();
33:       naiveBayesMultinomialText1.setDebug(true);
34:       naiveBayesMultinomialText0.setUseWordFrequencies(true);
35:       naiveBayesMultinomialText1.lowercaseTokensTipText();
36:       naiveBayesMultinomialText0.setPeriodicPruning(1260);
37:       NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
38:       naiveBayesMultinomialText2.getLowercaseTokens();
39:       naiveBayesMultinomialText0.getPeriodicPruning();
40:       naiveBayesMultinomialText0.normalizeDocLengthTipText();
41:       naiveBayesMultinomialText2.getUseWordFrequencies();
42:       naiveBayesMultinomialText2.getUseWordFrequencies();
43:       Random.setNextRandom(0);
44:   }
45: }
RegularFileObject[/tmp/EvoSuite_35_1575263662709/weka/classifiers/bayes/NaiveBayesMultinomialText_35_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Dec 02 05:14:22 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_35_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_35_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.filters.unsupervised.attribute.NominalToBinary",
91:       "weka.core.DistanceFunction",
92:       "weka.core.neighboursearch.balltrees.BottomUpConstructor$TempNode",
93:       "org.pentaho.packageManagement.PackageConstraint",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.classifiers.CostMatrix",
97:       "weka.classifiers.bayes.net.search.local.K2",
98:       "weka.filters.UnsupervisedFilter",
99:       "weka.core.neighboursearch.BallTree",
100:       "weka.core.logging.Logger$Level",
101:       "weka.core.neighboursearch.CoverTree$DistanceNode",
102:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
103:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
104:       "weka.core.DenseInstance",
105:       "weka.classifiers.functions.LinearRegression",
106:       "weka.core.stemmers.Stemmer",
107:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
108:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
109:       "org.pentaho.packageManagement.DefaultPackageManager",
110:       "org.bounce.net.DefaultAuthenticator",
111:       "weka.core.neighboursearch.CoverTree$MyHeap",
112:       "weka.estimators.IncrementalEstimator",
113:       "weka.estimators.Estimator$Builder",
114:       "weka.core.neighboursearch.KDTree",
115:       "weka.core.stemmers.NullStemmer",
116:       "weka.core.EnvironmentHandler",
117:       "weka.classifiers.functions.SGDText",
118:       "weka.core.RelationalLocator",
119:       "weka.core.Utils",
120:       "weka.core.CustomDisplayStringProvider",
121:       "weka.core.tokenizers.Tokenizer",
122:       "weka.core.NormalizableDistance",
123:       "weka.core.NoSupportForMissingValuesException",
124:       "weka.classifiers.UpdateableClassifier",
125:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
126:       "weka.core.TechnicalInformation$Type",
127:       "weka.core.MultiInstanceCapabilitiesHandler",
128:       "weka.core.Copyable",
129:       "weka.core.Capabilities",
130:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
131:       "weka.core.AttributeLocator",
132:       "weka.core.BinarySparseInstance",
133:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
134:       "weka.filters.supervised.attribute.NominalToBinary",
135:       "weka.classifiers.functions.supportVector.CachedKernel",
136:       "weka.core.SerializedObject",
137:       "weka.clusterers.UpdateableClusterer",
138:       "weka.core.Summarizable",
139:       "weka.core.AdditionalMeasureProducer",
140:       "weka.core.neighboursearch.balltrees.BallNode",
141:       "org.pentaho.packageManagement.PackageManager$1",
142:       "weka.core.OptionHandlerJavadoc",
143:       "weka.core.Drawable",
144:       "weka.core.matrix.Matrix",
145:       "weka.classifiers.ConditionalDensityEstimator",
146:       "weka.core.SingleIndex",
147:       "weka.core.CapabilitiesHandler",
148:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
149:       "weka.core.AbstractInstance",
150:       "weka.core.scripting.JythonObject",
151:       "weka.core.SelectedTag",
152:       "org.pentaho.packageManagement.DefaultPackage",
153:       "weka.estimators.DiscreteEstimator",
154:       "weka.core.neighboursearch.balltrees.BallSplitter",
155:       "weka.classifiers.bayes.BayesNet",
156:       "weka.classifiers.misc.InputMappedClassifier",
157:       "weka.core.Version",
158:       "weka.filters.AllFilter",
159:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
160:       "weka.core.Tag",
161:       "weka.core.neighboursearch.CoverTree",
162:       "weka.classifiers.AbstractClassifier",
163:       "weka.core.FindWithCapabilities",
164:       "weka.core.OptionHandler",
165:       "weka.core.WekaException",
166:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
167:       "weka.core.Range",
168:       "weka.core.scripting.JythonSerializableObject",
169:       "weka.classifiers.Classifier",
170:       "weka.core.neighboursearch.NearestNeighbourSearch$NeighborList",
171:       "weka.core.Capabilities$Capability",
172:       "weka.core.SparseInstance",
173:       "org.pentaho.packageManagement.PackageManager",
174:       "weka.estimators.PoissonEstimator",
175:       "weka.core.tokenizers.WordTokenizer",
176:       "weka.classifiers.misc.SerializedClassifier",
177:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
178:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
179:       "weka.core.stemmers.SnowballStemmer",
180:       "weka.core.stemmers.LovinsStemmer",
181:       "weka.classifiers.Evaluation",
182:       "weka.classifiers.functions.supportVector.Kernel",
183:       "weka.core.WekaPackageManager",
184:       "weka.filters.SupervisedFilter",
185:       "weka.core.TechnicalInformationHandler",
186:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
187:       "weka.classifiers.functions.SimpleLogistic",
188:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
189:       "weka.core.Option",
190:       "weka.classifiers.meta.CostSensitiveClassifier",
191:       "weka.core.neighboursearch.PerformanceStats",
192:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
193:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
194:       "weka.filters.Sourcable",
195:       "weka.core.Attribute",
196:       "weka.core.Stopwords",
197:       "weka.core.tokenizers.AlphabeticTokenizer",
198:       "weka.core.FastVector",
199:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
200:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
201:       "weka.core.UnassignedDatasetException",
202:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
203:       "weka.classifiers.RandomizableClassifier",
204:       "weka.classifiers.SingleClassifierEnhancer",
205:       "weka.core.RevisionUtils",
206:       "weka.core.Instance",
207:       "weka.classifiers.functions.supportVector.PolyKernel",
208:       "weka.estimators.Estimator",
209:       "weka.core.ProtectedProperties",
210:       "weka.classifiers.IntervalEstimator",
211:       "weka.core.StringLocator",
212:       "weka.classifiers.bayes.net.ADNode",
213:       "weka.core.AttributeStats",
214:       "weka.core.WeightedInstancesHandler",
215:       "weka.core.neighboursearch.NearestNeighbourSearch",
216:       "weka.classifiers.functions.GaussianProcesses",
217:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
218:       "weka.core.TechnicalInformation$Field",
219:       "weka.core.neighboursearch.covertrees.Stack",
220:       "weka.core.Javadoc",
221:       "weka.core.Randomizable",
222:       "weka.core.EuclideanDistance",
223:       "weka.core.Instances",
224:       "weka.core.neighboursearch.CoverTree$CoverTreeNode",
225:       "weka.filters.unsupervised.attribute.Normalize",
226:       "weka.core.UnassignedClassException",
227:       "weka.classifiers.bayes.net.BIFReader",
228:       "weka.classifiers.bayes.net.ParentSet",
229:       "weka.classifiers.rules.ZeroR",
230:       "weka.core.stemmers.IteratedLovinsStemmer",
231:       "weka.filters.unsupervised.attribute.Standardize",
232:       "weka.core.TechnicalInformation",
233:       "weka.core.UnsupportedAttributeTypeException",
234:       "weka.classifiers.Sourcable",
235:       "weka.core.RevisionHandler",
236:       "weka.classifiers.evaluation.output.prediction.PlainText",
237:       "weka.core.neighboursearch.TreePerformanceStats",
238:       "weka.core.xml.XMLSerialization",
239:       "weka.classifiers.xml.XMLClassifier",
240:       "weka.filters.Filter",
241:       "weka.filters.supervised.attribute.Discretize"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_35_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "weka.classifiers.AbstractClassifier",
250:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
251:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
252:       "weka.core.Capabilities$Capability",
253:       "weka.core.tokenizers.Tokenizer",
254:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
255:       "weka.core.tokenizers.WordTokenizer",
256:       "weka.core.stemmers.NullStemmer",
257:       "weka.core.Utils",
258:       "weka.attributeSelection.ASEvaluation",
259:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
260:       "weka.attributeSelection.PrincipalComponents",
261:       "weka.classifiers.Evaluation",
262:       "weka.core.Option",
263:       "weka.core.AbstractInstance",
264:       "weka.core.SparseInstance",
265:       "weka.core.UnassignedDatasetException",
266:       "weka.classifiers.bayes.NaiveBayes",
267:       "weka.core.Capabilities",
268:       "org.pentaho.packageManagement.PackageManager",
269:       "org.pentaho.packageManagement.DefaultPackageManager",
270:       "weka.core.Version",
271:       "weka.core.Environment",
272:       "weka.core.WekaPackageManager",
273:       "weka.classifiers.bayes.BayesNet",
274:       "weka.classifiers.bayes.net.BIFReader",
275:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
276:       "weka.core.Tag",
277:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
278:       "weka.classifiers.bayes.net.search.local.K2",
279:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
280:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
281:       "weka.classifiers.SingleClassifierEnhancer",
282:       "weka.classifiers.misc.InputMappedClassifier",
283:       "weka.classifiers.rules.ZeroR",
284:       "weka.core.neighboursearch.NearestNeighbourSearch",
285:       "weka.core.neighboursearch.KDTree",
286:       "weka.core.NormalizableDistance",
287:       "weka.core.EuclideanDistance",
288:       "weka.core.Range",
289:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
290:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
291:       "weka.core.DenseInstance",
292:       "weka.filters.Filter",
293:       "weka.filters.supervised.attribute.Discretize",
294:       "weka.core.BinarySparseInstance",
295:       "weka.core.SerializedObject",
296:       "weka.core.neighboursearch.CoverTree",
297:       "weka.core.neighboursearch.BallTree",
298:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
299:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
300:       "weka.core.neighboursearch.balltrees.BallSplitter",
301:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
302:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
303:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
304:       "weka.core.stemmers.LovinsStemmer",
305:       "weka.core.stemmers.IteratedLovinsStemmer",
306:       "weka.core.TechnicalInformation",
307:       "weka.core.TechnicalInformation$Type",
308:       "weka.core.TechnicalInformation$Field",
309:       "weka.classifiers.functions.supportVector.Kernel",
310:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
311:       "weka.core.Stopwords",
312:       "weka.core.RevisionUtils",
313:       "weka.classifiers.RandomizableClassifier",
314:       "weka.classifiers.functions.SGDText",
315:       "weka.core.Instances",
316:       "weka.core.TestInstances",
317:       "weka.classifiers.lazy.KStar",
318:       "weka.core.SelectedTag",
319:       "weka.core.Javadoc",
320:       "weka.core.OptionHandlerJavadoc",
321:       "weka.core.WekaException",
322:       "weka.core.stemmers.Stemming",
323:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
324:       "weka.classifiers.meta.CostSensitiveClassifier",
325:       "weka.classifiers.CostMatrix",
326:       "weka.core.FindWithCapabilities",
327:       "weka.core.SingleIndex",
328:       "weka.core.ClassDiscovery",
329:       "weka.core.ProtectedProperties",
330:       "weka.core.Attribute",
331:       "weka.core.neighboursearch.balltrees.BallNode",
332:       "weka.filters.AllFilter",
333:       "weka.core.converters.ArffLoader$ArffReader",
334:       "weka.core.WekaEnumeration",
335:       "weka.core.Attribute$1",
336:       "weka.core.tokenizers.NGramTokenizer",
337:       "weka.core.stemmers.SnowballStemmer",
338:       "weka.filters.SimpleFilter",
339:       "weka.filters.SimpleStreamFilter",
340:       "weka.filters.MultiFilter",
341:       "weka.core.tokenizers.AlphabeticTokenizer",
342:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
343:       "weka.classifiers.lazy.IBk",
344:       "weka.core.neighboursearch.LinearNNSearch",
345:       "weka.classifiers.functions.GaussianProcesses",
346:       "weka.classifiers.functions.supportVector.CachedKernel",
347:       "weka.classifiers.functions.supportVector.PolyKernel",
348:       "weka.core.UnassignedClassException",
349:       "weka.classifiers.misc.SerializedClassifier",
350:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
351:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
352:       "weka.classifiers.MultipleClassifiersCombiner",
353:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
354:       "weka.classifiers.meta.MultiScheme",
355:       "weka.classifiers.functions.SimpleLogistic",
356:       "weka.core.neighboursearch.kdtrees.MedianOfWidestDimension",
357:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
358:       "weka.classifiers.bayes.NaiveBayesMultinomial",
359:       "weka.core.neighboursearch.PerformanceStats",
360:       "weka.core.neighboursearch.TreePerformanceStats",
361:       "weka.core.MinkowskiDistance",
362:       "weka.core.TechnicalInformationHandlerJavadoc",
363:       "weka.attributeSelection.GainRatioAttributeEval",
364:       "weka.attributeSelection.OneRAttributeEval",
365:       "weka.core.Check",
366:       "weka.core.CheckOptionHandler",
367:       "weka.estimators.Estimator",
368:       "weka.classifiers.rules.OneR",
369:       "weka.classifiers.IteratedSingleClassifierEnhancer",
370:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
371:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
372:       "weka.classifiers.meta.RandomSubSpace",
373:       "weka.classifiers.trees.REPTree",
374:       "weka.classifiers.meta.FilteredClassifier",
375:       "weka.filters.supervised.attribute.AttributeSelection",
376:       "weka.attributeSelection.AttributeSelection",
377:       "weka.attributeSelection.CfsSubsetEval",
378:       "weka.attributeSelection.ASSearch",
379:       "weka.attributeSelection.GreedyStepwise",
380:       "weka.attributeSelection.BestFirst",
381:       "weka.classifiers.trees.J48",
382:       "weka.core.UnsupportedAttributeTypeException",
383:       "weka.classifiers.rules.DecisionTable",
384:       "weka.attributeSelection.ReliefFAttributeEval",
385:       "weka.classifiers.meta.CVParameterSelection",
386:       "weka.core.FastVector",
387:       "weka.classifiers.functions.supportVector.StringKernel",
388:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
389:       "weka.classifiers.meta.RandomCommittee",
390:       "weka.classifiers.trees.RandomTree",
391:       "weka.classifiers.functions.LinearRegression",
392:       "weka.estimators.KernelEstimator",
393:       "weka.attributeSelection.CorrelationAttributeEval",
394:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
395:       "weka.classifiers.meta.AdaBoostM1",
396:       "weka.classifiers.trees.DecisionStump",
397:       "weka.classifiers.meta.RegressionByDiscretization",
398:       "weka.filters.unsupervised.attribute.Discretize",
399:       "weka.classifiers.trees.j48.ClassifierTree",
400:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
401:       "weka.classifiers.functions.SGD",
402:       "weka.classifiers.trees.m5.M5Base",
403:       "weka.classifiers.rules.M5Rules",
404:       "weka.attributeSelection.WrapperSubsetEval",
405:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
406:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
407:       "weka.classifiers.meta.Stacking",
408:       "weka.classifiers.functions.SMOreg",
409:       "weka.classifiers.functions.supportVector.RegOptimizer",
410:       "weka.classifiers.functions.supportVector.RegSMO",
411:       "weka.classifiers.functions.supportVector.RegSMOImproved",
412:       "weka.classifiers.meta.Vote",
413:       "weka.classifiers.functions.Logistic",
414:       "weka.classifiers.trees.LMT",
415:       "weka.estimators.DiscreteEstimator",
416:       "weka.classifiers.functions.VotedPerceptron",
417:       "weka.classifiers.meta.AdditiveRegression",
418:       "weka.classifiers.functions.SMO",
419:       "weka.classifiers.functions.MultilayerPerceptron",
420:       "weka.filters.unsupervised.attribute.NominalToBinary",
421:       "weka.classifiers.functions.neural.SigmoidUnit",
422:       "weka.classifiers.functions.neural.LinearUnit",
423:       "weka.estimators.PoissonEstimator",
424:       "weka.core.converters.ConverterUtils$DataSource",
425:       "weka.core.converters.AbstractLoader",
426:       "weka.core.converters.AbstractFileLoader",
427:       "weka.core.converters.ArffLoader",
428:       "weka.core.matrix.Matrix",
429:       "weka.estimators.MahalanobisEstimator",
430:       "weka.classifiers.functions.supportVector.Puk",
431:       "weka.classifiers.meta.Bagging",
432:       "weka.classifiers.meta.AttributeSelectedClassifier",
433:       "weka.classifiers.rules.PART",
434:       "weka.classifiers.rules.part.MakeDecList",
435:       "weka.classifiers.trees.RandomForest",
436:       "weka.classifiers.lazy.LWL",
437:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
438:       "weka.classifiers.meta.MultiClassClassifier",
439:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
440:       "weka.attributeSelection.InfoGainAttributeEval",
441:       "weka.classifiers.functions.supportVector.RBFKernel",
442:       "weka.classifiers.meta.LogitBoost",
443:       "weka.classifiers.meta.ClassificationViaRegression",
444:       "weka.classifiers.trees.M5P",
445:       "weka.classifiers.functions.SimpleLinearRegression",
446:       "weka.core.SerializationHelper",
447:       "weka.classifiers.rules.JRip",
448:       "weka.classifiers.bayes.NaiveBayesUpdateable",
449:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
450:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
451:       "weka.estimators.NormalEstimator",
452:       "weka.classifiers.functions.neural.NeuralConnection",
453:       "weka.classifiers.functions.MultilayerPerceptron$NeuralEnd",
454:       "weka.core.AttributeStats",
455:       "weka.experiment.Stats",
456:       "weka.classifiers.bayes.net.ParentSet",
457:       "weka.core.CheckGOE"
458:     );
459:   }
460: }

[MASTER] 05:14:22.738 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText0.getPeriodicPruning();
Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> map0 = naiveBayesMultinomialText0.m_probOfWordGivenClass;
NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText1.getPeriodicPruning();
naiveBayesMultinomialText1.toString();
naiveBayesMultinomialText1.setDebug(true);
naiveBayesMultinomialText0.setUseWordFrequencies(true);
naiveBayesMultinomialText1.lowercaseTokensTipText();
naiveBayesMultinomialText0.setPeriodicPruning(1260);
NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText2.getLowercaseTokens();
naiveBayesMultinomialText0.getPeriodicPruning();
naiveBayesMultinomialText0.normalizeDocLengthTipText();
naiveBayesMultinomialText2.getUseWordFrequencies();
naiveBayesMultinomialText2.getUseWordFrequencies();
Random.setNextRandom(0);

[MASTER] 05:14:23.268 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_51_1575263663234/weka/classifiers/bayes/NaiveBayesMultinomialText_51_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_51_1575263663234/weka/classifiers/bayes/NaiveBayesMultinomialText_51_tmp__ESTest_scaffolding.java]]
[MASTER] 05:14:23.268 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 05:14:23.268 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 05:14:23.269 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 28
[MASTER] 05:14:23.269 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 28
[MASTER] 05:14:23.270 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_51_1575263663234/weka/classifiers/bayes/NaiveBayesMultinomialText_51_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Dec 02 05:14:23 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.LinkedHashMap;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: import weka.classifiers.bayes.NaiveBayesMultinomialText;
16: import weka.core.Instance;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class NaiveBayesMultinomialText_51_tmp__ESTest extends NaiveBayesMultinomialText_51_tmp__ESTest_scaffolding {
20: 
21:   /**
22:   //Test case number: 0
23:   /*Coverage entropy=0.4
24:   */
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
28:       LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
29:       naiveBayesMultinomialText0.m_inputVector = linkedHashMap0;
30:       // Undeclared exception!
31:       try { 
32:         naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
33:         fail("Expecting exception: NullPointerException");
34:       
35:       } catch(NullPointerException e) {
36:          //
37:          // no message in exception (getMessage() returned null)
38:          //
39:       }
40:   }
41: }
RegularFileObject[/tmp/EvoSuite_51_1575263663234/weka/classifiers/bayes/NaiveBayesMultinomialText_51_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Dec 02 05:14:23 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_51_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_51_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.filters.unsupervised.attribute.NominalToBinary",
91:       "weka.core.DistanceFunction",
92:       "weka.core.neighboursearch.balltrees.BottomUpConstructor$TempNode",
93:       "org.pentaho.packageManagement.PackageConstraint",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.classifiers.CostMatrix",
97:       "weka.classifiers.bayes.net.search.local.K2",
98:       "weka.filters.UnsupervisedFilter",
99:       "weka.core.neighboursearch.BallTree",
100:       "weka.core.logging.Logger$Level",
101:       "weka.core.neighboursearch.CoverTree$DistanceNode",
102:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
103:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
104:       "weka.core.DenseInstance",
105:       "weka.classifiers.functions.LinearRegression",
106:       "weka.core.stemmers.Stemmer",
107:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
108:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
109:       "org.pentaho.packageManagement.DefaultPackageManager",
110:       "org.bounce.net.DefaultAuthenticator",
111:       "weka.core.neighboursearch.CoverTree$MyHeap",
112:       "weka.estimators.IncrementalEstimator",
113:       "weka.estimators.Estimator$Builder",
114:       "weka.core.neighboursearch.KDTree",
115:       "weka.core.stemmers.NullStemmer",
116:       "weka.core.EnvironmentHandler",
117:       "weka.classifiers.functions.SGDText",
118:       "weka.core.RelationalLocator",
119:       "weka.core.Utils",
120:       "weka.core.CustomDisplayStringProvider",
121:       "weka.core.tokenizers.Tokenizer",
122:       "weka.core.NormalizableDistance",
123:       "weka.core.NoSupportForMissingValuesException",
124:       "weka.classifiers.UpdateableClassifier",
125:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
126:       "weka.core.TechnicalInformation$Type",
127:       "weka.core.MultiInstanceCapabilitiesHandler",
128:       "weka.core.Copyable",
129:       "weka.core.Capabilities",
130:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
131:       "weka.core.AttributeLocator",
132:       "weka.core.BinarySparseInstance",
133:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
134:       "weka.filters.supervised.attribute.NominalToBinary",
135:       "weka.classifiers.functions.supportVector.CachedKernel",
136:       "weka.core.SerializedObject",
137:       "weka.clusterers.UpdateableClusterer",
138:       "weka.core.Summarizable",
139:       "weka.core.AdditionalMeasureProducer",
140:       "weka.core.neighboursearch.balltrees.BallNode",
141:       "org.pentaho.packageManagement.PackageManager$1",
142:       "weka.core.OptionHandlerJavadoc",
143:       "weka.core.Drawable",
144:       "weka.core.matrix.Matrix",
145:       "weka.classifiers.ConditionalDensityEstimator",
146:       "weka.core.SingleIndex",
147:       "weka.core.CapabilitiesHandler",
148:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
149:       "weka.core.AbstractInstance",
150:       "weka.core.scripting.JythonObject",
151:       "weka.core.SelectedTag",
152:       "org.pentaho.packageManagement.DefaultPackage",
153:       "weka.estimators.DiscreteEstimator",
154:       "weka.core.neighboursearch.balltrees.BallSplitter",
155:       "weka.classifiers.bayes.BayesNet",
156:       "weka.classifiers.misc.InputMappedClassifier",
157:       "weka.core.Version",
158:       "weka.filters.AllFilter",
159:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
160:       "weka.core.Tag",
161:       "weka.core.neighboursearch.CoverTree",
162:       "weka.classifiers.AbstractClassifier",
163:       "weka.core.FindWithCapabilities",
164:       "weka.core.OptionHandler",
165:       "weka.core.WekaException",
166:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
167:       "weka.core.Range",
168:       "weka.core.scripting.JythonSerializableObject",
169:       "weka.classifiers.Classifier",
170:       "weka.core.neighboursearch.NearestNeighbourSearch$NeighborList",
171:       "weka.core.Capabilities$Capability",
172:       "weka.core.SparseInstance",
173:       "org.pentaho.packageManagement.PackageManager",
174:       "weka.estimators.PoissonEstimator",
175:       "weka.core.tokenizers.WordTokenizer",
176:       "weka.classifiers.misc.SerializedClassifier",
177:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
178:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
179:       "weka.core.stemmers.SnowballStemmer",
180:       "weka.core.stemmers.LovinsStemmer",
181:       "weka.classifiers.Evaluation",
182:       "weka.classifiers.functions.supportVector.Kernel",
183:       "weka.core.WekaPackageManager",
184:       "weka.filters.SupervisedFilter",
185:       "weka.core.TechnicalInformationHandler",
186:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
187:       "weka.classifiers.functions.SimpleLogistic",
188:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
189:       "weka.core.Option",
190:       "weka.classifiers.meta.CostSensitiveClassifier",
191:       "weka.core.neighboursearch.PerformanceStats",
192:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
193:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
194:       "weka.filters.Sourcable",
195:       "weka.core.Attribute",
196:       "weka.core.Stopwords",
197:       "weka.core.tokenizers.AlphabeticTokenizer",
198:       "weka.core.FastVector",
199:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
200:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
201:       "weka.core.UnassignedDatasetException",
202:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
203:       "weka.classifiers.RandomizableClassifier",
204:       "weka.classifiers.SingleClassifierEnhancer",
205:       "weka.core.RevisionUtils",
206:       "weka.core.Instance",
207:       "weka.classifiers.functions.supportVector.PolyKernel",
208:       "weka.estimators.Estimator",
209:       "weka.core.ProtectedProperties",
210:       "weka.classifiers.IntervalEstimator",
211:       "weka.core.StringLocator",
212:       "weka.classifiers.bayes.net.ADNode",
213:       "weka.core.AttributeStats",
214:       "weka.core.WeightedInstancesHandler",
215:       "weka.core.neighboursearch.NearestNeighbourSearch",
216:       "weka.classifiers.functions.GaussianProcesses",
217:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
218:       "weka.core.TechnicalInformation$Field",
219:       "weka.core.neighboursearch.covertrees.Stack",
220:       "weka.core.Javadoc",
221:       "weka.core.Randomizable",
222:       "weka.core.EuclideanDistance",
223:       "weka.core.Instances",
224:       "weka.core.neighboursearch.CoverTree$CoverTreeNode",
225:       "weka.filters.unsupervised.attribute.Normalize",
226:       "weka.core.UnassignedClassException",
227:       "weka.classifiers.bayes.net.BIFReader",
228:       "weka.classifiers.bayes.net.ParentSet",
229:       "weka.classifiers.rules.ZeroR",
230:       "weka.core.stemmers.IteratedLovinsStemmer",
231:       "weka.filters.unsupervised.attribute.Standardize",
232:       "weka.core.TechnicalInformation",
233:       "weka.core.UnsupportedAttributeTypeException",
234:       "weka.classifiers.Sourcable",
235:       "weka.core.RevisionHandler",
236:       "weka.classifiers.evaluation.output.prediction.PlainText",
237:       "weka.core.neighboursearch.TreePerformanceStats",
238:       "weka.core.xml.XMLSerialization",
239:       "weka.classifiers.xml.XMLClassifier",
240:       "weka.filters.Filter",
241:       "weka.filters.supervised.attribute.Discretize"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_51_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "weka.classifiers.AbstractClassifier",
250:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
251:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
252:       "weka.core.Capabilities$Capability",
253:       "weka.core.tokenizers.Tokenizer",
254:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
255:       "weka.core.tokenizers.WordTokenizer",
256:       "weka.core.stemmers.NullStemmer",
257:       "weka.core.Utils",
258:       "weka.attributeSelection.ASEvaluation",
259:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
260:       "weka.attributeSelection.PrincipalComponents",
261:       "weka.classifiers.Evaluation",
262:       "weka.core.Option",
263:       "weka.core.AbstractInstance",
264:       "weka.core.SparseInstance",
265:       "weka.core.UnassignedDatasetException",
266:       "weka.classifiers.bayes.NaiveBayes",
267:       "weka.core.Capabilities",
268:       "org.pentaho.packageManagement.PackageManager",
269:       "org.pentaho.packageManagement.DefaultPackageManager",
270:       "weka.core.Version",
271:       "weka.core.Environment",
272:       "weka.core.WekaPackageManager",
273:       "weka.classifiers.bayes.BayesNet",
274:       "weka.classifiers.bayes.net.BIFReader",
275:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
276:       "weka.core.Tag",
277:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
278:       "weka.classifiers.bayes.net.search.local.K2",
279:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
280:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
281:       "weka.classifiers.SingleClassifierEnhancer",
282:       "weka.classifiers.misc.InputMappedClassifier",
283:       "weka.classifiers.rules.ZeroR",
284:       "weka.core.neighboursearch.NearestNeighbourSearch",
285:       "weka.core.neighboursearch.KDTree",
286:       "weka.core.NormalizableDistance",
287:       "weka.core.EuclideanDistance",
288:       "weka.core.Range",
289:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
290:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
291:       "weka.core.DenseInstance",
292:       "weka.filters.Filter",
293:       "weka.filters.supervised.attribute.Discretize",
294:       "weka.core.BinarySparseInstance",
295:       "weka.core.SerializedObject",
296:       "weka.core.neighboursearch.CoverTree",
297:       "weka.core.neighboursearch.BallTree",
298:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
299:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
300:       "weka.core.neighboursearch.balltrees.BallSplitter",
301:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
302:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
303:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
304:       "weka.core.stemmers.LovinsStemmer",
305:       "weka.core.stemmers.IteratedLovinsStemmer",
306:       "weka.core.TechnicalInformation",
307:       "weka.core.TechnicalInformation$Type",
308:       "weka.core.TechnicalInformation$Field",
309:       "weka.classifiers.functions.supportVector.Kernel",
310:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
311:       "weka.core.Stopwords",
312:       "weka.core.RevisionUtils",
313:       "weka.classifiers.RandomizableClassifier",
314:       "weka.classifiers.functions.SGDText",
315:       "weka.core.Instances",
316:       "weka.core.TestInstances",
317:       "weka.classifiers.lazy.KStar",
318:       "weka.core.SelectedTag",
319:       "weka.core.Javadoc",
320:       "weka.core.OptionHandlerJavadoc",
321:       "weka.core.WekaException",
322:       "weka.core.stemmers.Stemming",
323:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
324:       "weka.classifiers.meta.CostSensitiveClassifier",
325:       "weka.classifiers.CostMatrix",
326:       "weka.core.FindWithCapabilities",
327:       "weka.core.SingleIndex",
328:       "weka.core.ClassDiscovery",
329:       "weka.core.ProtectedProperties",
330:       "weka.core.Attribute",
331:       "weka.core.neighboursearch.balltrees.BallNode",
332:       "weka.filters.AllFilter",
333:       "weka.core.converters.ArffLoader$ArffReader",
334:       "weka.core.WekaEnumeration",
335:       "weka.core.Attribute$1",
336:       "weka.core.tokenizers.NGramTokenizer",
337:       "weka.core.stemmers.SnowballStemmer",
338:       "weka.filters.SimpleFilter",
339:       "weka.filters.SimpleStreamFilter",
340:       "weka.filters.MultiFilter",
341:       "weka.core.tokenizers.AlphabeticTokenizer",
342:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
343:       "weka.classifiers.lazy.IBk",
344:       "weka.core.neighboursearch.LinearNNSearch",
345:       "weka.classifiers.functions.GaussianProcesses",
346:       "weka.classifiers.functions.supportVector.CachedKernel",
347:       "weka.classifiers.functions.supportVector.PolyKernel",
348:       "weka.core.UnassignedClassException",
349:       "weka.classifiers.misc.SerializedClassifier",
350:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
351:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
352:       "weka.classifiers.MultipleClassifiersCombiner",
353:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
354:       "weka.classifiers.meta.MultiScheme",
355:       "weka.classifiers.functions.SimpleLogistic",
356:       "weka.core.neighboursearch.kdtrees.MedianOfWidestDimension",
357:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
358:       "weka.classifiers.bayes.NaiveBayesMultinomial",
359:       "weka.core.neighboursearch.PerformanceStats",
360:       "weka.core.neighboursearch.TreePerformanceStats",
361:       "weka.core.MinkowskiDistance",
362:       "weka.core.TechnicalInformationHandlerJavadoc",
363:       "weka.attributeSelection.GainRatioAttributeEval",
364:       "weka.attributeSelection.OneRAttributeEval",
365:       "weka.core.Check",
366:       "weka.core.CheckOptionHandler",
367:       "weka.estimators.Estimator",
368:       "weka.classifiers.rules.OneR",
369:       "weka.classifiers.IteratedSingleClassifierEnhancer",
370:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
371:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
372:       "weka.classifiers.meta.RandomSubSpace",
373:       "weka.classifiers.trees.REPTree",
374:       "weka.classifiers.meta.FilteredClassifier",
375:       "weka.filters.supervised.attribute.AttributeSelection",
376:       "weka.attributeSelection.AttributeSelection",
377:       "weka.attributeSelection.CfsSubsetEval",
378:       "weka.attributeSelection.ASSearch",
379:       "weka.attributeSelection.GreedyStepwise",
380:       "weka.attributeSelection.BestFirst",
381:       "weka.classifiers.trees.J48",
382:       "weka.core.UnsupportedAttributeTypeException",
383:       "weka.classifiers.rules.DecisionTable",
384:       "weka.attributeSelection.ReliefFAttributeEval",
385:       "weka.classifiers.meta.CVParameterSelection",
386:       "weka.core.FastVector",
387:       "weka.classifiers.functions.supportVector.StringKernel",
388:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
389:       "weka.classifiers.meta.RandomCommittee",
390:       "weka.classifiers.trees.RandomTree",
391:       "weka.classifiers.functions.LinearRegression",
392:       "weka.estimators.KernelEstimator",
393:       "weka.attributeSelection.CorrelationAttributeEval",
394:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
395:       "weka.classifiers.meta.AdaBoostM1",
396:       "weka.classifiers.trees.DecisionStump",
397:       "weka.classifiers.meta.RegressionByDiscretization",
398:       "weka.filters.unsupervised.attribute.Discretize",
399:       "weka.classifiers.trees.j48.ClassifierTree",
400:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
401:       "weka.classifiers.functions.SGD",
402:       "weka.classifiers.trees.m5.M5Base",
403:       "weka.classifiers.rules.M5Rules",
404:       "weka.attributeSelection.WrapperSubsetEval",
405:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
406:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
407:       "weka.classifiers.meta.Stacking",
408:       "weka.classifiers.functions.SMOreg",
409:       "weka.classifiers.functions.supportVector.RegOptimizer",
410:       "weka.classifiers.functions.supportVector.RegSMO",
411:       "weka.classifiers.functions.supportVector.RegSMOImproved",
412:       "weka.classifiers.meta.Vote",
413:       "weka.classifiers.functions.Logistic",
414:       "weka.classifiers.trees.LMT",
415:       "weka.estimators.DiscreteEstimator",
416:       "weka.classifiers.functions.VotedPerceptron",
417:       "weka.classifiers.meta.AdditiveRegression",
418:       "weka.classifiers.functions.SMO",
419:       "weka.classifiers.functions.MultilayerPerceptron",
420:       "weka.filters.unsupervised.attribute.NominalToBinary",
421:       "weka.classifiers.functions.neural.SigmoidUnit",
422:       "weka.classifiers.functions.neural.LinearUnit",
423:       "weka.estimators.PoissonEstimator",
424:       "weka.core.converters.ConverterUtils$DataSource",
425:       "weka.core.converters.AbstractLoader",
426:       "weka.core.converters.AbstractFileLoader",
427:       "weka.core.converters.ArffLoader",
428:       "weka.core.matrix.Matrix",
429:       "weka.estimators.MahalanobisEstimator",
430:       "weka.classifiers.functions.supportVector.Puk",
431:       "weka.classifiers.meta.Bagging",
432:       "weka.classifiers.meta.AttributeSelectedClassifier",
433:       "weka.classifiers.rules.PART",
434:       "weka.classifiers.rules.part.MakeDecList",
435:       "weka.classifiers.trees.RandomForest",
436:       "weka.classifiers.lazy.LWL",
437:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
438:       "weka.classifiers.meta.MultiClassClassifier",
439:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
440:       "weka.attributeSelection.InfoGainAttributeEval",
441:       "weka.classifiers.functions.supportVector.RBFKernel",
442:       "weka.classifiers.meta.LogitBoost",
443:       "weka.classifiers.meta.ClassificationViaRegression",
444:       "weka.classifiers.trees.M5P",
445:       "weka.classifiers.functions.SimpleLinearRegression",
446:       "weka.core.SerializationHelper",
447:       "weka.classifiers.rules.JRip",
448:       "weka.classifiers.bayes.NaiveBayesUpdateable",
449:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
450:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
451:       "weka.estimators.NormalEstimator",
452:       "weka.classifiers.functions.neural.NeuralConnection",
453:       "weka.classifiers.functions.MultilayerPerceptron$NeuralEnd",
454:       "weka.core.AttributeStats",
455:       "weka.experiment.Stats",
456:       "weka.classifiers.bayes.net.ParentSet",
457:       "weka.core.CheckGOE"
458:     );
459:   }
460: }

[MASTER] 05:14:23.270 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
naiveBayesMultinomialText0.m_inputVector = linkedHashMap0;
naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);

[MASTER] 05:14:23.906 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_67_1575263663879/weka/classifiers/bayes/NaiveBayesMultinomialText_67_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_67_1575263663879/weka/classifiers/bayes/NaiveBayesMultinomialText_67_tmp__ESTest_scaffolding.java]]
[MASTER] 05:14:23.907 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 05:14:23.907 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 05:14:23.907 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 27
[MASTER] 05:14:23.907 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 27
[MASTER] 05:14:23.907 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 28
[MASTER] 05:14:23.908 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_67_1575263663879/weka/classifiers/bayes/NaiveBayesMultinomialText_67_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Dec 02 05:14:23 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.LinkedHashMap;
11: import java.util.Map;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: import weka.classifiers.bayes.NaiveBayesMultinomialText;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class NaiveBayesMultinomialText_67_tmp__ESTest extends NaiveBayesMultinomialText_67_tmp__ESTest_scaffolding {
19: 
20:   /**
21:   //Test case number: 0
22:   /*Coverage entropy=0.4
23:   */
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
27:       LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> linkedHashMap0 = new LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
28:       naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) linkedHashMap0;
29:       naiveBayesMultinomialText0.m_periodicP = 1512;
30:       naiveBayesMultinomialText0.pruneDictionary();
31:       assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
32:       assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
33:       assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
34:       assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
35:       assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
36:   }
37: }
RegularFileObject[/tmp/EvoSuite_67_1575263663879/weka/classifiers/bayes/NaiveBayesMultinomialText_67_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Dec 02 05:14:23 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_67_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_67_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.filters.unsupervised.attribute.NominalToBinary",
91:       "weka.core.DistanceFunction",
92:       "weka.core.neighboursearch.balltrees.BottomUpConstructor$TempNode",
93:       "org.pentaho.packageManagement.PackageConstraint",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.classifiers.CostMatrix",
97:       "weka.classifiers.bayes.net.search.local.K2",
98:       "weka.filters.UnsupervisedFilter",
99:       "weka.core.neighboursearch.BallTree",
100:       "weka.core.logging.Logger$Level",
101:       "weka.core.neighboursearch.CoverTree$DistanceNode",
102:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
103:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
104:       "weka.core.DenseInstance",
105:       "weka.classifiers.functions.LinearRegression",
106:       "weka.core.stemmers.Stemmer",
107:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
108:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
109:       "org.pentaho.packageManagement.DefaultPackageManager",
110:       "org.bounce.net.DefaultAuthenticator",
111:       "weka.core.neighboursearch.CoverTree$MyHeap",
112:       "weka.estimators.IncrementalEstimator",
113:       "weka.estimators.Estimator$Builder",
114:       "weka.core.neighboursearch.KDTree",
115:       "weka.core.stemmers.NullStemmer",
116:       "weka.core.EnvironmentHandler",
117:       "weka.classifiers.functions.SGDText",
118:       "weka.core.RelationalLocator",
119:       "weka.core.Utils",
120:       "weka.core.CustomDisplayStringProvider",
121:       "weka.core.tokenizers.Tokenizer",
122:       "weka.core.NormalizableDistance",
123:       "weka.core.NoSupportForMissingValuesException",
124:       "weka.classifiers.UpdateableClassifier",
125:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
126:       "weka.core.TechnicalInformation$Type",
127:       "weka.core.MultiInstanceCapabilitiesHandler",
128:       "weka.core.Copyable",
129:       "weka.core.Capabilities",
130:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
131:       "weka.core.AttributeLocator",
132:       "weka.core.BinarySparseInstance",
133:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
134:       "weka.filters.supervised.attribute.NominalToBinary",
135:       "weka.classifiers.functions.supportVector.CachedKernel",
136:       "weka.core.SerializedObject",
137:       "weka.clusterers.UpdateableClusterer",
138:       "weka.core.Summarizable",
139:       "weka.core.AdditionalMeasureProducer",
140:       "weka.core.neighboursearch.balltrees.BallNode",
141:       "org.pentaho.packageManagement.PackageManager$1",
142:       "weka.core.OptionHandlerJavadoc",
143:       "weka.core.Drawable",
144:       "weka.core.matrix.Matrix",
145:       "weka.classifiers.ConditionalDensityEstimator",
146:       "weka.core.SingleIndex",
147:       "weka.core.CapabilitiesHandler",
148:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
149:       "weka.core.AbstractInstance",
150:       "weka.core.scripting.JythonObject",
151:       "weka.core.SelectedTag",
152:       "org.pentaho.packageManagement.DefaultPackage",
153:       "weka.estimators.DiscreteEstimator",
154:       "weka.core.neighboursearch.balltrees.BallSplitter",
155:       "weka.classifiers.bayes.BayesNet",
156:       "weka.classifiers.misc.InputMappedClassifier",
157:       "weka.core.Version",
158:       "weka.filters.AllFilter",
159:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
160:       "weka.core.Tag",
161:       "weka.core.neighboursearch.CoverTree",
162:       "weka.classifiers.AbstractClassifier",
163:       "weka.core.FindWithCapabilities",
164:       "weka.core.OptionHandler",
165:       "weka.core.WekaException",
166:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
167:       "weka.core.Range",
168:       "weka.core.scripting.JythonSerializableObject",
169:       "weka.classifiers.Classifier",
170:       "weka.core.neighboursearch.NearestNeighbourSearch$NeighborList",
171:       "weka.core.Capabilities$Capability",
172:       "weka.core.SparseInstance",
173:       "org.pentaho.packageManagement.PackageManager",
174:       "weka.estimators.PoissonEstimator",
175:       "weka.core.tokenizers.WordTokenizer",
176:       "weka.classifiers.misc.SerializedClassifier",
177:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
178:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
179:       "weka.core.stemmers.SnowballStemmer",
180:       "weka.core.stemmers.LovinsStemmer",
181:       "weka.classifiers.Evaluation",
182:       "weka.classifiers.functions.supportVector.Kernel",
183:       "weka.core.WekaPackageManager",
184:       "weka.filters.SupervisedFilter",
185:       "weka.core.TechnicalInformationHandler",
186:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
187:       "weka.classifiers.functions.SimpleLogistic",
188:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
189:       "weka.core.Option",
190:       "weka.classifiers.meta.CostSensitiveClassifier",
191:       "weka.core.neighboursearch.PerformanceStats",
192:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
193:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
194:       "weka.filters.Sourcable",
195:       "weka.core.Attribute",
196:       "weka.core.Stopwords",
197:       "weka.core.tokenizers.AlphabeticTokenizer",
198:       "weka.core.FastVector",
199:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
200:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
201:       "weka.core.UnassignedDatasetException",
202:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
203:       "weka.classifiers.RandomizableClassifier",
204:       "weka.classifiers.SingleClassifierEnhancer",
205:       "weka.core.RevisionUtils",
206:       "weka.core.Instance",
207:       "weka.classifiers.functions.supportVector.PolyKernel",
208:       "weka.estimators.Estimator",
209:       "weka.core.ProtectedProperties",
210:       "weka.classifiers.IntervalEstimator",
211:       "weka.core.StringLocator",
212:       "weka.classifiers.bayes.net.ADNode",
213:       "weka.core.AttributeStats",
214:       "weka.core.WeightedInstancesHandler",
215:       "weka.core.neighboursearch.NearestNeighbourSearch",
216:       "weka.classifiers.functions.GaussianProcesses",
217:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
218:       "weka.core.TechnicalInformation$Field",
219:       "weka.core.neighboursearch.covertrees.Stack",
220:       "weka.core.Javadoc",
221:       "weka.core.Randomizable",
222:       "weka.core.EuclideanDistance",
223:       "weka.core.Instances",
224:       "weka.core.neighboursearch.CoverTree$CoverTreeNode",
225:       "weka.filters.unsupervised.attribute.Normalize",
226:       "weka.core.UnassignedClassException",
227:       "weka.classifiers.bayes.net.BIFReader",
228:       "weka.classifiers.bayes.net.ParentSet",
229:       "weka.classifiers.rules.ZeroR",
230:       "weka.core.stemmers.IteratedLovinsStemmer",
231:       "weka.filters.unsupervised.attribute.Standardize",
232:       "weka.core.TechnicalInformation",
233:       "weka.core.UnsupportedAttributeTypeException",
234:       "weka.classifiers.Sourcable",
235:       "weka.core.RevisionHandler",
236:       "weka.classifiers.evaluation.output.prediction.PlainText",
237:       "weka.core.neighboursearch.TreePerformanceStats",
238:       "weka.core.xml.XMLSerialization",
239:       "weka.classifiers.xml.XMLClassifier",
240:       "weka.filters.Filter",
241:       "weka.filters.supervised.attribute.Discretize"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_67_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "weka.classifiers.AbstractClassifier",
250:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
251:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
252:       "weka.core.Capabilities$Capability",
253:       "weka.core.tokenizers.Tokenizer",
254:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
255:       "weka.core.tokenizers.WordTokenizer",
256:       "weka.core.stemmers.NullStemmer",
257:       "weka.core.Utils",
258:       "weka.attributeSelection.ASEvaluation",
259:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
260:       "weka.attributeSelection.PrincipalComponents",
261:       "weka.classifiers.Evaluation",
262:       "weka.core.Option",
263:       "weka.core.AbstractInstance",
264:       "weka.core.SparseInstance",
265:       "weka.core.UnassignedDatasetException",
266:       "weka.classifiers.bayes.NaiveBayes",
267:       "weka.core.Capabilities",
268:       "org.pentaho.packageManagement.PackageManager",
269:       "org.pentaho.packageManagement.DefaultPackageManager",
270:       "weka.core.Version",
271:       "weka.core.Environment",
272:       "weka.core.WekaPackageManager",
273:       "weka.classifiers.bayes.BayesNet",
274:       "weka.classifiers.bayes.net.BIFReader",
275:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
276:       "weka.core.Tag",
277:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
278:       "weka.classifiers.bayes.net.search.local.K2",
279:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
280:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
281:       "weka.classifiers.SingleClassifierEnhancer",
282:       "weka.classifiers.misc.InputMappedClassifier",
283:       "weka.classifiers.rules.ZeroR",
284:       "weka.core.neighboursearch.NearestNeighbourSearch",
285:       "weka.core.neighboursearch.KDTree",
286:       "weka.core.NormalizableDistance",
287:       "weka.core.EuclideanDistance",
288:       "weka.core.Range",
289:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
290:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
291:       "weka.core.DenseInstance",
292:       "weka.filters.Filter",
293:       "weka.filters.supervised.attribute.Discretize",
294:       "weka.core.BinarySparseInstance",
295:       "weka.core.SerializedObject",
296:       "weka.core.neighboursearch.CoverTree",
297:       "weka.core.neighboursearch.BallTree",
298:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
299:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
300:       "weka.core.neighboursearch.balltrees.BallSplitter",
301:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
302:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
303:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
304:       "weka.core.stemmers.LovinsStemmer",
305:       "weka.core.stemmers.IteratedLovinsStemmer",
306:       "weka.core.TechnicalInformation",
307:       "weka.core.TechnicalInformation$Type",
308:       "weka.core.TechnicalInformation$Field",
309:       "weka.classifiers.functions.supportVector.Kernel",
310:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
311:       "weka.core.Stopwords",
312:       "weka.core.RevisionUtils",
313:       "weka.classifiers.RandomizableClassifier",
314:       "weka.classifiers.functions.SGDText",
315:       "weka.core.Instances",
316:       "weka.core.TestInstances",
317:       "weka.classifiers.lazy.KStar",
318:       "weka.core.SelectedTag",
319:       "weka.core.Javadoc",
320:       "weka.core.OptionHandlerJavadoc",
321:       "weka.core.WekaException",
322:       "weka.core.stemmers.Stemming",
323:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
324:       "weka.classifiers.meta.CostSensitiveClassifier",
325:       "weka.classifiers.CostMatrix",
326:       "weka.core.FindWithCapabilities",
327:       "weka.core.SingleIndex",
328:       "weka.core.ClassDiscovery",
329:       "weka.core.ProtectedProperties",
330:       "weka.core.Attribute",
331:       "weka.core.neighboursearch.balltrees.BallNode",
332:       "weka.filters.AllFilter",
333:       "weka.core.converters.ArffLoader$ArffReader",
334:       "weka.core.WekaEnumeration",
335:       "weka.core.Attribute$1",
336:       "weka.core.tokenizers.NGramTokenizer",
337:       "weka.core.stemmers.SnowballStemmer",
338:       "weka.filters.SimpleFilter",
339:       "weka.filters.SimpleStreamFilter",
340:       "weka.filters.MultiFilter",
341:       "weka.core.tokenizers.AlphabeticTokenizer",
342:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
343:       "weka.classifiers.lazy.IBk",
344:       "weka.core.neighboursearch.LinearNNSearch",
345:       "weka.classifiers.functions.GaussianProcesses",
346:       "weka.classifiers.functions.supportVector.CachedKernel",
347:       "weka.classifiers.functions.supportVector.PolyKernel",
348:       "weka.core.UnassignedClassException",
349:       "weka.classifiers.misc.SerializedClassifier",
350:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
351:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
352:       "weka.classifiers.MultipleClassifiersCombiner",
353:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
354:       "weka.classifiers.meta.MultiScheme",
355:       "weka.classifiers.functions.SimpleLogistic",
356:       "weka.core.neighboursearch.kdtrees.MedianOfWidestDimension",
357:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
358:       "weka.classifiers.bayes.NaiveBayesMultinomial",
359:       "weka.core.neighboursearch.PerformanceStats",
360:       "weka.core.neighboursearch.TreePerformanceStats",
361:       "weka.core.MinkowskiDistance",
362:       "weka.core.TechnicalInformationHandlerJavadoc",
363:       "weka.attributeSelection.GainRatioAttributeEval",
364:       "weka.attributeSelection.OneRAttributeEval",
365:       "weka.core.Check",
366:       "weka.core.CheckOptionHandler",
367:       "weka.estimators.Estimator",
368:       "weka.classifiers.rules.OneR",
369:       "weka.classifiers.IteratedSingleClassifierEnhancer",
370:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
371:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
372:       "weka.classifiers.meta.RandomSubSpace",
373:       "weka.classifiers.trees.REPTree",
374:       "weka.classifiers.meta.FilteredClassifier",
375:       "weka.filters.supervised.attribute.AttributeSelection",
376:       "weka.attributeSelection.AttributeSelection",
377:       "weka.attributeSelection.CfsSubsetEval",
378:       "weka.attributeSelection.ASSearch",
379:       "weka.attributeSelection.GreedyStepwise",
380:       "weka.attributeSelection.BestFirst",
381:       "weka.classifiers.trees.J48",
382:       "weka.core.UnsupportedAttributeTypeException",
383:       "weka.classifiers.rules.DecisionTable",
384:       "weka.attributeSelection.ReliefFAttributeEval",
385:       "weka.classifiers.meta.CVParameterSelection",
386:       "weka.core.FastVector",
387:       "weka.classifiers.functions.supportVector.StringKernel",
388:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
389:       "weka.classifiers.meta.RandomCommittee",
390:       "weka.classifiers.trees.RandomTree",
391:       "weka.classifiers.functions.LinearRegression",
392:       "weka.estimators.KernelEstimator",
393:       "weka.attributeSelection.CorrelationAttributeEval",
394:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
395:       "weka.classifiers.meta.AdaBoostM1",
396:       "weka.classifiers.trees.DecisionStump",
397:       "weka.classifiers.meta.RegressionByDiscretization",
398:       "weka.filters.unsupervised.attribute.Discretize",
399:       "weka.classifiers.trees.j48.ClassifierTree",
400:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
401:       "weka.classifiers.functions.SGD",
402:       "weka.classifiers.trees.m5.M5Base",
403:       "weka.classifiers.rules.M5Rules",
404:       "weka.attributeSelection.WrapperSubsetEval",
405:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
406:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
407:       "weka.classifiers.meta.Stacking",
408:       "weka.classifiers.functions.SMOreg",
409:       "weka.classifiers.functions.supportVector.RegOptimizer",
410:       "weka.classifiers.functions.supportVector.RegSMO",
411:       "weka.classifiers.functions.supportVector.RegSMOImproved",
412:       "weka.classifiers.meta.Vote",
413:       "weka.classifiers.functions.Logistic",
414:       "weka.classifiers.trees.LMT",
415:       "weka.estimators.DiscreteEstimator",
416:       "weka.classifiers.functions.VotedPerceptron",
417:       "weka.classifiers.meta.AdditiveRegression",
418:       "weka.classifiers.functions.SMO",
419:       "weka.classifiers.functions.MultilayerPerceptron",
420:       "weka.filters.unsupervised.attribute.NominalToBinary",
421:       "weka.classifiers.functions.neural.SigmoidUnit",
422:       "weka.classifiers.functions.neural.LinearUnit",
423:       "weka.estimators.PoissonEstimator",
424:       "weka.core.converters.ConverterUtils$DataSource",
425:       "weka.core.converters.AbstractLoader",
426:       "weka.core.converters.AbstractFileLoader",
427:       "weka.core.converters.ArffLoader",
428:       "weka.core.matrix.Matrix",
429:       "weka.estimators.MahalanobisEstimator",
430:       "weka.classifiers.functions.supportVector.Puk",
431:       "weka.classifiers.meta.Bagging",
432:       "weka.classifiers.meta.AttributeSelectedClassifier",
433:       "weka.classifiers.rules.PART",
434:       "weka.classifiers.rules.part.MakeDecList",
435:       "weka.classifiers.trees.RandomForest",
436:       "weka.classifiers.lazy.LWL",
437:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
438:       "weka.classifiers.meta.MultiClassClassifier",
439:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
440:       "weka.attributeSelection.InfoGainAttributeEval",
441:       "weka.classifiers.functions.supportVector.RBFKernel",
442:       "weka.classifiers.meta.LogitBoost",
443:       "weka.classifiers.meta.ClassificationViaRegression",
444:       "weka.classifiers.trees.M5P",
445:       "weka.classifiers.functions.SimpleLinearRegression",
446:       "weka.core.SerializationHelper",
447:       "weka.classifiers.rules.JRip",
448:       "weka.classifiers.bayes.NaiveBayesUpdateable",
449:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
450:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
451:       "weka.estimators.NormalEstimator",
452:       "weka.classifiers.functions.neural.NeuralConnection",
453:       "weka.classifiers.functions.MultilayerPerceptron$NeuralEnd",
454:       "weka.core.AttributeStats",
455:       "weka.experiment.Stats",
456:       "weka.classifiers.bayes.net.ParentSet",
457:       "weka.core.CheckGOE"
458:     );
459:   }
460: }

[MASTER] 05:14:23.909 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> linkedHashMap0 = new LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) linkedHashMap0;
naiveBayesMultinomialText0.m_periodicP = 1512;
naiveBayesMultinomialText0.pruneDictionary();
assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());


[MASTER] 05:14:24.736 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_83_1575263664711/weka/classifiers/bayes/NaiveBayesMultinomialText_83_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_83_1575263664711/weka/classifiers/bayes/NaiveBayesMultinomialText_83_tmp__ESTest_scaffolding.java]]
[MASTER] 05:14:24.736 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 05:14:24.736 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 05:14:24.737 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 26
[MASTER] 05:14:24.769 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6781041666666666% of time used, but only 44/191 tests minimized), falling back to using all assertions
[MASTER] 05:14:24.737 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_83_1575263664711/weka/classifiers/bayes/NaiveBayesMultinomialText_83_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Dec 02 05:14:24 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.LinkedHashMap;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import weka.classifiers.bayes.NaiveBayesMultinomialText;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class NaiveBayesMultinomialText_83_tmp__ESTest extends NaiveBayesMultinomialText_83_tmp__ESTest_scaffolding {
18: 
19:   /**
20:   //Test case number: 0
21:   /*Coverage entropy=2.9687776175299367
22:   */
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
26:       LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = naiveBayesMultinomialText0.m_inputVector;
27:       naiveBayesMultinomialText0.m_inputVector = null;
28:       naiveBayesMultinomialText0.m_stemmer = null;
29:       String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
30:       assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
31:       assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
32:       assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
33:       assertEquals(10, stringArray0.length);
34:       assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
35:   }
36: }
RegularFileObject[/tmp/EvoSuite_83_1575263664711/weka/classifiers/bayes/NaiveBayesMultinomialText_83_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Dec 02 05:14:24 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_83_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_83_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.filters.unsupervised.attribute.NominalToBinary",
91:       "weka.core.DistanceFunction",
92:       "weka.core.neighboursearch.balltrees.BottomUpConstructor$TempNode",
93:       "org.pentaho.packageManagement.PackageConstraint",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.classifiers.CostMatrix",
97:       "weka.classifiers.bayes.net.search.local.K2",
98:       "weka.filters.UnsupervisedFilter",
99:       "weka.core.neighboursearch.BallTree",
100:       "weka.core.logging.Logger$Level",
101:       "weka.core.neighboursearch.CoverTree$DistanceNode",
102:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
103:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
104:       "weka.core.DenseInstance",
105:       "weka.classifiers.functions.LinearRegression",
106:       "weka.core.stemmers.Stemmer",
107:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
108:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
109:       "org.pentaho.packageManagement.DefaultPackageManager",
110:       "org.bounce.net.DefaultAuthenticator",
111:       "weka.core.neighboursearch.CoverTree$MyHeap",
112:       "weka.estimators.IncrementalEstimator",
113:       "weka.estimators.Estimator$Builder",
114:       "weka.core.neighboursearch.KDTree",
115:       "weka.core.stemmers.NullStemmer",
116:       "weka.core.EnvironmentHandler",
117:       "weka.classifiers.functions.SGDText",
118:       "weka.core.RelationalLocator",
119:       "weka.core.Utils",
120:       "weka.core.CustomDisplayStringProvider",
121:       "weka.core.tokenizers.Tokenizer",
122:       "weka.core.NormalizableDistance",
123:       "weka.core.NoSupportForMissingValuesException",
124:       "weka.classifiers.UpdateableClassifier",
125:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
126:       "weka.core.TechnicalInformation$Type",
127:       "weka.core.MultiInstanceCapabilitiesHandler",
128:       "weka.core.Copyable",
129:       "weka.core.Capabilities",
130:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
131:       "weka.core.AttributeLocator",
132:       "weka.core.BinarySparseInstance",
133:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
134:       "weka.filters.supervised.attribute.NominalToBinary",
135:       "weka.classifiers.functions.supportVector.CachedKernel",
136:       "weka.core.SerializedObject",
137:       "weka.clusterers.UpdateableClusterer",
138:       "weka.core.Summarizable",
139:       "weka.core.AdditionalMeasureProducer",
140:       "weka.core.neighboursearch.balltrees.BallNode",
141:       "org.pentaho.packageManagement.PackageManager$1",
142:       "weka.core.OptionHandlerJavadoc",
143:       "weka.core.Drawable",
144:       "weka.core.matrix.Matrix",
145:       "weka.classifiers.ConditionalDensityEstimator",
146:       "weka.core.SingleIndex",
147:       "weka.core.CapabilitiesHandler",
148:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
149:       "weka.core.AbstractInstance",
150:       "weka.core.scripting.JythonObject",
151:       "weka.core.SelectedTag",
152:       "org.pentaho.packageManagement.DefaultPackage",
153:       "weka.estimators.DiscreteEstimator",
154:       "weka.core.neighboursearch.balltrees.BallSplitter",
155:       "weka.classifiers.bayes.BayesNet",
156:       "weka.classifiers.misc.InputMappedClassifier",
157:       "weka.core.Version",
158:       "weka.filters.AllFilter",
159:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
160:       "weka.core.Tag",
161:       "weka.core.neighboursearch.CoverTree",
162:       "weka.classifiers.AbstractClassifier",
163:       "weka.core.FindWithCapabilities",
164:       "weka.core.OptionHandler",
165:       "weka.core.WekaException",
166:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
167:       "weka.core.Range",
168:       "weka.core.scripting.JythonSerializableObject",
169:       "weka.classifiers.Classifier",
170:       "weka.core.neighboursearch.NearestNeighbourSearch$NeighborList",
171:       "weka.core.Capabilities$Capability",
172:       "weka.core.SparseInstance",
173:       "org.pentaho.packageManagement.PackageManager",
174:       "weka.estimators.PoissonEstimator",
175:       "weka.core.tokenizers.WordTokenizer",
176:       "weka.classifiers.misc.SerializedClassifier",
177:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
178:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
179:       "weka.core.stemmers.SnowballStemmer",
180:       "weka.core.stemmers.LovinsStemmer",
181:       "weka.classifiers.Evaluation",
182:       "weka.classifiers.functions.supportVector.Kernel",
183:       "weka.core.WekaPackageManager",
184:       "weka.filters.SupervisedFilter",
185:       "weka.core.TechnicalInformationHandler",
186:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
187:       "weka.classifiers.functions.SimpleLogistic",
188:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
189:       "weka.core.Option",
190:       "weka.classifiers.meta.CostSensitiveClassifier",
191:       "weka.core.neighboursearch.PerformanceStats",
192:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
193:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
194:       "weka.filters.Sourcable",
195:       "weka.core.Attribute",
196:       "weka.core.Stopwords",
197:       "weka.core.tokenizers.AlphabeticTokenizer",
198:       "weka.core.FastVector",
199:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
200:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
201:       "weka.core.UnassignedDatasetException",
202:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
203:       "weka.classifiers.RandomizableClassifier",
204:       "weka.classifiers.SingleClassifierEnhancer",
205:       "weka.core.RevisionUtils",
206:       "weka.core.Instance",
207:       "weka.classifiers.functions.supportVector.PolyKernel",
208:       "weka.estimators.Estimator",
209:       "weka.core.ProtectedProperties",
210:       "weka.classifiers.IntervalEstimator",
211:       "weka.core.StringLocator",
212:       "weka.classifiers.bayes.net.ADNode",
213:       "weka.core.AttributeStats",
214:       "weka.core.WeightedInstancesHandler",
215:       "weka.core.neighboursearch.NearestNeighbourSearch",
216:       "weka.classifiers.functions.GaussianProcesses",
217:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
218:       "weka.core.TechnicalInformation$Field",
219:       "weka.core.neighboursearch.covertrees.Stack",
220:       "weka.core.Javadoc",
221:       "weka.core.Randomizable",
222:       "weka.core.EuclideanDistance",
223:       "weka.core.Instances",
224:       "weka.core.neighboursearch.CoverTree$CoverTreeNode",
225:       "weka.filters.unsupervised.attribute.Normalize",
226:       "weka.core.UnassignedClassException",
227:       "weka.classifiers.bayes.net.BIFReader",
228:       "weka.classifiers.bayes.net.ParentSet",
229:       "weka.classifiers.rules.ZeroR",
230:       "weka.core.stemmers.IteratedLovinsStemmer",
231:       "weka.filters.unsupervised.attribute.Standardize",
232:       "weka.core.TechnicalInformation",
233:       "weka.core.UnsupportedAttributeTypeException",
234:       "weka.classifiers.Sourcable",
235:       "weka.core.RevisionHandler",
236:       "weka.classifiers.evaluation.output.prediction.PlainText",
237:       "weka.core.neighboursearch.TreePerformanceStats",
238:       "weka.core.xml.XMLSerialization",
239:       "weka.classifiers.xml.XMLClassifier",
240:       "weka.filters.Filter",
241:       "weka.filters.supervised.attribute.Discretize"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_83_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "weka.classifiers.AbstractClassifier",
250:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
251:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
252:       "weka.core.Capabilities$Capability",
253:       "weka.core.tokenizers.Tokenizer",
254:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
255:       "weka.core.tokenizers.WordTokenizer",
256:       "weka.core.stemmers.NullStemmer",
257:       "weka.core.Utils",
258:       "weka.attributeSelection.ASEvaluation",
259:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
260:       "weka.attributeSelection.PrincipalComponents",
261:       "weka.classifiers.Evaluation",
262:       "weka.core.Option",
263:       "weka.core.AbstractInstance",
264:       "weka.core.SparseInstance",
265:       "weka.core.UnassignedDatasetException",
266:       "weka.classifiers.bayes.NaiveBayes",
267:       "weka.core.Capabilities",
268:       "org.pentaho.packageManagement.PackageManager",
269:       "org.pentaho.packageManagement.DefaultPackageManager",
270:       "weka.core.Version",
271:       "weka.core.Environment",
272:       "weka.core.WekaPackageManager",
273:       "weka.classifiers.bayes.BayesNet",
274:       "weka.classifiers.bayes.net.BIFReader",
275:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
276:       "weka.core.Tag",
277:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
278:       "weka.classifiers.bayes.net.search.local.K2",
279:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
280:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
281:       "weka.classifiers.SingleClassifierEnhancer",
282:       "weka.classifiers.misc.InputMappedClassifier",
283:       "weka.classifiers.rules.ZeroR",
284:       "weka.core.neighboursearch.NearestNeighbourSearch",
285:       "weka.core.neighboursearch.KDTree",
286:       "weka.core.NormalizableDistance",
287:       "weka.core.EuclideanDistance",
288:       "weka.core.Range",
289:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
290:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
291:       "weka.core.DenseInstance",
292:       "weka.filters.Filter",
293:       "weka.filters.supervised.attribute.Discretize",
294:       "weka.core.BinarySparseInstance",
295:       "weka.core.SerializedObject",
296:       "weka.core.neighboursearch.CoverTree",
297:       "weka.core.neighboursearch.BallTree",
298:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
299:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
300:       "weka.core.neighboursearch.balltrees.BallSplitter",
301:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
302:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
303:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
304:       "weka.core.stemmers.LovinsStemmer",
305:       "weka.core.stemmers.IteratedLovinsStemmer",
306:       "weka.core.TechnicalInformation",
307:       "weka.core.TechnicalInformation$Type",
308:       "weka.core.TechnicalInformation$Field",
309:       "weka.classifiers.functions.supportVector.Kernel",
310:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
311:       "weka.core.Stopwords",
312:       "weka.core.RevisionUtils",
313:       "weka.classifiers.RandomizableClassifier",
314:       "weka.classifiers.functions.SGDText",
315:       "weka.core.Instances",
316:       "weka.core.TestInstances",
317:       "weka.classifiers.lazy.KStar",
318:       "weka.core.SelectedTag",
319:       "weka.core.Javadoc",
320:       "weka.core.OptionHandlerJavadoc",
321:       "weka.core.WekaException",
322:       "weka.core.stemmers.Stemming",
323:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
324:       "weka.classifiers.meta.CostSensitiveClassifier",
325:       "weka.classifiers.CostMatrix",
326:       "weka.core.FindWithCapabilities",
327:       "weka.core.SingleIndex",
328:       "weka.core.ClassDiscovery",
329:       "weka.core.ProtectedProperties",
330:       "weka.core.Attribute",
331:       "weka.core.neighboursearch.balltrees.BallNode",
332:       "weka.filters.AllFilter",
333:       "weka.core.converters.ArffLoader$ArffReader",
334:       "weka.core.WekaEnumeration",
335:       "weka.core.Attribute$1",
336:       "weka.core.tokenizers.NGramTokenizer",
337:       "weka.core.stemmers.SnowballStemmer",
338:       "weka.filters.SimpleFilter",
339:       "weka.filters.SimpleStreamFilter",
340:       "weka.filters.MultiFilter",
341:       "weka.core.tokenizers.AlphabeticTokenizer",
342:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
343:       "weka.classifiers.lazy.IBk",
344:       "weka.core.neighboursearch.LinearNNSearch",
345:       "weka.classifiers.functions.GaussianProcesses",
346:       "weka.classifiers.functions.supportVector.CachedKernel",
347:       "weka.classifiers.functions.supportVector.PolyKernel",
348:       "weka.core.UnassignedClassException",
349:       "weka.classifiers.misc.SerializedClassifier",
350:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
351:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
352:       "weka.classifiers.MultipleClassifiersCombiner",
353:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
354:       "weka.classifiers.meta.MultiScheme",
355:       "weka.classifiers.functions.SimpleLogistic",
356:       "weka.core.neighboursearch.kdtrees.MedianOfWidestDimension",
357:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
358:       "weka.classifiers.bayes.NaiveBayesMultinomial",
359:       "weka.core.neighboursearch.PerformanceStats",
360:       "weka.core.neighboursearch.TreePerformanceStats",
361:       "weka.core.MinkowskiDistance",
362:       "weka.core.TechnicalInformationHandlerJavadoc",
363:       "weka.attributeSelection.GainRatioAttributeEval",
364:       "weka.attributeSelection.OneRAttributeEval",
365:       "weka.core.Check",
366:       "weka.core.CheckOptionHandler",
367:       "weka.estimators.Estimator",
368:       "weka.classifiers.rules.OneR",
369:       "weka.classifiers.IteratedSingleClassifierEnhancer",
370:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
371:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
372:       "weka.classifiers.meta.RandomSubSpace",
373:       "weka.classifiers.trees.REPTree",
374:       "weka.classifiers.meta.FilteredClassifier",
375:       "weka.filters.supervised.attribute.AttributeSelection",
376:       "weka.attributeSelection.AttributeSelection",
377:       "weka.attributeSelection.CfsSubsetEval",
378:       "weka.attributeSelection.ASSearch",
379:       "weka.attributeSelection.GreedyStepwise",
380:       "weka.attributeSelection.BestFirst",
381:       "weka.classifiers.trees.J48",
382:       "weka.core.UnsupportedAttributeTypeException",
383:       "weka.classifiers.rules.DecisionTable",
384:       "weka.attributeSelection.ReliefFAttributeEval",
385:       "weka.classifiers.meta.CVParameterSelection",
386:       "weka.core.FastVector",
387:       "weka.classifiers.functions.supportVector.StringKernel",
388:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
389:       "weka.classifiers.meta.RandomCommittee",
390:       "weka.classifiers.trees.RandomTree",
391:       "weka.classifiers.functions.LinearRegression",
392:       "weka.estimators.KernelEstimator",
393:       "weka.attributeSelection.CorrelationAttributeEval",
394:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
395:       "weka.classifiers.meta.AdaBoostM1",
396:       "weka.classifiers.trees.DecisionStump",
397:       "weka.classifiers.meta.RegressionByDiscretization",
398:       "weka.filters.unsupervised.attribute.Discretize",
399:       "weka.classifiers.trees.j48.ClassifierTree",
400:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
401:       "weka.classifiers.functions.SGD",
402:       "weka.classifiers.trees.m5.M5Base",
403:       "weka.classifiers.rules.M5Rules",
404:       "weka.attributeSelection.WrapperSubsetEval",
405:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
406:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
407:       "weka.classifiers.meta.Stacking",
408:       "weka.classifiers.functions.SMOreg",
409:       "weka.classifiers.functions.supportVector.RegOptimizer",
410:       "weka.classifiers.functions.supportVector.RegSMO",
411:       "weka.classifiers.functions.supportVector.RegSMOImproved",
412:       "weka.classifiers.meta.Vote",
413:       "weka.classifiers.functions.Logistic",
414:       "weka.classifiers.trees.LMT",
415:       "weka.estimators.DiscreteEstimator",
416:       "weka.classifiers.functions.VotedPerceptron",
417:       "weka.classifiers.meta.AdditiveRegression",
418:       "weka.classifiers.functions.SMO",
419:       "weka.classifiers.functions.MultilayerPerceptron",
420:       "weka.filters.unsupervised.attribute.NominalToBinary",
421:       "weka.classifiers.functions.neural.SigmoidUnit",
422:       "weka.classifiers.functions.neural.LinearUnit",
423:       "weka.estimators.PoissonEstimator",
424:       "weka.core.converters.ConverterUtils$DataSource",
425:       "weka.core.converters.AbstractLoader",
426:       "weka.core.converters.AbstractFileLoader",
427:       "weka.core.converters.ArffLoader",
428:       "weka.core.matrix.Matrix",
429:       "weka.estimators.MahalanobisEstimator",
430:       "weka.classifiers.functions.supportVector.Puk",
431:       "weka.classifiers.meta.Bagging",
432:       "weka.classifiers.meta.AttributeSelectedClassifier",
433:       "weka.classifiers.rules.PART",
434:       "weka.classifiers.rules.part.MakeDecList",
435:       "weka.classifiers.trees.RandomForest",
436:       "weka.classifiers.lazy.LWL",
437:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
438:       "weka.classifiers.meta.MultiClassClassifier",
439:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
440:       "weka.attributeSelection.InfoGainAttributeEval",
441:       "weka.classifiers.functions.supportVector.RBFKernel",
442:       "weka.classifiers.meta.LogitBoost",
443:       "weka.classifiers.meta.ClassificationViaRegression",
444:       "weka.classifiers.trees.M5P",
445:       "weka.classifiers.functions.SimpleLinearRegression",
446:       "weka.core.SerializationHelper",
447:       "weka.classifiers.rules.JRip",
448:       "weka.classifiers.bayes.NaiveBayesUpdateable",
449:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
450:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
451:       "weka.estimators.NormalEstimator",
452:       "weka.classifiers.functions.neural.NeuralConnection",
453:       "weka.classifiers.functions.MultilayerPerceptron$NeuralEnd",
454:       "weka.core.AttributeStats",
455:       "weka.experiment.Stats",
456:       "weka.classifiers.bayes.net.ParentSet",
457:       "weka.core.CheckGOE"
458:     );
459:   }
460: }

[MASTER] 05:14:24.737 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = naiveBayesMultinomialText0.m_inputVector;
naiveBayesMultinomialText0.m_inputVector = null;
naiveBayesMultinomialText0.m_stemmer = null;
String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
assertEquals(10, stringArray0.length);
assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);


[MASTER] 05:14:27.397 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 05:14:28.480 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 10
* Writing JUnit test case 'NaiveBayesMultinomialText_ESTest' to /home/ubuntu/termite/rmosa/tests/s1006/107_weka/evosuite-tests
* Done!

* Computation finished
[MASTER] 05:15:41.413 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ArrayIndexOutOfBoundsException: 0
[MASTER] 05:15:41.414 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 1870);
resultMatrixSignificance0.setCountWidth(1870);
resultMatrixSignificance0.setPrintRowNames(true);
ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
resultMatrixCSV0.m_EnumerateRowNames = true;
resultMatrixCSV0.LEFT_PARENTHESES = "*";
resultMatrixCSV0.removeFilterName(")");
resultMatrixSignificance0.padString("*", 1212);
resultMatrixCSV0.removeFilterName("v");
int[][] intArray0 = new int[9][6];
int[] intArray1 = new int[1];
intArray1[0] = (-1155);
intArray0[0] = intArray1;
int[] intArray2 = new int[7];
intArray2[0] = (-1155);
intArray2[1] = (-1155);
intArray2[2] = 1;
intArray2[3] = 2;
intArray2[4] = 2;
intArray2[5] = 0;
intArray2[6] = 1212;
intArray0[1] = intArray2;
int[] intArray3 = new int[2];
intArray3[0] = 0;
intArray3[1] = 0;
intArray0[2] = intArray3;
int[] intArray4 = new int[4];
intArray4[0] = 2;
intArray4[1] = 1;
intArray4[2] = 0;
intArray4[3] = (-1155);
intArray0[3] = intArray4;
int[] intArray5 = new int[1];
intArray5[0] = 1870;
intArray0[4] = intArray5;
int[] intArray6 = new int[8];
intArray6[0] = 0;
intArray6[1] = 0;
intArray6[2] = 0;
intArray6[3] = 2;
intArray6[4] = 1870;
intArray6[5] = 1;
intArray6[6] = (-1155);
intArray6[7] = 0;
intArray0[5] = intArray6;
int[] intArray7 = new int[3];
intArray7[0] = 54;
intArray7[1] = 1212;
intArray7[2] = 0;
intArray0[6] = intArray7;
int[] intArray8 = new int[8];
intArray8[0] = 1870;
intArray8[1] = 1;
intArray8[2] = 2;
intArray8[3] = 1870;
intArray8[4] = 111;
intArray8[5] = 1212;
intArray8[6] = 1;
intArray8[7] = 0;
intArray0[7] = intArray8;
int[] intArray9 = new int[4];
intArray9[0] = 0;
intArray9[1] = (-4737);
intArray9[2] = 0;
intArray9[3] = 111;
intArray0[8] = intArray9;
resultMatrixCSV0.m_NonSigWins = intArray0;
resultMatrixCSV0.toStringSummary();
resultMatrixSignificance0.meanPrecTipText();
resultMatrixCSV0.toStringMatrix();

[MASTER] 05:15:46.286 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ArrayIndexOutOfBoundsException: 0
[MASTER] 05:15:46.319 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
assertNotNull(resultMatrixGnuPlot0);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
assertFalse(resultMatrixGnuPlot0.getShowStdDev());
assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
assertEquals(1, resultMatrixGnuPlot0.getColCount());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
assertTrue(resultMatrixGnuPlot0.getPrintColNames());
assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
assertEquals(1, resultMatrixGnuPlot0.getRowCount());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
assertFalse(resultMatrixGnuPlot0.getShowAverage());

int[] intArray0 = new int[1];
intArray0[0] = 1;
resultMatrixGnuPlot0.m_RowOrder = intArray0;
assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
assertFalse(resultMatrixGnuPlot0.getShowStdDev());
assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
assertEquals(1, resultMatrixGnuPlot0.getColCount());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
assertTrue(resultMatrixGnuPlot0.getPrintColNames());
assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
assertEquals(1, resultMatrixGnuPlot0.getRowCount());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
assertFalse(resultMatrixGnuPlot0.getShowAverage());

ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
assertNotNull(resultMatrixPlainText0);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
assertFalse(resultMatrixGnuPlot0.getShowStdDev());
assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
assertEquals(1, resultMatrixGnuPlot0.getColCount());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
assertTrue(resultMatrixGnuPlot0.getPrintColNames());
assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
assertEquals(1, resultMatrixGnuPlot0.getRowCount());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
assertFalse(resultMatrixGnuPlot0.getShowAverage());
assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
assertEquals(1, resultMatrixPlainText0.getRowCount());
assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
assertEquals(50, resultMatrixPlainText0.getRowNameWidth());
assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
assertEquals(2, resultMatrixPlainText0.getMeanPrec());
assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
assertFalse(resultMatrixPlainText0.getShowStdDev());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
assertFalse(resultMatrixPlainText0.getEnumerateColNames());
assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
assertTrue(resultMatrixPlainText0.getPrintRowNames());
assertTrue(resultMatrixPlainText0.getPrintColNames());
assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
assertEquals(0, resultMatrixPlainText0.getCountWidth());
assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
assertFalse(resultMatrixPlainText0.getRemoveFilterName());
assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
assertEquals(1, resultMatrixPlainText0.getColCount());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
assertEquals(0, resultMatrixPlainText0.getColNameWidth());
assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
assertEquals(0, resultMatrixPlainText0.getMeanWidth());
assertFalse(resultMatrixPlainText0.getShowAverage());
assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());

double[] doubleArray0 = new double[5];
doubleArray0[0] = (double) 2;
doubleArray0[1] = (double) 1;
doubleArray0[2] = (double) 2;
doubleArray0[3] = (double) 0;
doubleArray0[4] = (double) 1;
resultMatrixPlainText0.m_Counts = doubleArray0;
assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
assertFalse(resultMatrixGnuPlot0.getShowStdDev());
assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
assertEquals(1, resultMatrixGnuPlot0.getColCount());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
assertTrue(resultMatrixGnuPlot0.getPrintColNames());
assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
assertEquals(1, resultMatrixGnuPlot0.getRowCount());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
assertFalse(resultMatrixGnuPlot0.getShowAverage());
assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
assertEquals(1, resultMatrixPlainText0.getRowCount());
assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
assertEquals(50, resultMatrixPlainText0.getRowNameWidth());
assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
assertEquals(2, resultMatrixPlainText0.getMeanPrec());
assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
assertFalse(resultMatrixPlainText0.getShowStdDev());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
assertFalse(resultMatrixPlainText0.getEnumerateColNames());
assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
assertTrue(resultMatrixPlainText0.getPrintRowNames());
assertTrue(resultMatrixPlainText0.getPrintColNames());
assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
assertEquals(0, resultMatrixPlainText0.getCountWidth());
assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
assertFalse(resultMatrixPlainText0.getRemoveFilterName());
assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
assertEquals(1, resultMatrixPlainText0.getColCount());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
assertEquals(0, resultMatrixPlainText0.getColNameWidth());
assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
assertEquals(0, resultMatrixPlainText0.getMeanWidth());
assertFalse(resultMatrixPlainText0.getShowAverage());
assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());

ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(0, 1630);
assertNotNull(resultMatrixGnuPlot1);
assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
assertTrue(resultMatrixGnuPlot1.getPrintColNames());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
assertEquals(0, resultMatrixGnuPlot1.getVisibleColCount());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
assertEquals(0, resultMatrixGnuPlot1.getColCount());
assertFalse(resultMatrixGnuPlot1.getShowAverage());
assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
assertEquals(1630, resultMatrixGnuPlot1.getRowCount());
assertFalse(resultMatrixGnuPlot1.getShowStdDev());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
assertEquals(1630, resultMatrixGnuPlot1.getVisibleRowCount());
assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());

String string0 = resultMatrixGnuPlot1.removeFilterName("v");
assertNotNull(string0);
assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals("v", string0);
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
assertTrue(resultMatrixGnuPlot1.getPrintColNames());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
assertEquals(0, resultMatrixGnuPlot1.getVisibleColCount());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
assertEquals(0, resultMatrixGnuPlot1.getColCount());
assertFalse(resultMatrixGnuPlot1.getShowAverage());
assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
assertEquals(1630, resultMatrixGnuPlot1.getRowCount());
assertFalse(resultMatrixGnuPlot1.getShowStdDev());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());

resultMatrixGnuPlot1.toStringMatrix();

[MASTER] 05:15:55.063 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 10
* Writing JUnit test case 'ResultMatrix_ESTest' to /home/ubuntu/termite/rmosa/tests/s1006/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.core.Optimization
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 15875
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 05:27:53.452 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 05:27:53.457 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 05:27:53.458 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 05:27:53.473 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.core.Optimization
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1006
* Starting evolution
[MASTER] 05:27:57.145 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.core.Optimization.DynamicIntArray.<init>(Lweka/core/Optimization;I)V
* Search finished after 243s and 128 generations, 83346 statements, best individual has fitness: 16704.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 10%
* Total number of goals: 620
* Number of covered goals: 59
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 926
* Number of covered goals: 258
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 10%
* Total number of goals: 21
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Generated 20 tests with total length 116
* Resulting test suite's coverage: 17% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
* Writing JUnit test case 'Optimization_ESTest' to /home/ubuntu/termite/rmosa/tests/s1006/107_weka/evosuite-tests
* Done!

* Computation finished
