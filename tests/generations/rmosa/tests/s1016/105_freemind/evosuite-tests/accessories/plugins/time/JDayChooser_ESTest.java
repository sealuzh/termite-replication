/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 19:05:13 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.io.OutputStream;
import java.sql.Date;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.plaf.ColorUIResource;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.util.SymbolTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = SwingConstants.TOP;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      Locale locale0 = Locale.CANADA_FRENCH;
      jDayChooser0.setLocale(locale0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(42);
      SystemColor systemColor0 = SystemColor.activeCaption;
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 42;
      floatArray0[1] = (float) 42;
      floatArray0[2] = (float) 42;
      floatArray0[3] = (float) 42;
      floatArray0[4] = (float) 42;
      colorUIResource0.getColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(colorUIResource0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-910), 42, 42, 4320, '}');
      keyEvent0.setKeyCode(40);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFont((Font) null);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = ImageObserver.ALLBITS;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton[] jButtonArray0 = new JButton[4];
      jDayChooser0.getSelectedDay();
      jButtonArray0[0] = null;
      jDayChooser0.getSelectedDay();
      jButtonArray0[1] = null;
      jDayChooser0.getSelectedDay();
      jButtonArray0[2] = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)13;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      JButton jButton0 = new JButton(imageIcon0);
      jButtonArray0[3] = jButton0;
      imageIcon0.getIconHeight();
      jDayChooser0.days = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters(32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(466);
      SystemColor systemColor0 = SystemColor.activeCaption;
      systemColor0.getColorSpace();
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.repaint((-1067L), 772, 2447, 23, 2);
      jDayChooser0.getTopLevelAncestor();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 6, (-1067L), (-3151), 34, '^');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6955063642778003
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMonth((-332));
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setOpaque(true);
      SystemColor systemColor0 = SystemColor.activeCaption;
      Color.getColor("dWrD$E(y ,DxR2;Z");
      systemColor0.getColorSpace();
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton jButton0 = new JButton("day", (Icon) null);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 169, "day", 169);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"day\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = new Date((-1741L));
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMinSelectableDate(date0);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1741L);
      floatArray0[1] = (float) (-1741L);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (-1741L);
      floatArray0[4] = (float) (-1741L);
      floatArray0[5] = (float) (-1741L);
      floatArray0[6] = (float) (-1741L);
      systemColor0.getColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.isWeekOfYearVisible();
      String string0 = "org.apache.xml.utils.PrefixResolverDefault";
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 493, "org.apache.xml.utils.PrefixResolverDefault", (-1452L), 493);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MapDialog mapDialog0 = new MapDialog();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setMaxDayCharacters(14);
      Color color0 = new Color(90, 14, 90, 5);
      jDayChooser0.setSundayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay((-2447));
      jDayChooser0.setAlignmentX((-2447));
      jDayChooser0.repaint((-2447), 689, (-1260), 3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2447), 11, 11, 11, 11);
      jDayChooser0.setMaxDayCharacters((-2447));
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMaxDayCharacters(23);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = SwingConstants.TOP;
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke((-203), (-203), false);
      ActionEvent actionEvent0 = new ActionEvent(aWTKeyStroke0, 6, "14");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate((-1139), 0, 41, 6, (-1139));
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis((-1912L));
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DocumentImpl documentImpl0 = new DocumentImpl(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(documentImpl0);
      int int0 = 0;
      int int1 = (-2000);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = new Color(15);
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 15;
      floatArray0[2] = (float) 15;
      floatArray0[3] = (-1163.79F);
      color0.getColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 2173, 15, 15, 35, '2');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = SwingConstants.TOP;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      jDayChooser0.setMaxDayCharacters(1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      jDayChooser0.setDay(1);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-1851));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8961770597399514
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("2I{px\"");
      font0.canDisplayUpTo("14");
      jDayChooser0.setFocusCycleRoot(true);
      jDayChooser0.setFont(font0);
      jDayChooser0.getSelectedDay();
      NamedProfileCache.getDefaultCache();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMaxDayCharacters(935);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-1));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = SwingConstants.TOP;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(0, color0.getGreen());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate((-1L));
      mockDate0.getTime();
      MockDate mockDate1 = new MockDate((-58), (-935), 47, 3744, 42, (-935));
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate1);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.keyReleased((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      String string0 = "";
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate(7, 2255, 7, 7, 2255, 2255);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      JMenu jMenu0 = new JMenu("", false);
      JMenuBar jMenuBar0 = new JMenuBar();
      // Undeclared exception!
      try { 
        jMenuBar0.getHelpMenu();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // getHelpMenu() not yet implemented.
         //
         verifyException("javax.swing.JMenuBar", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.801674346181659
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.getHierarchyListeners();
      jDayChooser0.addFocusListener(jDayChooser1);
      MockDate mockDate0 = new MockDate((-1L));
      mockDate0.getTime();
      MockDate mockDate1 = new MockDate((-2032), 537, (-1437625606), 8, 36, 2285);
      jDayChooser1.getTopLevelAncestor();
      mockDate0.before(mockDate1);
      jDayChooser1.setSelectableDateRange(mockDate0, mockDate1);
      jDayChooser1.getMaxSelectableDate();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addListeners(16);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5777804121117294
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.firePropertyChange("B{<[eZD!sb)", '9', '9');
      JYearChooser jYearChooser1 = new JYearChooser();
      jDayChooser0.updateUI();
      java.util.Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(29);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 15;
      java.util.Date date0 = jDayChooser0.maxSelectableDate;
      java.util.Date date1 = null;
      jDayChooser0.setSelectableDateRange((java.util.Date) null, date0);
      jDayChooser0.setDay(2796);
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", 2796);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Stack<MockCalendar> stack0 = new Stack<MockCalendar>();
      defaultTableModel0.addColumn((Object) jTable0, (Vector) stack0);
      Color color0 = jTable0.getGridColor();
      jDayChooser0.selectedColor = color0;
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color1.getRGB());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setDecorationBackgroundVisible(true);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("9Qx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.scrollbar;
      jDayChooser0.setForeground(systemColor0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 4, 4, 4, 'c');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setWeekdayForeground(systemColor0);
      JMenu jMenu0 = new JMenu("day", false);
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.windowBorder;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.896153112519625
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("2I{px\"");
      font0.canDisplayUpTo("14");
      jDayChooser0.setFont(font0);
      NamedProfileCache.getDefaultCache();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMaxDayCharacters(935);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setMaxDayCharacters(6);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.137315169336513
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jYearChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.isDecorationBordersVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "year";
      stringArray0[1] = "month";
      stringArray0[2] = "";
      stringArray0[3] = "month";
      stringArray0[4] = "day";
      stringArray0[5] = "month";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(11);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9831272903573964
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMaxSelectableDate();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      SymbolTable symbolTable0 = new SymbolTable();
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'k';
      charArray0[2] = 'I';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, (-2142), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2142
         //
         verifyException("org.apache.xerces.util.SymbolTable", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxSelectableDate((java.util.Date) null);
      jDayChooser0.firePropertyChange("-yAdEvMe", 45, 45);
      int int0 = (-924);
      // Undeclared exception!
      try { 
        jDayChooser0.getBaseline(45, (-924));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width and height must be >= 0
         //
         verifyException("java.awt.Component", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.init();
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMenu jMenu0 = new JMenu("day", false);
      jDayChooser0.getComponentPopupMenu();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getAncestorListeners();
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isOpaque();
      jDayChooser0.removeAll();
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = SwingConstants.TOP;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1, "day", 1);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAccessibleContext();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-3514));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocus();
      jDayChooser0.setLocation(0, (-773));
      jDayChooser0.setMonth(40);
      jDayChooser0.getSelectedDay();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-1679));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }
}
