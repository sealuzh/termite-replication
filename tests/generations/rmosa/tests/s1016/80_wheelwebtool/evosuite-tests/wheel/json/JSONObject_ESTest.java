/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 19:03:12 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.598249707087254
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      jSONObject0.optBoolean("wheel.json.JSONObject@0000000001", false);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Object) "wheel.json.JSONArray");
      String string1 = "JSONArray[";
      jSONObject1.putOpt("JSONArray[", "wheel.json.JSONArray");
      String string2 = "[";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.append("[", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('B');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "wheel.json.JSONObject@0000000001");
      // Undeclared exception!
      jSONObject2.write(stringWriter2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("6", (Collection) null);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("6");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Integer integer0 = new Integer(2569);
      hashMap0.put(integer0, "O%=1P`UpqHdf");
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("dyr?N;3}Se", (-737));
      jSONObject1.optLong("dyr?N;3}Se");
      JSONObject jSONObject2 = jSONObject0.accumulate("", "dyr?N;3}Se");
      try { 
        jSONObject2.getBoolean("O%=1P`UpqHdf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O%=1P`UpqHdf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject.getNames((Object) hashMap0);
      hashMap0.put((Boolean) null, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("S2N,7", hashMap0);
      Double double0 = new Double((-617.6191965));
      JSONObject jSONObject2 = jSONObject1.append("pTd}Wv]29^`YC;SL81", double0);
      jSONObject2.optBoolean("BYWd_Y");
      // Undeclared exception!
      try { 
        jSONObject1.toString((-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = jSONObject0.optBoolean("istoLowerCase", false);
      assertFalse(boolean0);
      
      jSONObject0.put("0", (-21.36711477071));
      double double0 = jSONObject0.optDouble("0");
      assertEquals((-21.36711477071), double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("ZqZViiwH8^4\"~6", (Map) hashMap0);
      Boolean boolean0 = new Boolean("ZqZViiwH8^4\"~6");
      jSONObject0.put("%%}U!Tb_-8|3Cc+R", true);
      Boolean boolean1 = Boolean.TRUE;
      JSONObject jSONObject2 = jSONObject0.accumulate("swPr", boolean1);
      jSONObject2.getBoolean("swPr");
      Iterator iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      HashMap<Byte, Float> hashMap1 = new HashMap<Byte, Float>();
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Expected a ':' after a key", 143.0);
      JSONObject jSONObject1 = jSONObject0.put("vJT!Z<P?-k|#[EY,", false);
      jSONObject0.optInt("Expected a ':' after a key");
      try { 
        jSONObject1.getJSONArray("vJT!Z<P?-k|#[EY,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vJT!Z<P?-k|#[EY,\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0987996145617602
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("d", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("d");
      jSONObject0.put(";", true);
      jSONObject1.toString((-3143), (-3143));
      boolean boolean1 = jSONObject1.optBoolean(";");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.100963336162914
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.quote("pu");
      JSONObject jSONObject0 = new JSONObject((Object) "pu");
      jSONObject0.optBoolean("b>u,L", false);
      JSONObject jSONObject1 = jSONObject0.put("\t", false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.put("b>u,L", (Collection) linkedList0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 3284, 1500);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1849504592484699
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float(1632.7F);
      Float.isFinite((-949.4F));
      Float.max(1632.7F, (-949.4F));
      Float.sum(1632.7F, (-3063.7F));
      Float.isFinite(0.0F);
      Float.max((-3063.7F), (-3063.7F));
      Float.max((-641.1F), 0.0F);
      Float.sum((-719.1243F), 0.0F);
      Float.min((-3063.7F), 0.0F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optDouble("3");
      Long long0 = new Long(0L);
      jSONObject0.put("3", (Object) long0);
      assertEquals(9, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1859008037483512
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.isFinite(1.0F);
      Float.max(1.0F, 1.0F);
      Float.max(1.0F, 1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Short short0 = new Short((short)32);
      Short.compare((short)93, (short)1456);
      Short.toUnsignedInt((short)32);
      JSONObject jSONObject1 = jSONObject0.accumulate("uTxoa1!G%'d`+wvc;X.", short0);
      Short.toUnsignedInt((short)62);
      jSONObject1.getDouble("uTxoa1!G%'d`+wvc;X.");
      JSONObject.doubleToString(0.0);
      jSONObject0.toString();
      try { 
        jSONObject1.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("\b", "\b");
      JSONObject.getNames((Object) jSONObject1);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\b");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.doubleToString((-62164681));
      assertEquals("-6.2164681E7", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-4633.0024F));
      jSONObject0.append("false", float0);
      Float float1 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("false", float1);
      try { 
        jSONObject1.getBoolean("HBV'1aPt\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HBV'1aPt\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0951521981483863
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      jSONObject1.optLong(")WCs^hz3LZDj", 408L);
      JSONObject.getNames((Object) jSONObject1);
      jSONObject1.optDouble(")WCs^hz3LZDj");
      jSONObject1.optDouble(")WCs^hz3LZDj", (-2567.7614464777216));
      String string0 = jSONObject1.getString(")WCs^hz3LZDj");
      assertNotNull(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("PI");
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      Float float0 = new Float((-1604.5782075319623));
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = "] not found.";
      try { 
        jSONObject0.getJSONArray("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(object0);
      jSONObject0.optDouble("{}", 0.0);
      String string0 = "for";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optString((String) null, (String) null);
      JSONObject.getNames(jSONObject1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 123;
      Integer integer0 = new Integer(123);
      linkedList0.add(integer0);
      try { 
        jSONObject1.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8778197848487042
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("0", "0");
      int int0 = jSONObject0.optInt("W!MR*wd");
      assertEquals(0, int0);
      
      jSONObject1.optInt("0", (-1188));
      JSONObject jSONObject2 = jSONObject0.accumulate("0", jSONObject1);
      jSONObject0.optJSONArray(";0(w`|qC,~I~$mZ6Z");
      String string0 = jSONObject2.optString("getremove");
      assertEquals("", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer(102);
      JSONObject jSONObject1 = jSONObject0.accumulate("getcopyValueOf", integer0);
      jSONObject1.optBoolean("getcopyValueOf");
      jSONObject0.optJSONArray("0]0");
      long long0 = jSONObject0.optLong("getcopyValueOf");
      assertEquals(102L, long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("ge~yuP5.*W1z!", object0);
      jSONObject1.optBoolean("ge~yuP5.*W1z!", false);
      String string0 = jSONObject0.optString("ge~yuP5.*W1z!", (String) null);
      assertNotNull(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("ZqZViiwH8^4\"~6", (Map) hashMap0);
      Boolean boolean0 = new Boolean("ZqZViiwH8^4\"~6");
      jSONObject0.put("%%}U!Tb_-8|3Cc+R", true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("%%}U!Tb_-8|3Cc+R", (Collection) linkedList0);
      jSONObject0.keys();
      JSONObject jSONObject2 = jSONObject0.optJSONObject("ZqZViiwH8^4\"~6");
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("d", (Map) hashMap0);
      jSONObject0.putOpt((String) null, (Object) null);
      String string0 = JSONObject.quote("d");
      String string1 = jSONObject1.optString("d");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("Unclosed comment", "Unclosed comment");
      try { 
        jSONObject0.getBoolean("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.doubleToString((-854.5));
      assertEquals("-854.5", string0);
      
      String string1 = JSONObject.valueToString(hashMap0, (-677), (-14530064));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("d", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("d");
      jSONObject1.remove("d");
      JSONObject jSONObject3 = jSONObject1.put("@!", true);
      assertSame(jSONObject0, jSONObject3);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Map) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      String string0 = "a";
      String string1 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "{W'*0(-4ep#)";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{W'*0(-4ep#)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {W'*0(-4ep#)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000003\":\"java.lang.Class@0000000004\"}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{GcXZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {GcXZ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("0", "0");
      jSONObject0.getInt("0");
      String[] stringArray0 = JSONObject.getNames((Object) "0");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("ZqZViiwH8^4\"~6", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject1.getJSONObject("ZqZViiwH8^4\"~6");
      assertNotSame(jSONObject1, jSONObject3);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 475;
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray((JSONArray) null);
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float((-1378.782738066));
      JSONObject jSONObject1 = jSONObject0.accumulate("sR\"4FL>3.k@$baF", float0);
      jSONObject0.keys();
      jSONObject1.optInt("sR\"4FL>3.k@$baF");
      try { 
        jSONObject1.getDouble("(V#.dn8L6/KQm#kMA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(V#.dn8L6/KQm#kMA\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "`VU*1|+hdDc>r";
      Double double0 = new Double((-3.6528450956845617));
      JSONObject jSONObject1 = jSONObject0.put("`VU*1|+hdDc>r", (-880.9835715869));
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.getInt("`VU*1|+hdDc>r");
      try { 
        jSONArray0.getJSONObject((-880));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-880] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.put("", 97);
      long long0 = jSONObject1.getLong("");
      assertEquals(2, jSONObject1.length());
      assertEquals(97L, long0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      Byte byte0 = new Byte((byte)11);
      Integer integer0 = new Integer((byte)11);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(byte0, integer0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(475);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("get", jSONArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("get", hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\b";
      jSONObject0.put("\b", (Object) hashMap0);
      try { 
        jSONObject0.append("\b", "\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\b] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("] is not a Boolean.", "%C=$HAP");
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("]p!V@'^vTodDw?8]", jSONArray0);
      JSONArray jSONArray1 = (JSONArray)jSONObject0.get("]p!V@'^vTodDw?8]");
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
      
      jSONObject0.put("istoString", 120);
      jSONObject0.names();
      boolean boolean0 = jSONObject0.isNull("istoString");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("Unclosed comment", object0);
      try { 
        jSONObject0.getBoolean("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5895213795772005
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      jSONObject0.accumulate("", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("2i^P)@Q4{2");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[8];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "2i^P)@Q4{2";
      stringArray0[2] = "";
      stringArray0[6] = "";
      stringArray0[7] = "2i^P)@Q4{2";
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("istrim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of istrim
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\b";
      JSONObject jSONObject1 = jSONObject0.put("\b", (Object) hashMap0);
      try { 
        jSONObject1.getInt("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("] not found.", 0L);
      JSONArray jSONArray1 = new JSONArray();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Function<Float, Float> function0 = Function.identity();
      Float float0 = new Float(0.0F);
      function0.apply(float0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("isoptLong", (-1L));
      String[] stringArray0 = JSONObject.getNames((Object) function0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("RkC?popwA(", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("RkC?popwA(");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0";
      JSONObject jSONObject1 = jSONObject0.accumulate("0", "0");
      try { 
        jSONObject1.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.182036069448834
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(2513.6177F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.accumulate(string0, string0);
      jSONObject1.optBoolean(string0, false);
      jSONObject1.optJSONArray("/&U&^9e>");
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      JSONObject.numberToString(short0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt((String) null, (int) (short)630);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("<Ns`& Q");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-2222));
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(integer0, boolean0);
      String string0 = "ZqZViiwH8^4\"~6";
      jSONObject0.put("ZqZViiwH8^4\"~6", (Map) hashMap0);
      Boolean boolean1 = new Boolean("ZqZViiwH8^4\"~6");
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("ZqZViiwH8^4\"~6", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "ZqZViiwH8^4\"~6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject("] is not a number.", stringArray0);
      Object object0 = new Object();
      jSONObject0.put("] is not a number.", object0);
      Object object1 = jSONObject0.opt("] is not a number.");
      assertSame(object1, object0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float float0 = new Float(790.8F);
      Float.min(790.8F, 790.8F);
      Float.min(790.8F, 790.8F);
      JSONObject.valueToString(float0, 123, 123);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt((String) null);
      Float float1 = new Float(0.0);
      jSONObject0.putOpt("java.lang.Float@0000000001", float1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
      
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Float float0 = new Float(0.0F);
      hashMap0.put("null", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("le", 471.7);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 2106, 27);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(123);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      hashMap0.put((Boolean) null, (Byte) null);
      Long long0 = new Long(0L);
      hashMap0.getOrDefault(long0, (Byte) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float((-1119.6694608331));
      Function<Float, Float> function0 = Function.identity();
      hashMap0.computeIfAbsent(float0, function0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("yh!2", "yh!2");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, "yh!2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.quote("weTl/26ZobR*t.<?Q");
      assertEquals("\"weTl/26ZobR*t.<?Q\"", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "',sCKhwE9/xBB";
      stringArray0[1] = "',sCKhwE9/xBB";
      stringArray0[2] = "',sCKhwE9/xBB";
      stringArray0[3] = "',sCKhwE9/xBB";
      stringArray0[4] = "',sCKhwE9/xBB";
      stringArray0[5] = "',sCKhwE9/xBB";
      stringArray0[6] = "',sCKhwE9/xBB";
      JSONObject jSONObject0 = new JSONObject("',sCKhwE9/xBB", stringArray0);
      Float float0 = new Float(1116.0F);
      JSONObject jSONObject1 = jSONObject0.append("',sCKhwE9/xBB", float0);
      JSONObject.getNames((Object) null);
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "',sCKhwE9/xBB");
      StringWriter stringWriter2 = stringWriter1.append('-');
      Writer writer0 = jSONObject1.write(stringWriter2);
      assertSame(stringWriter1, writer0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = new Float((double) 3553.4343F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("q)KP&@9h$<5tesb/i{u", "Expected a ',' or ']'");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("Expected a ',' or ']'", hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      int int0 = 1135;
      try { 
        jSONObject0.put((String) null, 1135);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      String string0 = JSONObject.valueToString(jSONArray1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Map) hashMap1);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      hashMap0.put(linkedList0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(linkedList0);
      stringWriter0.append((CharSequence) "[]");
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of get
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(1471.0611861942318);
      hashMap0.put((JSONObject) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      hashMap0.put((Object) null, (Float) null);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      String string0 = jSONObject1.toString((-3143), 8192);
      assertNotNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float((float) 8496);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, (-617), 28);
      Long long0 = new Long((-617));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("7t+\"/xDDroQgd9d2;\"I", (Object) null);
      jSONObject1.remove("");
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getdoubleToString", (Object) "getdoubleToString");
      try { 
        jSONObject0.getJSONObject("getdoubleToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getdoubleToString\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Short.valueOf((short)630);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("]_t-p'6'!Jf?Xa*xx_");
      jSONObject0.optLong("<Ns`& Q");
      boolean boolean0 = jSONObject0.has("Wtsw");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append(",\n", object0);
      boolean boolean0 = jSONObject0.has(",\n");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer integer0 = new Integer(123);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = new Integer(59);
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("rot", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("[", true);
      try { 
        jSONObject0.getLong("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("Null kcy.", stringArray0);
      Byte byte0 = new Byte((byte) (-22));
      JSONObject jSONObject1 = jSONObject0.accumulate("Null kcy.", byte0);
      long long0 = jSONObject1.getLong("Null kcy.");
      assertEquals((-22L), long0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Map) hashMap0);
      try { 
        jSONObject1.getDouble("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("0", "0");
      double double0 = jSONObject1.getDouble("0");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("getdoubleToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getdoubleToString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 25, 25);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Short short0 = new Short((short) (-108));
      String string0 = JSONObject.valueToString(short0, (-325), (-325));
      assertNotNull(string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.isNull("null");
      JSONTokener jSONTokener0 = new JSONTokener("qu");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of qu
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getnumberToString", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = new Double((-249.50779322435434));
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject.getNames((Object) "");
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.quote(".U\"bec2C#^");
      assertEquals("\".U\\\"bec2C#^\"", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("sNN*4+S7UBA%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sNN*4+S7UBA%\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("/", "");
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("6L0HP[Sg|", 2308L);
      assertEquals(2308L, long0);
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("cop");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("2To+aOgo=[$:H'Ao2W");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 2To+aOgo=[$:H'Ao2W
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(2543, (-2078));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(10, 10);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 8448;
      JSONObject.valueToString("[", 8448, 8448);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(8448);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8448] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject.valueToString(linkedList0, 509, 4711);
      Integer integer0 = new Integer(65);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      String string0 = JSONObject.valueToString(boolean0, 101, (-1714));
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-351), (-2588));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(426, 1777);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(426);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[426] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("d", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("Pt~jn`DS>QTj^");
      jSONObject1.put("getputAll", true);
      // Undeclared exception!
      jSONObject1.toString(8192, 8192);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("S2N,7", hashMap0);
      Double double0 = new Double((-617.6191965));
      jSONObject1.append("pTd}Wv]29^`YC;SL81", double0);
      jSONObject1.toString((-1), (-1));
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("^@=$@?U", true);
      String string0 = jSONObject0.toString(59, 59);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString(2543, 2543);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt("] is not a number.", (-1559));
      assertEquals((-1559), int0);
      
      String string0 = JSONObject.quote("p$OQ.9lzhIHg6");
      assertEquals("\"p$OQ.9lzhIHg6\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      HashMap<Byte, Float> hashMap1 = new HashMap<Byte, Float>();
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("Expected a ':' after a key");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(".:|(s:", (-896.0));
      assertEquals((-896.0), double0, 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("ha");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("s,sCKhw{9/xBB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s,sCKhw{9/xBB\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      jSONObject0.accumulate("wheel.json.JSONTokener", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("wheel.json.JSONTokener", true);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("\b", "\b");
      try { 
        jSONObject1.getBoolean("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.accumulate("swPr", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("swPr");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", false);
      String string0 = jSONObject1.getString(",:]}/\"[{;=#");
      assertNotNull(string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("put");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.quote("V#pfzK.\"B\"I");
      assertEquals("\"V#pfzK.\\\"B\\\"I\"", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = ".nq3<47'Gyz7/j";
      stringArray0[2] = ".nq3<47'Gyz7/j";
      stringArray0[2] = ".nq3<47'Gyz7/j";
      stringArray0[3] = ".nq3<47'Gyz7/j";
      stringArray0[4] = ".nq3<47'Gyz7/j";
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Expected '", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("wheel.json.JSONObject", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0968069107755856
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = JSONObject.quote("JSONArray initial value should be a string or col-ection or array.");
      assertEquals("\"JSONArray initial value should be a string or col-ection or array.\"", string0);
      
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"JSONArray initial value should be a string or col-ection or array.\"";
      stringArray0[1] = "JSONArray initial value should be a string or col-ection or array.";
      Boolean.logicalXor(true, true);
      stringArray0[2] = "JSONArray initial value should be a string or col-ection or array.";
      stringArray0[3] = "\"JSONArray initial value should be a string or col-ection or array.\"";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean1 = jSONObject1.optBoolean("JSONArray initial value should be a string or col-ection or array.");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("y?tJ?U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y?tJ?U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.quote("',sCKhrE9/xBB");
      assertEquals("\"',sCKhrE9/xBB\"", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("JSONArray[");
      assertEquals("\"JSONArray[\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("s,sCKhw{9/xBB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s,sCKhw{9/xBB\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("!|", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1.0));
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("sXUm", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-3480L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, "ge~yuP5.*W1z!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("Expected a ',' or ']'", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
