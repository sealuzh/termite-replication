/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 18:04:47 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputText rowOutputText0 = new RowOutputText("tp", "k", "tp", false, "SELECT  FROM ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k");
      defaultDBTable0.getComponents();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(nqP+uDA5=]9";
      stringArray0[1] = "tp";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "tp";
      stringArray1[1] = "k";
      stringArray1[2] = "SELECT  FROM ";
      stringArray1[3] = "(nqP+uDA5=]9";
      stringArray1[4] = "(nqP+uDA5=]9";
      stringArray1[5] = "(nqP+uDA5=]9";
      stringArray1[6] = "org.apache.derby.impl.sql.compile.FromTable";
      stringArray1[7] = "(nqP+uDA5=]9";
      stringArray1[8] = "19Ww9|t@65r_H";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("19Ww9|t@65r_H", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("renamedrop index", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@FZ:Uuh=Q-+n,koL,\"(";
      stringArray0[1] = "@FZ:Uuh=Q-+n,koL,\"(";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "NXwe$", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("NXwe$", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.ITALIAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "org.h2.command.CommandContainer", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertNull(defaultDBTable1.getName());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      System.setCurrentTimeMillis((-1440L));
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      DBDataType dBDataType0 = DBDataType.getInstance(842, "CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" ADD ", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      StringBuilder stringBuilder0 = new StringBuilder("uNdateSelptei*un*vjmtwz(k?2");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("uNdateSelptei*un*vjmtwz(k?2", defaultDBTable0, 842, " ADD ");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "constraint", false, "uNdateSelptei*un*vjmtwz(k?2");
      dBNotNullConstraint0.setOwner(defaultDBTable0);
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = SQLUtil.normalize("constraint", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "CLOB";
      stringArray0[1] = "uNdateSelptei*un*vjmtwz(k?2";
      stringArray0[2] = " ADD ";
      stringArray0[3] = "f&z(8j";
      stringArray0[4] = "uNdateSelptei*un*vjmtwz(k?2";
      stringArray0[5] = " ADD  CLOB NOT NULL";
      stringArray0[6] = "uNdateSelptei*un*vjmtwz(k?2";
      String string1 = SQLUtil.leftJoin(" ADD  CLOB NOT NULL", stringArray0, "'}O3$id@8", "CLOB", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      DBDataType dBDataType0 = DBDataType.getInstance(842, "CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" ADD ", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      StringBuilder stringBuilder0 = new StringBuilder("uNdateSelptei*un*vjmtwz(k?2");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("uNdateSelptei*un*vjmtwz(k?2", defaultDBTable0, 842, " ADD ");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("uNdateSelptei*un*vjmtwz(k?2CLOB", stringBuilder0.toString());
      
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" ADD  CLOB NULL", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "OsSUp>/*aX{VvhG;";
      // Undeclared exception!
      SQLUtil.isDDL("OsSUp>/*aX{VvhG;");
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      TableContainer tableContainer0 = new TableContainer("", (CompositeDBObject<? extends DBObject>) null);
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*SQL");
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("42Z70");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType0 = DBDataType.getInstance(1, "LR");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("LR", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("LR(2,2)", string0);
      
      defaultDBColumn0.getNotNullConstraint();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("LR(2,2)");
      assertEquals(3, objectArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.parseColumnTypeAndSize("from");
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("delPtei*un*vjmtwz(k?2");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "OsSUp>/*aX{VvhG;";
      // Undeclared exception!
      SQLUtil.isQuery("OsSUp>/*aX{VvhG;");
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.substituteMarkers("", "CREATE ALIAS IF NOT EXISTS SYSTEM_COMBINE_BLOB FOR \"", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CALL LOCK_MODE()");
      DBDataType dBDataType0 = DBDataType.getInstance(2261, "alter session");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0@z#8", defaultDBTable0, dBDataType0, integer1);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      ConstraintDescriptorList constraintDescriptorList1 = dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList0);
      String string0 = "ORDINAL_POSITION";
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("ORDINAL_POSITION", defaultDBTable0, dBDataType0);
      constraintDescriptorList0.add((DBColumn) defaultDBColumn0);
      arrayList0.containsAll(constraintDescriptorList1);
      SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-287));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Rp=cwb", false, "Rp=cwb", "Rp=cwb");
      dBCheckConstraint0.setName((String) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertSame(stringBuilder2, stringBuilder0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t@\"_H[LJFkdsJ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "}pdv|tYg?b}am";
      stringArray0[1] = "]Kc";
      stringArray0[2] = "]Kc";
      stringArray0[3] = "]Kc";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]Kc", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("]Kc", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "]Kc";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(dBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.removeComments("CLOB");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "CLOB", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals(41, charArrayWriter0.size());
      assertEquals("CLOBcreate table null (\n\tCLOB CLOB NULL\n)", charArrayWriter0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CALL LOCK_MODE()");
      DBDataType dBDataType0 = DBDataType.getInstance(2261, "alter session");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@z#", defaultDBTable0, dBDataType0, integer1);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      ConstraintDescriptorList constraintDescriptorList1 = dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList0);
      String string0 = "ORDINAL_POSITION";
      constraintDescriptorList1.add((Object) integer1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("ORDINAL_POSITION", defaultDBTable0, dBDataType0);
      constraintDescriptorList0.add((DBColumn) defaultDBColumn0);
      arrayList0.containsAll(constraintDescriptorList1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">Nl(v'X";
      stringArray0[1] = ">Nl(v'X";
      stringArray0[2] = ">Nl(v'X";
      stringArray0[3] = ">Nl(v'X";
      stringArray0[4] = ">Nl(v'X";
      stringArray0[5] = ">Nl(v'X";
      stringArray0[6] = ">Nl(v'X";
      stringArray0[7] = ">Nl(v'X";
      String[] stringArray1 = new String[5];
      stringArray1[0] = ">Nl(v'X";
      stringArray1[1] = ">Nl(v'X";
      stringArray1[2] = ">Nl(v'X";
      stringArray1[3] = ">Nl(v'X";
      stringArray1[4] = ">Nl(v'X";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(">Nl(v'X", stringArray0, ">Nl(v'X", ">Nl(v'X", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String string0 = "t*SJ1U{i!GrB";
      DBSchema dBSchema0 = new DBSchema("t*SJ1U{i!GrB", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("t*SJ1U{i!GrB", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "t*SJ1U{i!GrB";
      dBCatalog0.getSchemas();
      stringArray0[1] = "t*SJ1U{i!GrB";
      stringArray0[2] = "alter tableee&6v$-!s.hn";
      stringArray0[3] = "t*SJ1U{i!GrB";
      stringArray0[4] = "t*SJ1U{i!GrB";
      stringArray0[5] = "t*SJ1U{i!GrB";
      stringArray0[6] = "t*SJ1U{i!GrB";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String[] stringArray1 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray1);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1739));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("8%K6Sm,>d3sfI*o_s1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8%K6Sm,>d3sfI*o_s1");
      DBCatalog dBCatalog1 = new DBCatalog();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "FLOOR";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8%K6Sm,>d3sfI*o_s1", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5898403588435481
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("`#sk)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view");
      String[] stringArray0 = new String[7];
      stringArray0[0] = " join ";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.DMLStatementNode";
      stringArray0[2] = "org.apache.derby.impl.sql.compile.DMLStatementNode";
      stringArray0[3] = "`#sk)";
      stringArray0[4] = "create materialized view";
      stringArray0[5] = "org.apache.derby.impl.sql.compile.DMLStatementNode";
      stringArray0[6] = "create materialized view";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.sql.compile.DMLStatementNode", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" join ", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = FileUtil.canonicalFile("create materialized view");
      MockFile mockFile0 = new MockFile(file0, "org.apache.derby.impl.sql.compile.DMLStatementNode");
      File file1 = MockFile.createTempFile("org.apache.derby.impl.sql.compile.DMLStatementNode", "4;i=+<", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("F(p$.\"x\"7O");
      assertNull(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = SQLUtil.normalize("0=UINjs4MoV?e {[-!5", false);
      assertEquals("0 = UINjs4MoV ? e { [ - ! 5", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(919);
      stringBuilder0.append(0L);
      SQLUtil.renderValue(defaultDBTable0);
      SQLUtil.addOptionalCondition("W|J1j^GcK;RV>dO", stringBuilder0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("W|J1j^GcK;RV>dO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLUtil.normalize("", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-288400943), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized view.lobs.db", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = SQLUtil.normalize("a;/:)U", false);
      assertEquals("a ; / :) U", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(*l3MaIuBbkm;Q$}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (*l3MaIuBbkm;Q$}
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("update", false, "update", "update");
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK update", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0=UINjs4MoV?e {[-!5");
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES create table()", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENE.S ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5|O1-27";
      stringArray0[1] = " REFERENE.S ";
      stringArray0[2] = " REFERENE.S ";
      stringArray0[0] = "5|O1-27";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " REFERENE.S ", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \" REFERENE.S \" ", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", false, "SELECT * FROM ", "SELECT * FROM ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" ", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      HashSet<DBCheckConstraint> hashSet0 = new HashSet<DBCheckConstraint>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CALL LOCK_MODE()");
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CALL LOCK_MODE()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter sessionsetbinarystream(string, inputstream, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"string\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Character character0 = new Character('(');
      SQLUtil.renderValue(character0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "execute";
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = 'U';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '\\';
      charArray0[6] = '(';
      charArray0[7] = '(';
      charArray0[8] = '(';
      // Undeclared exception!
      try { 
        Character.toChars(21, charArray0, 543);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 543
         //
         verifyException("java.lang.Character", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "create unique indeucreate un%que ideGreferencAs";
      stringArray0[1] = "create unique indeucreate un%que ideGreferencAs";
      stringArray0[2] = "create unique indeucreate un%que ideGreferencAs";
      stringArray0[3] = "create unique indeucreate un%que ideGreferencAs";
      stringArray0[4] = "create unique indeucreate un%que ideGreferencAs";
      stringArray0[5] = "create unique indeucreate un%que ideGreferencAs";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indeucreate un%que ideGreferencAs", (DBSchema) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (create unique indeucreate un%que ideGreferencAs, create unique indeucreate un%que ideGreferencAs, create unique indeucreate un%que ideGreferencAs, create unique indeucreate un%que ideGreferencAs, create unique indeucreate un%que ideGreferencAs, create unique indeucreate un%que ideGreferencAs, , ) REFERENCES create unique indeucreate un%que ideGreferencAs(create unique indeucreate un%que ideGreferencAs, create unique indeucreate un%que ideGreferencAs, create unique indeucreate un%que ideGreferencAs, create unique indeucreate un%que ideGreferencAs, create unique indeucreate un%que ideGreferencAs, create unique indeucreate un%que ideGreferencAs, , )", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(4000, "drop index");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop index", (DBTable) null, dBDataType0, (Integer) null);
      Integer integer0 = RawTransaction.ABORT;
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop index", (DBTable) null, dBDataType0);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Random.setNextRandom(478);
      TableContainer tableContainer0 = new TableContainer("selectcreate unique index");
      tableContainer0.getTable("selectcreate unique index");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("selectcreate unique index");
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = SQLUtil.normalize("F)ptN,l8\"/:{/O~~7Il", true);
      assertEquals("F) ptN, l8 \"/:{/O~~7Il\"", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(4000, "drop index");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop index", (DBTable) null, dBDataType0, integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop index", (DBTable) null, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("drop index", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[12];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setDoc((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , , , , , , )", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableContainer tableContainer0 = new TableContainer("@qj");
      tableContainer0.getTable("org.apache.derby.iapi.types.TypeId");
      tableContainer0.setOwner((CompositeDBObject<?>) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@5ff", (DBTable) null, 0, "@qj");
      defaultDBColumn0.isUnique();
      defaultDBColumn0.setDefaultValue("org.apache.derby.iapi.types.TypeId");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("@5ff @QJ DEFAULT org.apache.derby.iapi.types.TypeId NULL", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, (String) null, versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("referen", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("referen", dBCatalog0);
      DBSequence dBSequence0 = new DBSequence("referen", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("referen.referen", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = SQLUtil.normalize("h2.lobInDatabase", false);
      assertEquals("h2.lobInDatabase", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance("Int");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updatedelptei*un*vjmtwz(k?2", (DBTable) null, dBDataType0, integer1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "null as null on ");
      assertEquals("null as null on ", stringBuilder0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[8];
      stringArray1[0] = " = ";
      stringArray1[1] = "delete";
      stringArray1[2] = " = ";
      stringArray1[3] = " = ";
      stringArray1[4] = " = ";
      stringArray1[5] = " = ";
      stringArray1[6] = " = ";
      stringArray1[7] = " = ";
      String string0 = SQLUtil.innerJoin(" = ", stringArray0, " = ", " = ", stringArray1);
      assertEquals(" =  as  =  on ", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&5~w+F(bXC@+1dZno";
      stringArray0[1] = "<H[e$";
      SQLUtil.join("<H[e$", "&5~w+F(bXC@+1dZno", stringArray0, "<H[e$", "<H[e$", stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(4);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.print('|');
      PrintWriter printWriter0 = mockPrintWriter1.printf("FOREIGN KEY ", (Object[]) stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = SQLUtil.normalize("(`U-", true);
      assertEquals("( ` U -", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = SQLUtil.normalize("3dc,l5I'P5V]", false);
      assertEquals("3dc, l5I 'P5V]'", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DBDataType.getInstance((-2761), "selectvelect into");
      Integer integer0 = RawTransaction.COMMIT;
      boolean boolean0 = SQLUtil.isQuery("selectvelect into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.7598407318671061
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLUtil.normalize("a7,;/:)U", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ifOQz]&U", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execundatesemptei*7n*vjm");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("executevelect into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("renamedelptei*un*vjmtwz(k?2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: renamedelptei*un*vjmtwz(k?2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("org.apache.derby.impl.store.raw.xact.ContainerLocking2");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog org.apache.derby.impl.store.raw.xact.ContainerLocking2", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select intoforce");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "NCLOB");
      SQLUtil.addRequiredCondition("NCLOB", stringBuilder0);
      assertEquals("NCLOB and NCLOB", stringBuilder0.toString());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter materialized viewaw");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Rp=cw", true, "Rp=cw", "Rp=cw");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT Rp=cw ", stringBuilder0.toString());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("callj", true, "callj", "callj");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT callj ", stringBuilder0.toString());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("updatecreate unique indexcreate unique indexreferences", stringBuilder0);
      assertEquals("updatecreate unique indexcreate unique indexreferences", stringBuilder0.toString());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("deletei*un*gjmtwz(k'2", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("alter materialized view", stringBuilder0);
      assertEquals("alter materialized view", stringBuilder0.toString());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      defaultDBTable0.countProviders();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) defaultDBTable0;
      objectArray0[2] = (Object) defaultDBTable0;
      objectArray0[4] = (Object) defaultDBTable0;
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((CharSequence) null);
      stringBuilder0.reverse();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Rp=cwb", false, "Rp=cwb", "Rp=cwb");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder2.toString());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5402095130751898
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)43;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("FORCE", "FORCE", stringArray0, "FORCE", "FORCE", stringArray0);
      assertEquals("FORCE join FORCE as FORCE on FORCE.null = FORCE.null", string0);
      
      DBSchema dBSchema0 = new DBSchema("miheb/tkb,mpqh>b&w");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FORCE", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " join ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" join \" PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(3137, "o\"?Pku");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o\"?Pku", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("O\"?PKU(1,1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "-zLAONqXX6TXrQ#G8";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertNotNull(string0);
      assertEquals("catalog null", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "callj");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("GBCqlrmP6", true, "GBCqlrmP6", "GBCqlrmP6");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT GBCqlrmP6 ", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Sort needed for ordering: ");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Rp=cwb", false, "Rp=cwb", "Rp=cwb");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      assertEquals("", stringBuilder2.toString());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2761), "selectvelect into");
      StringBuilder stringBuilder0 = new StringBuilder("selectvelect into");
      stringBuilder0.reverse();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectvelect into", (DBTable) null, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("otni tcelevtcelesSELECTVELECT INTO", stringBuilder0.toString());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance(3137, "VF|+3/{hw");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("VF|+3/{hw", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("VF|+3/{HW(3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("W;Uw!1wh$/s3X%", defaultDBTable0, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLUtil.renderValue((Object) null);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(" and ");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.removeComments(" and ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '--' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("alter table", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = SQLUtil.normalize("f/=9{]vR*_u", true);
      assertEquals("f / = 9 { ] vR * _u", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "FORCE";
      // Undeclared exception!
      try { 
        SQLUtil.join("alter session$srw @f%ei/+", "FORCE", stringArray1, "j]N'p", "FORCE", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "left";
      String string0 = SQLUtil.join("0Q", "0Q", stringArray0, "0Q", "DFMa", stringArray1);
      assertEquals("0Q join 0Q as DFMa on ", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "02=T-1";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("02=T-1", stringArray0, "02=T-1", "02=T-1", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, "{)sV%ae} 3fSM:", "{)sV%ae} 3fSM:", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("bXI[y\"1+LSW3+Y~", "SERVER_VERSION", "SERVER_VERSION");
      assertEquals("bXI[y\"1+LSW3+Y~", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("j/tzxm3");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("getHashScanResultSet");
      assertNull(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("deletei*un*gjmtwz(k'2");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * GFROM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionsetbinarystream(string, inputstream, long)");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnListWithTableName("delete", stringArray0);
      assertEquals("delete.null, delete.null, delete.null", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = SQLUtil.renderValue("dele0te");
      assertEquals("'dele0te'", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "1lj";
      stringArray1[1] = "1lj";
      stringArray1[2] = "1lj";
      stringArray1[3] = "1lj";
      stringArray1[4] = "1lj";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[17];
      String string0 = SQLUtil.join("#", "#", stringArray0, "#", (String) null, stringArray0);
      assertEquals("# join # as null on #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null and #.null = null.null", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("FBLo1^", "FBLo1^", (String[]) null, "FBLo1^", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("Velect into", "Velect into", (String[]) null, " and ", " and ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.join("callj", "NX[e$", stringArray0, "callj", "callj", stringArray0);
      assertEquals("callj join callj as callj on NX[e$.null = callj.null and NX[e$.null = callj.null and NX[e$.null = callj.null and NX[e$.null = callj.null and NX[e$.null = callj.null and NX[e$.null = callj.null", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "ELIx+EwS@)&ZQ", (String) null, stringArray0);
      assertEquals("ELIx+EwS@)&ZQ as null on null.null = null.null", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("Fzi98m-hy+4)ZB0Se6", stringArray0, "`&sk)", "`&sk)", stringArray0);
      assertEquals("`&sk) as `&sk) on ", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique indexcreate unique indexreferences");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.join("inner", "callj", stringArray0, "inner", "callj", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "inner");
      assertEquals("inner", stringBuilder0.toString());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("`j:?owjvzFR<j5{:Pb");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("zPS*)'Y:OCN8J_XSH");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("delete");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
