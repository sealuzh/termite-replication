/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 18:12:35 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Option;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) 4;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.getAttributeCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray0[1] = 1.0E-8;
      instances0.enumerateInstances();
      doubleArray0[0] = (double) 1;
      iBk0.getCapabilities();
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray0, (-2));
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.tokenizerTipText();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getRevision();
      naiveBayesMultinomialText1.pruneDictionary();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)";
      stringArray0[1] = " *![dD~F2Ao-0x";
      stringArray0[2] = "}L/";
      stringArray0[3] = "";
      stringArray0[4] = "-stopwords";
      stringArray0[5] = " *![dD~F2Ao-0x";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.tokenizerTipText();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5370597511562574
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.m_stopwordsFile = null;
      String[] stringArray0 = Locale.getISOLanguages();
      naiveBayesMultinomialText0.getStopwords();
      NaiveBayesMultinomialText.main(stringArray0);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "1034-1040";
      stringArray1[1] = "";
      stringArray1[2] = "-M";
      IteratedLovinsStemmer.main(stringArray1);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      iteratedLovinsStemmer0.toString();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 257.0;
      doubleArray0[1] = 257.0;
      doubleArray0[2] = 0.0;
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLNorm();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2152.4499744151535;
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      doubleArray0[1] = 12.0;
      doubleArray0[2] = 12.0;
      naiveBayesMultinomialText0.m_norm = 12.0;
      doubleArray0[3] = 12.0;
      doubleArray0[4] = 12.0;
      doubleArray0[5] = 12.0;
      doubleArray0[6] = 12.0;
      doubleArray0[7] = 12.0;
      DenseInstance denseInstance0 = new DenseInstance(12.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) 4;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      InputMappedClassifier.main(testInstances0.DEFAULT_WORDS);
      DenseInstance denseInstance0 = new DenseInstance(119.0, doubleArray0);
      denseInstance0.setDataset(instances0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5683304305687247
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) 4;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.getAttributeCapabilities();
      doubleArray0[1] = 446.37263586;
      doubleArray0[0] = (double) 1;
      iBk0.getCapabilities();
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray0, (-2));
      SparseInstance sparseInstance0 = new SparseInstance(4);
      instances1.add((Instance) sparseInstance0);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      double[] doubleArray1 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray1);
      double[] doubleArray2 = naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
      assertArrayEquals(new double[] {0.5000000000000001, 0.16666666666666669, 0.16666666666666669, 0.16666666666666669}, doubleArray2, 0.01);
      
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.listOptions();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0707855404679183
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0, (-1));
      MockRandom mockRandom0 = new MockRandom();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 1.0;
      DenseInstance denseInstance0 = new DenseInstance(8.0, doubleArray0);
      denseInstance0.setDataset(instances0);
      naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
      naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, true);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t1.0\nclass2\t1.0\nclass3\t1.0\nclass4\t1.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\njumps\t7.38905609893065\t2.718281828459045\t2.718281828459045\t2.718281828459045\t\n", string0);
      
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
      assertArrayEquals(new double[] {0.25, 0.25, 0.25, 0.25}, doubleArray1, 0.01);
      
      naiveBayesMultinomialText0.updateClassifier(denseInstance0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      denseInstance0.setDataset(instances0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) 4;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.getAttributeCapabilities();
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 12.0;
      doubleArray1[1] = (-237.153);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = 1273.3936567;
      DenseInstance denseInstance0 = new DenseInstance(1273.3936567, doubleArray1);
      denseInstance0.setDataset(instances0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(100.0);
      naiveBayesMultinomialText0.setLNorm(1.0);
      naiveBayesMultinomialText0.m_stemmer = null;
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getStemmer();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0, (-1));
      MockRandom mockRandom0 = new MockRandom();
      Instances instances2 = instances1.resampleWithWeights((Random) mockRandom0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 11.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-1283.8008871);
      doubleArray0[5] = (double) (-2);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[2] = (-2);
      intArray0[3] = (-4085);
      intArray0[4] = (-1);
      intArray0[5] = (-2);
      intArray0[6] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0, intArray0, 70);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances2.add((Instance) sparseInstance1);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.052754235510318
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.listOptions();
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 3204);
      naiveBayesMultinomialText0.m_norm = 18.0;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_leplace = 432.0;
      naiveBayesMultinomialText0.getPeriodicPruning();
      Enumeration<Option> enumeration0 = new WordTokenizer();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.m_lnorm = 1105.861;
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.m_minWordP = 18.0;
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.m_periodicP = 212;
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals(212, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Enumeration<Option> enumeration0 = new AlphabeticTokenizer();
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 3204);
      naiveBayesMultinomialText0.m_norm = 18.0;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_leplace = 432.0;
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.m_lnorm = 1105.861;
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.m_minWordP = 18.0;
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.m_periodicP = 212;
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 18.0;
      doubleArray0[1] = 0.3;
      doubleArray0[2] = (double) 3204;
      doubleArray0[3] = (double) 212;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 212;
      intArray0[3] = 3204;
      SparseInstance sparseInstance0 = new SparseInstance(0.3, doubleArray0, intArray0, 3111);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)";
      stringArray0[1] = " *![dD~F2Ao-0x";
      stringArray0[2] = "-tokenizer";
      stringArray0[3] = "\t";
      stringArray0[4] = "";
      stringArray0[5] = "}L/";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid tokenizer specification string
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      inputMappedClassifier0.getOptions();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      Capabilities.forInstances(instances0);
      doubleArray0[4] = 11.0;
      doubleArray0[2] = (double) (-1);
      iBk0.getCapabilities();
      testInstances0.clone();
      doubleArray0[4] = (double) (-2);
      naiveBayesMultinomialText0.setUseStopList(true);
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray0, (-2));
      naiveBayesMultinomialText0.buildClassifier(instances1);
      double[] doubleArray1 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray1);
      naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.651760534930837
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray0.length);
      
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(2.0, double0, 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.106613053677038
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (-1202.965155);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 13.0;
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (-3246.62264);
      doubleArray0[8] = (double) 2;
      iBk0.pruneToK(instances0, doubleArray0, (-2));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      DenseInstance denseInstance0 = new DenseInstance(4, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.110258863656744
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) 4;
      naiveBayesMultinomialText0.m_useStopList = true;
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.getAttributeCapabilities();
      doubleArray0[1] = 446.37263586;
      doubleArray0[0] = (double) 1;
      iBk0.getCapabilities();
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray0, (-2));
      naiveBayesMultinomialText0.buildClassifier(instances1);
      double[] doubleArray1 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray1);
      naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = (-2335.562099531171);
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.m_useStopList = true;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) 4;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      DenseInstance denseInstance0 = new DenseInstance(2973.86888670535, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) 1;
      doubleArray1[4] = (double) (-4523);
      doubleArray1[5] = (double) (-1);
      DenseInstance denseInstance1 = new DenseInstance((-2), doubleArray1);
      denseInstance1.setDataset(instances0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      StringReader stringReader0 = new StringReader("Y(]On`");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      stopwords0.toString();
      stopwords0.read(bufferedReader0);
      naiveBayesMultinomialText0.setMinWordFrequency((-332.37042948616));
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getMinWordFrequency();
      org.evosuite.runtime.Random.setNextRandom(663);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities0 = principalComponents0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.883404187709486
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0);
      MockRandom mockRandom0 = new MockRandom();
      instances1.resampleWithWeights((Random) mockRandom0);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
      assertArrayEquals(new double[] {0.5454545454545454, 0.4545454545454546}, doubleArray1, 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0, (-1));
      MockRandom mockRandom0 = new MockRandom();
      Instances instances2 = instances1.resampleWithWeights((Random) mockRandom0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances2);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(8.0, doubleArray0);
      denseInstance0.setDataset(instances1);
      naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(8.0, doubleArray0);
      // Undeclared exception!
      try { 
        denseInstance1.setValue((-2), 798.7207939532);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9713931362744876
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_stopwordsFile = null;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getCapabilities();
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText0.setStemmer(nullStemmer0);
      naiveBayesMultinomialText0.m_lnorm = 1682.84017271234;
      naiveBayesMultinomialText0.useStopListTipText();
      MockFile mockFile0 = new MockFile("NaiveBayesMultinomialText: No model built yet.\n", "");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getStopwords();
      org.evosuite.runtime.Random.setNextRandom(690);
      naiveBayesMultinomialText0.getLowercaseTokens();
      System.setCurrentTimeMillis(2804L);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.m_periodicP = (int) (byte) (-94);
      File file0 = MockFile.createTempFile("-lnorm", (String) null);
      file0.setReadable(true);
      file0.setWritable(false);
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-lnorm");
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      System.setCurrentTimeMillis(1210L);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.normTipText();
      MockFile mockFile0 = new MockFile("9122", "The LNorm to use for document length normalization.");
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.listOptions();
      assertEquals((-94), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.444155763090401
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getOptions();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      inputMappedClassifier0.buildClassifier(instances0);
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string0);
      
      String string1 = naiveBayesMultinomialText0.LNormTipText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("The LNorm to use for document length normalization.", string1);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      sGDText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.m_stemmer = stemmer0;
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      File file0 = MockFile.createTempFile("-normalize", "-normalize", (File) mockFile0);
      naiveBayesMultinomialText0.setStopwords(file0);
      Instance instance0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8055444459792676
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0, (-1));
      MockRandom mockRandom0 = new MockRandom();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-1);
      InputMappedClassifier.main(testInstances0.DEFAULT_WORDS);
      doubleArray0[2] = 1.0;
      DenseInstance denseInstance0 = new DenseInstance(1.0, doubleArray0);
      denseInstance0.setDataset(instances0);
      naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, true);
      naiveBayesMultinomialText0.toString();
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t1.0\nclass2\t1.0\nclass3\t1.0\nclass4\t1.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\njumps\t7.38905609893065\t2.718281828459045\t2.718281828459045\t2.718281828459045\t\n", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7707232441655103
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0, (-1));
      MockRandom mockRandom0 = new MockRandom();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@relation");
      naiveBayesMultinomialText0.m_leplace = (double) (-2);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 1.0;
      DenseInstance denseInstance0 = new DenseInstance(8.0, doubleArray0);
      denseInstance0.setDataset(instances0);
      naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
      naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, true);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't normalize array. Sum is NaN.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 1.0;
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0);
      denseInstance0.setDataset(instances0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = false;
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)";
      stringArray0[1] = " *![dD~F2Ao-0x";
      stringArray0[2] = "-tokenizer";
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.m_wordFrequencies = true;
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2221.161, doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1065139358259133
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-1));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.nearestNeighbour((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.m_periodicP = 9;
      naiveBayesMultinomialText0.pruneDictionary();
      String string0 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_stemmer = null;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(10, stringArray0.length);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      double double0 = naiveBayesMultinomialText0.m_norm;
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.m_stopwordsFile = null;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-652));
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getStemmer();
      assertEquals((-652), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = MockFile.createTempFile("ones", "ones");
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(14, stringArray0.length);
      
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 1288;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2062);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      boolean boolean0 = true;
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("UE]q;)r4/", arrayList0);
      // Undeclared exception!
      try { 
        denseInstance0.isMissing(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.getUseStopList();
      capabilities0.getAttributeCapabilities();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 2.5024;
      try { 
        CostMatrix.parseMatlab("G.E");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      boolean boolean0 = naiveBayesMultinomialText0.getLowercaseTokens();
      assertFalse(boolean0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.m_normalize = true;
      double[] doubleArray0 = new double[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tThe tokenizing algorihtm (classname plus parameters) to use.\n\t(default: ");
      doubleArray0[1] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (-3112.485122);
      naiveBayesMultinomialText0.setNorm((-1584.4332946264183));
      doubleArray0[7] = 1.22955031298591;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertEquals((-1584.4332946264183), naiveBayesMultinomialText0.getNorm(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getOptions();
      try { 
        naiveBayesMultinomialText0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 493.701115;
      doubleArray0[1] = 493.701115;
      doubleArray0[5] = 493.701115;
      doubleArray0[2] = 493.701115;
      doubleArray0[5] = 2.0;
      doubleArray0[4] = (-3112.485122);
      naiveBayesMultinomialText0.setNorm(493.701115);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.setUseStopList(false);
      boolean boolean0 = naiveBayesMultinomialText0.getLowercaseTokens();
      assertEquals(493.701115, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[7];
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.getLowercaseTokens();
      capabilities0.getAttributeCapabilities();
      doubleArray0[1] = 446.37263586;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      naiveBayesMultinomialText0.getCapabilities();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = costSensitiveClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom((-1));
      instances0.resample(mockRandom0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-964.3998);
      DenseInstance denseInstance0 = new DenseInstance(1.0, doubleArray0);
      Instance instance0 = linearNNSearch0.nearestNeighbour(denseInstance0);
      naiveBayesMultinomialText0.tokenizeInstance(instance0, false);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8090168936474171
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getOptions();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("The stemming algorithm to use on the words.", string0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) 4;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      capabilities0.getAttributeCapabilities();
      doubleArray0[1] = 446.37263586;
      doubleArray0[0] = (double) 1;
      iBk0.getCapabilities();
      DenseInstance denseInstance0 = new DenseInstance(4.0, doubleArray0);
      denseInstance0.setValue(4, 4.0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), intArray0, (-3379));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.399200109091609
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText.main(stringArray0);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      iteratedLovinsStemmer0.toString();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) iteratedLovinsStemmer0;
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 257.0;
      doubleArray0[1] = 257.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 257.0;
      doubleArray0[4] = 257.0;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 3701;
      intArray0[3] = (-4523);
      intArray0[4] = 0;
      doubleArray0[0] = (double) 0;
      intArray0[6] = 1;
      intArray0[7] = (-851);
      intArray0[8] = 1599;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 0);
      try { 
        linearNNSearch0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "\tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)";
      stringArray0[2] = "-P";
      stringArray0[3] = " *![dD~F2Ao-0x";
      stringArray0[4] = "";
      stringArray0[5] = "}L/";
      stringArray0[6] = "\tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" *![dD~F2Ao-0x\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0E-6);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[3] = (-0.5);
      doubleArray0[4] = (-1893.289469);
      doubleArray0[5] = 5.7;
      doubleArray0[6] = 349.4755897356;
      doubleArray0[7] = (-1034.5);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.m_leplace = (-893.6687435869042);
      naiveBayesMultinomialText0.setPeriodicPruning((-1919));
      naiveBayesMultinomialText0.stopwordsTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = (-2350.9424643061);
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getNorm();
      System.setCurrentTimeMillis((-3210L));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3840601871722127
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 1.0;
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0);
      denseInstance0.setDataset(instances0);
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
      assertArrayEquals(new double[] {0.5912408759124088, 0.0510948905109489, 0.17883211678832112, 0.17883211678832112}, doubleArray1, 0.01);
      
      naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, false);
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.tokenizerTipText();
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.2567576795645348
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-stemmer";
      stringArray0[1] = "-stemmer";
      stringArray0[2] = "-stemmer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.185851463196929
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)";
      stringArray0[1] = " *![dD~F2Ao-0x";
      stringArray0[2] = "-tokenizer";
      stringArray0[3] = "ingness";
      stringArray0[4] = "";
      stringArray0[5] = "}L/";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-norm";
      stringArray0[1] = "-norm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-M";
      stringArray0[1] = "-stemmer";
      stringArray0[2] = "-stemmer";
      stringArray0[3] = "-stemmer";
      stringArray0[4] = "-stemmer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText.main(testInstances0.DEFAULT_WORDS);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ")FSNvN5^lkjBJ");
      IBk iBk0 = new IBk((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) 4;
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      denseInstance0.setDataset(instances0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(2983.4934845);
      MockFile mockFile0 = new MockFile("K{", "K{");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SparseInstance sparseInstance0 = new SparseInstance(109);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String string0 = naiveBayesMultinomialText0.toString();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.606065762475163
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath((String) null);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0, (-1));
      MockRandom mockRandom0 = new MockRandom();
      Instances instances2 = instances1.resampleWithWeights((Random) mockRandom0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances2);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 1.0;
      DenseInstance denseInstance0 = new DenseInstance(8.0, doubleArray0);
      denseInstance0.setDataset(instances2);
      naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
      naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, true);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t1.0\nclass2\t1.0\nclass3\t1.0\nclass4\t1.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\njumps\t7.38905609893065\t2.718281828459045\t2.718281828459045\t2.718281828459045\t\n", string0);
      
      naiveBayesMultinomialText0.getOptions();
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertArrayEquals(new double[] {0.25, 0.25, 0.25, 0.25}, doubleArray1, 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(boolean0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, double0, 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Instance instance0 = null;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }
}
