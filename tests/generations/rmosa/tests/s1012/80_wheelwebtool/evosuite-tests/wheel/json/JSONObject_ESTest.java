/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 13:33:41 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Es6i~E+LzL-/,)3\"1";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = "0";
      stringArray0[4] = "0";
      stringArray0[5] = "0";
      stringArray0[6] = "0";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.append("0", (Object) null);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("0");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-8323580));
      Integer.max((-1149), (-748));
      Long long1 = new Long(1607L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float((double) (-748));
      JSONObject jSONObject1 = jSONObject0.put(">)uo=)LH", (Object) float0);
      jSONObject0.optString(">)uo=)LH", ">)uo=)LH");
      jSONObject1.getDouble(">)uo=)LH");
      Short short0 = new Short((short)19);
      Short.compare((short) (-163), (short) (-163));
      JSONObject jSONObject2 = jSONObject0.putOpt("SYE-'TPQIFlcSM", short0);
      JSONObject jSONObject3 = jSONObject1.put("SYE-'TPQIFlcSM", 1708);
      assertSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      hashMap0.put((JSONArray) null, "");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject0, 121, 121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject.getNames((Object) hashMap0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 12, 24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.769729341372599
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      linkedList0.add(long0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("iscompare", object0);
      jSONObject1.append("Expected '", jSONObject0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 16, 16);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "iscmpar!");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("iscmpar!", stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-1454));
      jSONObject0.accumulate("[", integer0);
      double double0 = jSONObject0.optDouble("[");
      assertEquals(1, jSONObject0.length());
      assertEquals((-1454.0), double0, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1852106726234373
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "ar4.0hKE;J}a5!S<g");
      jSONObject0.putOpt("getlogicalXor", "getlogicalXor");
      JSONObject jSONObject1 = jSONObject0.append("ar4.0hKE;J}a5!S<g", "ar4.0hKE;J}a5!S<g");
      Double double0 = new Double(283.4683745);
      jSONObject1.append("IamXq", double0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject2 = jSONObject1.putOpt("ar4.0hKE;J}a5!S<g", double0);
      jSONObject2.optDouble("ar4.0hKE;J}a5!S<g");
      double double1 = jSONObject2.optDouble("ar4.0hKE;J}a5!S<g");
      assertEquals(6, jSONObject1.length());
      assertEquals(283.4683745, double1, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8482806993396834
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Double double0 = new Double(0.267);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (-62164681));
      int int0 = jSONObject1.getInt("Null pointer");
      assertEquals(4, jSONObject0.length());
      assertEquals((-62164681), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.097242790482881
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "' and instead saw '");
      jSONObject0.put("' and instead saw '", (Object) float0);
      JSONObject.testValidity((Object) null);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble("' and instead saw '");
      jSONObject0.put("JSON does not allow non-finite numbers.", (-758L));
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1080451547739334
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("Unterminated string");
      JSONObject jSONObject1 = jSONObject0.put("true", (-691.0));
      JSONObject jSONObject2 = jSONObject0.append("Unterminated string", jSONObject1);
      // Undeclared exception!
      jSONObject2.toString(34);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("] is not a number.");
      JSONObject jSONObject1 = jSONObject0.put("/r4.X.zgK='S4w[<", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("/r4.X.zgK='S4w[<");
      assertFalse(boolean1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("ishashCode", (Collection) linkedList0);
      assertTrue(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-40792343));
      assertEquals("-4.0792343E7", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(32);
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((double) 32);
      JSONObject jSONObject1 = new JSONObject(float0);
      jSONObject1.keys();
      String string0 = jSONObject0.toString((-2919), 32);
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1871230841744032
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Map) hashMap0);
      stringArray0[0] = ",\n";
      stringArray0[1] = "\"\"";
      stringArray0[2] = "\f";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject((Object) hashMap0);
      jSONObject0.put("for", (Map) hashMap0);
      JSONObject jSONObject4 = jSONObject2.append("\f", jSONObject3);
      JSONObject.quote("\"\"");
      JSONObject jSONObject5 = jSONObject4.put("5y??o`!'i+)Lc", (Map) hashMap0);
      jSONObject2.putOpt("\f", ",\n");
      JSONObject jSONObject6 = jSONObject1.getJSONObject(",\n");
      assertNotSame(jSONObject6, jSONObject5);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getrotateRight", (Map) hashMap0);
      jSONObject1.accumulate("getrotateRight", "getrotateRight");
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.logicalXor(true, true);
      Boolean.logicalOr(true, true);
      JSONObject jSONObject2 = jSONObject0.accumulate("getrotateRight", boolean0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getrotateRight", (Map) hashMap0);
      jSONObject1.accumulate("getrotateRight", "getrotateRight");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("getrotateRight");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1308));
      hashMap0.put("wai", integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("hnuS", (Collection) linkedList0);
      double double0 = jSONObject0.optDouble("wai", (double) (-1308));
      assertEquals((-1308.0), double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("issum", (Object) "issum");
      try { 
        jSONObject1.getBoolean("issum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issum\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      Boolean boolean0 = Boolean.valueOf((String) null);
      JSONObject jSONObject1 = jSONObject0.append("false", boolean0);
      JSONObject.valueToString("false");
      Byte byte0 = new Byte((byte)88);
      JSONObject jSONObject2 = jSONObject1.append("false", byte0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Short short0 = new Short((short)108);
      Short.toUnsignedInt((short)108);
      Short.compare((short)108, (short)308);
      JSONObject jSONObject0 = new JSONObject(short0);
      Integer integer0 = new Integer((short)308);
      jSONObject0.append("i6C8k,1A;", integer0);
      jSONObject0.put("'", true);
      jSONObject0.keys();
      boolean boolean0 = jSONObject0.isNull("'");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}>?r9v4#`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }>?r9v4#`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(89, (long) 89);
      jSONArray0.optJSONObject(652);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(jSONArray0, "FY+O");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONArray cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("C]+vw0+37Krm=", (Object) "C]+vw0+37Krm=");
      jSONObject1.getString("C]+vw0+37Krm=");
      try { 
        jSONObject0.getBoolean("C]+vw0+37Krm=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C]+vw0+37Krm=\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(linkedList0, 108, 108);
      try { 
        Byte.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("getrotateRight", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(44, (double) (-549));
      JSONObject.doubleToString(44);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{~qMXe~/k*1hd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {~qMXe~/k*1hd
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.87565606324755
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-45L));
      hashMap0.getOrDefault(listIterator0, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(4L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float((double) (-45L));
      JSONObject jSONObject1 = jSONObject0.put("!>)EQB", (Object) long0);
      jSONObject1.toString((-1629), (-1889));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.Integer@0000000002\": java.lang.Long@0000000003,\n\"java.lang.String@0000000004\": java.lang.Long@0000000005\n}");
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-45L));
      Long long1 = new Long((-45L));
      hashMap0.getOrDefault(long1, long0);
      Integer integer0 = new Integer((-1889));
      Long long2 = new Long(3414L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float((double) (-45L));
      Boolean boolean0 = new Boolean("Unterminated string");
      JSONObject jSONObject1 = jSONObject0.put(")' `]\"6/|", (Object) boolean0);
      jSONObject1.toString(5219, (-1889));
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = "C]+vw0+37lKrlm=";
      jSONObject0.put("C]+vw0+37lKrlm=", object0);
      try { 
        jSONObject0.getBoolean("C]+vw0+37lKrlm=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C]+vw0+37lKrlm=\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("issum", (Object) "issum");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getJSONObject("issum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issum\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(1858L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      int int0 = 78;
      Long long1 = new Long(78);
      Integer integer0 = new Integer(78);
      Integer integer1 = new Integer(78);
      hashMap0.put(integer0, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "' and instead saw '";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", object0);
      int int1 = (-479);
      try { 
        jSONObject1.getJSONObject("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\"2e\\$($O9'ic6A+3&";
      JSONObject.valueToString((Object) null);
      int int0 = (-1985);
      JSONObject.valueToString("\"2e$($O9'ic6A+3&", 723, (-1985));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optString(",", (String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"2e$($O9'ic6A+3&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"2e$($O9'ic6A+3&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.accumulate("0", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Long long0 = new Long((-2210L));
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long((-1889));
      Long.getLong("0", (long) (-1889));
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long2 = new Long((-2210L));
      JSONObject jSONObject1 = jSONObject0.put("0", (Object) long2);
      jSONObject1.optString("0");
      try { 
        jSONObject1.getLong("eg}W1%zXze");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"eg}W1%zXze\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = Integer.valueOf(56);
      jSONObject0.put("getset", (Object) integer0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject0.optLong("getset");
      try { 
        jSONObject1.getBoolean("9RZRrby}QfiDPUf4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9RZRrby}QfiDPUf4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("6=2|PFlR[uSrhE(ey2D");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      int int0 = (-389);
      JSONObject.valueToString(object0, (-389), (-389));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject((-389));
      jSONArray0.put((Object) "null");
      String string0 = "Z!Jv> <2s_.ozS,]c";
      // Undeclared exception!
      try { 
        linkedList0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "] is not a Boolean'";
      JSONObject jSONObject0 = new JSONObject("] is not a Boolean'", stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) "] is not a Boolean'");
      // Undeclared exception!
      jSONObject1.toString(5805, (-30));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1802906299866844
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.3840113045049441);
      assertEquals("0.3840113045049441", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "0.3840113045049441");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2745180899177098
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float((-570.402424564));
      Integer integer0 = new Integer((-957));
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("toJ", (double) (-957));
      double double0 = new Integer((-957));
      jSONObject0.names();
      Integer integer1 = new Integer((-957));
      JSONObject.getNames(jSONObject0);
      jSONObject1.has("toJ");
      JSONObject jSONObject2 = jSONObject0.put("getgetJSONObject", (Map) hashMap0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap1, 48, 128);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(8448);
      Long long0 = new Long(0L);
      Long long1 = new Long(1190L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float(0.0);
      Float float1 = new Float((-1189.2852497629062));
      jSONObject0.put(">)uo=)LH", (Object) long0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt(">)uo=)LH", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8768603988557397
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Short short0 = new Short((short) (-770));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0";
      stringArray0[1] = "dou";
      stringArray0[2] = "U|'#UwyEgc]*UP}G<";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("0", true);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject2 = jSONObject1.put("\"mjp<..>per<Tbu~", (Map) hashMap0);
      jSONObject2.put("A JSONObject text must begin with '{'", (int) (short) (-770));
      JSONObject jSONObject3 = jSONObject2.put("q1EEk[^jbs", (Map) hashMap0);
      jSONObject3.getLong("A JSONObject text must begin with '{'");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject4 = jSONObject3.append("osDv))?CJ0", object0);
      assertSame(jSONObject4, jSONObject2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("j%u| A!)", "R&BR");
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject1.append("j%u| A!)", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[j%u| A!)] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONObject.quote("</ Wp1p'2a29");
      jSONObject0.optLong("true", 1L);
      try { 
        jSONObject0.get("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer((-1889));
      Long long0 = new Long((-510L));
      Integer integer1 = new Integer(123);
      Long long1 = new Long((-2683L));
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float((double) (-1889));
      JSONObject jSONObject1 = jSONObject0.put(">)uo=)LH", (Object) long1);
      JSONObject.getNames((Object) long0);
      int int0 = jSONObject1.optInt(">)uo=)LH");
      assertEquals((-2683), int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-8323580));
      Integer.max((-1149), (-748));
      Long long1 = new Long(1607L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.put(">)uo=)LH", (Object) float0);
      jSONObject0.optString(">)uo=)LH", ">)uo=)LH");
      jSONObject1.getDouble(">)uo=)LH");
      Short short0 = new Short((short)19);
      jSONObject0.putOpt("SYE-'TPQIFlcSM", short0);
      JSONObject jSONObject2 = jSONObject1.put("SYE-'TPQIFlcSM", 1708);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Integer integer0 = new Integer(8192);
      Long long0 = new Long(0L);
      Float float0 = new Float((double) 1607L);
      Byte byte0 = new Byte((byte)59);
      JSONObject jSONObject1 = jSONObject0.put(">)uo=)LH", (Object) byte0);
      jSONObject1.getDouble(">)uo=)LH");
      try { 
        jSONObject0.getJSONArray(">)uo=)LH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">)uo=)LH\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.add(jSONArray0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.add((JSONArray) null);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(32);
      Long long0 = new Long(1607L);
      Long long1 = new Long((-1L));
      hashMap0.put((Integer) null, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float(0.0);
      jSONObject0.put(">)uo=)LH", (Object) long0);
      JSONObject.getNames((Object) ">)uo=)LH");
      int int0 = jSONObject0.optInt(">)uo=)LH");
      assertEquals(1607, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("gettoString", "gettoString");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      linkedList1.pollFirst();
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.toString();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer.max((-1149), (-748));
      Long long1 = new Long(1607L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.put(">)uo=)LH", (Object) float0);
      jSONObject1.putOpt(">)uo=)LH", float0);
      Object object0 = JSONObject.NULL;
      jSONObject1.getLong(">)uo=)LH");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(">)uo=)LH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of >)uo=)LH
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("' and instead saw '", hashMap0);
      jSONObject0.opt("' and instead saw '");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(1858L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((-2496));
      Long long1 = new Long(70);
      Integer integer1 = new Integer(70);
      Integer integer2 = new Integer((-2496));
      hashMap0.put(integer1, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray(jSONArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      hashMap0.put((JSONArray) null, "");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+CK", (Object) "+CK");
      try { 
        jSONObject0.getJSONArray("+CK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+CK\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optBoolean("val", false);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 107, 103);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      jSONObject0.put("W,6\u0003~E~3At{<fT", (Map) hashMap1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-821));
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Unclosed comment");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-45L));
      Long long1 = hashMap0.getOrDefault((Object) null, long0);
      int int0 = (-1889);
      hashMap0.put((Integer) null, long1);
      Integer integer0 = new Integer((-1889));
      Long long2 = new Long(0L);
      Long long3 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.toString();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      HashMap<String, Double> hashMap2 = new HashMap<String, Double>();
      hashMap1.putAll(hashMap2);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("[", (Object) jSONArray0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = Long.valueOf((-1L));
      hashMap0.put((Integer) null, long0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null, (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "/gBjOh26J|xyU*I";
      String string1 = "A,}G%lqPd2OjLhW";
      jSONObject0.optLong("Missing value", (-306L));
      try { 
        Integer.valueOf("/gBjOh26J|xyU*I");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/gBjOh26J|xyU*I\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      String string0 = "</ Wp1p'2a29";
      try { 
        jSONObject0.getJSONObject("</ Wp1p'2a29");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<\\/ Wp1p'2a29\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      int int0 = (-1889);
      Integer integer0 = new Integer((-1889));
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Long long0 = new Long((-745L));
      hashMap1.getOrDefault(integer0, long0);
      Integer integer1 = new Integer((-2972));
      Integer.max((-8323580), (-1889));
      Long long1 = new Long((-69L));
      hashMap1.put((Integer) null, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.keys();
      String string0 = ">)uo=)LH";
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.put(">)uo=)LH", (Object) hashMap0);
      jSONObject0.optString(">)uo=)LH", ">)uo=)LH");
      try { 
        jSONObject1.getDouble(">)uo=)LH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">)uo=)LH\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("alsm$`", 3.7418036899703595);
      assertEquals(3.7418036899703595, double0, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long((-1403L));
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      int int0 = 70;
      Integer integer0 = new Integer(32);
      Long long1 = new Long((-1L));
      int int1 = 770;
      Integer integer1 = new Integer(770);
      Integer.remainderUnsigned(32, 32);
      Integer integer2 = new Integer(1452);
      Long long2 = new Long(770);
      hashMap0.put(integer2, long2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.remove((String) null);
      Boolean boolean0 = new Boolean(false);
      try { 
        jSONObject0.put((String) null, (Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(2139L);
      hashMap0.put((Integer) null, long0);
      jSONObject0.put("Substring bounds error", (-2386.1915032984));
      try { 
        Long.parseUnsignedLong("'vRjF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'vRjF\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>(hashMap0);
      Integer integer0 = new Integer((-1885));
      Long long0 = new Long((-1885));
      HashMap<JSONArray, Long> hashMap2 = new HashMap<JSONArray, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put(".", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      jSONArray0.toJSONObject(jSONArray0);
      String string0 = JSONObject.valueToString(jSONArray0, 101, (-18603944));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      Long long0 = new Long(1579L);
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Long long1 = new Long(0L);
      hashMap1.put((Integer) null, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.keys();
      Float float0 = new Float((double) 1579L);
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.put(string0, (Object) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString((-1629), (-742));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(1852L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(70);
      Long long1 = new Long(1852L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(324.472);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("4", (Object) jSONArray0);
      jSONObject1.getJSONArray("4");
      StringWriter stringWriter0 = new StringWriter(61);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Short short0 = new Short((short)123);
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(1L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(341);
      Long long1 = new Long((-2112L));
      hashMap0.put(integer0, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("4", (Object) jSONArray0);
      String string0 = jSONObject1.toString((-480), 1263);
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(1852L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(70);
      Long long1 = new Long(1852L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(324.472);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("4", (Object) jSONArray0);
      // Undeclared exception!
      jSONObject1.toString((-480), 8192);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Long long0 = new Long(0L);
      hashMap0.put((Integer) null, long0);
      Integer integer0 = new Integer(56);
      hashMap0.put(integer0, (Long) null);
      hashMap0.put((Integer) null, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONObject0.toString(1533, 1533);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 12);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getString("6[\"9P?%'3O!$ghnM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6[\\\"9P?%'3O!$ghnM\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Gs 5G-[V,E<", 0.0);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("b[Dix|QT?24`eTAw", object0);
      jSONObject0.optInt("Gs 5G-[V,E<", 6);
      String string0 = JSONObject.valueToString("Q~[opa?)");
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.154327141142871
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-438.3482823263711));
      assertEquals("-438.3482823263711", string0);
      
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("-438.3482823263711");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short.toUnsignedInt((short)55);
      Object object1 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
      
      Object object2 = JSONObject.NULL;
      Boolean boolean1 = Boolean.valueOf(true);
      jSONObject0.putOpt((String) null, boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.quote("T\n");
      assertEquals("\"T\\n\"", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = new Float(3942.629990304298);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", 8192);
      jSONObject1.getInt("is");
      JSONObject.quote("to");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("dzNY1%(2ZksRk'CGbQ");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("a\")J_%bCo=\f<{W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of a\")J_%bCo=\f<{W
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("issum", (Object) "issum");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      linkedList0.add(jSONArray0);
      linkedList0.add(jSONArray0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.getInt("issum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issum\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, "iscompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("des", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      String[] stringArray0 = new String[1];
      String string1 = "";
      stringArray0[0] = "";
      String string2 = "L~gM0ra.\\8a,~&";
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("L~gM0ra.8a,~&", object0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      String string3 = "";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Z.e]jc:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {Z.e]jc:
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "getrotateRight";
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, 1449);
      int int0 = jSONObject0.optInt("wLt)u]EJZ+}", (-3196));
      assertEquals((-3196), int0);
      
      double double0 = jSONObject0.optDouble("wLt)u]EJZ+}", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = " q$j&";
      jSONObject0.optInt("Expected a ':' after a key", 92);
      try { 
        Byte.decode(" q$j&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" q$j&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.080215658890216
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a Boolean'");
      assertEquals("\"] is not a Boolean'\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Long long0 = new Long((-9L));
      Integer integer0 = new Integer(32);
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(3);
      hashMap0.put(integer0, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(4761, (-874));
      assertNotNull(string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      Integer integer0 = new Integer(13);
      hashMap0.put((JSONObject) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(12, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("issum", (Object) "issum");
      try { 
        jSONObject1.getLong("issum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issum\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.add(jSONArray0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject0.put("", true);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("com");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of com
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("/gBjOh26J|xyU*I", 94L);
      assertEquals(94L, long0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      BiFunction<Object, Long, Long> biFunction0 = (BiFunction<Object, Long, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jSONObject0.optLong("J`\"T[ M", 0L);
      hashMap0.replaceAll(biFunction0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject.getNames((Object) jSONArray1);
      String string0 = "getrotateRight";
      try { 
        jSONArray0.get(128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[128] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("java.lang.Long@00000000030");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@00000000030\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("PCLd/^?W6H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"PCLd/^?W6H\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = JSONObject.quote(";P8U[D/");
      assertEquals("\";P8U[D/\"", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("j%u| A!)", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      String string0 = JSONObject.valueToString(byte0, (-868), (-868));
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("uD=EOxr~w%n`@QdR");
      String string0 = JSONObject.valueToString(boolean0, 8, 12);
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 178, 13);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.quote("'/Ron");
      assertEquals("\"'/Ron\"", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer integer0 = new Integer(119);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "C]+vw0+37lKrlm=";
      jSONObject0.put("C]+vw0+37lKrlm=", (Object) jSONObject0);
      try { 
        jSONObject0.getBoolean("C]+vw0+37lKrlm=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C]+vw0+37lKrlm=\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject.testValidity("log");
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a Boolean.");
      assertEquals("\"] is not a Boolean.\"", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "CyQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", (-1268L));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      HashMap<Long, JSONArray> hashMap1 = new HashMap<Long, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.put((String) null, 4774L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Byte byte0 = new Byte((byte)13);
      hashMap0.put("ke", byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("ke", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("no");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"no\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(116L);
      jSONObject0.put("H.4JbS<..JQB*", (Object) long0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = jSONObject0.get("H.4JbS<..JQB*");
      assertEquals(116L, object0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      String string0 = jSONObject0.optString("in", "getreplaceAll");
      assertEquals("getreplaceAll", string0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Boolean, Integer> hashMap2 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.keys();
      jSONObject1.optString("'3F-myT", "");
      JSONArray jSONArray1 = new JSONArray();
      try { 
        jSONArray1.getJSONObject(12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[12] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(105, 105);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.080215658890216
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a Boolean'");
      assertEquals("\"] is not a Boolean'\"", string0);
      
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a Boolean'";
      stringArray0[1] = "\"java.lang.Object@0000000001\"";
      stringArray0[2] = "\"java.lang.Object@0000000001\"";
      JSONObject jSONObject0 = new JSONObject("\"] is not a Boolean'\"", stringArray0);
      String string1 = jSONObject0.toString(46);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("[]");
      assertEquals("", string0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble(" at character ");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.opt("=\"{|");
      Object object0 = new Object();
      byte byte0 = (byte)112;
      Byte byte1 = new Byte((byte)112);
      Long long0 = new Long(2108L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }
}
