/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 08 19:00:42 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{0(pGGbl=.%a&(o??");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 17 of {0(pGGbl=.%a&(o??
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{0(pGGbl6%a&(o??");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 16 of {0(pGGbl6%a&(o??
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", "true");
      Object object0 = jSONObject1.remove("true");
      assertEquals("true", object0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("[]", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float((double) 32);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong("JSONArray initial value should be a string or collection or array.", (long) 32);
      assertEquals(32L, long0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("wa", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("-465.83", (-1L));
      long long0 = jSONObject0.optLong("-465.83");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Collection) linkedList0);
      jSONObject1.optJSONArray("] is not a number.");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("sub", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float((double) 32);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.optInt("r)RU2e)?", 61);
      assertEquals(3, jSONObject0.length());
      assertEquals(61, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("FgoBE", (-1L));
      int int0 = jSONObject0.optInt("FgoBE");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("gettoArray", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("get", 1108.76383);
      assertEquals(1108.76383, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gGrX(", 0L);
      double double0 = jSONObject0.optDouble("gGrX(");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("put", (-426L));
      double double0 = jSONObject0.optDouble("put");
      assertEquals((-426.0), double0, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("MJ'I9 0cPire", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("", (long) 46);
      Object object0 = jSONObject1.opt("");
      assertEquals(2, jSONObject0.length());
      assertEquals(46L, object0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = new Float((double) 32);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-2362.41184018741", 191);
      boolean boolean0 = jSONObject0.has("-2362.41184018741");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("getparseFloat", (Collection) linkedList0);
      String string0 = jSONObject1.getString("getparseFloat");
      assertNotNull(string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gGrX(", 0L);
      long long0 = jSONObject0.getLong("gGrX(");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Integer integer0 = new Integer(414);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("de", (Object) integer0);
      long long0 = jSONObject0.getLong("de");
      assertEquals(414L, long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6354502583387052
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("isspliterator", (Map) null);
      jSONObject0.getJSONObject("isspliterator");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gGrX(", 0L);
      int int0 = jSONObject0.getInt("gGrX(");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5733163646283495
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("w/RlzenR+N.wxb", (-1.0));
      int int0 = jSONObject1.getInt("w/RlzenR+N.wxb");
      assertEquals(2, jSONObject0.length());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = Long.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (Object) long0);
      double double0 = jSONObject1.getDouble("A JSONObject text must end with '}'");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 1352, 1352);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.8239592165010823
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(4052, 2817);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 113, 15);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5857708352080968
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = new Integer((-8335702));
      Long long0 = new Long((-8335702));
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      jSONObject0.put("java.lang.Long@00000000040", object0);
      // Undeclared exception!
      jSONObject0.toString(2969, 8448);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      hashMap0.put((Integer) null, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(46, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8377933025778024
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "(9eQd_pa]Hu7A0beW'");
      // Undeclared exception!
      jSONObject0.toString(8448);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer((-8335702));
      Long long0 = new Long(1607L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(linkedList0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-575), (-575));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = JSONObject.quote("\"</Mh<eb`nZ:d;\"g");
      assertEquals("\"\\\"<\\/Mh<eb`nZ:d;\\\"g\"", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.quote("b`;&$/IM=upd");
      assertEquals("\"b`;&$/IM=upd\"", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("sVi", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter((byte)18);
      jSONObject0.putOpt("\"2e+$($9'i16_A+3&", stringWriter0);
      String string0 = jSONObject0.optString("\"2e+$($9'i16_A+3&", "[");
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5832584594204766
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = Float.valueOf((float) (-2279));
      jSONObject0.accumulate("JSONArray initial value should be a string or collection or array.", float0);
      double double0 = jSONObject0.optDouble("JSONArray initial value should be a string or collection or array.", (double) 666);
      assertEquals(1, jSONObject0.length());
      assertEquals((-2279.0), double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("\"=/UCceGv*\"");
      assertNull(object0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5538483415669473
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("sVdi", "sVdi");
      try { 
        jSONObject0.getBoolean("sVdi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sVdi\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Bp", (Object) "Bp");
      Object object0 = jSONObject1.get("Bp");
      assertEquals("Bp", object0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("5d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5d\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{0(pG/6l=a&(o??");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {0(pG/6l=a&(o??
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("\"\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("0", (-2025));
      assertEquals((-2025), int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("true");
      assertNull(object0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3826070734809082
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7995583651098008
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      Integer integer0 = new Integer((-8335702));
      Long long0 = new Long(1607L);
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      hashMap1.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("isset", (Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter(3);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6859646722371444
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("S/X`oB#", "S/X`oB#");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 1865, (-1));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = JSONObject.valueToString(hashMap0, 103, (-272));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 80, (-2712));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "=/UCceGv*");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7870020467612302
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = new Float((double) 32);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(47, 744);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(1403);
      hashMap0.put(integer0, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(113, 50);
      assertNotNull(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      jSONArray0.put((Map) hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("aQ'Sm<*3C</134");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"aQ'Sm<*3C<\\/134\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("=ss(`7f1D", (Map) hashMap0);
      String string0 = jSONObject1.optString("=ss(`7f1D");
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(1787);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("b");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer(3);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.append("<~LIN}f,ld", "<~LIN}f,ld");
      jSONObject1.optJSONArray("<~LIN}f,ld");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("(jlZ}EX");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gGrX(", 1741L);
      double double0 = jSONObject1.optDouble("gGrX(");
      assertEquals(1741.0, double0, 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.9685308483952255
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = Float.valueOf(2620.878F);
      JSONObject.numberToString(float0);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Float@0000000001");
      Float float1 = new Float(822.8F);
      JSONObject jSONObject1 = jSONObject0.put("@0N=sBso>4~n8~=:f\"", (Object) float1);
      jSONObject1.toString(3107, (-62164681));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-856));
      hashMap0.put(integer0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float((double) 32);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5751765904639274
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer((-1114));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONException", integer0);
      jSONObject1.getLong("wheel.json.JSONException");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", "true");
      try { 
        jSONObject1.getLong("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("isvalueOf", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("isvalueOf");
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("true", "true");
      try { 
        jSONObject0.getJSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.631345420808597
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-2356.933969478523));
      JSONObject jSONObject1 = jSONObject0.append("\b", double0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("\b");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.3961001489141087
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("des", 0.0);
      try { 
        jSONObject0.getJSONArray("des");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"des\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("P?6^,OI7*`yea4M5:", 666);
      int int0 = jSONObject0.getInt("P?6^,OI7*`yea4M5:");
      assertEquals(666, int0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.6113482429121737
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-2356.933969478523));
      JSONObject jSONObject1 = jSONObject0.append("\b", double0);
      try { 
        jSONObject1.getInt("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Long long0 = Long.getLong("\f", 1L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("\f", (Object) long0);
      double double0 = jSONObject0.getDouble("\f");
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float((double) 32);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("B#J@", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble("B#J@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B#J@\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.3826070734809082
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)42);
      jSONObject0.put("?DzVo^muUyDY15o8[#", (Object) byte0);
      try { 
        jSONObject0.getBoolean("?DzVo^muUyDY15o8[#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?DzVo^muUyDY15o8[#\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{0(pG/6l=a&(o??", true);
      boolean boolean0 = jSONObject1.optBoolean("{0(pG/6l=a&(o??");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("B<p", (Object) "B<p");
      boolean boolean0 = jSONObject1.optBoolean("B<p");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2362.41184018741));
      assertEquals("-2362.41184018741", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("true", (Collection) linkedList0);
      jSONObject0.append("true", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", jSONObject0);
      Object object0 = new Object();
      try { 
        jSONObject1.append("true", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[true] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.4681399390162087
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("6I-?)", jSONArray0);
      jSONObject1.accumulate("6I-?)", jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("B<p", (Object) "B<p");
      Byte byte0 = new Byte((byte)60);
      jSONObject0.accumulate("B<p", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Boolean@0000000001", (Map) null);
      jSONObject1.optJSONObject("java.lang.Boolean@0000000001");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{0(pGG6l=a&(o??");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 15 of {0(pGG6l=a&(o??
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{lDCM=u,& DDl*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {lDCM=u,& DDl*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}E(j2.uskmLH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }E(j2.uskmLH
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-2356.933969478523));
      JSONObject jSONObject1 = jSONObject0.append("\b", double0);
      boolean boolean0 = jSONObject1.isNull("\b");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(69);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Float float0 = new Float((double) 32);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong("Expected '");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 10, 128);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float((double) 32);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(3, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 666);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("true", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("=ss(`7f1D");
      assertEquals("", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      boolean boolean0 = jSONObject0.isNull("kEo");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("[", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("in");
      assertFalse(boolean0);
  }
}
