/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 13:31:38 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5432101017654163
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-1308L));
      Range range1 = Range.of(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList1.add(range0);
      linkedList0.addFirst(range0);
      linkedList1.addFirst(range0);
      linkedList1.removeFirst();
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1308 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854774639L, 9223372036854774639L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.979856144737496
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775799L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 126L, 9223372036854775799L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9809696419139855
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775798L));
      Range range1 = Range.of((-9223372036854775798L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854775798L), (-9223372036854775798L));
      boolean boolean0 = range1.equals(range2);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(range2, range0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3268842301321655
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2852L), (-2852L));
      Range range1 = Range.ofLength(255L);
      range1.intersection(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9796434918932646
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      boolean boolean0 = range1.endsBefore(range0);
      boolean boolean1 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("$/E#keO5:yx*@{'K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.$/E#keO5:yx*@{'K
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1323906629485916
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(2147482478L);
      Range range1 = Range.of((-1056L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2850L), (-2850L));
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1170L, 1170L);
      Range range1 = Range.of(1170L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(2147483652L);
      Range range1 = Range.of(2147483652L, 2147483652L);
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Integer integer0 = new Integer(65535);
      Long long0 = new Long((-9223372036854775808L));
      range0.iterator();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.889123342973809
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-9223372036854775808L), long0);
      
      range0.getBegin(range_CoordinateSystem0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967296L, 9223372036854775803L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775804L, long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.54374483274675
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775798L));
      Range range1 = Range.of((-510L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      linkedList0.add(range0);
      linkedList0.addFirst(range0);
      linkedList0.addFirst(range1);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      linkedList2.removeFirst();
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertFalse(range0.equals((Object)range1));
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1485L, 9223372036854775803L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = new Long(9223372036854775803L);
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1486L, long1);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9985L, 9985L);
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.540818734019718
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertEquals((-2L), long0);
      
      Long long1 = new Long((-665L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-540L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2657L), (-540L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775784L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775784L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -49 would make range [9223372036854775784 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.793494183903136
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-140L), 32767L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-140L), long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775798L));
      Long long0 = new Long(129L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.addFirst(range0);
      Range range1 = linkedList0.removeFirst();
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.54396502412253
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-340L), 2147483516L);
      range0.equals((Object) null);
      Long long0 = new Long(1L);
      range0.equals(range_CoordinateSystem0);
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-339L), long1);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.isEmpty();
      linkedList0.push(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.38859239846556
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-543L), (-543L));
      Range range1 = Range.of((-543L), (-543L));
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-543L), (-543L));
      boolean boolean0 = range1.intersects(range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9977L, 2147483647L);
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(9985L);
      Long long0 = new Long((-1289L));
      Long long1 = new Long(1959L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(191L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-540L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-656L), 32766L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775784L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1170L, 1233L);
      Range range1 = Range.of(2753L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 822L, 4294967331L);
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2850L), (-2850L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2026738570161886
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 54L;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 54L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      long long1 = (-599L);
      Consumer<Long> consumer0 = null;
      Range range1 = Range.of(range_CoordinateSystem1, 806L, 806L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1170L, 9974L);
      Range range1 = Range.of(9974L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1170L, 1170L);
      Range range1 = Range.of(1170L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9977L, 9977L);
      Object object0 = new Object();
      range0.equals(object0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 166L, 3038L);
      Range range1 = Range.of(166L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(614L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 1170L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-540L));
      range0.isEmpty();
      range0.getEnd();
      Long long0 = new Long((-540L));
      Long long1 = new Long((-296L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      linkedList0.add(range1);
      range1.isEmpty();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add((Range) null);
      // Undeclared exception!
      try { 
        range1.complementFrom(linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.442861692100194
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 117L, 9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      assertTrue(linkedList0.contains(range0));
      
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483642L, 2147483642L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483642L, (-2990L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.of((-1617L), (-1617L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 117L, 9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(2147483646L, 9223372036854775611L);
      boolean boolean0 = range0.equals(" into a Range");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967283L, 9223372036854775803L);
      range_Builder0.build();
      String string0 = "DiKYCQI.F|i~A";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("DiKYCQI.F|i~A", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse DiKYCQI.F|i~A into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0600949885294986
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Long long0 = new Long(1049L);
      Range range1 = Range.of((-635L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -635 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1170L, 1170L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.268991599937623
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-1L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 54L);
      range0.split(54L);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5678136347030915
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775803L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long(2147482070L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(4619L);
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.split(4619L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-340L);
      Range range0 = Range.of((-340L), 2147483516L);
      range0.equals((Object) null);
      range0.getBegin(range_CoordinateSystem0);
      long long1 = (-599L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-540L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3880020896497194
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.of((-14L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      range0.intersects(range1);
      Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B");
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.63411680546083
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.startsBefore(range0);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(9223372036854775669L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.spliterator();
      range0.equals("max cluster distance can not be negBtive");
      List<Range> list0 = range0.split(1192L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list1.size());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = (-541L);
      Range range0 = Range.of((-541L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(65282L);
      long long0 = range0.getBegin();
      assertEquals(65282L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.981257014751505
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-540L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-587L), 117L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-793L), (-540L));
      range0.equals(range2);
      // Undeclared exception!
      try { 
        range0.split((-793L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.889123342973809
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.isEmpty();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-1L), long0);
      
      Long long1 = new Long(127L);
      boolean boolean0 = range0.equals(long1);
      boolean boolean1 = range0.isEmpty();
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      boolean boolean2 = range0.equals((Object) null);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(1L);
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      String string1 = "B30.;;2K4|";
      // Undeclared exception!
      try { 
        Range.parseRange("B30.;;2K4|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse B30.;;2K4| into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 117L, 117L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.5696376201112083
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1652220L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 1652219 ]/0B", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.9785775358639506
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-423L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals("HV:;6.Zvn}AK%");
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.9802337525917397
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-917L), (-917L));
      long long0 = 1L;
      range0.split(1L);
      long long1 = (-484L);
      // Undeclared exception!
      try { 
        Range.of(1L, (-484L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(9223372036854774044L);
      List<Range> list0 = range0.split(9223372036854774044L);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.intersection(range1);
      assertTrue(range1.isEmpty());
      
      range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.4421968267000724
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.of(9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList1.add(range0);
      Range range1 = Range.ofLength(9223372036854775807L);
      linkedList1.addFirst(range1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.addFirst(range0);
      linkedList2.removeFirst();
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.isEmpty();
      range0.getEnd();
      Long long0 = new Long((-665L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.isEmpty();
      linkedList0.push(range0);
      linkedList0.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 2998L, 65535L);
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3320L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1170L, 9223372036854775681L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775799L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775799 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(65282L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(9223372036854775749L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-540L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-1060L));
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split((-1060L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.691342224395043
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-635L));
      Range range1 = Range.of((-995L));
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.0574866708943733
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = (-1980L);
      long long1 = 1731L;
      Range range0 = Range.of((-1980L), 1731L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("[ -1979 .. 1732 ]/RB", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.1342029606832194
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(9977L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ 1 .. 9977 ]/RB", range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("oicZWc!6w,|o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse oicZWc!6w,|o into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.8655893453448336
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1732L), 2147483647L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ -1733 .. 2147483646 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, (-1732L), (-1732L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2120L);
      Range range1 = Range.ofLength(2120L);
      range_Builder0.contractBegin(0L);
      String string1 = range1.toString(range_CoordinateSystem2);
      assertEquals("[ 1 .. 2120 ]/RB", string1);
      
      range0.iterator();
      range_Builder0.expandBegin((-1732L));
      range_Builder1.contractBegin(251L);
      Range range2 = range_Builder1.build();
      range0.getBegin();
      range0.isEmpty();
      range_Builder1.shift((-1732L));
      range_Builder0.expandEnd(25L);
      Range.parseRange("[ 1 .. 2120 ]/RB", range_CoordinateSystem0);
      range1.getBegin();
      range1.equals(range_CoordinateSystem0);
      range1.iterator();
      range_CoordinateSystem1.getAbbreviatedName();
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = (-540L);
      Range range0 = Range.of((-540L));
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.ofLength((-540L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(191L);
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.20423340720908
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-540L));
      Range range1 = Range.of((-1801L));
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range0.complement(range2);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("[ 0 .. 9223372036854775807 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.20551213003622
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2850L), (-2850L));
      Range range1 = Range.of(range_CoordinateSystem0, (-2850L), (-2850L));
      List<Range> list0 = range0.complement(range1);
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals("HV:;6.Zvn}AK%");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      long long0 = range0.getLength();
      assertEquals(255L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.205019898071907
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Long long0 = new Long(1053L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.startsBefore(range0);
      linkedList0.addFirst(range0);
      linkedList0.add(range0);
      Range range1 = linkedList0.removeFirst();
      range1.complement(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.9847598931105725
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(839L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.ofLength(4817L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1481L, 1481L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-540L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Long long0 = new Long((-2147483648L));
      boolean boolean0 = range0.equals("d`a#4m}3}k1nJb,=>");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-1L);
      range_Builder0.expandEnd((-1L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 739L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(739L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775798L, 9223372036854775798L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(65535L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(9223372036854775798L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.8904325862312064
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(4650L);
      range0.getBegin();
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 4650L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.7974304538187877
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 3320L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 255L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.892740633623113
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.ofLength(536L);
      Range range1 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      range0.startsBefore(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.0600949885294986
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 4650L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.8928447677478655
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(range_CoordinateSystem0, (-4577L), (-1L));
      range0.intersects(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(32767L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775798L));
      Long long0 = new Long(129L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.intersects(range0);
      linkedList0.addFirst(range0);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = (-2821L);
      Range range0 = Range.of((-2821L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.5696376201112083
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = 65535L;
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range range0 = range_Builder0.build();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Long long0 = new Long(182L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.addFirst((Range) null);
      Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-1L));
      boolean boolean0 = range0.equals("");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.2745180899177098
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-196L), (-196L));
      range_Builder0.copy();
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, (-197L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.687420655767592
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-128L));
      String string0 = range0.toString();
      assertEquals("[ -128 .. -128 ]/0B", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.796560996608503
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = (-2821L);
      Range range0 = Range.of((-126L));
      Range range1 = Range.of((-11L));
      range0.isSubRangeOf(range1);
      String string0 = "^mK1(t^T,TG+s\"yvOa";
      // Undeclared exception!
      try { 
        Range.parseRange("JHPV{M.y|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse JHPV{M.y| into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-413L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-413L), (-413L));
      String string0 = "?F(A':xoH&XNk6dQ{";
      // Undeclared exception!
      try { 
        Range.parseRange("?F(A':xoH&XNk6dQ{", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ?F(A':xoH&XNk6dQ{ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.8936217685248664
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Long long0 = new Long(65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(335L);
      linkedList0.addFirst(range0);
      Range range1 = linkedList0.removeFirst();
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      range0.complementFrom(linkedList0);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.979856144737496
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775799L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 126L, 9223372036854775799L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2694L, 2694L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(2694L, long0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(42L);
      range_Builder0.shift(42L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.3305955430090957
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-543L), (-543L));
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.796091586500539
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals("[ 1 .. 0 ]/RB", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(5426L);
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.2049446110400983
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.addFirst(range0);
      Range range1 = linkedList0.removeFirst();
      List<Range> list0 = range1.complementFrom(linkedList0);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.7969671154659554
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-541L));
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(0L);
      linkedList0.add(range0);
      linkedList0.addFirst(range0);
      Range range1 = linkedList0.removeFirst();
      List<Range> list0 = range1.complementFrom(linkedList0);
      assertEquals(1, list0.size());
      
      String string0 = range1.toString();
      assertTrue(range1.isEmpty());
      assertEquals("[ 0 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of((-2821L));
      range0.isSubRangeOf(range0);
      Long long0 = new Long(2733L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775799L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of(1049L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "HVB!.P?UUN,3Dad_*";
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.Builder range_Builder1 = new Range.Builder(1L);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long long0 = 117L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775798L));
      Long long0 = new Long(129L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.endsBefore(range0);
      linkedList0.addFirst(range0);
      Range range1 = linkedList0.removeFirst();
      List<Range> list0 = range1.complementFrom(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-540L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.of((-2147483627L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedList0.add(range0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1540L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775749L, (-3151L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3151 would make range [9223372036854775749 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-2147483648L);
      range_Builder0.expandEnd((-2147483648L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.copy();
      range_Builder0.contractEnd(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 173
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(42L);
      range_Builder0.shift(42L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 174
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(5426L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$CoordinateSystem", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$CoordinateSystem into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 175
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 176
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-2162L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("6}Y2mNyf=Q", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 6}Y2mNyf=Q into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 177
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("ik!B#N", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ik!B#N into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 178
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775803L, 4294967283L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 179
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775803L, (-1334L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1334 would make range [9223372036854775803 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
