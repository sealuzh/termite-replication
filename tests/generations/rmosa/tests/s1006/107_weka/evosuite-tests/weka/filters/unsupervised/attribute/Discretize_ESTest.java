/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 04:52:59 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("5;6v}X");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("Specifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)", arrayList0, 3);
      discretize0.setDesiredWeightOfInstancesPerInterval(Double.POSITIVE_INFINITY);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2145371567));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("$Revision: 8964 $");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 2);
      discretize0.setDesiredWeightOfInstancesPerInterval(1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$Revision: 8964 $";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "-R";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -R option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DefaultCols = "&U.k";
      Attribute attribute0 = new Attribute("&U.k");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "string";
      stringArray0[1] = "string";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at &U.k
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("#=");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
      
      discretize0.setOutputFormat();
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("d");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setInvertSelection(true);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 1);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'd' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("D+g;wz84O3^FU*Umg)u");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 2);
      discretize0.setDesiredWeightOfInstancesPerInterval(0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("    result = new Instance(1.0, values);\n");
      arrayList0.add(attribute0);
      discretize0.setInvertSelection(true);
      Instances instances0 = new Instances("relational", arrayList0, 3685);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("Q}xP0iLGZ![");
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-3284.0256288586124);
      discretize0.setIgnoreClass(false);
      discretize0.setUseEqualFrequency(true);
      discretize0.invertSelectionTipText();
      discretize0.setOutputFormat();
      discretize0.getUseEqualFrequency();
      discretize0.getCutPoints((-3));
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("Y1DcGqx", (-2004318069));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 4);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.getBinRangesString(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Px@4X_";
      stringArray0[1] = "-D";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "@end";
      stringArray0[6] = "numeric";
      stringArray0[7] = "Y1DcGqx";
      stringArray0[8] = "Y1DcGqx";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setUseEqualFrequency(true);
      Attribute attribute0 = new Attribute("Y1DcGqx", (-2004318076));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.getBinRangesString(0);
      discretize0.getBinRangesString(0);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("UhY", 1);
      Attribute attribute1 = new Attribute("mt+8bQrITg<!/o^q1", 2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("Class value (internal format): ", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      boolean boolean0 = discretize0.input((Instance) null);
      assertFalse(discretize0.isNewBatch());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("Use equal-frequency instead of equal-width discretization.");
      discretize0.setInvertSelection(true);
      discretize0.getCapabilities();
      SystemInUtil.addInputLine(".");
      discretize0.m_FindNumBins = true;
      discretize0.findNumBinsTipText();
      discretize0.getInvertSelection();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      
      Attribute attribute0 = new Attribute("Uhr", 57);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.equalsMsg("@attribute");
      discretize0.m_NumBins = 10067;
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 10067);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.getRevision();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.m_NumBins = 10098;
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      discretize0.findNumBins(9990);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("UhY", 1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.m_NumBins = 0;
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(385);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.m_NumBins = 0;
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      Attribute attribute0 = new Attribute("QI");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setBins((-1073741824));
      discretize0.getOptions();
      discretize0.getCapabilities();
      discretize0.getAttributeIndices();
      int int0 = discretize0.getBins();
      assertEquals((-1073741824), int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      String[] stringArray0 = discretize0.getOptions();
      try { 
        Filter.batchFilterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, arrayList1, protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("2->wEpu!|ML$6{;$Q", arrayList0, 10105);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-2916));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.getOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.m_NumBins = 10098;
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      discretize0.calculateCutPoints();
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SystemInUtil.addInputLine("INFO");
      Discretize discretize0 = new Discretize("The two datasets have different headers:");
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("#=");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("    result = new Instance(1.0, values);\n");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("(1DcGqx", (-2004318069));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 4);
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("(1DcGqx", (-2004318069));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 4);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.findNumBins(0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("UhY", 16);
      Attribute attribute1 = attribute0.copy("[Tp");
      attribute1.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("@end", arrayList0, 16);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.m_NumBins = 10097;
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 63.213861496;
      discretize0.m_DefaultCols = "4!";
      Attribute attribute0 = new Attribute("4!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.m_NumBins = 10098;
      arrayList0.add(attribute0);
      discretize0.m_FindNumBins = true;
      discretize0.getBinRangesString(7);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(63.213861496, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("#=");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("+O~C/O}_ eO5PGZZH", linkedList0, 3);
      arrayList1.add(attribute1);
      Instances instances0 = new Instances("relational", arrayList1, 9978);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-3147));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3147
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      boolean boolean0 = discretize0.getFindNumBins();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("Y1DcGqx", (-2004318069));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 4);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("+soa>\"r@c|y%h}-", 3);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      attribute0.getRevision();
      Instances instances0 = new Instances("string", arrayList0, 2);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      binarySparseInstance0.setMissing(attribute0);
      discretize0.convertInstance(binarySparseInstance0);
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7,]8jcV~00h");
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("_ui)F#", 9974);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("relational", arrayList0, 4);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      discretize0.calculateCutPoints();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("#=");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("#=", arrayList0, 2);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = "integer";
      stringArray0[2] = "@end";
      stringArray0[3] = "relational";
      stringArray0[4] = "@relation";
      stringArray0[5] = "real";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("* Returns only the classnames and what filter it is based on.", arrayList0);
      Attribute attribute1 = attribute0.copy("L>OyWB]m`,K[x\"q");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute1);
      Instances instances0 = new Instances("Shallow copy: ", arrayList1, 1);
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(64);
      binarySparseInstance0.setDataset(instances0);
      binarySparseInstance0.setMissing(attribute0);
      discretize0.convertInstance(binarySparseInstance0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("(1DcGqx", (-2004318069));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 4);
      discretize0.setInputFormat(instances0);
      discretize0.getCapabilities();
      discretize0.batchFinished();
      discretize0.makeBinaryTipText();
      discretize0.getInvertSelection();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      discretize0.convertInstance(sparseInstance0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("m5ZTIkcW", (List<String>) null, (-1952257859));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 70);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(60);
      binarySparseInstance0.setMissing(attribute0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.StringLocator", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("Csoqa>\"r@c|y%h}-", (-41));
      Attribute attribute1 = new Attribute("real", (-41));
      ArrayList<String> arrayList0 = new ArrayList<String>(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute2 = new Attribute((String) null, arrayList0, protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("integer", arrayList1, 1);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("$Zj`VSz", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList2);
      Attribute attribute0 = new Attribute("tD`$j\"7u", list0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 70);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'tD`$j\"7u' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = new Attribute("#=");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 3);
      Discretize discretize0 = new Discretize("@attribute");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at @attribute
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-31.249966);
      doubleArray1[2] = (-2094.599159);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = (-31.249966);
      discretize0.m_CutPoints = doubleArray0;
      doubleArray2[4] = (-2094.599159);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-758));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -758
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.618477407000916
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      discretize0.getCapabilities();
      discretize0.getAttributeIndices();
      assertTrue(discretize0.getUseEqualFrequency());
      
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.getCapabilities();
      discretize0.getAttributeIndices();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      Attribute attribute0 = new Attribute("QI");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList0, 0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("^BY;U,q~s!.:4k^8!B", arrayList0, 1777);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "string";
      stringArray0[1] = ">JpI;MNIhwz";
      stringArray0[2] = "relational";
      stringArray0[3] = "@end";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "-R";
      stringArray0[6] = ".arff";
      stringArray0[7] = "date";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: string >JpI;MNIhwz relational @end @attribute date 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.getCapabilities();
      discretize0.getAttributeIndices();
      discretize0.listOptions();
      // Undeclared exception!
      try { 
        range0.getSelection();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for range
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(4, stringArray0.length);
      
      discretize0.getCapabilities();
      discretize0.getAttributeIndices();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      intArray0[0] = (-14);
      intArray0[1] = 1;
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      boolean boolean0 = discretize0.m_UseBinNumbers;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = (-2004318069);
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[6];
      doubleArray0[1] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DefaultCols = "@O4f'";
      discretize0.m_MakeBinary = true;
      discretize0.getMakeBinary();
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize("8");
      discretize0.getBins();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-689));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 105);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = true;
      discretize0.m_MakeBinary = true;
      Attribute attribute0 = new Attribute("QI");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.toString();
      Instances instances0 = new Instances("relational", arrayList0, 0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = true;
      discretize0.setMakeBinary(true);
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.6183972463477247
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L>OyWB]m`,K[x\"q");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MultiFilter multiFilter0 = new MultiFilter();
      discretize0.setOptions((String[]) null);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SystemInUtil.addInputLine("-B");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-B";
      stringArray0[1] = "-B";
      stringArray0[2] = "-B";
      stringArray0[3] = "Shallow copy with dataset set: ";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 63.213861496;
      discretize0.m_DefaultCols = " ";
      Attribute attribute0 = new Attribute("4!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.m_NumBins = 10098;
      arrayList0.add(attribute0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-M";
      stringArray0[1] = "date";
      stringArray0[2] = "real";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("Copy is the same as original: ");
      discretize0.m_MakeBinary = true;
      Attribute attribute0 = new Attribute("&4I");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }
}
