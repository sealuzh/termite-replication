/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 04:43:16 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.output.prediction.HTML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.MakeDensityBasedClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.EuclideanDistance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      RandomForest randomForest0 = new RandomForest();
      randomForest0.getCapabilities();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(randomForest0);
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("$N]%IAom#%!f 7w0");
      Instances instances1 = testInstances1.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      testInstances1.getRevision();
      instances0.remove((Object) null);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-4511.492009), doubleArray0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Random.setNextRandom(0);
      // Undeclared exception!
      try { 
        evaluation0.falseNegativeRate(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1000039501699495
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.useNoPriors();
      double double1 = evaluation0.m_SumPriorEntropy;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.m_WithClass;
      J48 j48_0 = new J48();
      SGD sGD0 = new SGD();
      Evaluation evaluation2 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation2.toClassDetailsString();
      double[][] doubleArray0 = evaluation2.confusionMatrix();
      evaluation0.meanAbsoluteError();
      evaluation2.precision(100);
      evaluation1.SFMeanEntropyGain();
      evaluation1.priorEntropy();
      evaluation2.evaluateModel((Classifier) sGD0, instances0, (Object[]) doubleArray0);
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'o';
      charArray0[2] = 'Z';
      charArray0[3] = 'F';
      charArray0[4] = 'w';
      charArray0[5] = '';
      charArray0[6] = '1';
      charArray0[7] = '@';
      evaluation0.num2ShortID(100, charArray0, 0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(77.9878, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instances0.equalHeaders(instances1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-116.0), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.setPriors(instances0);
      evaluation0.correlationCoefficient();
      // Undeclared exception!
      try { 
        evaluation0.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.m_TotalCoverage;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances2 = new Instances(instances0, 364);
      double double1 = evaluation0.m_ClassPriorsSum;
      evaluation0.SFEntropyGain();
      capabilities1.supportsMaybe(capabilities0);
      double double2 = evaluation0.m_TotalCost;
      double double3 = evaluation0.m_TotalSizeOfRegions;
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'O';
      charArray0[2] = '';
      charArray0[3] = 'p';
      charArray0[4] = '>';
      charArray0[5] = '*';
      charArray0[6] = '#';
      charArray0[7] = 'j';
      evaluation0.num2ShortID(61, charArray0, 1202);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumInstancesRelational(8);
      testInstances0.setNumInstancesRelational(8);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NoPriors = true;
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.toSummaryString(true);
      evaluation0.setPriors(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setNumRelationalNominalValues((-1));
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 1.1000000014901161;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1151.51754162);
      DenseInstance denseInstance0 = new DenseInstance(3907);
      instances0.add((Instance) denseInstance0);
      evaluation0.weightedFalseNegativeRate();
      testInstances1.setNumInstancesRelational((-1));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.unweightedMacroFmeasure();
      evaluation1.weightedTrueNegativeRate();
      evaluation1.KBInformation();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.recall((-2));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumInstances(48);
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.areaUnderROC(4035);
      evaluation0.SFMeanSchemeEntropy();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      evaluation0.SFPriorEntropy();
      evaluation0.rootRelativeSquaredError();
      try { 
        evaluation0.evaluateModel((Classifier) linearRegression0, instances1, (Object[]) linearRegression0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instances0.equalHeaders(instances1);
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances2 = textDirectoryLoader0.getStructure();
      evaluation0.setPriors(instances2);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-116.0);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray1, 357913932, (-2373.7608));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 357913932
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4942528735632184
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instances0.equalHeaders(instances1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-2);
      JSONLoader jSONLoader0 = new JSONLoader();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.setPriors(instances1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstances(1187);
      TestInstances testInstances1 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      double[] doubleArray0 = new double[6];
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, sparseInstance0, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4948453608247423
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.addNumericTrainClass(2, 22.0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      MockFile mockFile0 = new MockFile("@data");
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate((String) null);
      testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(22.0, doubleArray0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Random.setNextRandom((-631));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      textDirectoryLoader0.setOutputFilename(true);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.m_SumPriorSqrErr;
      evaluation0.KBMeanInformation();
      evaluation0.pctCorrect();
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      evaluation0.falseNegativeRate(8);
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'T';
      charArray0[2] = ']';
      charArray0[3] = '#';
      charArray0[4] = '<';
      charArray0[5] = 'G';
      charArray0[6] = 'm';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, 10021);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.addNumericTrainClass(2, 22.0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      MockFile mockFile0 = new MockFile("@data");
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances1.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instances0.equalHeaders(instances1);
      double[] doubleArray0 = new double[4];
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateMargins(doubleArray0, 1, 2);
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instances0.equalHeaders(instances1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-2);
      JSONLoader jSONLoader0 = new JSONLoader();
      MockRandom mockRandom0 = new MockRandom((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      testInstances1.setNumInstancesRelational((-1));
      instances0.clear();
      testInstances0.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate((String) null);
      testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      testInstances0.getRevision();
      OneR oneR0 = new OneR();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) oneR0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances1.generate(".dat");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRevision();
      Instances instances0 = testInstances0.generate("-url");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte) (-62));
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(byteArrayInputStream0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnce(4.9E-324, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.toClassDetailsString("@relation");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("newNominalRule");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "   *\n");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LMT lMT0 = new LMT();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("newNominalRule");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      costSensitiveClassifier0.getOptions();
      try { 
        Evaluation.handleCostOption("newNominalRule", 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.addNumericTrainClass(2, 22.0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      MockFile mockFile0 = new MockFile("@data");
      MockFile mockFile1 = new MockFile("   * @return a string describing the classifier\n", "Fs[qjK");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".dat";
      testInstances0.setOptions(stringArray0);
      testInstances0.setNumDate(0);
      testInstances1.generate();
      // Undeclared exception!
      try { 
        evaluation0.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      TestInstances testInstances2 = new TestInstances();
      testInstances2.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      MockRandom mockRandom0 = new MockRandom(0L);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      PART pART0 = new PART();
      try { 
        evaluation0.crossValidateModel((Classifier) pART0, instances0, 5038, (java.util.Random) mockRandom0, (Object[]) testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7535441910889102
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = 22.0;
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRevision();
      Instances instances0 = testInstances0.generate("-rl");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      Random.setNextRandom((-1));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.falseNegativeRate(1);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.numFalsePositives((-2290));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumInstances(48);
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation1.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-url");
      testInstances0.setNumInstancesRelational(1864);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 2997;
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      intArray0[4] = (-2);
      intArray0[5] = (-1);
      intArray0[6] = (-2193);
      intArray0[7] = 1864;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-934.71912), intArray0, 9);
      try { 
        evaluation0.evaluateModelOnce(0.3, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 0.07500000298023224;
      doubleArray0[2] = 1815.41;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.07500000298023224, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.updateStatsForPredictor(0.07500000298023224, binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumInstances(48);
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.areaUnderROC(4035);
      evaluation0.SFMeanSchemeEntropy();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      evaluation0.SFPriorEntropy();
      evaluation0.correlationCoefficient();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4035;
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(1746.0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getExponent");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.generate("@data");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumInstances(48);
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.areaUnderROC(4035);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-846.819991707567), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.addNumericTrainClass(2, 22.0);
      MockRandom mockRandom0 = new MockRandom((-1));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1);
      evaluation0.SFPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate((-1571));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumInstances(48);
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.areaUnderROC(4035);
      evaluation0.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumInstancesRelational(487);
      testInstances0.setNumInstancesRelational(487);
      Evaluation evaluation0 = new Evaluation(instances0);
      JSONLoader jSONLoader0 = new JSONLoader();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6982534265943698
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.getWords();
      Instances instances0 = testInstances1.generate(" ");
      testInstances1.setNumInstancesRelational((-1));
      testInstances0.setNumInstancesRelational((-1114383320));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      
      evaluation0.m_Unclassified = 3556.126573;
      evaluation0.toMatrixString(" ");
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(-0.0, double0, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom();
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("-c <class index>\n");
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      testInstances0.generate("R$N$8lk=XD");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate(" ");
      testInstances0.setNumInstancesRelational(17);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBRelativeInformation();
      double double0 = evaluation0.m_WithClass;
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) 17;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      evaluation0.numInstances();
      evaluation0.unweightedMacroFmeasure();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      assertEquals(0, sparseInstance0.numAttributes());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation(" ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom((-2670L));
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      try { 
        evaluation0.crossValidateModel((Classifier) filteredClassifier0, instances0, (-1727), (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      testInstances0.generate(".bsi");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate("Vz");
      testInstances1.setNumString((-5023));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_NumTrainClassVals = 782;
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.trueNegativeRate((-5023));
      evaluation1.avgCost();
      evaluation0.confusionMatrix();
      // Undeclared exception!
      try { 
        evaluation0.setNumericPriorsFromBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      testInstances0.setNumInstances(48);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopies(regressionByDiscretization0, 0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, sparseInstance0, 1931.0487);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LMT lMT0 = new LMT();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.generate("getMeasure");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanSquaredError();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 2307.518;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1077.132720791429, doubleArray0);
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      String string0 = evaluation0.toSummaryString("getMeasure", false);
      assertEquals("getMeasure\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.errorRate();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("newNominalRule");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double0, 0.01);
      
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumNominalValues((-1060150160));
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.errorRate();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.kappa();
      testInstances0.setNumInstancesRelational((-209));
      evaluation0.makeDistribution(Double.NaN);
      try { 
        CostMatrix.parseMatlab("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      capabilities0.getClassCapabilities();
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.useNoPriors();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.rootMeanSquaredError();
      evaluation0.numTruePositives(1);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1));
      MockRandom mockRandom0 = new MockRandom();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ".arff");
      mockRandom0.ints();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorAbsErr;
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      Capabilities capabilities0 = makeDensityBasedClusterer0.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities0.supportsMaybe(capabilities1);
      double double1 = evaluation0.m_TotalCost;
      double double2 = evaluation0.m_TotalSizeOfRegions;
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      OneR oneR0 = new OneR();
      testInstances0.getOptions();
      Capabilities capabilities0 = oneR0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.useNoPriors();
      evaluation0.KBRelativeInformation();
      double double1 = evaluation0.m_WithClass;
      J48 j48_0 = new J48();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.equals(oneR0);
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.weightedAreaUnderROC();
      double double4 = evaluation0.falsePositiveRate((-300));
      assertEquals(0.0, double4, 0.01);
      
      evaluation0.areaUnderROC((-2));
      double double5 = evaluation0.relativeAbsoluteError();
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("-c <class index>\n");
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_ConfLevel;
      MockRandom mockRandom0 = new MockRandom();
      testInstances0.setNumNominalValues(6);
      LMT lMT0 = new LMT();
      testInstances0.toString();
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.getDiscardPredictions();
      int[] intArray0 = new int[2];
      intArray0[0] = 11;
      intArray0[1] = (-1);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(1976.513995652563, (double[]) null, intArray0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.areaUnderROC((-1136903108));
      evaluation0.incorrect();
      double double1 = evaluation0.SFPriorEntropy();
      double double2 = evaluation0.trueNegativeRate((-223));
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstancesRelational(30);
      testInstances0.setNumInstancesRelational(2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      evaluation0.updateMargins(doubleArray0, 2, (-1.0));
      assertEquals(3, doubleArray0.length);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      testInstances0.getRelationalClassFormat();
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 108;
      doubleArray0[4] = 1.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 2, 902.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-880.0), doubleArray0);
      Random.setNextRandom((-1));
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1));
      testInstances0.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanSchemeEntropy();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) m5Rules0, instances0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.m5.M5Base", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate(".xml");
      linearRegression0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[8] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1.0));
      double double0 = evaluation0.m_TotalCoverage;
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate(".xml");
      OneR oneR0 = new OneR();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.unclassified();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.useNoPriors();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 14;
      intArray0[2] = 4;
      Instance instance0 = BallNode.calcCentroidPivot(intArray0, instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(instance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances2 = new Instances(instances0, 383);
      double double1 = evaluation0.m_ClassPriorsSum;
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(Double.NaN, double2, 0.01);
      
      capabilities1.supportsMaybe(capabilities0);
      evaluation0.KBMeanInformation();
      evaluation0.areaUnderPRC((-1));
      double double3 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      testInstances0.setNumInstancesRelational((-1072));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.getRevision();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      capabilities0.disableAllAttributeDependencies();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRevision();
      testInstances0.setSeed(1928);
      Instances instances0 = testInstances0.generate("-xml filename | xml-string\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderROC(107);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3812.1213136698548, doubleArray0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.priorEntropy();
      M5Rules m5Rules0 = new M5Rules();
      // Undeclared exception!
      try { 
        m5Rules0.getM5RootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.m5.M5Base", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumInstances(48);
      Instances instances1 = new Instances(instances0, (-1));
      instances1.remove((Object) linearRegression0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Random.setNextRandom((-1));
      evaluation0.falseNegativeRate((-2147483647));
      // Undeclared exception!
      try { 
        evaluation0.matthewsCorrelationCoefficient((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.MAJOR = 11;
      evaluation0.equals(capabilities0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.meanAbsoluteError();
      evaluation0.numFalseNegatives((-1));
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.meanAbsoluteError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation2.m_ConfusionMatrix = null;
      // Undeclared exception!
      try { 
        evaluation2.numTrueNegatives(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate(".xml");
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.addNumericTrainClass(2, 22.0);
      double double0 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numTrueNegatives((-3337));
      evaluation0.setDiscardPredictions(false);
      evaluation0.totalCost();
      double double1 = evaluation0.priorEntropy();
      assertEquals(1.0, double1, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      testInstances1.setNumInstancesRelational((-1));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = 2101.39433452083;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      Random.setNextRandom(1149);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double1 = evaluation0.falseNegativeRate((-1461032992));
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.setDiscardPredictions(true);
      try { 
        CostMatrix.parseMatlab("A+B\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      OneR oneR0 = new OneR();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      ListOptions listOptions0 = new ListOptions();
      testInstances1.setNumInstancesRelational(0);
      TestInstances testInstances2 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classxfcations[(int) v;\n");
      testInstances0.generate("W{w*.l>;6Cb");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot((-1), (-2), intArray0, instances0);
      try { 
        evaluation0.updatePriors(instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate(".xml");
      Instances instances1 = testInstances0.generate(".bsi");
      testInstances1.setNumInstancesRelational((-1));
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      Instances instances2 = new Instances(instances0, (-206797271));
      double double0 = evaluation0.m_ClassPriorsSum;
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.KBMeanInformation();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      capabilities0.getClassCapabilities();
      evaluation0.m_SumSqrClass = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation(" ");
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      testInstances0.generate("R$N$8lk=XD");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances2 = new TestInstances();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      evaluation0.m_TotalCost = 0.22499999403953552;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanPriorSquaredError();
      String string0 = Evaluation.getGlobalInfo(gaussianProcesses0);
      assertEquals("\nSynopsis for weka.classifiers.functions.GaussianProcesses:\n\n Implements Gaussian processes for regression without hyperparameter-tuning. To make choosing an appropriate noise level easier, this implementation applies normalization/standardization to the target attribute as well as the other attributes (if  normalization/standardizaton is turned on). Missing values are replaced by the global mean/mode. Nominal attributes are converted to binary ones. Note that kernel caching is turned off if the kernel used implements CachedKernel.", string0);
      
      double double2 = evaluation0.weightedPrecision();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      testInstances0.generate("    return classifications[(int) v];\n");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.2000000029802322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8788316745527265
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      instances0.toString();
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.useNoPriors();
      double double1 = evaluation0.m_SumPriorEntropy;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation0.m_WithClass;
      evaluation1.toClassDetailsString();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      evaluation1.confusionMatrix();
      evaluation0.precision(100);
      evaluation0.SFMeanEntropyGain();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = "=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n";
      stringArray0[3] = ".m";
      stringArray0[4] = "R^0?JH^UIW";
      MatlabLoader.main(stringArray0);
      try { 
        matlabLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.099633990865473
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      textDirectoryLoader0.reset();
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.useNoPriors();
      double double1 = evaluation0.m_SumPriorEntropy;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation0.m_WithClass;
      evaluation0.toClassDetailsString();
      SGD sGD0 = new SGD();
      Evaluation evaluation2 = new Evaluation(instances0);
      sGD0.getRevision();
      evaluation2.confusionMatrix();
      evaluation0.meanAbsoluteError();
      evaluation0.precision(102);
      evaluation1.SFMeanEntropyGain();
      evaluation0.priorEntropy();
      try { 
        evaluation1.evaluateModel((Classifier) sGD0, instances0, (Object[]) sGD0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      Instances instances0 = testInstances0.generate("getRevision");
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Instances instances1 = testInstances0.generate();
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances1, (-1604), (java.util.Random) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      CostMatrix costMatrix0 = null;
      MockRandom mockRandom0 = new MockRandom((-1));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesUpdateable0, instances0, (int) (byte)122, (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1));
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.ints();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.updateMargins((double[]) null, (-2242), (-3395.4685977));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".xml");
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-593.42616);
      doubleArray0[2] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-593.42616), doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      testInstances0.setNumInstancesRelational(39);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.toMatrixString(".xml");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRevision();
      Instances instances0 = testInstances0.generate("-url");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderROC(107);
      double[] doubleArray0 = new double[8];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8835319301806641
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      evaluation0.toClassDetailsString();
      evaluation0.confusionMatrix();
      evaluation0.meanAbsoluteError();
      evaluation0.precision(0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.priorEntropy();
      Classifier classifier0 = null;
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Instances instances1 = testInstances1.generate();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.confusionMatrix();
      evaluation0.meanAbsoluteError();
      evaluation0.precision(2);
      evaluation0.SFMeanEntropyGain();
      evaluation0.priorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation1.evaluateModel((Classifier) null, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("2A]z%Dnz;NN~}&v9 )");
      testInstances0.setNumInstancesRelational(484);
      testInstances0.setNumInstancesRelational(1159);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.trueNegativeRate(484);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      testInstances0.setNumInstancesRelational(120);
      testInstances0.setNumInstancesRelational(120);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numTruePositives(43);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, (-1456.8174442));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1));
      testInstances0.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 4, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      Instances instances1 = testInstances0.generate("W{w*.l>;6Cb");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.getRevision();
      try { 
        evaluation0.evaluateModel((Classifier) simpleLinearRegression0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.makeDistribution(0.964);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_MissingClass = (double) (-1);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      SVMLightLoader sVMLightLoader1 = new SVMLightLoader();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances1.setNumDate((-1));
      testInstances1.generate();
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      // Undeclared exception!
      try { 
        testInstances0.setWords("h|!!FTlV{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least 2 words must be provided!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_MissingClass = (double) (-1);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      SVMLightLoader sVMLightLoader1 = new SVMLightLoader();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumDate(67);
      testInstances0.generate();
      evaluation0.kappa();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(713.6668, (int[]) null, 67);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 67;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1));
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.ints();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(20, testInstances0.getNumInstances());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.8133349000946146
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("    return classifications[(int) v];\n");
      Instances instances0 = testInstances0.generate("W{w*.l>;6Cb");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      testInstances0.generate();
      evaluation0.m_ComplexityStatisticsAvailable = false;
      evaluation0.SFMeanPriorEntropy();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumClass;
      evaluation0.useNoPriors();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";AgT4jXzM");
      evaluation0.errorRate();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.toSummaryString(true);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".bsi", instances0, 400, testInstances1.DEFAULT_WORDS, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      testInstances1.setNumInstancesRelational((-1));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 0.75;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      intArray0[2] = 12;
      intArray0[3] = (-2);
      Instance instance0 = BallNode.calcCentroidPivot(12, (-2), intArray0, instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.generate((String) null);
      Instances instances0 = testInstances0.generate("&{8ui=yL`b_-,ZfO");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (-880.0);
      doubleArray0[1] = 1312.20114304951;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (-880.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1312.20114304951, doubleArray0);
      Random.setNextRandom((-2));
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1645), doubleArray0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Random.setNextRandom((-1645));
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      testInstances0.getRevision();
      Instances instances1 = testInstances1.generate();
      instances1.equalHeaders(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-19.45564);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)10;
      Instances.test(testInstances1.DEFAULT_WORDS);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-709), (-1));
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(byteArrayInputStream0);
      converterUtils_DataSource0.nextElement(instances0);
      testInstances1.setNumString((byte)48);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRevision();
      Instances instances0 = testInstances0.generate("-url");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderROC(107);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[6];
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      double double0 = evaluation0.m_Correct;
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.totalCost();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMOreg sMOreg0 = new SMOreg();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) sMOreg0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-url");
      testInstances0.setNumInstancesRelational(1864);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1267.15726498);
      doubleArray0[1] = (double) 1864;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1864;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) 1864;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1267.15726498), doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      testInstances0.generate("W{w*.l>;6Cb");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("-c <class index>\n");
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      testInstances0.setNumNominalValues(6);
      LMT lMT0 = new LMT();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OneR oneR0 = new OneR();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("\tonly the options are saved to the XML file, not the model.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderROC((-1));
      DenseInstance denseInstance0 = new DenseInstance(794);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances1 = new Instances(instances0, 794);
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.m_DiscardPredictions = true;
      evaluation0.SFEntropyGain();
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      testInstances1.setNumInstancesRelational((-1));
      testInstances0.setNumInstancesRelational((-1114383320));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toMatrixString(" ");
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation0.evaluateModelOnce((Classifier) zeroR0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, " ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OneR oneR0 = new OneR();
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "    return classifications[(int) v;\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      testInstances1.setNumInstancesRelational((-1));
      testInstances0.setNumInstancesRelational((-1114383343));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = 3187;
      char[] charArray0 = new char[0];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      boolean boolean0 = false;
      boolean boolean1 = true;
      evaluation0.toClassDetailsString();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 3187, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3187
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("gzF/TK:-&[*P79y9(n");
      testInstances0.setNumInstancesRelational((-958));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.numFalseNegatives(1934);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.assign(testInstances1);
      double double0 = evaluation0.trueNegativeRate((-2));
      double double1 = evaluation0.numFalsePositives(121);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("-c <class index>\n");
      Instances instances0 = testInstances0.generate("    return classiflcations[(int) v];\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_ConfLevel;
      MockRandom mockRandom0 = new MockRandom();
      testInstances0.setNumNominalValues(6);
      LMT lMT0 = new LMT();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      capabilities0.getClassCapabilities();
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      CostMatrix costMatrix0 = null;
      Instances.test(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.matthewsCorrelationCoefficient(1);
      JSONLoader jSONLoader0 = new JSONLoader();
      jSONLoader0.globalInfo();
      try { 
        jSONLoader0.getNextInstance(instances1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSONLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedFMeasure();
      evaluation0.SFSchemeEntropy();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.fMeasure(107);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSONLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1));
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation.handleCostOption((String) null, 99);
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances0.generate("3h~V3Cz\u0006CFQYK<");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      instances1.addAll((Collection<? extends Instance>) instances0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = Capabilities.forInstances(instances1, true);
      capabilities0.disableAllAttributeDependencies();
      instances1.equalHeaders(instances0);
      evaluation0.numFalseNegatives(0);
      evaluation0.meanAbsoluteError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        Evaluation.handleCostOption("we", 122);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric(5);
      testInstances0.setRelation(" ");
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_ConfLevel;
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.unweightedMacroFmeasure();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(0.0);
      assertEquals(2, doubleArray0.length);
      
      double double3 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("OEAuyM_5S,rNF");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSchemeEntropy;
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double1 = evaluation1.m_SumSqrPredicted;
      evaluation0.falsePositiveRate(3);
      evaluation0.areaUnderROC(3);
      evaluation1.SFMeanSchemeEntropy();
      MockRandom mockRandom0 = new MockRandom(120L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = Double.NaN;
      // Undeclared exception!
      try { 
        instances0.resampleWithWeights((java.util.Random) mockRandom0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weights.length != numInstances.
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "\nCoefficients...\n");
      Instances instances0 = testInstances0.generate("\nCoefficients...\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.falsePositiveRate((-2));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("W{w*.l>;6Cb");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = evaluation0.numFalsePositives(0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = new Integer((-1));
      double double1 = evaluation0.numTruePositives((-1));
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1901886006782885
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      Instances instances1 = testInstances0.generate("W{w*.l>;6Cb");
      CostMatrix costMatrix0 = null;
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.toClassDetailsString("@relation");
      // Undeclared exception!
      try { 
        instances0.kthSmallestValue(97, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(linearRegression0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumInstances(48);
      Instances instances1 = new Instances(instances0, (-1));
      SGD sGD0 = new SGD();
      Evaluation evaluation0 = new Evaluation(instances1);
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumClass;
      evaluation0.useNoPriors();
      evaluation0.SFPriorEntropy();
      try { 
        Evaluation.evaluateModel((Classifier) oneR0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.OneR:
         // 
         // -B <minimum bucket size>
         // \tThe minimum number of objects in a bucket (default: 6).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1));
      testInstances0.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      REPTree rEPTree0 = new REPTree();
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.getWords();
      Instances instances0 = testInstances1.generate(" ");
      testInstances1.setNumInstancesRelational((-1));
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.ints();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      String string0 = Evaluation.makeOptionString(costSensitiveClassifier0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumInstancesRelational((-1));
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.ints();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(527);
      JRip jRip0 = new JRip();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluateModelOnce((Classifier) jRip0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.errorRate();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      capabilities0.enable(capabilities_Capability0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      testInstances1.generate("");
      testInstances0.setNumInstancesRelational(494);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      double double2 = evaluation0.m_SumPriorSqrErr;
      assertNotEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1));
      testInstances0.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.trueNegativeRate((-1));
      REPTree rEPTree0 = new REPTree();
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      double[] doubleArray0 = new double[6];
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String string0 = evaluation0.toClassDetailsString("sure");
      assertEquals("sure\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      testInstances1.setNumInstancesRelational((-1));
      testInstances0.setNumInstancesRelational((-1114383320));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toMatrixString(" ");
      assertEquals(" \n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_MissingClass = (double) (-1);
      double double0 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
      
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      SVMLightLoader sVMLightLoader1 = new SVMLightLoader();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      double double1 = evaluation0.avgCost();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getFilterType();
      sMOreg0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.makeOptionString(sMOreg0, false);
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[1];
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("\tonly the options are saved to the XML file, not the model.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      // Undeclared exception!
      try { 
        evaluation0.weightedPrecision();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OneR oneR0 = new OneR();
      Evaluation.getGlobalInfo(oneR0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\nSynopsis for weka.classifiers.rules.OneR:\n\nClass for building and using a 1R classifier; in other words, uses the minimum-error attribute for prediction, discretizing numeric attributes. For more information, see:\n\nR.C. Holte (1993). Very simple classification rules perform well on most commonly used datasets. Machine Learning. 11:63-91.");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.toSummaryString("@relation", true);
      CostMatrix costMatrix1 = null;
      try {
        costMatrix1 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      testInstances0.generate((String) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ".D:l '/H\">^QI3");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.5, doubleArray0);
      Random.setNextRandom((-1126974602));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = evaluation0.falseNegativeRate((-92));
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '6';
      charArray0[2] = '\\';
      charArray0[3] = '<';
      String string0 = evaluation0.num2ShortID(0, charArray0, 102);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals("                                                                                                     L", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(3187, charArray0, (-697));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1));
      testInstances0.setNumInstancesRelational((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate(".xml");
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.addNumericTrainClass(0, (-2));
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(483);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 483
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumInstances(48);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.addNumericTrainClass(14, (-1183.4618722185448));
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      MockFile mockFile0 = new MockFile("main");
      MockFile mockFile1 = new MockFile(".bsi", "@data");
      MockFile mockFile2 = new MockFile(",", "getTechnicalInformation");
      mockFile2.setExecutable(true, true);
      sVMLightLoader0.setSource((File) mockFile2);
      try { 
        sVMLightLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("@relation");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.addNumericTrainClass((-223.7179875027208), (-2));
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance(0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumInstances(48);
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom(481L);
      try { 
        Evaluation.handleCostOption(".bsi", 4035);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate((String) null);
      testInstances0.generate("c\u0005BhlnkVzuB<qn;");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-880.0);
      doubleArray0[1] = (double) (-1);
      evaluation0.toSummaryString(".,%F^", false);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      sVMLightLoader0.setSource(file0);
      try { 
        sVMLightLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate(".xml");
      Instances instances0 = testInstances0.generate(".bsi");
      testInstances1.setNumInstancesRelational((-1));
      testInstances1.setNumNominalValues(6);
      LMT lMT0 = new LMT();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString();
      double double0 = evaluation0.m_Unclassified;
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toSummaryString("i=F,I\">-Gv'\"7Y3*Mv%", true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("i=F,I\">-Gv'\"7Y3*Mv%\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("W{w*.l>;6Cb");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      OneR oneR0 = new OneR();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.numTrueNegatives(568);
      double double0 = evaluation0.m_SumPriorSqrErr;
      BayesNet bayesNet0 = new BayesNet();
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Capabilities capabilities0 = new Capabilities(multiClassClassifier0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("listOptions");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives((-195225789));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("    return classifications[(int) v];\n");
      testInstances0.generate("   * @return a string describing the classifier\n");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances2 = new TestInstances();
      testInstances2.setNumDate(4);
      testInstances2.generate();
      evaluation0.meanAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.precision(100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      testInstances0.generate("   * @return a string describing the classifier\n");
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      TestInstances testInstances2 = new TestInstances();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.equals(evaluation1);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1));
      testInstances0.setWordSeparators(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate(" ");
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumClasses((-2060));
      Instances instances0 = testInstances1.generate(" ");
      testInstances1.setNumInstancesRelational((-1));
      testInstances0.setNumInstancesRelational((-1114383320));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanSquaredError();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.correct();
      KDTree kDTree0 = new KDTree();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.02500000037252903;
      doubleArray0[1] = 4.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      try { 
        kDTree0.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 1473;
      Instances instances0 = new Instances("Z&T*xde+|J)vb", arrayList0, 1473);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[6];
      testInstances1.getRevision();
      doubleArray0[1] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.relativeAbsoluteError();
      double double0 = 10.0;
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.6554823251787534
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2810);
      intArray0[1] = (-1457654536);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3444.0, intArray0, 116);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 173
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      instances0.deleteAttributeType((-79));
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.kappa();
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 174
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom((-1));
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", (-2));
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 175
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumInstances(48);
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 176
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return classifications[(int) v];\n");
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.m_TotalCoverage;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances2 = new Instances(instances0, 364);
      capabilities1.setOwner(vote0);
      double double1 = evaluation0.m_ClassPriorsSum;
      assertEquals(22.0, double1, 0.01);
      
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
      
      capabilities1.supportsMaybe(capabilities0);
      double double3 = evaluation0.KBMeanInformation();
      evaluation0.areaUnderPRC((-1));
      double double4 = evaluation0.SFSchemeEntropy();
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation0.pctUnclassified();
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 177
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[6];
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) filteredClassifier0, (Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 178
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[1];
      try { 
        Evaluation.evaluateModel("j2eLObD'4-8|%<", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name j2eLObD'4-8|%<.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 179
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 23;
      Instances instances0 = new Instances("attributes", arrayList0, 23);
      CostMatrix costMatrix0 = new CostMatrix(23);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 180
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 181
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1));
      testInstances0.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 182
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.useNoPriors();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 183
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 184
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HTML hTML0 = new HTML();
      hTML0.getHeader();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
