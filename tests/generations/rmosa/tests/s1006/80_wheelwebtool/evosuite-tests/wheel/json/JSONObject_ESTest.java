/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 04:49:09 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.quote("3jX*o");
      jSONObject0.put("] is not a JSONArray.", (-1L));
      long long0 = jSONObject0.optLong("] is not a JSONArray.");
      assertEquals(3, jSONObject0.length());
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("QPM,#*<%rQx>r", object0);
      boolean boolean0 = jSONObject1.isNull("QPM,#*<%rQx>r");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Float float0 = new Float(713.35221);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "g~ta";
      stringArray0[1] = "g~ta";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject("g~ta", stringArray0);
      jSONObject0.put("g~ta", (Object) jSONObject1);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("g~ta");
      String[] stringArray1 = JSONObject.getNames(jSONObject2);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("</W7:Y't!8Djr;=^gE");
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("</W7:Y't!8Djr;=^gE", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Object) linkedList0);
      String string0 = jSONArray0.toString((-4379), (-834));
      assertEquals("[[]]", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertEquals(1, jSONArray2.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("@EqR4z8DcC.FHQ", (Collection) linkedList0);
      jSONObject1.optJSONArray("@EqR4z8DcC.FHQ");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.455394993624801
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      boolean boolean0 = jSONObject0.isNull("");
      assertFalse(boolean0);
      
      double double0 = jSONObject1.optDouble("");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double double0 = new Double(0.0);
      JSONObject.testValidity((Object) null);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject.getNames((Object) "0");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (-16L));
      jSONObject0.optInt("");
      Short short0 = new Short((short)1290);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("[", 97);
      jSONObject1.getDouble("[");
      StringWriter stringWriter0 = new StringWriter(97);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "D]w)-/");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(true, false);
      JSONObject.getNames((Object) boolean0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-4842));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      String string0 = "{jU9vc";
      JSONTokener jSONTokener0 = new JSONTokener("{jU9vc");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {jU9vc
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0992338308014475
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.testValidity(long0);
      JSONObject.quote("GY-G_Gsz");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "VZ~Bv(=4r4";
      stringArray0[1] = "GY-G_Gsz";
      stringArray0[2] = "\"GY-G_G\\sz\"";
      stringArray0[3] = "GY-G_Gsz";
      stringArray0[4] = "^0lRUc`H,mOu=f";
      stringArray0[5] = "VZ~Bv(=4r4";
      stringArray0[6] = "VZ~Bv(=4r4";
      stringArray0[7] = "GY-G_Gsz";
      JSONObject jSONObject0 = new JSONObject("VZ~Bv(=4r4", stringArray0);
      jSONObject0.keys();
      Float float0 = new Float((float) 0L);
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject1 = jSONObject0.put("GY-G_Gsz", (Map) hashMap0);
      jSONObject1.optBoolean((String) null, false);
      jSONObject0.optDouble("GY-G_Gsz", (-1898.053768891546));
      JSONObject.getNames((Object) float0);
      JSONObject.numberToString(float0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("GY-G_Gsz");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("6", (Object) jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Writer writer0 = jSONObject2.write(stringWriter0);
      assertFalse(writer0.equals((Object)stringWriter1));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K~P#7/HZ-O", (Object) "K~P#7/HZ-O");
      jSONObject1.optJSONArray("toS");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 120, 794);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("r</k~s[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r<\\/k~s[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("-FKURC{@.NQtr!K s-Q", 3973L);
      long long0 = jSONObject0.optLong("-FKURC{@.NQtr!K s-Q");
      assertEquals(3973L, long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      HashMap<Integer, JSONArray> hashMap1 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("5m(pR fC0", 595L);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject1.putOpt("w97yr\"+^8ZGUL.R", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\t";
      JSONObject jSONObject1 = jSONObject0.put("\t", 0L);
      jSONObject1.optInt("\t", (-3323));
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(144.917611971953);
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(144.917611971953);
      JSONObject jSONObject1 = jSONObject0.append("+OvpldXiyuKf5tjr{", double0);
      Float float0 = new Float(536.473F);
      JSONObject jSONObject2 = jSONObject1.accumulate("+OvpldXiyuKf5tjr{", float0);
      jSONObject2.optLong("", (-1L));
      Iterator iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isoptJSONObject", (-3L));
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      
      double double0 = jSONObject1.optDouble("isoptJSONObject");
      assertEquals((-3.0), double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("w97yr\"+^8ZGUL.R", (-351L));
      jSONObject1.putOpt("Z~e", hashMap0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 2927, 2927);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "^e\\/?W{kSf>";
      JSONObject jSONObject1 = jSONObject0.accumulate("", "^e/?W{kSf>");
      String string1 = "Q%f+7]u5IZe";
      String string2 = " of ";
      JSONObject.quote("(AC618F\"QKzn");
      jSONObject1.putOpt("^e/?W{kSf>", "\"(AC618F\"QKzn\"");
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0, (-145), 254);
      int int0 = 8448;
      // Undeclared exception!
      jSONObject0.toString(8448);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double(2192.6);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("5TK=}", "5TK=}");
      try { 
        jSONObject0.getBoolean("5TK=}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5TK=}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONObject";
      jSONObject0.put("wheel.json.JSONObject", (Object) "wheel.json.JSONObject");
      try { 
        jSONObject0.getJSONObject("wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("gettoString", false);
      String string0 = jSONObject0.getString("gettoString");
      assertNotNull(string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "isl]ogicalXor");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("isl]ogicalXor", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.keys();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("H%>N;^l(]", false);
      jSONObject1.getBoolean("H%>N;^l(]");
      HashMap<String, JSONArray> hashMap1 = new HashMap<String, JSONArray>();
      JSONObject jSONObject2 = jSONObject1.put("Expected '", (Map) hashMap1);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = new JSONObject();
      Double double0 = new Double((-3928.53652115));
      JSONObject jSONObject2 = jSONObject0.putOpt("n h;y", double0);
      Long long0 = new Long((-1L));
      JSONObject jSONObject3 = jSONObject2.accumulate("n h;y", long0);
      assertFalse(jSONObject3.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4915254237288135
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.doubleToString(0L);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      JSONObject jSONObject1 = jSONObject0.accumulate("0", "0");
      jSONObject0.getInt("0");
      JSONObject.quote("0");
      jSONObject1.getLong("0");
      jSONObject0.optJSONObject("\"0\"");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.doubleToString(0L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("0", "0");
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.getInt("0");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("5TK=}", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.doubleToString(0L);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("0", long0);
      jSONObject0.getInt("0");
      JSONObject.quote("cl");
      try { 
        jSONObject1.getLong("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object1, 239, 239);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("ubSoP{{b,[}rPuJec>J", 1037L);
      jSONObject0.length();
      boolean boolean0 = jSONObject0.has("ubSoP{{b,[}rPuJec>J");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = JSONObject.valueToString(hashMap0, (-42724917), 12);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1625.0368677);
      jSONObject0.put("] is not a JSONObject.", (Object) float0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONObject.", float0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Long long0 = new Long(8L);
      JSONObject.doubleToString(8L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("8", "8");
      jSONObject0.getInt("8");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Long long0 = new Long((-16L));
      JSONObject.doubleToString((-16L));
      JSONObject jSONObject0 = new JSONObject((Object) "-16");
      jSONObject0.accumulate("-16", "-16");
      jSONObject0.getInt("-16");
      int int0 = (-2726);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONException");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONException
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = new Double(2192.6);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Ke*W-_/ lj");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {Ke*W-_/ lj
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject0);
      double double0 = 1798.1787767657;
      jSONObject1.put("", 1798.1787767657);
      String string0 = "*F8tP]";
      JSONObject jSONObject2 = jSONObject0.put("F", (Object) jSONObject1);
      jSONObject1.opt("*F8tP]");
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject1.optDouble("");
      jSONObject3.optJSONObject("naP");
      jSONObject2.optString("naP");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("ORf|0/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ORf|0/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-9));
      JSONObject jSONObject1 = jSONObject0.put("uW$s@Jf7", (Object) byte0);
      jSONObject0.getLong("uW$s@Jf7");
      try { 
        jSONObject1.getJSONObject("K~/#7/HZ-O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K~/#7/HZ-O\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "K~/#7/HZ-O";
      JSONObject jSONObject1 = jSONObject0.put("K~/#7/HZ-O", (Object) "K~/#7/HZ-O");
      try { 
        jSONObject1.getLong("K~/#7/HZ-O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K~/#7/HZ-O\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      Integer integer0 = new Integer(0);
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)0);
      hashMap0.put((Double) null, short0);
      hashMap0.remove((Object) integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("\"\"");
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONObject0.optJSONObject("\"\"");
      JSONObject jSONObject1 = jSONObject0.put("\"\"", true);
      boolean boolean0 = jSONObject1.getBoolean("\"\"");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("toJ");
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("toJ", (Collection) linkedList0);
      try { 
        jSONObject1.getBoolean("toJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toJ\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put((Integer) null, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-138165304));
      assertEquals("-1.38165304E8", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, "5TK=}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("5TK=}", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("A JSONObject text must begin with '{'");
      jSONObject0.optLong((String) null, (-1985L));
      StringWriter stringWriter0 = new StringWriter();
      Double double0 = new Double(2367.16659237);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.keys();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.put("", 0L);
      jSONObject1.optDouble("", Double.NaN);
      JSONObject.valueToString(jSONArray0);
      JSONArray jSONArray1 = new JSONArray();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("K~P#7/HZ-O", (Object) "K~P#7/HZ-O");
      try { 
        jSONObject0.getJSONArray("K~P#7/HZ-O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K~P#7/HZ-O\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = new Double((-1883.7272619448));
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(13);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.put("[m4Ad-K~Fa8^.U$mi{8", (Object) jSONArray0);
      JSONArray jSONArray1 = jSONObject0.getJSONArray("[m4Ad-K~Fa8^.U$mi{8");
      assertEquals(0, jSONArray1.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject0.put("u!", (Map) hashMap0);
      String string0 = jSONObject0.optString("u!");
      assertNotNull(string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      Short short0 = new Short((short)2887);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      String string0 = "\\u";
      jSONObject1.optString(string0, string0);
      jSONObject2.optString(",", (String) null);
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("get", (Object) "get");
      boolean boolean0 = jSONObject0.isNull("get");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5891783264039585
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Short short0 = new Short((short) (-273));
      jSONObject0.putOpt("] is not a JSONArray.", short0);
      jSONObject0.toString(20, 57);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(20);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 20, 20);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.2001375689895206
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.quote(">/)PC7jP K!8aaTIPKv");
      assertEquals("\">/)PC7jP K!8aaTIPKv\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\">/)PC7jP K!8aaTIPKv\"");
      jSONObject0.toString((-108916131));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      jSONObject0.optLong("] is not a number.", 1L);
      short short0 = (short)21;
      Float.isFinite((short)21);
      float float0 = (-3844.763F);
      float float1 = 378.46F;
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      String string0 = "woayr\"+^8ZGUL.R";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("woayr\"+^8ZGUL.R", object0);
      try { 
        jSONObject1.getInt("woayr\"+^8ZGUL.R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"woayr\\\"+^8ZGUL.R\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("getgetJSONArray", hashMap0);
      try { 
        jSONObject1.getDouble("getgetJSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetJSONArray\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (-16L));
      double double0 = jSONObject1.getDouble("");
      assertEquals((-16.0), double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", (-1279L));
      String string0 = jSONObject1.optString("' and instead saw '", "isdivideUnsigned");
      assertNotNull(string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Short short0 = new Short((short)88);
      Integer integer0 = new Integer((short)88);
      hashMap0.put(short0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("pa");
      String string0 = JSONObject.valueToString(boolean0, (-1210), (-241));
      assertNotNull(string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject.doubleToString(0L);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000004\":[java.lang.Byte@0000000012],\"java.lang.String@0000000009\":\"java.lang.Class@0000000010\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      jSONTokener0.next();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {\"java.lang.String@0000000004\":[java.lang.Byte@0000000012],\"java.lang.String@0000000009\":\"java.lang.Class@0000000010\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}iY{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }iY{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("Y?-n67", (Object) null);
      jSONObject1.remove("Y?-n67");
      jSONObject0.put("cl", true);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "Y?-n67");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      JSONObject.valueToString(jSONObject0, 27, 27);
      jSONObject0.opt("{}");
      String string0 = "*F8tP]";
      jSONObject0.put("*F8tP]", (Object) "*F8tP]");
      jSONObject0.opt((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("2m;1ij{+D4{s/B#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 2m;1ij{+D4{s/B#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(jSONObject0, 1617, (-2734));
      stringWriter0.append((CharSequence) "{}");
      Writer writer0 = null;
      try {
        writer0 = new StringWriter((-2734));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject1.toString(30, 624);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-2502), (-2502));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("{WB_3!idX*fa~6t.", (Collection) linkedList0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = jSONObject1.append("{WB_3!idX*fa~6t.", boolean0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("%$eb>~zo>U", (Object) "%$eb>~zo>U");
      try { 
        jSONObject1.append("%$eb>~zo>U", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[%$eb>~zo>U] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(34);
      hashMap0.put(integer0, "VP");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Short short0 = new Short((short)112);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(short0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject.valueToString(hashMap0);
      Integer integer0 = new Integer(23);
      assertEquals(23, (int)integer0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(1261.395116840129);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("01uq9XKm", (-901.9033151430046));
      assertEquals((-901.9033151430046), double0, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) hashMap0);
      String string0 = "\\n";
      jSONObject0.optString("\n", "");
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 5, 70);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Pe", 441.2548576);
      assertEquals(441.2548576, double0, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("sr6y*\"e<)", "istoString");
      JSONObject.quote("Q%f+79u5ICe");
      JSONObject jSONObject1 = jSONObject0.putOpt("Q%f+79u5ICe", "\"Q%f+79u5ICe\"");
      JSONObject.valueToString(jSONObject1, 785, 785);
      JSONObject.quote("u,x5'uqyNy");
      try { 
        jSONObject0.getLong("u,x5'uqyNy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u,x5'uqyNy\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.8510944537717136
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = JSONObject.quote(">/)PC7jP K!8aaTIPKv");
      assertEquals("\">/)PC7jP K!8aaTIPKv\"", string0);
      
      HashMap<Short, Short> hashMap0 = new HashMap<Short, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong(".");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getformat", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", 2L);
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = jSONObject0.get("");
      assertEquals(2L, object0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double double0 = new Double(1264.26436685597);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Short short0 = new Short((short) (-11581));
      String string0 = JSONObject.valueToString(short0, (short) (-11581), (short) (-11581));
      assertNotNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject.valueToString((Object) null, 59, 59);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Double double0 = new Double((-1715.112024366298));
      hashMap0.put(double0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(21, 835);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      hashMap0.put((Float) null, "~eYv^C/sL e");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(4, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.039345950617283
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject.quote(">/)PC7jP K!8aaTIPKv");
      JSONObject jSONObject0 = new JSONObject((Object) ">/)PC7jP K!8aaTIPKv");
      jSONObject0.optJSONArray(">/)PC7jP K!8aaTIPKv");
      // Undeclared exception!
      jSONObject0.toString(35, 2092);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.quote("");
      Object object1 = new Object();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optLong("\"\"", 0L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "Expected '");
      hashMap0.put("WRh/|9@zz2@rJYYSI", "WRh/|9@zz2@rJYYSI");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float(948.0);
      hashMap0.put(float0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)1);
      jSONObject0.put("]", (Object) short0);
      long long0 = jSONObject0.getLong("]");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.max((-1.0), 0.0);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.8510944537717136
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.quote(">/)PC7jP K!8aaTIPKv");
      assertEquals("\">/)PC7jP K!8aaTIPKv\"", string0);
      
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.entrySet();
      boolean boolean0 = jSONObject0.optBoolean("fo");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("$<08HNVn>^7jj", true);
      Object object0 = JSONObject.NULL;
      String string0 = "Substring bounds error";
      JSONTokener jSONTokener0 = new JSONTokener("Substring bounds error");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Substring bounds error
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "] not found.";
      String string1 = " |Wv~'8HW@6";
      jSONObject0.optBoolean("] not found.", false);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(" |Wv~'8HW@6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of  |Wv~'8HW@6
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("K~P#7/HZ-O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K~P#7/HZ-O\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      Double.max((-2785.51), (-2785.51));
      String string0 = "F";
      long long0 = 0L;
      Long long1 = new Long(0L);
      jSONObject0.put("islowestOneBit", (Object) long1);
      jSONObject0.opt("islowestOneBit");
      String string1 = "] is not a JSONObject.";
      JSONTokener jSONTokener0 = new JSONTokener("] is not a JSONObject.");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ] is not a JSONObject.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      String string1 = "";
      hashMap0.put("", "");
      JSONObject.valueToString("", 27, 636);
      jSONObject0.opt("");
      try { 
        jSONObject0.put((String) null, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(34, 34);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.002663334987299
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.quote(">/)PC7jP K!8aaTIPKv");
      assertEquals("\">/)PC7jP K!8aaTIPKv\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(48);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("iscompare", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      HashMap<Double, JSONArray> hashMap1 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.put((String) null, 1335);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.026378750007062
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject.quote("?8/$^'lTfl%@2%_");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("xmvnvx6n1q");
      try { 
        jSONObject0.get("getgetChars");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetChars\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote("GT}\"XQ");
      assertEquals("\"GT}\\\"XQ\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote("\t");
      assertEquals("\"\\t\"", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(1.0F);
      hashMap0.put(float0, "=W");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(":S\"SStfQN7LB", ":S\"SStfQN7LB");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("d'O_,SVL", (-749.24));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("5TK=}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5TK=}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("getappend");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getappend\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "txlw!Y}W'mdB?";
      stringArray0[1] = "!~5E$-F 2; EZ@MLS";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.optString("txlw!Y}W'mdB?", "!~5E$-F 2; EZ@MLS");
      assertEquals("!~5E$-F 2; EZ@MLS", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("L", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      HashMap<Byte, String> hashMap1 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap1);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(")~ZO!68P8<}J");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of )~ZO!68P8<}J
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "K~P#7/HZ-O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("K~/#7/HZ-O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K~/#7/HZ-O\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optInt("Ga|>Y<F.o#XC_(-", 1573);
      Integer integer0 = new Integer(1541);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = JSONObject.quote("PdW#9>Hv");
      assertEquals("\"PdW#9>Hv\"", string0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("JSONArray[", (-1929));
      assertEquals((-1929), int0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      Double.max(Double.NaN, Double.NaN);
      double double1 = new Float(Double.NaN);
      Double.max(Double.NaN, 0.0);
      double double2 = new Float(0.0);
      JSONObject.quote("AMvQVgP!}'^qBH");
      JSONObject.testValidity(jSONObject0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("toJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
