/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 08:53:38 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer((-1980));
      Integer.toUnsignedString((-1980));
      Integer.compare(70, 70);
      JSONObject jSONObject1 = jSONObject0.put(" at character ", (Map) hashMap0);
      jSONObject1.getJSONObject(" at character ");
      hashMap0.put(long0, integer0);
      try { 
        jSONObject0.getBoolean("nZ4#\"Z|5V*kC Clm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nZ4#\\\"Z|5V*kC Clm\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "{0&`k+yT`";
      JSONTokener jSONTokener0 = new JSONTokener("{0&`k+yT`");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {0&`k+yT`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.101241191122625
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.put("", (-212L));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("Ai]K<ja\"AOk)U", (Collection) linkedList0);
      jSONObject0.toString(66, (-64213136));
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("(RJ", 0.0);
      int int0 = jSONObject1.getInt("(RJ");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "{H?Z\"W";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{H?Z\"W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {H?Z\"W
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5884082070354566
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-95));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.compare((byte) (-95), (byte) (-95));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0);
      jSONObject0.optDouble("E}0_Wm8i7ST");
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray@0000000004", false);
      jSONObject1.putOpt("E}0_Wm8i7ST", "E}0_Wm8i7ST");
      jSONObject1.getBoolean("wheel.json.JSONArray@0000000004");
      jSONObject0.put("wheel.json.JSONArray@0000000004", 0);
      try { 
        jSONObject0.getJSONArray("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8768603988557397
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Float float0 = new Float(1102.192311891);
      hashMap0.put("true", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 97, 0);
      jSONObject0.toString(97, 104);
      jSONObject0.optInt("true");
      try { 
        jSONObject0.getJSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.putIfAbsent((Object) null, "LA|w^-M?:dI");
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 4590, (-971));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("\b", linkedList0);
      assertEquals(3, jSONObject1.length());
      
      jSONObject1.remove("\b");
      double double0 = jSONObject0.optDouble(")>");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "(Bz%-Ju+a'*av_sj";
      JSONObject jSONObject0 = new JSONObject((Object) "(Bz%-Ju+a'*av_sj");
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONObject0.toString(4091);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{", (Map) hashMap0);
      hashMap0.keySet();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^&;ZM&a";
      stringArray0[1] = "<9a9_%~fDA[O1,Mnb:";
      stringArray0[2] = "<9a9_%~fDA[O1,Mnb:";
      stringArray0[3] = "<9a9_%~fDA[O1,Mnb:";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      Integer integer0 = new Integer((-249));
      JSONObject jSONObject1 = jSONObject0.accumulate("<9a9_%~fDA[O1,Mnb:", integer0);
      int int0 = jSONObject1.getInt("<9a9_%~fDA[O1,Mnb:");
      assertEquals((-249), int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float(Double.NaN);
      hashMap0.put(float0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      String string0 = "g\"((N$dujc~P";
      Float float0 = new Float((float) 44);
      hashMap0.put((Double) null, float0);
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject.quote("1B^iL'tpl</");
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      Float.isFinite(0.0F);
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString((-271));
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", (long) (-271));
      double double0 = jSONObject1.optDouble("gethashCode");
      assertEquals((-271.0), double0, 0.01);
      
      JSONArray jSONArray1 = jSONArray0.put((-271));
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(4203);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("Substring bounds error", "{}");
      JSONObject jSONObject2 = jSONObject1.put("{}", true);
      jSONObject2.has("{}");
      Byte byte0 = new Byte((byte) (-40));
      jSONObject2.accumulate("{}", byte0);
      String string0 = "Missing value";
      try { 
        jSONObject2.getDouble("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.put("`h)7f[gZI7s,gz^w", 34);
      double double0 = jSONObject0.optDouble("`h)7f[gZI7s,gz^w");
      assertEquals(34.0, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5508047679198604
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      String string0 = "true";
      Float float0 = new Float(1102.192311891);
      hashMap0.put("true", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("true");
      try { 
        jSONObject0.getJSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(697.3F);
      JSONObject jSONObject1 = jSONObject0.accumulate("\b", float0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('\"');
      stringWriter0.append((CharSequence) "\b");
      StringWriter stringWriter1 = new StringWriter();
      double double0 = jSONObject1.optDouble("\b", (double) 697.3F);
      assertEquals(697.2999877929688, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(123, (-885));
      jSONObject0.put("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}", true);
      boolean boolean0 = jSONObject0.optBoolean("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^&;ZM&a";
      stringArray0[1] = "9a9_%~fDA[O1,Mnbw:";
      stringArray0[2] = "9a9_%~fDA[O1,Mnbw:";
      stringArray0[3] = "9a9_%~fDA[O1,Mnbw:";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      Integer integer0 = new Integer(21);
      JSONObject jSONObject1 = jSONObject0.accumulate("9a9_%~fDA[O1,Mnbw:", integer0);
      int int0 = jSONObject1.getInt("9a9_%~fDA[O1,Mnbw:");
      assertEquals(21, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      String string0 = JSONObject.quote(",:]/\"[{;#");
      assertEquals("\",:]/\\\"[{;#\"", string0);
      
      String string1 = JSONObject.valueToString(hashMap0, 47, 101);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1912314717476846
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Map) null);
      JSONArray jSONArray1 = jSONArray0.put(4075, (-19L));
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject1 = new JSONObject();
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 0, 160);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Function<Object, Long> function0 = (Function<Object, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      hashMap0.computeIfAbsent(jSONObject0, function0);
      String string0 = "Expected a ',' or ']'";
      int int0 = (-2841);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", (-2841));
      jSONObject1.getLong("Expected a ',' or ']'");
      jSONObject1.getDouble("Expected a ',' or ']'");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "Expected a ',' or ']'");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "Expected a ',' or ']'", 1818, 128);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" of ", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      StringWriter stringWriter0 = new StringWriter();
      Double double0 = new Double(Double.NaN);
      int int0 = 1880;
      try { 
        JSONObject.valueToString(double0, 1880, 1880);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Boolean boolean0 = new Boolean(")]e1mdXyrj(|,LM5(J");
      hashMap0.put(boolean0, ")]e1mdXyrj(|,LM5(J");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("key");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("su", (Collection) null);
      jSONObject1.put("su", 0L);
      jSONObject0.getLong("su");
      jSONObject0.put("dgRam%o: sq", (int) (short)8192);
      Double double0 = new Double(Double.NaN);
      Object object0 = JSONObject.NULL;
      String string0 = "|cn`+[zWSoA";
      JSONTokener jSONTokener0 = new JSONTokener("|cn`+[zWSoA");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of |cn`+[zWSoA
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "getparseLong");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("getparseLong", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("me", 0.0);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Double.min(Double.NaN, 1.0);
      Short short0 = new Short((short)67);
      BiFunction<Short, Short, Short> biFunction0 = (BiFunction<Short, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("Substring bounds error", short0, biFunction0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.stream();
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", (Collection) linkedList0);
      jSONObject0.accumulate("7l<}6Bo", hashMap0);
      jSONObject1.optDouble("Substring bounds error", 597.131131);
      JSONObject.getNames((Object) "Substring bounds error");
      jSONObject1.optJSONArray("Substring bounds error");
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      jSONArray0.toJSONObject(jSONArray0);
      Short short0 = new Short((short) (-1772));
      jSONArray0.toJSONObject(jSONArray0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0987996145617602
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-75));
      Byte.compare((byte) (-75), (byte) (-75));
      Byte.compare((byte) (-75), (byte) (-96));
      Byte.compare((byte) (-71), (byte)31);
      Byte.compare((byte) (-75), (byte) (-75));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedInt((byte)105);
      Byte.toUnsignedLong((byte)2);
      JSONObject jSONObject1 = jSONObject0.put(";}m%c^R6", (double) (byte) (-75));
      jSONObject1.optLong(";}m%c^R6");
      Byte.toUnsignedInt((byte) (-75));
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.write("Expected a ',' or ']'");
      jSONObject0.write(stringWriter0);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JSONObject.quote("");
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String string1 = jSONObject0.optString("");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Double.min(0.0, 0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.stream();
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", (Collection) linkedList0);
      String string0 = JSONObject.valueToString(double0, (-4494), 120);
      Boolean.valueOf(true);
      Integer integer0 = new Integer(120);
      Short short0 = new Short((short)106);
      double double1 = new Double(0.0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optLong("java.lang.Double@0000000004", 3390L);
      Integer integer1 = new Integer(120);
      String string1 = jSONObject1.optString("Substring bounds error", "Substring bounds error");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("] is not a JSONArray.", "] is not a JSONArray.");
      String string0 = jSONObject0.optString("] is not a JSONArray.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.stream();
      jSONObject0.put("f!9n@rD", (Collection) linkedList0);
      Object object0 = new Object();
      jSONObject0.accumulate("f!9n@rD", object0);
      String string0 = "2)bS$";
      Double double1 = new Double(0.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("lo", 59);
      JSONObject jSONObject2 = jSONObject1.accumulate("lo", "lo");
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0987996145617602
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Double.min(0.0, 0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.stream();
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", (Collection) linkedList0);
      jSONObject1.toString(120, (-4494));
      Boolean.valueOf(true);
      Integer integer0 = new Integer(120);
      Short short0 = new Short((short)106);
      jSONObject1.optDouble("Substring bounds error");
      JSONObject jSONObject2 = new JSONObject();
      long long0 = new Integer(120);
      jSONObject1.optDouble("e'ws{rJ@Z?1)x+07y");
      jSONObject1.getJSONArray("Substring bounds error");
      try { 
        jSONObject1.getLong("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bad value from toJSONString: \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate(",\n", jSONArray0);
      jSONObject1.toString(102, 46);
      JSONArray jSONArray1 = jSONObject0.getJSONArray(",\n");
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isequals";
      JSONObject jSONObject1 = jSONObject0.put("isequals", 447);
      try { 
        jSONObject1.getJSONArray("isequals");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isequals\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9225371909604357
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a Boolean.");
      assertEquals("\"] is not a Boolean.\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a Boolean.");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer(6);
      hashMap0.put("isbooleanValue", (String) null);
      hashMap0.put(integer0, "isbooleanValue");
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.offer((Long) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(57);
      Double double0 = new Double(57);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append('g');
      Writer writer0 = jSONArray0.write(stringWriter1);
      jSONObject0.write(writer0);
      JSONObject jSONObject1 = jSONObject0.accumulate("EJ);^gj", jSONArray0);
      StringWriter stringWriter2 = new StringWriter();
      Writer writer1 = jSONObject1.write(stringWriter2);
      assertSame(stringWriter2, writer1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      Double double0 = new Double(0.0);
      Short short0 = new Short((short)1200);
      hashMap0.put(double0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.8635172459951836
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = JSONObject.quote("?/BoyZdvUXXN");
      assertEquals("\"?/BoyZdvUXXN\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "?/BoyZdvUXXN");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      hashMap0.put((JSONObject) null, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(4075, (-19L));
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(123, 123);
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                                                                                                                                                                                      \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n                                                                                                                                                                                                                                                      \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                                                                                                           }");
      jSONTokener0.nextValue();
      assertFalse(jSONTokener0.more());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(123, (-3041));
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      JSONObject jSONObject1 = (JSONObject)jSONTokener0.nextValue();
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{dZk<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {dZk<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Object) "^p?O");
      // Undeclared exception!
      jSONObject0.toString(3230, 0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.put("^Mx,l", (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float((-1.0));
      hashMap0.put(float0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put("s8F48!nce+1+", (Collection) linkedList0);
      String string0 = jSONObject1.toString(2039, 3);
      assertNotNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.spliterator();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(linkedList0, 62, 62);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Boolean boolean0 = Boolean.valueOf("-d;'X");
      Boolean.getBoolean("M:i;|DUhI4dBx");
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("Expected '", 1L);
      assertEquals(1L, long0);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.quote("zLFNgKO/uR");
      jSONObject0.toString();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      Integer integer0 = new Integer(32);
      jSONObject0.optString("0.00", "S8P;%cB*#z[u,uv");
      jSONObject0.optString("val", (String) null);
      try { 
        jSONObject0.getJSONObject("ct'JEM]wM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ct'JEM]wM\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = ";4";
      JSONObject jSONObject1 = jSONObject0.accumulate(";4", ";4");
      try { 
        jSONObject1.getLong(";4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";4\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.09110890507758
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject.quote("] is not a Boolean.");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.append("\"] is not a Boolean.\"", "\"] is not a Boolean.\"");
      JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0, 102, (-2230));
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 93, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-39));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&O-6L9Kr";
      Byte.toUnsignedLong((byte)16);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optDouble("&O-6L9Kr", 0.0);
      JSONObject jSONObject1 = jSONObject0.append("&O-6L9Kr", byte0);
      jSONObject0.keys();
      jSONObject0.optString("&O-6L9Kr");
      jSONObject1.optJSONObject(">Y+W4lhF");
      JSONObject jSONObject2 = jSONObject1.append("&O-6L9Kr", (Object) null);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put((Integer) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\b", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      String string0 = "] is not a JSONArray.";
      hashMap1.getOrDefault("] is not a JSONArray.", "] is not a JSONArray.");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optInt("Expected a ',' or ']'", 585);
      try { 
        jSONObject0.getInt("@@->h\"*$mW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@@->h\\\"*$mW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Q";
      Integer integer0 = new Integer(13);
      jSONObject0.put("Q", (Object) integer0);
      try { 
        jSONObject0.append("Q", "Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Q] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 114, 283);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      jSONObject0.toString(61, 128);
      jSONObject1.optString("] is not a number.", "");
      JSONObject jSONObject2 = jSONObject1.put("true", (Collection) null);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      jSONObject0.toString(4160, 4160);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.stream();
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", (Collection) linkedList0);
      jSONObject1.accumulate("oyhrV_ p@OR^", "oyhrV_ p@OR^");
      jSONObject0.isNull("Substring bounds error");
      JSONTokener jSONTokener0 = new JSONTokener("s(\"f{](");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of s(\"f{](
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      boolean boolean0 = jSONObject0.isNull("Substring bounds error");
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put(",\"S>q3$", (Collection) linkedList0);
      jSONObject1.get(",\"S>q3$");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("is");
      JSONObject jSONObject1 = jSONObject0.put("getappend", false);
      jSONObject0.opt("getappend");
      JSONObject jSONObject2 = jSONObject1.put("is", 3);
      String string0 = "AAIx]";
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.optBoolean("");
      jSONObject2.get("getappend");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(";3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ;3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("true", "true");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("K(z`%v!3{_fwi%w@i4", 0L);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float.sum(0.0F, 0.0F);
      Float.isFinite((-1.0F));
      Float.sum(0.0F, (-1.0F));
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("/v$m");
      jSONObject0.optLong("/v$m");
      Boolean.logicalAnd(true, false);
      JSONObject.testValidity(boolean0);
      Boolean.valueOf("/v$m");
      Boolean.valueOf(false);
      Object object0 = jSONObject0.opt("-2g");
      assertNull(object0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("9a_%~fDA[O1,Mnbw:", "9a_%~fDA[O1,Mnbw:");
      try { 
        jSONObject0.getInt("9a_%~fDA[O1,Mnbw:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9a_%~fDA[O1,Mnbw:\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "true";
      Float float0 = new Float(0.0);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      hashMap0.put("true", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("true", (-1496));
      try { 
        jSONObject0.getJSONObject("getgetString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("TpRD#:?", "TpRD#:?");
      try { 
        jSONObject1.getDouble("TpRD#:?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"TpRD#:?\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-5.95937823264812));
      assertEquals("-5.95937823264812", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put(",\"S>q3$", (Collection) linkedList0);
      try { 
        jSONObject0.getBoolean(",\"S>q3$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\\"S>q3$\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float((-2624.146423398));
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap1 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("is");
      String string0 = null;
      jSONObject0.opt((String) null);
      int int0 = 13;
      try { 
        jSONObject0.put((String) null, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("getputOpt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getputOpt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = JSONObject.quote("QZ3EUfkS&{]\"[/EFP");
      assertEquals("\"QZ3EUfkS&{]\\\"[/EFP\"", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("java.lang.Float@00000000010");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = JSONObject.quote("-`42aT:*/y8{%dxSC&@");
      assertEquals("\"-`42aT:*/y8{%dxSC&@\"", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 120, 19);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float((-1.0F));
      hashMap0.put(float0, float0);
      hashMap0.put(float0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(44, 914);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.valueToString("\t", (-220), (-220));
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double((-2264));
      hashMap0.put(linkedList0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-2264), (-2264));
      assertNotNull(string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double((-2237));
      hashMap0.put(linkedList0, double0);
      Object object0 = JSONObject.NULL;
      Double double1 = new Double(0.0);
      hashMap0.put(object0, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-2237), (-2237));
      assertEquals(2, hashMap0.size());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      hashMap0.put((Float) null, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(39, 39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      String string0 = "true";
      Float float0 = new Float(1102.192311891);
      hashMap0.put("true", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.getString("true");
      try { 
        jSONObject0.getJSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      Byte byte0 = new Byte((byte) (-40));
      try { 
        jSONObject0.append((String) null, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.880393903784036
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a JSONArray.");
      assertEquals("\"] is not a JSONArray.\"", string0);
      
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString(1900);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.09110890507758
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.quote("jxS1%[{v=3 KmF");
      assertEquals("\"jxS1%[{v=3 KmF\"", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "jxS1%[{v=3 KmF";
      JSONObject jSONObject0 = new JSONObject("\"jxS1%[{v=3 KmF\"", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = jSONObject1.optInt("\"jxS1%[{v=3 KmF\"");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.quote("9d-E/#[e}yw)T=.u[");
      assertEquals("\"9d-E/#[e}yw)T=.u[\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("toS");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "int");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.has("int");
      String string0 = JSONObject.quote("int");
      assertEquals("\"int\"", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      Double double0 = new Double(Double.NaN);
      Double.min(795.17827095566, Double.NaN);
      Double.min(Double.NaN, Double.NaN);
      try { 
        jSONObject0.accumulate("ZA:70k{6$u%*<p+", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|/?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |/?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{T=k0B``Qk),8wE");
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-1943));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Short short0 = new Short((short) (-1509));
      String string0 = JSONObject.valueToString(short0, (short) (-1509), (-1917));
      assertNotNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = new Boolean("hC(6N=epVDQa,F");
      String string0 = JSONObject.valueToString(boolean0, 2383, 1523);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-810), (-810));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      double double0 = jSONObject0.optDouble("E.", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>(32);
      Byte byte0 = new Byte((byte)19);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(8);
      hashMap0.put(byte0, (JSONObject) null);
      String string0 = JSONObject.quote(":l&RS:ug,I");
      assertEquals("\":l&RS:ug,I\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("bHBtmF|=zhoJY\u0002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bHBtmF|=zhoJY\\u0002\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("*EOHmOPtq", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] is not a JSONObject.", hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("%I?WPqS+%>qdNow", 1243L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getString("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("tr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("j<", 2715.943156);
      assertEquals(2715.943156, double0, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("eu13x7$/P]{k`L6swZ>", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("gettoString");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of gettoString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("g7)]t?DR'Qiy%$xqt^");
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("p");
      assertNull(object0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-553.15559805273));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("isentrySet", (-2086L));
      assertEquals((-2086L), long0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("{");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Float float0 = new Float(1102.192311891);
      Float.sum(0.0F, 0.0F);
      hashMap0.put("true", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.getLong("true");
      JSONTokener jSONTokener0 = new JSONTokener("~");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("int", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(102, 102);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = "\\b";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("\b", true);
      JSONTokener jSONTokener0 = new JSONTokener("\b");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \b
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("Q Z{Z<%P;p{L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Q Z{Z<%P;p{L\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("aCE'|:4 Prt\\~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"aCE'|:4 Prt\\\\~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Double double0 = new Double(3661.978);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)10);
      hashMap0.put("Z`$)}i~zjpb@", short0);
      String string0 = jSONObject0.optString(".", "JSONArray initial value should be a string or collection or array.");
      assertEquals("JSONArray initial value should be a string or collection or array.", string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.remove((Object) jSONObject0, (Object) jSONObject0);
      String string0 = jSONObject0.optString("q]S<sZ+O ");
      assertEquals("", string0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("0,<*|w");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Substring bounds error
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
