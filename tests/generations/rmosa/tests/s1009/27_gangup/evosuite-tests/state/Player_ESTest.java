/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 09:27:45 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)5;
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(1);
      player0.setY((byte)5);
      player0.setMoney((byte) (-81));
      player0.setDead((-1L));
      player0.setDead((long) (byte)5);
      player0.getMoney();
      player0.pack();
      System.setCurrentTimeMillis((byte) (-81));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player();
      player0.setConnected(false);
      player0.setJoinOK(player0, true);
      player0.isConnected();
      int int0 = Packable.UNDEFINED;
      assertEquals(0, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-189);
      Player player0 = new Player((-189), (String) null, "Player", (-189));
      Player player1 = new Player();
      player0.prev = (Party) player1;
      player0.getIP();
      player0.isConnected();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(" ");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.126862207664039
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player(0, "", "", 2, 2);
      byte[] byteArray0 = player0.pack();
      player0.setZ((-3591.8308F));
      player0.getStrength();
      player0.type();
      player0.type();
      player0.setDead((long) 2, true);
      player0.getY();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 5, (short)4919);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      player0.setJoinOK(player0, true);
      dataInputStream0.read(byteArray0);
      byteArrayInputStream0.mark(5);
      Player player1 = new Player(10, "", 3);
      player1.setZ(0.2F);
      player0.isJoinOK(player0, false);
      int int0 = Packable.PLAYER;
      player1.getZ();
      System.setCurrentTimeMillis(528L);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0533214504847934
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(0, "", "", 2, 2);
      byte[] byteArray0 = player0.pack();
      player0.setZ(2);
      player0.getStrength();
      player0.type();
      player0.type();
      player0.setDead((-4629L), true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (short)4919);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      byteArrayInputStream0.reset();
      Player player1 = new Player(5257);
      player0.setJoinOK(player1, false);
      player1.unpack(dataInputStream0);
      Player player2 = new Player(5, "", 0);
      player0.isJoinOK(player1, true);
      player2.gangStrength();
      player0.getTimeOfDeath();
      player1.isJoinOK(player0, false);
      assertEquals(2.0F, player0.getZ(), 0.01F);
      assertEquals("Player5257", player1.getName());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player();
      player0.setJoinOK(player0, true);
      Player player1 = new Player((short)4919, (String) null, (short)4919);
      boolean boolean0 = player1.isJoinOK(player1, true);
      assertFalse(boolean0);
      
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.toString());
      
      player1.toString();
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(4919, player1.getPictureId());
      assertFalse(player1.isDead());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(2, "", "5/cCh8#sA.0D>", 2);
      byte[] byteArray0 = player0.pack();
      player0.setZ(0.0F);
      player0.getStrength();
      player0.type();
      player0.setY(5);
      player0.setDead((long) 2, false);
      player0.getY();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (short)4919, 0);
      player0.unpack(byteArray0);
      Player player1 = new Player(1);
      player1.id = 1;
      player1.setY(1);
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertTrue(player0.isDead());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte) (-85);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte) (-85));
      player0.setDead((long) (byte) (-85));
      Player player1 = new Player(2, (String) null, 3943);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player1.unpack(dataInputStream0);
      player0.setJoinOK(player1, true);
      player0.gangStrength();
      assertEquals((-85L), player0.getTimeOfDeath());
      
      player1.getName();
      assertEquals(0L, player1.getTimeOfDeath());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((-5084), (String) null, (-5084));
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(4919, "U2wNQ';)RC8", "", 4340, 0);
      player0.reset(true);
      int int0 = player0.type();
      assertEquals(5, int0);
      
      int int1 = player0.getPictureId();
      assertEquals(4340, int1);
      
      player0.getIP();
      String string0 = player0.getIP();
      assertEquals("U2wNQ';)RC8", string0);
      
      Player player1 = new Player(10, "U2wNQ';)RC8", (-963));
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(0, player0.getStrength());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertTrue(player1.isConnected());
      assertFalse(player0.isDead());
      assertFalse(boolean0);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(1, player1.getStrength());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, 0);
      player0.pack();
      player0.setZ((-3620.7427F));
      player0.getStrength();
      Player player1 = new Player(0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("*v");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      player0.getStrength();
      Player player1 = new Player();
      player1.reset(true);
      player0.getMoney();
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player1.getSubparty();
      player0.setX(0.0F);
      player1.toString();
      player0.getX();
      int int0 = player0.getPictureId();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player();
      player0.getStrength();
      Player player1 = new Player();
      player0.reset(true);
      player0.setZ(0.2F);
      player1.getMoney();
      player1.getSubparty();
      player1.setDead((-1L), true);
      player0.setX((-1.0F));
      player0.toString();
      player0.getX();
      Player player2 = new Player((short)4919, "Player-1", "Player-1", (-1914), 1);
      player2.getPictureId();
      player2.setDead((long) (short)4919, true);
      assertEquals(4919L, player2.getTimeOfDeath());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-94);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-275);
      Player player0 = new Player((-275));
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte) (-94);
      byteArray1[2] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-1582), (byte)61);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(0, "", "", (-5), (-5));
      player0.pack();
      int int0 = player0.getStrength();
      assertEquals((-5), int0);
      
      int int1 = player0.type();
      assertEquals(5, int1);
      
      int int2 = Packable.UNDEFINED;
      Player player1 = new Player((-5), "", 35);
      assertFalse(player1.isDead());
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(1, player1.getStrength());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(35, player1.getPictureId());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((-2811), "", "Ori=^3'", (-2407), (-2811));
      player0.reset(false);
      player0.setMoney(10.0F);
      player0.type();
      player0.getPictureId();
      player0.id = (-2407);
      player0.getIP();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.getName();
      float float0 = player0.getMoney();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((-1), "", (-1));
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      player0.toString();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals((-1), player0.getPictureId());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919);
      player1.setJoinOK(player0, true);
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertEquals("0.0.0.0", player1.getIP());
      assertTrue(player1.isConnected());
      assertEquals(1, player1.getStrength());
      assertTrue(boolean0);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals("Player4919", player1.toString());
      assertEquals(0, player1.getPictureId());
      assertFalse(player1.isDead());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(1, "", "", 2, 2);
      player0.pack();
      int int0 = player0.getStrength();
      assertEquals(2, int0);
      assertEquals(2, player0.getPictureId());
      
      Player player1 = new Player(3558, "", 5);
      assertFalse(player1.isDead());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(1, player1.getStrength());
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player();
      player0.setJoinOK(player0, true);
      boolean boolean0 = player0.isJoinOK(player0, false);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "module.ModuleBrowserDialog$ModuleFilter");
      Player player0 = new Player(1281, "", 1281);
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(16672);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1161);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertFalse(boolean0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("Player16672", player0.getName());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(0, "", 0);
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(1);
      MockFile mockFile0 = new MockFile("0.0.0.0", "0.0.0.0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "_,bYNvK:a951HjfIn";
      PrintStream printStream0 = mockPrintStream0.printf("_,bYNvK:a951HjfIn", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      player0.pack(dataOutputStream0);
      assertEquals(45L, mockFile0.length());
      
      player0.pack();
      assertEquals("Player1", player0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player((-139), "%IMA(w|$baO0&)BM] ", "c$KBF6s01V", (-139), (-139));
      int int0 = player0.gangStrength();
      assertEquals((-139), int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-139), player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals("%IMA(w|$baO0&)BM] ", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(1576);
      boolean boolean0 = player0.isConnected();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("Player1576", player0.toString());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertTrue(boolean0);
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, (short)4919);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(0, "9Q&t8oC", "", 0, 0);
      int int0 = player0.gangStrength();
      assertEquals(0, player0.getPictureId());
      assertEquals("9Q&t8oC", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(0, int0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(373, "1RXzxUoPx<.Z?", "1RXzxUoPx<.Z?", 373, 373);
      int int0 = player0.gangStrength();
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(373, player0.getPictureId());
      assertEquals(373, int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player((-2673), "{va1YzYr", "{va1YzYr", 179, (-2673));
      Player player1 = new Player(2589, "JH/H-A@4", 2589);
      MockFile mockFile0 = new MockFile((File) null, "JH/H-A@4");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      player0.pack(dataOutputStream0);
      player0.isJoinOK(player1, true);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals((-2673), player0.getStrength());
      assertFalse(boolean0);
      assertTrue(player1.isConnected());
      assertFalse(player1.isDead());
      assertEquals(1, player1.getStrength());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(179, player0.getPictureId());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2;
      Player player0 = new Player(2, "m%g8X*.]18b%X<r8+U", "m%g8X*.]18b%X<r8+U", 10, 10);
      player0.getName();
      player0.getSubparty();
      player0.setDead(0L);
      player0.toString();
      player0.isDead();
      MockFile mockFile0 = new MockFile("m%g8X*.]18b%X<r8+U");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player();
      player0.type();
      player0.setDead((long) 5, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)79);
      byteArrayInputStream0.mark((byte)34);
      byteArrayInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)94;
      byteArray1[2] = (byte)5;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 4, (byte)34);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream1);
      long long0 = player0.getTimeOfDeath();
      assertEquals(5L, long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(1285, "Jd/RtA@4", 1285);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ro3X*", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "ro3X*", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      player0.pack(dataOutputStream0);
      int int0 = player0.gangStrength();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(1, int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(1285, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player(3412);
      player0.pack();
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("Player3412", player0.toString());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player((-3421));
      int int0 = (-4219);
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(3006, "&?# u", (-936));
      player0.setY((-936));
      player0.setMoney(1125.4623F);
      player0.getPictureId();
      player0.reset(false);
      player0.getName();
      float float0 = player0.getY();
      assertEquals(1125.4623F, player0.getMoney(), 0.01F);
      assertEquals((-936.0F), float0, 0.01F);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(4831, "", 573);
      player0.getName();
      player0.getMoney();
      player0.setMoney((-1.0F));
      player0.setDead((long) 4831);
      String string0 = "R5YPjiPDiD=";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("R5YPjiPDiD=", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(212);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      player0.getSubparty();
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)0;
      player0.setMoney((byte)0);
      player0.unpack(byteArray0);
      String string0 = player0.getName();
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player212", string0);
      assertEquals(0.0F, player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(308);
      boolean boolean0 = player0.isDead();
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(boolean0);
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals("Player308", player0.getName());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party(3958);
      player0.add(party0);
      player0.setJoinOK(player0, true);
      player0.isJoinOK(player0, true);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      player0.head = (Party) player1;
      int int0 = player0.gangStrength();
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(2, int0);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player(0, "", "", 2, 2);
      player0.setZ((-3591.8308F));
      player0.getStrength();
      player0.type();
      player0.type();
      player0.setDead((long) 2, true);
      player0.getY();
      player0.setJoinOK(player0, true);
      int int0 = Packable.PLAYER;
      float float0 = player0.getZ();
      assertEquals(2L, player0.getTimeOfDeath());
      assertEquals((-3591.8308F), float0, 0.01F);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player(14286);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(boolean0);
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals("Player14286", player0.getName());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(10);
      boolean boolean0 = player0.isJoinOK(player0, true);
      assertFalse(boolean0);
      
      long long0 = player0.getTimeOfDeath();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals("Player10", player0.getName());
      assertEquals(0L, long0);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player((-21190), (String) null, (String) null, (-21190), (-3047));
      assertEquals((-3047), player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      assertEquals((-21190), player0.getPictureId());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "";
      Player player0 = new Player(2);
      player0.getY();
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, (-1994), (-1994));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player(0, "", (String) null, 2);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(2, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player((-3345));
      Player player1 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      player0.unpack(byteArray0);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player(0);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player(771);
      Player player1 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player();
      float float0 = player0.getZ();
      assertFalse(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals("Player-1", player0.toString());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player(308, "", 308);
      player0.setDead();
      System.setCurrentTimeMillis(1392409281320L);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ(0.0F);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getZ(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("Player-1", player0.getName());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player((-18395));
      String string0 = player0.toString();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-18395", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = Packable.GAME_EVENT;
      Player player0 = new Player(5257);
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      assertEquals("Player5257", player0.getName());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Player player0 = new Player(0);
      assertTrue(player0.isConnected());
      
      player0.setConnected(false);
      player0.getX();
      player0.getMoney();
      System.setCurrentTimeMillis(695);
      player0.pack();
      assertFalse(player0.isConnected());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player(1521);
      player0.unpack(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      
      String string0 = player0.getIP();
      assertEquals("0.0.0.0", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Player player0 = new Player(8192);
      player0.reset(false);
      player0.gangStrength();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
}
