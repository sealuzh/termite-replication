/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 05:05:20 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((-1));
      player0.setConnected(false);
      Player player1 = new Player((-2816), "Gn )4pfI~h", "", (-2593), 0);
      player0.setJoinOK(player1, true);
      Player player2 = new Player(4919, (String) null, (String) null, (-141), 5);
      player2.reset(true);
      player0.isJoinOK(player2, true);
      assertTrue(player2.isConnected());
      
      boolean boolean0 = player0.isConnected();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(1596);
      Player player1 = new Player((short)4919);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3454), 1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, (byte)10);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream1);
      // Undeclared exception!
      try { 
        player1.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Player player0 = new Player(2120);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ((-1.0F));
      player0.setMoney((-1.0F));
      player0.gangStrength();
      player0.gangStrength();
      player0.setZ(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.getY();
      player0.setX(0.0F);
      player0.isDead();
      float float0 = player0.getZ();
      assertEquals(1.0F, float0, 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((byte)79);
      Player player1 = new Player((short)4919, "$z\">d+LeWP", "$z\">d+LeWP", (byte)79, (short)4919);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertFalse(boolean0);
      
      player0.getX();
      player1.getZ();
      assertEquals(79, player1.getPictureId());
      assertEquals(4919, player1.getStrength());
      
      Player player2 = new Player(0, (String) null, (String) null, 0, 0);
      player0.getZ();
      player2.getStrength();
      Player player3 = new Player();
      float float0 = player3.getZ();
      assertEquals("0.0.0.0", player3.getIP());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("Player-1", player3.toString());
      assertEquals(1, player3.getStrength());
      assertEquals(0, player3.getPictureId());
      
      float float1 = player2.getX();
      assertTrue(player2.isConnected());
      assertFalse(player2.isDead());
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(10.0F, float1, 0.01F);
      assertEquals(0.0F, player2.getY(), 0.01F);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((-1294));
      player0.setX((-1294));
      player0.getX();
      player0.getPictureId();
      player0.getName();
      player0.isConnected();
      int int0 = player0.gangStrength();
      assertEquals((-1294.0F), player0.getX(), 0.01F);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(1614, "", "", 1614, 0);
      player0.gangStrength();
      int int0 = player0.gangStrength();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, int0);
      assertTrue(player0.isConnected());
      assertEquals(1614, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(9480);
      Player player1 = new Player(9480);
      player0.setJoinOK(player1, false);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(1, player1.getStrength());
      assertTrue(player1.isConnected());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertTrue(boolean0);
      assertEquals("Player9480", player1.getName());
      assertEquals(0, player1.getPictureId());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((-428));
      player0.setJoinOK(player0, false);
      boolean boolean0 = player0.isJoinOK(player0, true);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals("Player-428", player0.toString());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(1592);
      player0.setJoinOK(player0, true);
      boolean boolean0 = player0.isJoinOK(player0, true);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals("Player1592", player0.getName());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertTrue(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(2, "", "", 2570, 2570);
      Player player1 = new Player(2570, "", 37);
      player0.next = (Party) player1;
      player0.setMoney(2);
      player1.setDead();
      player0.setY(2570);
      player0.getMoney();
      player0.getZ();
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      player0.reset(false);
      player0.reset(true);
      Player player1 = new Player((short)4919, (String) null, (short)4919);
      Player player2 = new Player((short)4919, "HscJouq9de|$W-", 1531);
      player1.isJoinOK(player2, true);
      player2.setDead(1488L);
      player1.setY(1.0F);
      float float0 = Player.TOLERANCE;
      player2.getX();
      player1.getX();
      player2.getZ();
      player1.toString();
      player2.toString();
      assertEquals(1488L, player2.getTimeOfDeath());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-3093));
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player1 = new Player();
      player0.pack();
      player0.boss = (Party) player1;
      player1.next = (Party) player0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.setDead((long) (-3093), false);
      player0.getTimeOfDeath();
      player1.setDead(0L);
      player1.getTimeOfDeath();
      player1.gangStrength();
      player0.isJoinOK(player1, false);
      player0.getZ();
      player0.getStrength();
      player1.toString();
      player1.getX();
      player0.getX();
      player1.getZ();
      player0.getMoney();
      player0.getZ();
      assertEquals((-3093L), player0.getTimeOfDeath());
      
      int int0 = player1.getStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((-31), (String) null, (String) null, (-31), (-31));
      int int0 = player0.gangStrength();
      assertEquals((-31), int0);
      
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      int int1 = player0.getStrength();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-31), int1);
      assertEquals((-31), player0.getPictureId());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player();
      player0.setJoinOK(player0, true);
      Party party0 = player0.prev;
      Player player1 = new Player();
      player1.setY((-1.0F));
      player0.isJoinOK(player1, true);
      player1.setZ((-1.0F));
      float float0 = Player.TOLERANCE;
      player1.getZ();
      player1.getZ();
      player1.pack();
      assertEquals((-1.0F), player1.getZ(), 0.01F);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Player player0 = new Player(6917, "state.Party", 6917);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.gangStrength();
      Party party0 = new Party();
      player0.boss = party0;
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.566621028859323
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Player player0 = new Player(0, ".0q=FQA", 0);
          byte[] byteArray0 = new byte[9];
          byteArray0[0] = (byte)12;
          byteArray0[1] = (byte)0;
          byte[] byteArray1 = player0.pack();
          player0.reset(true);
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
          DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
          Player player1 = new Player();
          Player player2 = new Player((byte)12, "e_,jNW)wWGKJ", "", (-2816), 4);
          player2.gangStrength();
          dataInputStream0.markSupported();
          player0.unpack(dataInputStream0);
          Player player3 = new Player((-1959), "HfrO", "e_,jNW)wWGKJ", 1);
          player3.getIP();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor76.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((-4362));
      assertEquals(0.0F, player0.getY(), 0.01F);
      
      Party party0 = player0.boss;
      player0.setY(0.1F);
      player0.getY();
      Player player1 = new Player(6, "", (-4362));
      assertEquals(0.0F, player1.getY(), 0.01F);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(5);
      player0.setY((-228.0F));
      player0.getStrength();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Player player1 = new Player();
      player0.getY();
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertEquals((-228.0F), player0.getY(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(1592);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      player0.pack(dataOutputStream0);
      assertEquals(31, byteArrayOutputStream0.size());
      
      player0.pack();
      assertEquals("Player1592", player0.getName());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((-4588));
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-4588", player0.getName());
      
      Player player1 = new Player((short)4919, (String) null, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-4588));
      String string0 = player1.getIP();
      assertEquals((-4588), player1.getPictureId());
      assertEquals(1, player1.getStrength());
      assertTrue(player1.isConnected());
      assertNull(string0);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals(10.0F, player1.getX(), 0.01F);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(1614);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
      assertEquals(1, player0.getStrength());
      assertEquals("Player1614", player0.toString());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(9480, "(", "(", 9480, 9480);
      player0.pack();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(9480, player0.getStrength());
      assertEquals(9480, player0.getPictureId());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " Q:@=hgj@a4");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player((-384), " Q:@=hgj@a4", "", (-26126), 332);
      assertTrue(player0.isConnected());
      
      player0.setConnected(false);
      int int0 = player0.getStrength();
      assertFalse(player0.isConnected());
      assertEquals(332, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(4);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-71);
      player0.unpack(byteArray0);
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals("Player4", player0.getName());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(4, "[d!u", "[d!u", (-1875), 4);
      player0.setX(0.0F);
      player0.setDead();
      player0.getZ();
      player0.type();
      float float0 = player0.getX();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player((-1429), (String) null, (-1429));
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player();
      player0.gangStrength();
      player0.setDead((long) (short)4919);
      player0.gangStrength();
      player0.setZ(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.getY();
      player0.setX(0.0F);
      player0.isDead();
      float float0 = player0.getZ();
      assertEquals(4919L, player0.getTimeOfDeath());
      assertEquals(1.0F, float0, 0.01F);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(3, "state.Party", "", 3, (-2220));
      int int0 = player0.getPictureId();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(3, int0);
      assertEquals((-2220), player0.getStrength());
      assertEquals("state.Party", player0.getIP());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      Player player0 = new Player((-3267), "", "", (byte)0);
      player0.getIP();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(1);
      Player player1 = new Player((-1733), "", (short)4919);
      player0.isJoinOK(player1, false);
      player1.prev = (Party) player0;
      player1.setMoney((-1733));
      float float0 = player1.getMoney();
      assertEquals((-1733.0F), float0, 0.01F);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player((-2353), "", "", 3587, 591);
      player0.getName();
      player0.setDead(1L, false);
      player0.setDead(0L, true);
      player0.setDead(2187L);
      player0.reset(false);
      player0.setZ(591);
      player0.gangStrength();
      boolean boolean0 = player0.isDead();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(1596);
      player0.getSubparty();
      Party party0 = new Party();
      player0.add(party0);
      Player player1 = new Player();
      player1.isBoss();
      player1.getStrength();
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.380937795632014
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player();
      player0.setMoney(1540.0F);
      player0.setX(0.0F);
      player0.pack();
      player0.setDead((-2797L));
      player0.setDead((-2797L), true);
      Party party0 = new Party();
      party0.remove(player0);
      party0.head = (Party) player0;
      party0.add(player0);
      party0.remove(player0);
      player0.add(party0);
      player0.setX(0.0F);
      player0.getZ();
      player0.reset(true);
      player0.getPictureId();
      player0.setDead();
      player0.type();
      player0.getTimeOfDeath();
      player0.getZ();
      player0.setY(0.0F);
      Player player1 = new Player(0);
      player1.getY();
      player0.getMoney();
      player0.getX();
      player1.getPictureId();
      player0.getName();
      assertEquals(0.0F, player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player(4, (String) null, 4);
      player0.prev = null;
      long long0 = player0.getTimeOfDeath();
      assertEquals(0L, long0);
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(4, player0.getPictureId());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player((-1201), "", (-1201));
      Party party0 = player0.head;
      player0.head = null;
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      player0.toString();
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-1201), player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(957);
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      System.setCurrentTimeMillis(957);
      int int0 = player0.gangStrength();
      assertEquals((-67), player0.getId());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player((-127));
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)124;
      Player player0 = new Player((byte) (-34));
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      String string0 = player0.getIP();
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("Player-34", player0.toString());
      assertEquals("0.0.0.0", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(4);
      player0.reset(false);
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("Player4", player0.getName());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player((-1259));
      boolean boolean0 = player0.isDead();
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals("Player-1259", player0.getName());
      assertFalse(boolean0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player((-765), (String) null, (String) null, (-765), (-765));
      int int0 = player0.getPictureId();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals((-765), player0.getStrength());
      assertEquals((-765), int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player((-1294));
      float float0 = player0.getX();
      assertEquals(10.0F, float0, 0.01F);
      
      int int0 = player0.getPictureId();
      assertEquals(0, int0);
      
      String string0 = player0.getName();
      assertEquals("Player-1294", string0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player((-2046));
      byte[] byteArray0 = new byte[0];
      player0.unpack(byteArray0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals("Player-2046", player0.getName());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(2536);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player(4);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player(1614);
      player0.setConnected(true);
      Player player1 = new Player((short)4919);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player1.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Player player0 = new Player((-2112));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.setMoney((-2112));
      player0.unpack(dataInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals((-2112.0F), player0.getMoney(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player((-49));
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player(4);
      player0.setZ(4);
      System.setCurrentTimeMillis(4);
  }
}
