/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 13:08:31 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",L\"MMYTc90s'khM", 33L);
      JSONObject jSONObject1 = jSONObject0.put("M", 33L);
      jSONObject0.toString((-52526265));
      jSONObject1.keys();
      int int0 = jSONObject0.optInt("M");
      assertEquals(33, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "{<q+5Oq3lh:%S";
      JSONTokener jSONTokener0 = new JSONTokener("{<q+5Oq3lh:%S");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {<q+5Oq3lh:%S
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      Double.sum(0.0, (-2390.5341));
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.isFinite(0.0);
      jSONObject0.names();
      String string0 = "*:-WN&BC,Mdw#<";
      String string1 = "fb;}^+1?lN";
      Short short0 = Short.valueOf((short) (-21467));
      JSONObject jSONObject1 = jSONObject0.putOpt("?ZOwr_c9k!L", short0);
      String string2 = "CAG[tk";
      jSONObject1.optBoolean("CAG[tk");
      jSONObject0.optInt("fb;}^+1?lN", 32);
      jSONObject0.optString("*:-WN&BC,Mdw#<");
      JSONObject.getNames(jSONObject0);
      jSONObject0.optJSONArray("fb;}^+1?lN");
      JSONObject jSONObject2 = jSONObject0.put("fb;}^+1?lN", true);
      JSONObject.quote("I(w>-#5mP\"ZRkt_");
      JSONObject.getNames(jSONObject2);
      JSONObject.getNames(jSONObject0);
      jSONObject0.getBoolean("fb;}^+1?lN");
      try { 
        jSONObject2.getDouble("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",L\"MMYTc90s'khM", (-16L));
      String string0 = "M";
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",L\"MMYTc90s'khM";
      stringArray0[1] = "M";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.optDouble("wheel.json.JSONTokener", 1515.0097204135);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>(160);
      hashMap0.put((Object) null, jSONObject0);
      jSONObject0.put("oHHDmgG+e4nN}AvNt", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString(70, (-1483));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("false", 1L);
      Long long0 = new Long(1L);
      Object object0 = JSONObject.NULL;
      jSONObject0.put("false", (Object) "false");
      Boolean boolean0 = new Boolean("iY=ashCde");
      jSONObject0.getBoolean("false");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-54));
      Byte.toUnsignedInt((byte)35);
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.test(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      linkedList0.removeIf(predicate2);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.doubleToString(2822.1);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("2822.1", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("P>S3~", 709L);
      jSONObject0.append("awOX", jSONObject1);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      jSONObject0.put("2822.1", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("2822.1");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float(1947.9595F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("Y:W2L/&45T^9?a", 1L);
      jSONObject1.isNull("Y:W2L/&45T^9?a");
      jSONObject0.getInt("Y:W2L/&45T^9?a");
      String string0 = "] is not a JSONArray.";
      try { 
        Short.decode("Y:W2L/&45T^9?a");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Y:W2L/&45T^9?a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt(",\n");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) null, ",\n");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      int int0 = 1331;
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-558), 1331);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "aAQ";
      stringArray0[1] = "true";
      stringArray0[2] = "mi6^ZWpc";
      stringArray0[3] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>(101);
      JSONObject jSONObject1 = jSONObject0.put("aAQ", (Map) hashMap0);
      jSONObject1.toString(101, (-1483));
      JSONObject.getNames(jSONObject1);
      JSONObject.doubleToString((-1483));
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject1.write(writer0);
      JSONObject.testValidity("true");
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float((-1.0));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString(1631, 1631);
      // Undeclared exception!
      jSONObject0.getString(string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7269369375735457
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("@{4l;", 1L);
      Long long0 = new Long(1L);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("@{4l;", (Object) "@{4l;");
      jSONObject0.put("@{4l;", false);
      Boolean boolean0 = new Boolean("iY=ashCde");
      jSONObject0.getBoolean("@{4l;");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      hashMap0.put(long0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject1.put("rem", (Collection) linkedList0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0.0";
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      Double double0 = new Double((-881.216));
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(double0, biFunction0);
      Double.sum((-1822.811974), 195.6955026391);
      Double double1 = new Double(1.0);
      hashMap0.put(double1, "0.0");
      hashMap0.put((Double) null, "0.0");
      jSONObject0.put("0.0", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("0.0");
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float((-1.0));
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("Expected '");
      jSONObject0.put("_7.`", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("_7.`");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Long long0 = new Long(2877L);
      JSONObject jSONObject0 = new JSONObject(long0);
      int int0 = 128;
      jSONObject0.put("] not found.", (-1L));
      String string0 = "isfloatToRawIntBits";
      Long.getLong("isfloatToRawIntBits");
      int int1 = 4639;
      String string1 = jSONObject0.toString(128, 4639);
      // Undeclared exception!
      jSONObject0.getJSONArray(string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2097368806514543
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",L\"MMYTc90s'khM", (-1L));
      JSONObject jSONObject1 = jSONObject0.put("M", (-1L));
      jSONObject0.toString((-52526265));
      jSONObject1.keys();
      int int0 = jSONObject0.optInt("M");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Short short0 = new Short((short)13);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@00000000030", (Object) short0);
      jSONObject1.optDouble("java.lang.Short@00000000030");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Short@00000000030", (Collection) linkedList0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      // Undeclared exception!
      jSONObject0.toString(776, 3259);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.remove("lj_$0Fp|Ww0:0T%(MB]");
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("^_CVhHp(k_V.b (", (Object) long0);
      double double0 = jSONObject1.getDouble("^_CVhHp(k_V.b (");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1776.6931F));
      JSONObject.getNames((Object) float0);
      JSONObject jSONObject1 = jSONObject0.put(" of ", 1L);
      jSONObject1.isNull(" of ");
      String string0 = jSONObject0.optString(" of ", "\",R177Eu{s.,McZ");
      String string1 = jSONObject1.toString((-368));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(84e5AQe Y'";
      stringArray0[1] = "(84e5AQe Y'";
      stringArray0[2] = "(84e5AQe Y'";
      stringArray0[3] = "(84e5AQe Y'";
      stringArray0[4] = "(84e5AQe Y'";
      stringArray0[5] = "(84e5AQe Y'";
      stringArray0[6] = "<n\u0000wzx17x(:Bx";
      stringArray0[7] = "(84e5AQe Y'";
      stringArray0[8] = "(84e5AQe Y'";
      JSONObject jSONObject0 = new JSONObject("(84e5AQe Y'", stringArray0);
      jSONObject0.optInt("(84e5AQe Y'");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      linkedList0.add(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (Collection) linkedList0);
      jSONObject1.optBoolean("{][YZ&", true);
      JSONArray jSONArray1 = linkedList0.pollFirst();
      JSONObject jSONObject2 = jSONObject1.put("(84e5AQe Y'", false);
      JSONObject jSONObject3 = jSONObject2.put("(84e5AQe Y'", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONArray jSONArray2 = jSONObject3.optJSONArray("(84e5AQe Y'");
      assertFalse(jSONArray2.equals((Object)jSONArray1));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-8));
      linkedList0.add(byte0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isparseFloat", (Collection) linkedList0);
      jSONObject1.optJSONArray("isparseFloat");
      jSONObject1.putOpt("isparseFloat", jSONObject0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8546526185598229
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", 1811);
      jSONObject1.getDouble("' and instead saw '");
      JSONObject.doubleToString(1811);
      jSONObject0.length();
      JSONObject.quote("' and instead saw '");
      JSONObject.testValidity("\"' and instead saw '\"");
      jSONObject1.optJSONObject("' and instead saw '");
      jSONObject0.length();
      JSONObject.doubleToString(5290.960132660252);
      String string0 = "null";
      try { 
        jSONObject0.getDouble("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",)\"MMYTc90s'khM", (-16L));
      jSONObject1.getLong(",)\"MMYTc90s'khM");
      String string0 = JSONObject.valueToString(",)\"MMYTc90s'khM", (short)4088, (short)4088);
      assertNotNull(string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "istoString");
      // Undeclared exception!
      jSONObject0.toString(3073);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")o4;", (Object) ")o4;");
      JSONTokener jSONTokener0 = new JSONTokener(")o4;");
      jSONTokener0.nextTo('p');
      Integer integer0 = new Integer(453);
      JSONObject jSONObject2 = new JSONObject(integer0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")o4;";
      stringArray0[1] = ")o4;";
      stringArray0[2] = ")o4;";
      stringArray0[3] = ")o4;";
      stringArray0[4] = ")o4;";
      stringArray0[5] = ")o4;";
      stringArray0[6] = ")o4;";
      jSONObject1.put("ls+@'", true);
      stringArray0[7] = ")o4;";
      stringArray0[8] = ")o4;";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      assertEquals(1, jSONObject2.length());
      
      Byte byte0 = new Byte((byte) (-39));
      Long.getLong("F");
      jSONObject1.putOpt(")o4;", (Object) null);
      Short short0 = new Short((byte) (-39));
      JSONObject.numberToString(short0);
      String string0 = JSONObject.quote(")o4;");
      assertEquals("\")o4;\"", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      float float1 = 0.0F;
      Float.max(0.0F, 0.0F);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      Short.toUnsignedInt((short) (-4666));
      Short.compare((short)4, (short)62);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("9dV]Q!a,dQvN{x", (long) (short)4);
      JSONObject jSONObject1 = new JSONObject(float0);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.optLong("\"yv2zcb&@ZlBe9gOG", 0L);
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      Object object1 = new Object();
      jSONObject1.remove("\"yv2zcb&@ZlBe9gOG");
      Float float1 = new Float((float) 60870);
      jSONObject0.put("i", (Object) float0);
      Boolean boolean0 = new Boolean("USv%lM9e");
      boolean boolean1 = new Boolean("!! ?t@)");
      jSONObject1.optString("\"yv2zcb&@ZlBe9gOG", "");
      try { 
        jSONObject0.getDouble("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isopt";
      jSONObject0.optInt("isopt");
      jSONObject0.optInt("isopt", 0);
      String string1 = "fKTBMVsMomI!V]\\0LP";
      Long.getLong("fKTBMVsMomI!V]\u0000LP");
      Long.compare(909L, 909L);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = " of ";
      JSONObject jSONObject1 = jSONObject0.put(" of ", 1L);
      Float float0 = new Float((double) 1L);
      try { 
        jSONObject1.append(" of ", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ of ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Float float0 = new Float((double) 0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("i_numberOToString", object0);
      JSONObject jSONObject2 = jSONObject0.append("i_numberOToString", jSONObject1);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "{?}";
      JSONTokener jSONTokener0 = new JSONTokener("{?}");
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {?}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString(hashMap0, (-548), 1331);
      jSONObject1.names();
      Boolean boolean0 = new Boolean("{}");
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((double) 0);
      JSONObject jSONObject1 = jSONObject0.append("N", float0);
      JSONObject.numberToString(float0);
      jSONObject0.has("N");
      int int0 = jSONObject1.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("N");
      JSONObject jSONObject1 = jSONObject0.putOpt("N", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.1773613811424863
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",L\"MMYTc90s'khM", (-16L));
      String[] stringArray0 = new String[4];
      jSONObject1.remove(">Dms%[P");
      stringArray0[0] = ",L\"MMYTc90s'khM";
      stringArray0[1] = "M";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>(160);
      jSONObject0.put("oHHDmgG+e4nN}AvNt", (Map) hashMap0);
      jSONObject1.toString(70, 160);
      jSONObject1.toString(70, (-1483));
      String[] stringArray1 = JSONObject.getNames(jSONObject2);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject.getNames((Object) null);
      jSONObject1.opt(",:]}/\"[{;=#");
      JSONObject.doubleToString(1.0);
      JSONObject jSONObject2 = jSONObject0.put("1", true);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Byte byte0 = new Byte((byte)55);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextValue();
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1244876884053943
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put(",L\"MMYTc90s'khM", (-16L));
      String[] stringArray0 = new String[4];
      jSONObject1.toString((-1767), (-32864431));
      stringArray0[0] = ",L\"MMYTc90s'khM";
      stringArray0[1] = "M";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>(160);
      jSONObject0.put("oHHDmgG+e4nN}AvNt", (Map) hashMap0);
      jSONObject1.toString(70, (-1483));
      String[] stringArray1 = JSONObject.getNames(jSONObject2);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0789252127715874
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Float float0 = new Float(1947.9595F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optLong("( {\"t(Rz", 7L);
      jSONObject0.remove("ishashCode");
      Float.sum(833.8705F, 1947.9595F);
      jSONObject0.optLong("ishashCode");
      String string0 = JSONObject.quote("min");
      assertEquals("\"min\"", string0);
      
      jSONObject0.toString((-2311), (-2311));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean boolean0 = new Boolean("t/:MTcqN\"T/NXW|Xl[u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("t/:MTcqN\"T/NXW|Xl[u", (-1L));
      jSONObject0.remove("t/:MTcqN\"T/NXW|Xl[u");
      jSONObject1.remove("I_H4V|ywvJ+@Fq");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 42, 1379);
      Float.sum(0.0F, 4473.6F);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of val
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put(string0, (Collection) linkedList0);
      jSONObject0.getJSONArray(string0);
      long long0 = jSONObject0.optLong("Expected a ',' or '}'", (-932L));
      assertEquals((-932L), long0);
      
      String string1 = JSONObject.doubleToString((-635.073));
      assertEquals("-635.073", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.back();
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{yrv8");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {yrv8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((double) 0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.opt((String) null);
      String string0 = JSONObject.doubleToString(3637.63);
      assertEquals("3637.63", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{?}");
      jSONTokener0.syntaxError("{?}");
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("] is not a JSONArray.", (-1847));
      assertEquals((-1847), int0);
      
      String string0 = JSONObject.quote("{?}");
      assertEquals("\"{?}\"", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Float float0 = new Float((-769.5));
      Float.isFinite(0.0F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.put("u5`2[5`}", (Map) null);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optDouble((-1947));
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("", object0);
      String string0 = jSONObject1.optString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1244876884053943
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",L\"MMYTc90s'khM", (-16L));
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",L\"MMYTc90s'khM";
      stringArray0[1] = "M";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>(160);
      Boolean boolean0 = Boolean.valueOf(",L\"MMYTc90s'khM");
      hashMap0.put(boolean0, jSONObject2);
      jSONObject0.put("oHHDmgG+e4nN}AvNt", (Map) hashMap0);
      jSONObject1.toString(70, (-1483));
      JSONObject.getNames(jSONObject2);
      String string0 = JSONObject.quote("oHHDmgG+e4nN}AvNt");
      assertEquals("\"oHHDmgG+e4nN}AvNt\"", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add((Byte) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Float float0 = new Float((-769.5));
      Float.max(636.9391F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.accumulate("getvalueOf", float0);
      jSONObject0.getInt("getvalueOf");
      jSONObject0.optJSONObject(" at character ");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      jSONObject0.toString(968);
      Short.compare((short) (-1719), (short)193);
      Short.compare((short) (-436), (short)55);
      Short.compare((short) (-4580), (short)4);
      Short.toUnsignedLong((short)931);
      String[] stringArray1 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray1.length);
      
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(object0);
      StringWriter stringWriter0 = new StringWriter(1885);
      StringWriter stringWriter1 = stringWriter0.append('/');
      StringWriter stringWriter2 = stringWriter1.append('/');
      Long long0 = new Long(0L);
      JSONObject.numberToString(long0);
      JSONObject.numberToString(long0);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "java.lang.Long@0000000005");
      StringWriter stringWriter4 = stringWriter3.append('e');
      jSONObject1.write(stringWriter4);
      JSONObject.quote("java.lang.Long@0000000005");
      int int0 = jSONObject1.optInt("b</FUS:cxvL.6", 67);
      assertEquals(67, int0);
      
      jSONObject1.write(stringWriter2);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "%[h3";
      jSONObject0.isNull("%[h3");
      try { 
        Short.decode("%[h3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%[h3\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("t/:MTcqN\"T/NXW|Xl[u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("t/:MTcqN\"T/NXW|Xl[u", (-1L));
      jSONObject0.optLong("t/:MTcqN\"T/NXW|Xl[u");
      Integer integer0 = new Integer((-1361));
      assertEquals((-1361), (int)integer0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.2963611597910563
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float float0 = new Float((double) 0);
      Float.isFinite(0.0F);
      Float.min(282.4F, 753.22F);
      JSONObject.numberToString(float0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Byte, Double> hashMap1 = new HashMap<Byte, Double>();
      JSONObject jSONObject1 = jSONObject0.put("getgetClass", (Map) hashMap1);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-8));
      linkedList0.add(byte0);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
      
      jSONArray0.toString((-2778));
      String string0 = JSONObject.valueToString(jSONArray0, 662, (-1847));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3175781251431864
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Double double0 = new Double(1.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Null key.";
      stringArray0[1] = "\",\n\"";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int0 = jSONObject0.optInt("Null key.", 8);
      assertEquals(8, int0);
      
      String string1 = jSONObject0.toString(70, 70);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8802308432118837
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float(1947.9595F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.isFinite(1947.9595F);
      jSONObject0.length();
      String string0 = "{}";
      jSONObject0.optLong("{}");
      jSONObject0.put("{}", (long) 3);
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(776, 776);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 621;
      Float float0 = new Float((float) 621);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString(boolean0, 42, 52);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("iscompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of iscompare
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.974116193242197
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = new Float((-769.5));
      Float.max(636.9391F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONObject(" at character ");
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
      
      jSONObject0.toString(1330);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.125942110010316
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = new Float(1947.9595F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optLong("( {\"t(Rz", 7L);
      Float.sum(833.8705F, 1947.9595F);
      jSONObject0.accumulate("ishashCode", float0);
      jSONObject0.optLong("ishashCode");
      JSONObject.quote("min");
      Float.max(0.0F, 1947L);
      jSONObject0.toString((-2311), (-2311));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)101);
      linkedList0.add(byte0);
      Byte byte1 = new Byte((byte) (-8));
      linkedList0.add(byte1);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isparseFloat", (Collection) linkedList0);
      try { 
        jSONObject1.append((String) null, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float((double) 0);
      Byte.valueOf((byte)62);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "OA";
      Double double0 = new Double(Double.NaN);
      Double.max(Double.NaN, 1021.8582571358103);
      try { 
        jSONObject0.append("OA", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.7769107947276006
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      Short.toUnsignedInt((short) (-4666));
      Short.compare((short)4, (short)62);
      Short.compare((short)57, (short)1);
      Short.compare((short) (-4666), (short)1);
      Short.compare((short)55, (short) (-1787));
      Short.compare((short)0, (short)46);
      Short.toUnsignedLong((short)4);
      JSONObject.getNames((Object) float0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.accumulate("bAZcS2@e_c}", "b");
      try { 
        jSONObject0.getDouble("bAZcS2@e_c}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bAZcS2@e_c}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("u):j?", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("isfloatToIntBits");
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("H}1(st0UPSk MXw7", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      long long0 = jSONObject0.optLong(string0, (-1114L));
      assertEquals((-1114L), long0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("RjqhGf|t~WiUX");
      assertEquals("", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject2 = new JSONObject();
      String string0 = jSONObject1.optString((String) null, "java.lang.Float@0000000005.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(".X@n<VlkdE>x=2w", ".X@n<VlkdE>x=2w");
      assertEquals(".X@n<VlkdE>x=2w", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.9184277849930977
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float((double) 0);
      Float.min(282.4F, 753.22F);
      String string0 = JSONObject.numberToString(float0);
      Float float1 = new Float(883.6343704281991);
      String string1 = JSONObject.valueToString(float1, 0, 0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-8));
      linkedList0.add(byte0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isparseFloat", (Collection) linkedList0);
      jSONObject1.put("isparseFloat", (long) (byte) (-8));
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-23L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put(")o4;", (Object) ")o4;");
      try { 
        jSONObject1.getJSONArray(")o4;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")o4;\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.6354502583387052
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-8));
      Byte.compare((byte) (-8), (byte) (-8));
      linkedList0.add(byte0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.quote("d");
      JSONObject jSONObject1 = jSONObject0.put("isparseFloat", (Collection) linkedList0);
      jSONObject0.getJSONArray("isparseFloat");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.put("toH", (Object) jSONArray0);
      assertEquals(6, jSONObject1.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("u):j?", "u):j?");
      jSONObject0.accumulate("u):j?", jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0735428464085233
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-54));
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("getvalueOf");
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.203750922511834
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject.quote(",\n");
      Double double0 = new Double(1.0);
      Double.min(1.0, 0.0);
      String[] stringArray0 = new String[2];
      Double.min(1.0, Double.NaN);
      stringArray0[0] = "Null key.";
      stringArray0[1] = "\",\n\"";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.toString(70, 70);
      try { 
        jSONObject0.getJSONArray("\",\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\",\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optDouble((-1947));
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float float0 = new Float((-769.5));
      Float.max(636.9391F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONObject(" at character ");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Integer integer0 = new Integer((-823));
      hashMap0.put((Float) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float((-769.5));
      Float.max(636.9391F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('U');
      jSONObject0.write(stringWriter1);
      jSONObject0.optJSONObject(" at character ");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5443819809168389
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject.valueToString("{GQ6ww]c[Le");
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      jSONObject0.append("W!]rBUOmnX*U2twH", object0);
      JSONObject.doubleToString((-3927.39365413012));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{GQ6ww]c[Le");
      StringWriter stringWriter2 = stringWriter1.append('/');
      Writer writer0 = jSONObject0.write(stringWriter2);
      Writer writer1 = jSONObject0.write(writer0);
      assertSame(writer1, stringWriter0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put((Long) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("] is not a Boolean.", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 211);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-54));
      Byte.toUnsignedLong((byte)39);
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.accumulate("]b1", "]b1");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-8));
      linkedList0.add(byte0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("isparseFloat", (Collection) linkedList0);
      jSONObject0.accumulate("isparseFloat", linkedList0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("true", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 621, 621);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("'vxH+(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 'vxH+(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float.min(266.94415F, 753.22F);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-54));
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.get("kQ9zF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kQ9zF\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("SD(l8", "SD(l8");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("BSGrrC8J(~S2B4r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BSGrrC8J(~S2B4r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" of ", 3453L);
      jSONObject1.optDouble(" of ", (double) 3453L);
      jSONObject1.isNull(" of ");
      JSONObject jSONObject2 = new JSONObject();
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-8));
      linkedList0.add(byte0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isparseFloat", (Collection) linkedList0);
      jSONObject1.get("isparseFloat");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("EMR-{M", 1527.84);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(" of ", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.022808529414704
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.put("", (-1584));
      double double0 = jSONObject0.optDouble("");
      assertEquals(2, jSONObject0.length());
      assertEquals((-1584.0), double0, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "ovNfI{";
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("ovNfI{", "ovNfI{");
      try { 
        jSONObject0.getLong("ovNfI{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ovNfI{\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-8));
      linkedList0.add(byte0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("[", (double) (byte) (-8));
      jSONObject0.put("isparseFloat", (Collection) linkedList0);
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-846.4339278775));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Short short0 = new Short((short) (-199));
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" of ", 1L);
      jSONObject0.getLong(" of ");
      boolean boolean0 = new Boolean(" of ");
      try { 
        Short.decode("] is not a JSONArray.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"] is not a JSONArray.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.137808159182962
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.remove("\",\n\"");
      int int0 = jSONObject0.optInt("java.lang.Short@00000000020");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.7405117043237692
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-8));
      linkedList0.add(byte0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isparseFloat", (Collection) linkedList0);
      String string0 = "!QdkC'\\*BvsT";
      try { 
        jSONObject1.getInt("isparseFloat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isparseFloat\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6354502583387052
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-112));
      linkedList0.push(byte0);
      Byte byte1 = new Byte((byte) (-8));
      linkedList0.add(byte1);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isparseFloat", (Collection) linkedList0);
      Integer integer0 = new Integer((-1920));
      jSONObject0.putOpt("isparseFloat", integer0);
      jSONObject1.getDouble("isparseFloat");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject.quote("");
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("mkw!+Ca");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mkw!+Ca\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-54));
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(1084);
      String string0 = JSONObject.valueToString((Object) null, 32, (byte) (-54));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("}(RQNWA!)", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, float0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject.doubleToString(0.5782285247167956);
      JSONTokener jSONTokener0 = new JSONTokener("0.5782285247167956");
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0.5782285247167956";
      stringArray0[1] = "has";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long((-628L));
      hashMap0.putIfAbsent(long0, linkedList0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.0392049157774075
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",L\"MMYTc90s'khM", (-1L));
      JSONObject jSONObject1 = jSONObject0.put("M", (-1L));
      jSONObject1.remove(",L\"MMYTc90s'khM");
      jSONObject0.toString((-52526265));
      jSONObject1.keys();
      String string0 = JSONObject.doubleToString((-52526265));
      assertEquals("-5.2526265E7", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      Byte byte0 = new Byte((byte)123);
      hashMap0.put((Float) null, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-28734958));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.8143075196071257
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-54));
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("+\"l 5Ujno");
      assertEquals(0L, long0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double((-1499.3318285));
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.6425559869377246
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("@{4l;", 1L);
      Long long0 = new Long(1L);
      Object object0 = JSONObject.NULL;
      jSONObject0.put("@{4l;", (Object) "@{4l;");
      Boolean boolean0 = new Boolean("getadd");
      try { 
        jSONObject0.getBoolean("@{4l;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@{4l;\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-236L));
      Object object0 = JSONObject.NULL;
      String string0 = "Expected a ',' or ']'";
      Float float0 = new Float((double) (-236L));
      jSONObject0.put("Expected a ',' or ']'", (Object) float0);
      Boolean boolean0 = new Boolean("getlongValue");
      try { 
        jSONObject0.getBoolean("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float((double) 83);
      float float1 = Float.min(83, 83);
      JSONObject.testValidity(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")o4z", (Object) ")o4z");
      Integer integer0 = new Integer(1681);
      jSONObject1.append("T=EE", integer0);
      try { 
        jSONObject0.getBoolean(")o4z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")o4z\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("A,i{iZEx.AmW", (-1194.275972116));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("A,i{iZEx.AmW"));
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optDouble("va", 0.0);
      int int0 = (-1947);
      jSONArray0.optDouble((-1947));
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.4741083800990982
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("gettoLowerCase", 0L);
      boolean boolean0 = jSONObject0.optBoolean(",\n");
      assertFalse(boolean0);
      
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1063911301690834
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = ";/V)j[=JpE&S'>r3+";
      JSONObject.quote(";/V)j[=JpE&S'>r3+");
      JSONObject jSONObject0 = new JSONObject((Object) ";/V)j[=JpE&S'>r3+");
      try { 
        jSONObject0.getLong(";/V)j[=JpE&S'>r3+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";/V)j[=JpE&S'>r3+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1595888143086257
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1);
      assertEquals("{}", string0);
      
      String string1 = JSONObject.doubleToString(2822.1);
      assertEquals("2822.1", string1);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote(";/V)j[=JpE&S'>r3+");
      assertEquals("\";/V)j[=JpE&S'>r3+\"", string0);
      
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("\";/V)j[=JpE&S'>r3+\"");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject.quote(";/V)j[=JpE&S'>r3+");
      JSONTokener jSONTokener0 = new JSONTokener("\";/V)j[=JpE&S'>r3+\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \";/V)j[=JpE&S'>r3+\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject.quote(";/V)j[=JpE&S'>r3+");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2.2608348049930918);
      jSONArray0.join("Yv}!E*(");
      try { 
        jSONArray0.getLong((-1348));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1348] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject.quote(";/V)j[=JpE&S'>r3+");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(";/V)j[=JpE&S'>r3+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ;/V)j[=JpE&S'>r3+
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ixp| #%MVV6\\u3&";
      try { 
        jSONObject0.getString(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ixp| #%MVV6\\\\u3&\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(" of ", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject.quote(",\n");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\",\n\"";
      stringArray0[1] = ",\n";
      stringArray0[2] = ",\n";
      stringArray0[3] = "\",\n\"";
      stringArray0[4] = "\",\n\"";
      stringArray0[5] = "\",\n\"";
      stringArray0[6] = "\",\n\"";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      jSONObject0.optDouble((String) null);
      Byte byte0 = new Byte((byte) (-59));
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = JSONObject.quote("i-%}*PM\" ?O");
      assertEquals("\"i-%}*PM\\\" ?O\"", string0);
      
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("ZOi,(S");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-8));
      linkedList0.add(byte0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Consumer<Byte> consumer0 = (Consumer<Byte>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      JSONObject jSONObject1 = jSONObject0.put("isparseFloat", (Collection) linkedList0);
      jSONObject1.getString("isparseFloat");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.5228146795137598
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-8));
      linkedList0.add(byte0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("isparseFloat", (Collection) linkedList0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.quote("?/~D(@9Po49V0P{");
      assertEquals("\"?/~D(@9Po49V0P{\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"?/~D(@9Po49V0P{\"");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject.doubleToString(2822.1);
      JSONObject.doubleToString(2822.1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("iswait");
      assertNull(object0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-54));
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getJSONObject("istoHexString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoHexString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject.quote(",\n");
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
