/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 06:23:53 GMT 2020
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.RandomForest;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.Loader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("setMinNum");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance0 = new DenseInstance(2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.setPriors(instances0);
      evaluation0.correct();
      try { 
        evaluation0.updateStatsForPredictor((-1095.0220595508), sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      SGD sGD0 = new SGD();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("    ");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.falseNegativeRate(0);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("setMinNum");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance0 = new DenseInstance(2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-2969.554837357655), doubleArray0);
      instances0.iterator();
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(".bsi");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.m_NumClasses = (-1);
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      instances0.removeAll(linkedList0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation1.m_ClassPriorsSum = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNoClass(false);
      Instances instances1 = testInstances0.generate("@relation");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPredicted = (double) (-2);
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation1.matthewsCorrelationCoefficient((-1));
      evaluation0.makeDistribution(0.95);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation1.errorRate();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_Unclassified = (double) (-2);
      evaluation0.matthewsCorrelationCoefficient((-2));
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.priorEntropy();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SGD sGD0 = new SGD();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      CoverTree coverTree1 = new CoverTree();
      evaluation0.toSummaryString("\tDo not perform any cross validation.\n", true);
      evaluation0.unweightedMicroFmeasure();
      char[] charArray0 = new char[3];
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.matthewsCorrelationCoefficient(27);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.resetStructure();
      Environment environment0 = Environment.getSystemWide();
      databaseLoader0.setEnvironment(environment0);
      databaseLoader0.setSource("@relation");
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'c';
      charArray0[2] = ';';
      charArray0[3] = '`';
      charArray0[4] = 'l';
      int int0 = 20;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-102261132), charArray0, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      Instances instances1 = evaluation0.getHeader();
      evaluation0.weightedAreaUnderROC();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.equals(evaluation0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SGD sGD0 = new SGD();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      CoverTree coverTree1 = new CoverTree();
      evaluation0.toSummaryString("\tDo not perform any cross validation.\n", true);
      evaluation0.unweightedMicroFmeasure();
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      evaluation0.num2ShortID(0, charArray0, 0);
      // Undeclared exception!
      try { 
        instances0.renameAttribute(7, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList1 = new LinkedList<KStar>();
      capabilities0.disableAllClasses();
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getOptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      evaluation0.meanAbsoluteError();
      double double0 = evaluation0.m_SumSqrErr;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("DatabaseUtils.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "v");
      evaluation0.m_ClassPriorsSum = 0.0;
      evaluation0.unweightedMacroFmeasure();
      evaluation0.priorEntropy();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.falsePositiveRate((-2255));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getCapabilities();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Object object0 = new Object();
      evaluation1.equals((Object) null);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      intArray0[2] = (-1728217072);
      intArray0[3] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1728217072), intArray0, (-1728217072));
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) logitBoost0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@data");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.deleteStringAttributes();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      PART pART0 = new PART();
      Capabilities capabilities1 = pART0.getCapabilities();
      capabilities0.supports(capabilities1);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      Classifier classifier0 = null;
      Evaluation.makeOptionString((Classifier) null, true);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances1, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance sets must be of the same size
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getOptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      int int0 = 2463;
      Instance instance0 = BallNode.calcCentroidPivot(2463, (-1561), (int[]) null, instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) inputMappedClassifier0, instance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SGD sGD0 = new SGD();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Capabilities capabilities0 = simpleKMeans0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      CoverTree coverTree1 = new CoverTree();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.toSummaryString(".bsi", true);
      evaluation0.unweightedMicroFmeasure();
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = 'n';
      charArray0[2] = '+';
      charArray0[3] = '^';
      charArray0[4] = 'H';
      charArray0[5] = '%';
      charArray0[6] = 'A';
      charArray0[7] = '.';
      charArray0[8] = 'n';
      evaluation0.num2ShortID(2227, charArray0, 116);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SGD sGD0 = new SGD();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      CoverTree coverTree1 = new CoverTree();
      evaluation0.toSummaryString("\tDo not perform any cross validation.\n", true);
      evaluation0.unweightedMicroFmeasure();
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      evaluation0.num2ShortID(0, charArray0, 5);
      // Undeclared exception!
      try { 
        instances0.renameAttribute(7, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(wordTokenizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.tokenizers.WordTokenizer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("{@");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "I.qH3ht ~%2VZ");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        Evaluation.handleCostOption("{@", 13);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"I.qH3ht\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      databaseLoader0.getNextInstance(instances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      Logistic logistic0 = new Logistic();
      try { 
        evaluation0.evaluateModel((Classifier) logistic0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("~T3Sr[kZ");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Class label '");
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      evaluation0.m_ClassPriors = doubleArray0;
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".bsi";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@data";
      instances0.toArray(stringArray0);
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.evaluateModelOnce((-2225.94973), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = 4.9E-324;
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      intArray0[1] = 104;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      intArray0[2] = 492;
      SparseInstance sparseInstance0 = new SparseInstance(4.9E-324, doubleArray0, intArray0, 16);
      instances0.add((Instance) sparseInstance0);
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNoClass(false);
      Instances instances0 = testInstances0.generate("setWeightTrimBeta");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(453);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 453;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-141.7319);
      doubleArray0[6] = 4.9E-324;
      doubleArray0[7] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(383.19412521041, doubleArray0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".bsi";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@data";
      instances0.toArray(stringArray0);
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.m_ClassIsNominal = false;
      evaluation0.confusionMatrix();
      evaluation0.SFEntropyGain();
      try { 
        evaluation0.toMatrixString("globalInfo");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
      evaluation0.incorrect();
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setOptions(testInstances0.DEFAULT_WORDS);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.SFEntropyGain();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = null;
      try {
        instances1 = new Instances("@relation", arrayList0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.equals(naiveBayesUpdateable0);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(571.89, (double[]) null, (int[]) null, 73);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.02500000037252903);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("V7'qJ+j-bD42pZ=+");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7487153510498672
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumNominalValues((-472));
      testInstances0.getOptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      RandomTree randomTree0 = new RandomTree();
      double double1 = evaluation0.meanAbsoluteError();
      double double2 = evaluation0.m_SumSqrErr;
      double double3 = evaluation0.unweightedMacroFmeasure();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNoClass(false);
      Instances instances0 = testInstances0.generate("setWeightTrimBeta");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance(548);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.unweightedMicroFmeasure();
      try { 
        CostMatrix.parseMatlab("{|\"p~~UskT5ZU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      ZeroR zeroR1 = new ZeroR();
      Capabilities capabilities0 = zeroR1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNoClass(false);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("getNorm");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 357913946;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.7976931348623157E308), doubleArray0);
      binarySparseInstance0.dataset();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      capabilities0.disableAllAttributes();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), intArray0, 19);
      instances0.enumerateInstances();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(".bsi");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.m_NumClasses = (-1);
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      instances0.removeAll(linkedList0);
      Evaluation evaluation1 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.rootMeanPriorSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.kappa();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("V7'qJ+j-bD42pZ=+");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-1711));
      evaluation1.numFalsePositives((-1));
      Instances instances1 = evaluation1.getHeader();
      instances1.stratify(2166);
      Evaluation evaluation2 = new Evaluation(instances1);
      Utils.log2 = 3831.5511586767;
      // Undeclared exception!
      try { 
        evaluation2.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) textDirectoryLoader0;
      try { 
        evaluation0.crossValidateModel((Classifier) randomTree0, instances0, 4211, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2993);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.distributionForInstance(binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) costSensitiveClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 689.5021818290192;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((-0.25), (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(0.7, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-536));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = lMT0.getCapabilities();
      evaluation0.addNumericTrainClass(1122.0, (-3.0));
      capabilities0.disableAllClasses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances1.toSummaryString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        instances0.setClassIndex(938);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class index: 938
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      RandomTree randomTree0 = new RandomTree();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@data");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.matthewsCorrelationCoefficient(245);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Instances instances1 = databaseLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(1.0E-8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      textDirectoryLoader0.setCharSet("`j`yCO8RJB");
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setRetrieval((-3104));
      evaluation0.sizeOfPredictedRegions();
      evaluation0.useNoPriors();
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getCapabilities();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      evaluation0.falseNegativeRate((-1));
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-3957), (-1.7976931348623157E308));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " ");
      testInstances0.setNoClass(false);
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-2));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.SFSchemeEntropy();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      SGDText sGDText0 = new SGDText();
      Evaluation.makeOptionString(logitBoost0, true);
      MockRandom mockRandom0 = new MockRandom((-1L));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.1262816643840696
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumClasses(559);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      evaluation0.weightedRecall();
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_TotalCost;
      instances0.deleteStringAttributes();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      System.setCurrentTimeMillis(0L);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation1.crossValidateModel((Classifier) zeroR0, instances0, 58, (Random) null, (Object[]) doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Instances instances0 = testInstances0.generate(" ");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "    return \"Auto-generated classifier wrapper, based on ");
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getLearningRate");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.rootRelativeSquaredError();
      evaluation0.totalCost();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      Evaluation.makeOptionString(classifier0, false);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'text' '@@class@@' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ArffLoader arffLoader0 = new ArffLoader();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      AbstractClassifier.makeCopy((Classifier) null);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0039308586596594
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3760552852604169
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) (-1), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance(683.340288972, doubleArray0, intArray0, (-1));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      SGD sGD0 = new SGD();
      linkedList0.add(sGD0);
      linkedList0.offerFirst(sGD0);
      linkedList0.add(sGD0);
      instances0.removeAll(linkedList0);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.removeAll(linkedList0);
      Evaluation evaluation1 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.pctCorrect();
      evaluation1.weightedFalseNegativeRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-4259));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.makeOptionString(inputMappedClassifier0, false);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      SerializedInstancesLoader serializedInstancesLoader1 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader1.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getCapabilities();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      MockFile mockFile0 = new MockFile("@data", "+iHZ<!Yv&o3r9");
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setCustomPropsFile(mockFile0);
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      try { 
        Filter.useFilter(instances0, allFilter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.AllFilter", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string0 = Evaluation.getGlobalInfo(gaussianProcesses0);
      assertEquals("\nSynopsis for weka.classifiers.functions.GaussianProcesses:\n\n Implements Gaussian processes for regression without hyperparameter-tuning. To make choosing an appropriate noise level easier, this implementation applies normalization/standardization to the target attribute as well as the other attributes (if  normalization/standardizaton is turned on). Missing values are replaced by the global mean/mode. Nominal attributes are converted to binary ones. Note that kernel caching is turned off if the kernel used implements CachedKernel.", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.getHeader();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getOptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setNumNumeric((-2903));
      evaluation1.m_NoPriors = false;
      evaluation0.confusionMatrix();
      evaluation1.meanPriorAbsoluteError();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      instances0.removeAll(linkedList0);
      Evaluation evaluation1 = new Evaluation(instances0);
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID((-2), (char[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      SGD sGD0 = new SGD();
      linkedList0.add(sGD0);
      SGD sGD1 = new SGD();
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForPredictor(10.0, binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      Evaluation evaluation2 = new Evaluation(instances1);
      double double0 = evaluation2.m_Correct;
      evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation2.setDiscardPredictions(true);
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation4.falsePositiveRate(0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation1.crossValidateModel((Classifier) randomTree0, (Instances) null, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0579054247036734
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) randomTree0, instances0, 4211, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      File file0 = textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.setDirectory(file0);
      textDirectoryLoader0.setSource(file0);
      textDirectoryLoader0.getStructure();
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "@data");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "jA#kh\"|j8Cu");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Evaluation.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.setNumericPriorsFromBuffer();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      CSVLoader cSVLoader0 = new CSVLoader();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation2 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      try { 
        evaluation2.updateStatsForIntervalEstimator(regressionByDiscretization0, sparseInstance0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      MockFile mockFile0 = new MockFile(".bsi", "@data");
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setCustomPropsFile(mockFile0);
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(databaseLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updateStatsForPredictor(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate(" ");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      testInstances0.setNumNumeric(13);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "    return \"Auto-generated classifier wrapper, based on ");
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[0];
      evaluation0.m_TrainClassWeights = doubleArray0;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(2258, (char[]) null, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1237206635824628
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      testInstances1.setRelation(" ");
      testInstances2.setNumRelationalString((-2));
      Instances instances0 = testInstances2.generate("and");
      Instances instances1 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      Instances instances2 = Instances.mergeInstances(instances1, instances0);
      databaseLoader1.getNextInstance(instances2);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.toMatrixString(" ");
      try { 
        CostMatrix.parseMatlab(".arff");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7214023220140036
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      SGD sGD0 = new SGD();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      sGD0.setDontNormalize(false);
      linkedList0.add(sGD0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double double0 = evaluation0.m_Correct;
      evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(true);
      Double double1 = new Double(Double.NaN);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-4232));
      Evaluation evaluation3 = new Evaluation(instances0);
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (double) (-4232);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)61;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation3.updateMargins(doubleArray0, 1, (-892.13));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation4 = null;
      try {
        evaluation4 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1), (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      SGD sGD0 = new SGD();
      linkedList0.add(sGD0);
      linkedList0.add(sGD0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.removeAll(linkedList0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numInstances();
      try { 
        CostMatrix.parseMatlab("0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("@data");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("Incorrectly Classified Instances   ", "@data");
      databaseLoader0.setCustomPropsFile(mockFile0);
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " ");
      testInstances0.setNoClass(true);
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Q7z!e0A:~");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      SGD sGD0 = new SGD();
      linkedList0.add(sGD0);
      sGD0.setSeed(2326);
      linkedList0.add(sGD0);
      instances0.removeAll(linkedList0);
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.correct();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      CSVLoader cSVLoader0 = new CSVLoader();
      double double2 = evaluation0.m_SumSqrErr;
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances2.generate("and");
      Instances instances1 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      Instances instances2 = Instances.mergeInstances(instances1, instances0);
      databaseLoader1.getNextInstance(instances2);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      evaluation1.setPriors(instances0);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1717986916));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("@data", instances0);
      instances0.deleteWithMissing(attribute0);
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<?1}rF");
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) textDirectoryLoader0;
      objectArray0[1] = (Object) instances0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) instances0;
      objectArray0[4] = (Object) textDirectoryLoader0;
      objectArray0[5] = (Object) instances0;
      objectArray0[6] = (Object) textDirectoryLoader0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) textDirectoryLoader0;
      try { 
        evaluation1.evaluateModel((Classifier) null, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.converters.TextDirectoryLoader cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setPassword("k5rX<{E|1\"_0");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      try { 
        evaluation0.evaluateModelOnce((Classifier) null, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      String[] stringArray0 = null;
      try { 
        evaluation0.crossValidateModel("numFoldsTipText", instances0, 14, (String[]) null, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: numFoldsTipText
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.2554823251787535
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setRetrieval(37);
      double[] doubleArray0 = new double[26];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1.7976931348623157E308));
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      CoverTree coverTree0 = new CoverTree();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.3760552852604169
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      assertEquals(2, costMatrix0.size());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.346023334018513
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tselection. Default=last column.\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Instances.test(testInstances0.DEFAULT_WORDS);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.weightedTrueNegativeRate();
      J48 j48_0 = new J48();
      JSONLoader jSONLoader0 = new JSONLoader();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setUseEqualFrequency(true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Q7z!e0A:~");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SMO sMO0 = new SMO();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) sMO0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      Instances instances0 = testInstances0.generate("Package ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      databaseLoader1.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      DatabaseLoader databaseLoader3 = new DatabaseLoader();
      databaseLoader3.getNextInstance(instances0);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.falseNegativeRate(101);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.561714189291655
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      instances0.removeAll(linkedList0);
      Evaluation evaluation1 = new Evaluation(instances0);
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      evaluation1.rootMeanPriorSquaredError();
      testInstances0.setNumString(99);
      evaluation1.weightedFalseNegativeRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.2554823251787535
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("}Bg");
      instances0.deleteWithMissing(attribute0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      instances0.iterator();
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.377819508039033
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      SGD sGD0 = new SGD();
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.removeAll(linkedList0);
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      evaluation0.unweightedMacroFmeasure();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      databaseLoader0.getNextInstance(instances0);
      evaluation0.SFMeanEntropyGain();
      DenseInstance denseInstance0 = new DenseInstance(3256);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      try { 
        costMatrix0.getElement((-6292), (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6292
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.setNumericPriorsFromBuffer();
      instances0.deleteWithMissingClass();
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0042424730540764
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("@data", instances0);
      instances0.deleteWithMissing(attribute0);
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 4;
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(" = ");
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.setPriors(instances1);
      evaluation0.toSummaryString(false);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances1, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance sets must be of the same size
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.2309316230479221
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(0, 84, (int[]) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.018611762043326
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNoClass(false);
      Instances instances0 = testInstances0.generate("setWeightTrimBeta");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate(453);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.m_WithClass = (double) (-1);
      evaluation1.SFSchemeEntropy();
      Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      double double1 = evaluation0.priorEntropy();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(1.9899343783255765, double1, 0.01);
      
      String string0 = evaluation1.toClassDetailsString("setWeightTrimBeta");
      assertEquals("setWeightTrimBeta\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalseNegatives(15);
      Double double0 = new Double((-1));
      Instances instances1 = null;
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-702), false, false);
      simpleLogistic0.getTechnicalInformation();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = attributeSelectedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.falsePositiveRate(1155);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.4479871140961187
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getCapabilities();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Instances instances1 = testInstances0.generate();
      testInstances0.setNumRelationalNominalValues(2147483645);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.numFalsePositives(2161);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.numTrueNegatives(24);
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '    return RevisionUtils.extract(\"1.0\");
         // Nominal1' '    return RevisionUtils.extract(\"1.0\");
         // Class' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 165
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SGD sGD0 = new SGD();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      linkedList0.add(sGD0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.numTruePositives((-1068));
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      SGD sGD0 = new SGD();
      linkedList0.add(sGD0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      int int0 = 60;
      testInstances0.setNumNumeric(60);
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient(0);
      PipedReader pipedReader0 = new PipedReader();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("~T3Sr[kZ");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Class label '");
      databaseLoader0.getRevision();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      databaseLoader0.getNextInstance(instances0);
      Version.REVISION = (-1);
      evaluation0.weightedFMeasure();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(100000);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.844621476365503
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.fMeasure((-197112209));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-197112209);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      doubleArray0[1] = (double) (-197112209);
      doubleArray0[2] = (double) (-197112209);
      doubleArray0[3] = (double) (-197112209);
      AllFilter allFilter0 = new AllFilter();
      try { 
        Filter.useFilter(instances0, allFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.meanAbsoluteError();
      double double1 = evaluation1.weightedPrecision();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      textDirectoryLoader0.setCharSet("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.precision(43);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 153.2598166;
      doubleArray0[1] = 153.2598166;
      doubleArray0[3] = 2635.52664287537;
      doubleArray0[4] = 153.2598166;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation0.avgCost();
      double double1 = evaluation0.weightedPrecision();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      byte[] byteArray0 = new byte[0];
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      // Undeclared exception!
      try { 
        evaluation0.precision(2116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2116
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1690.5276662293431);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1690.5276662293431);
      doubleArray0[6] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance((-1690.5276662293431), doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 100.0;
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.8366571533453289
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      int int0 = 4;
      evaluation0.matthewsCorrelationCoefficient(4);
      double double0 = (-1669.9991);
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      SGD sGD0 = new SGD();
      RandomForest randomForest0 = new RandomForest();
      Capabilities capabilities0 = randomForest0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList1 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.numFalseNegatives(2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1728217081);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getOptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      int int0 = 22;
      evaluation1.numFalseNegatives(22);
      evaluation1.numFalsePositives(2);
      try { 
        CostMatrix.parseMatlab(".arff");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "    return RevisionUtils.extract(\"1.0\");\n");
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-1));
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '    return RevisionUtils.extract(\"1.0\");
         // Nominal1' '    return RevisionUtils.extract(\"1.0\");
         // Class' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0821955300387671
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numTrueNegatives((-1));
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '    return RevisionUtils.extract(\"1.0\");
         // Nominal1' '    return RevisionUtils.extract(\"1.0\");
         // Class' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      AllFilter allFilter0 = new AllFilter();
      try { 
        Filter.useFilter(instances0, allFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.AllFilter", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@relation");
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.truePositiveRate(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      double double1 = evaluation0.m_SumPriorAbsErr;
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(1);
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.0101953097959013
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      int int0 = 0;
      int int1 = 84;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(0, 84, (int[]) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedAreaUnderPRC();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.setDebug(true);
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toClassDetailsString("E*mPH;*p>qM");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      databaseLoader1.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Double double0 = new Double((-1.239389150706013));
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      CoverTree coverTree0 = new CoverTree();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Capabilities capabilities0 = multilayerPerceptron0.getCapabilities();
      capabilities0.disableAllClasses();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedAreaUnderPRC();
      int int0 = 98;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        instances0.trainCV((-1031907725), (-1031907725), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be at least 2!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.3698544895224887
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      PART pART0 = new PART();
      Capabilities capabilities1 = pART0.getCapabilities();
      capabilities0.supports(capabilities1);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      LinkedList<KStar> linkedList0 = new LinkedList<KStar>();
      capabilities0.disableAllClasses();
      evaluation0.weightedAreaUnderPRC();
      int int0 = (-1031907725);
      MockRandom mockRandom0 = new MockRandom(98);
      // Undeclared exception!
      try { 
        instances0.trainCV((-2), 98, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be at least 2!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tselection. Default=last column.\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Instances.test(testInstances0.DEFAULT_WORDS);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte) (-67);
      intArray0[2] = (int) (byte) (-67);
      intArray0[3] = 487;
      intArray0[4] = (int) (byte) (-67);
      intArray0[5] = 2885;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), intArray0, (-67));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("getAllowUnclassifiedInstances", arrayList0, 858);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      SGDText sGDText0 = new SGDText();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Evaluation.makeOptionString((Classifier) null, false);
      MockRandom mockRandom0 = new MockRandom(0L);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Evaluation.makeOptionString(votedPerceptron0, false);
      MockRandom mockRandom0 = new MockRandom((-1L));
      Object[] objectArray0 = new Object[0];
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.649248354870898
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(142, false, false);
      simpleLogistic0.getTechnicalInformation();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G";
      stringArray0[1] = " ?    ";
      String string0 = "ELPtx' `";
      stringArray0[2] = "ELPtx' `";
      try { 
        Evaluation.evaluateModel((Classifier) simpleLogistic0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SimpleLogistic:
         // 
         // -I <iterations>
         // \tSet fixed number of iterations for LogitBoost
         // -S
         // \tUse stopping criterion on training set (instead of
         // \tcross-validation)
         // -P
         // \tUse error on probabilities (rmse) instead of
         // \tmisclassification error for stopping criterion
         // -M <iterations>
         // \tSet maximum number of boosting iterations
         // -H <iterations>
         // \tSet parameter for heuristic for early stopping of
         // \tLogitBoost.
         // \tIf enabled, the minimum is selected greedily, stopping
         // \tif the current minimum has not changed for iter iterations.
         // \tBy default, heuristic is enabled with value 50. Set to
         // \tzero to disable heuristic.
         // -W <beta>
         // \tSet beta for weight trimming for LogitBoost. Set to 0 for no weight trimming.
         // 
         // -A
         // \tThe AIC is used to choose the best iteration (instead of CV or training error).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 142;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G";
      try { 
        Evaluation.evaluateModel((Classifier) simpleLogistic0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinkedList<SGD> linkedList0 = new LinkedList<SGD>();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(99.0, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setDeleteEmptyBins(true);
      Evaluation.handleCostOption("", 13);
      AllFilter allFilter0 = new AllFilter();
      assertTrue(allFilter0.isNewBatch());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getCapabilities();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      evaluation0.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2559));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2559
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.recall(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.0579054247036734
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 950);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.9164648855394713
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RandomTree randomTree0 = new RandomTree();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance0 = new DenseInstance(106);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, denseInstance0, 1189.33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 120;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 120;
      SparseInstance sparseInstance0 = new SparseInstance(120);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[1];
      try { 
        Evaluation.evaluateModel("I10MUe", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name I10MUe.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "  public static Object[][] filter(Object[][] i) {\n");
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setRetrieval(100000);
      Evaluation evaluation1 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 173
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 174
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("w`Z1&", 592);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 175
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("@data", instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString((String) null, false);
      double double0 = evaluation0.m_WithClass;
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter1.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 176
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 177
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      double double1 = evaluation0.m_SumSqrErr;
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 178
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    return RevisionUtils.extract(\"1.0\");\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
