/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 22:11:56 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("` jfZ- -<o?", (Collection) null);
      jSONObject1.put("@s`sxk{onh", (Object) jSONObject0);
      jSONObject0.getJSONArray("` jfZ- -<o?");
      try { 
        jSONObject0.getString("gettoLowerCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoLowerCase\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8764904395512632
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("getgetJSONArray");
      String string0 = "A JSONObject text must begin with '{'";
      JSONObject jSONObject1 = jSONObject0.append("A JSONObject text must begin with '{'", hashMap0);
      String string1 = "wheel.json.JSONTokener";
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONTokener", 195.571436609295);
      jSONObject1.getInt("wheel.json.JSONTokener");
      jSONObject2.getString("wheel.json.JSONTokener");
      try { 
        jSONObject1.getJSONObject("A2MgCL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A2MgCL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-1276.2200609582126));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Double double0 = new Double((-1276.2200609582126));
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", double0);
      boolean boolean0 = new Boolean("Expected '");
      long long0 = jSONObject1.optLong("Expected '");
      assertEquals(1, jSONObject0.length());
      assertEquals((-1276L), long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5906757807316017
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(double0, "e0aBtz2|O:S", biFunction0);
      JSONObject jSONObject1 = jSONObject0.putOpt("LIWZ9Qy[", hashMap0);
      Byte byte0 = new Byte((byte)2);
      Byte byte1 = new Byte((byte)2);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.put("e0aBtz2|O:S", (Map) hashMap0);
      jSONObject0.toString((-1216), (-1216));
      JSONObject jSONObject2 = jSONObject0.getJSONObject("e0aBtz2|O:S");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", (Collection) linkedList1);
      jSONObject1.optJSONArray("Expected a ':' after a key");
      JSONObject jSONObject2 = jSONObject1.putOpt("Expected a ':' after a key", linkedList0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = JSONObject.quote("gvzH%Pr</L=#H");
      assertEquals("\"gvzH%Pr<\\/L=#H\"", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "gvzH%Pr</L=#H";
      JSONObject jSONObject0 = new JSONObject("\"gvzH%Pr</L=#H\"", stringArray0);
      int int0 = jSONObject0.optInt("\"gvzH%Pr</L=#H\"");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4398860526697708
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Short short0 = new Short((short)10);
      Short.toUnsignedLong((short) (-753));
      JSONObject.valueToString(short0);
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("");
      Byte byte0 = new Byte((byte) (-17));
      JSONObject jSONObject1 = jSONObject0.putOpt("isdivideUnsigned", byte0);
      Byte.toUnsignedInt((byte) (-93));
      Byte.compare((byte) (-76), (byte)93);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("A JSONObject text must begin with '{'", (Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.put("HA(pk", (Collection) linkedList0);
      JSONObject jSONObject4 = jSONObject0.append("uN%e,_S-mO/i9 ", "");
      jSONObject4.names();
      jSONObject4.optLong("uN%e,_S-mO/i9 ", (long) (byte)93);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject1.optInt("isdivideUnsigned");
      JSONObject.testValidity("");
      JSONObject jSONObject5 = jSONObject3.put("#a_Gq5El|?.c3c", (-169));
      assertEquals(5, jSONObject5.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Missing value", 0.0);
      jSONObject1.getLong("Missing value");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject2 = jSONObject0.put(".'t PEYmioK0NcdYeR", (-3570));
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-1585));
      hashMap0.put((JSONObject) null, "\"\"");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.optJSONObject("] is not a JSONObject.");
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("e0aBtz2|O:S", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("e0aBtz2|O:S");
      assertNotSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("vHFO$Q|7ZA&1z0a", object0);
      jSONObject1.toString(45);
      jSONObject0.put("vHFO$Q|7ZA&1z0a", 1578.40862);
      jSONObject0.getLong("vHFO$Q|7ZA&1z0a");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("vHFO$Q|7ZA&1z0a", "LIW8Z9Qy[");
      Byte byte0 = new Byte((byte)63);
      Byte.compare((byte)63, (byte) (-52));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.put("getlen?gth", (Map) null);
      Integer integer0 = new Integer(120);
      JSONObject.getNames((Object) integer0);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("getlen?gth");
      assertNotSame(jSONObject3, jSONObject0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("{voghW:Tf|h]A68~5", 60);
      int int0 = jSONObject1.optInt("{voghW:Tf|h]A68~5");
      assertEquals(2, jSONObject0.length());
      assertEquals(60, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.valueToString(linkedList0, 69, 69);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "[]", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Boolean boolean0 = new Boolean("\"");
      jSONObject0.put("sho", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("sho");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.put("x}-cB", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("x}-cB");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("c*E`K]K!EJc%*Ke", (Object) "c*E`K]K!EJc%*Ke");
      jSONObject0.toString(103, 103);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8768603988557397
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("vHFO$Q|7ZA&1z0a", "vHFO$Q|7ZA&1z0a");
      Byte byte0 = new Byte((byte)63);
      Byte.compare((byte)63, (byte) (-52));
      Object object0 = new Object();
      jSONObject1.put("getlength", (Map) null);
      jSONObject1.toString((int) (byte) (-52), 32);
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000002\": \"java.lang.String@0000000002\",\n\"java.lang.String@0000000004\": {}\n                                }");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("[");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.quote(",\n");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("(xf;Q.!WHf@3VT)}TG)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of (xf;Q.!WHf@3VT)}TG)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n_@^OKsO1<g1SE4y5f";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("W^%&CwI}");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Byte byte1 = new Byte((byte)1);
      jSONObject0.append("W}l}bzWH;<Z", hashMap0);
      JSONArray jSONArray1 = jSONObject0.getJSONArray("W}l}bzWH;<Z");
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = JSONObject.NULL;
      jSONObject1.put("cop", object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = jSONObject1.isNull("cop");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8792521075987638
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("e0aBtz2|O:S", byte0);
      Byte byte1 = new Byte((byte)2);
      Byte.compare((byte)2, (byte) (-104));
      StringWriter stringWriter0 = new StringWriter(18);
      StringWriter stringWriter1 = new StringWriter(18);
      stringWriter1.write("null");
      Byte.compare((byte)1, (byte)27);
      StringWriter stringWriter2 = new StringWriter(106);
      jSONObject1.write(stringWriter2);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("!<l6Rb{8u({wR", byte1);
      jSONObject2.put("!<l6Rb{8u({wR", (Map) null);
      jSONObject0.toString(18, (int) (byte) (-104));
      jSONObject0.optString("", "");
      jSONObject0.put("e0aBtz2|O:S", 0L);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject.doubleToString(821.77691);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      // Undeclared exception!
      try { 
        linkedList0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float(1.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "@Uph{";
      jSONObject0.putOpt("@Uph{", float0);
      Double double0 = new Double(1.0);
      JSONObject jSONObject1 = jSONObject0.put("@Uph{", (Object) "@Uph{");
      Short short0 = new Short((short)1802);
      JSONObject.valueToString(short0, (short)1802, (-1118));
      jSONObject1.keys();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("@Uph{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of @Uph{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte)1);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.append("h:y-&", (Object) null);
      jSONObject0.accumulate("h:y-&", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("0oN+W}9Kw", (Object) long0);
      jSONObject1.optInt("0oN+W}9Kw", (-634));
      try { 
        jSONObject1.getBoolean("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Boolean boolean0 = new Boolean(false);
      hashMap0.put(boolean0, "Expected a ',' or ']'");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1101983788211287
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("s1#/h]kmzt+0\"", "s1#/h]kmzt+0\"");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("s1#/h]kmzt+0\"");
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("{", (Collection) linkedList0);
      JSONObject.getNames((Object) jSONObject0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{JW/z:l9@");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {JW/z:l9@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{JWz:l9@");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 9 of {JWz:l9@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean.valueOf("\n");
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-2043));
      JSONObject jSONObject1 = jSONObject0.putOpt("\n", integer0);
      jSONObject1.getInt("\n");
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{09Gt-~");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {09Gt-~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Boolean boolean0 = new Boolean("[");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[";
      stringArray0[1] = "isoptJSONObject";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Object object0 = new Object();
      jSONObject0.put("$c$>r)npFIPp^Q-", object0);
      String string0 = jSONObject0.optString("isoptJSONObject", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.49122807017543857
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float float0 = new Float((-3953.76));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = "null";
      jSONObject0.optJSONObject("null");
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "*@:2QV#:_HU^.";
      JSONObject jSONObject1 = jSONObject0.put("*@:2QV#:_HU^.", (Object) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.remove("*@:2QV#:_HU^.");
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("vHFO$Q|7ZA&1z0a", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-1175), 69);
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.8770579426155269
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = JSONObject.quote("&l6-Iy}r=/1iljirEs");
      assertEquals("\"&l6-Iy}r=/1iljirEs\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "&l6-Iy}r=/1iljirEs");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|AJ~K?x0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |AJ~K?x0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte.compare((byte)2, (byte)2);
      StringWriter stringWriter0 = new StringWriter(104);
      stringWriter0.append('B');
      stringWriter0.close();
      stringWriter0.write("8");
      Object object0 = new Object();
      jSONObject0.put("j", (Map) null);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Fxk%$/tF~-Kg", 74);
      jSONObject0.optLong("Fxk%$/tF~-Kg");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Long long0 = new Long((-2228L));
      JSONObject jSONObject1 = jSONObject0.putOpt("java.lang.Float@0000000048.", long0);
      jSONObject1.optDouble("java.lang.Float@0000000048.");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.put("java.lang.Float@0000000048.", (Object) "isfloatToRawIntBits");
      jSONObject2.keys();
      try { 
        jSONObject1.getJSONArray(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.isFinite(788.07464);
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(13);
      JSONObject.quote("}X0n'LXfX!^%JAz\"c%b");
      JSONArray jSONArray1 = (JSONArray)jSONObject1.opt("");
      assertEquals(0, jSONArray1.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Float.min(6932.387F, (-2033.2F));
      Float.max(0.0F, 2497.0F);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.put("spl", (-422L));
      String string0 = jSONObject1.getString("spl");
      assertNotNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5884082070354566
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Float float0 = new Float(1.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "@Uph{";
      JSONObject jSONObject1 = jSONObject0.putOpt("@Uph{", float0);
      jSONObject1.optDouble("@Uph{");
      JSONObject jSONObject2 = jSONObject0.put("$V$P8K91\"91MQ", (Object) "$V$P8K91\"91MQ");
      Short short0 = new Short((short)1802);
      JSONObject.valueToString(short0, (short)1802, (-1118));
      jSONObject2.keys();
      try { 
        jSONObject2.getJSONArray("@Uph{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@Uph{\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("ixmLU.=#-GDWiSo", 47);
      double double0 = jSONObject0.optDouble("ixmLU.=#-GDWiSo", 1820.518);
      assertEquals(47.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) "");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject.getNames((Object) "uu:wW1");
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0, 32, 32);
      assertNotNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.100665982609539
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-27));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Byte.compare((byte) (-7), (byte)120);
      Byte.toUnsignedInt((byte)32);
      jSONObject1.keys();
      JSONObject.quote("de");
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((-2428.581949772));
      JSONObject jSONObject2 = jSONObject1.put("getvalueOf", (Object) float0);
      jSONObject0.getDouble("getvalueOf");
      jSONObject1.length();
      JSONObject.quote((String) null);
      jSONObject2.keys();
      JSONObject jSONObject3 = jSONObject2.put("g3h", true);
      jSONObject3.optBoolean("\"de\"");
      jSONObject2.length();
      assertEquals(4, jSONObject2.length());
      
      String string0 = JSONObject.quote("] is not a JSONArray.");
      assertEquals("\"] is not a JSONArray.\"", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.49206349206349204
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("e0aBtz2|O:S", byte0);
      Byte byte1 = new Byte((byte)2);
      Byte.compare((byte)2, (byte)1);
      StringWriter stringWriter0 = new StringWriter(18);
      StringWriter stringWriter1 = new StringWriter(18);
      stringWriter1.write("null");
      Writer writer0 = jSONObject1.write(stringWriter1);
      jSONObject1.write(writer0);
      Object object0 = new Object();
      jSONObject0.accumulate("!<l6Rb{8u({wR", byte1);
      jSONObject1.toString();
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("<}vh", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("lG[8BXrAW4B");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Vx{Sc>/SM!JgopP", 3851L);
      assertEquals(3851L, long0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject.doubleToString(790.391);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("790.391", (Collection) linkedList0);
      jSONObject1.append("790.391", linkedList0);
      JSONObject jSONObject2 = jSONObject1.putOpt("790.391", jSONObject0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("x}ocB", object0);
      try { 
        jSONObject1.getBoolean("x}ocB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x}ocB\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("x}ocB", (Object) "x}ocB");
      try { 
        jSONObject1.getBoolean("x}ocB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x}ocB\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.882229320469484
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Byte byte1 = new Byte((byte)1);
      Byte.compare((byte)1, (byte)1);
      StringWriter stringWriter0 = new StringWriter(4);
      jSONObject0.write(stringWriter0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.accumulate("shx+8`g*43IPW", "");
      jSONObject2.put("shx+8`g*43IPW", (Map) null);
      jSONObject1.toString(1508, 4);
      jSONObject0.toString(0, 0);
      Boolean boolean0 = new Boolean(".");
      JSONObject.getNames((Object) boolean0);
      Byte.compare((byte)15, (byte) (-69));
      jSONObject0.optString("", "] is not a JSONObject.");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(jSONArray0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string0 = JSONObject.valueToString(jSONArray0, 1360, 773);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("x}-cB", (Object) "x}-cB");
      jSONObject0.accumulate("x}-cB", "tri");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("tri");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of tri
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, 2, 2);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 72, (-36));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(hashMap0, 57, 123);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "se7jm1#Rh@_k]K=\\)A";
      jSONObject0.put("se7jm1#Rh@_k]K=)A", (Object) "se7jm1#Rh@_k]K=)A");
      try { 
        jSONObject0.append("se7jm1#Rh@_k]K=)A", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[se7jm1#Rh@_k]K=)A] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{09Gt-~");
      String[] stringArray0 = JSONObject.getNames((Object) "{09Gt-~");
      JSONObject jSONObject0 = new JSONObject("{09Gt-~", stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must end with '}'", false);
      String[] stringArray0 = new String[0];
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("c*E`K]K!EJc%*Ke", (Object) "c*E`K]K!EJc%*Ke");
      jSONObject0.optString("c*E`K]K!EJc%*Ke");
      JSONObject.quote("get");
      try { 
        jSONObject0.getJSONObject("c*E`K]K!EJc%*Ke");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"c*E`K]K!EJc%*Ke\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = new Float(2352.38347435);
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt(" t=,tBz#hn;Q", 43);
      assertEquals(43, int0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer((-823));
      hashMap0.put("8)eqrOZKM]q=", integer0);
      Long long0 = new Long((-2525L));
      Integer integer1 = new Integer(18);
      hashMap0.put(long0, integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      StringWriter stringWriter0 = new StringWriter(2);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(1657.1921F);
      hashMap0.put(float0, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float1 = new Float((-3565.239));
      hashMap0.put(float1, "Bad value from toJSONString: ");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Long long0 = new Long((-6L));
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Object) null, "IYw!nP/t");
      jSONObject0.optLong("qv,y{3Lis&G0!86sGqf", (-1511L));
      try { 
        jSONObject0.getJSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject.quote("gvzH%Pr@/L=#H");
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 152, 733);
      JSONObject.testValidity((Object) null);
      try { 
        jSONObject0.getBoolean("r(jGIb}1rvUsKKZHJ'm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r(jGIb}1rvUsKKZHJ'm\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("2!BL*p8+{`E");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.quote("Ye^jV!L^)Z$/?");
      assertEquals("\"Ye^jV!L^)Z$/?\"", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertFalse(linkedList0.contains(string0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.valueToString(",");
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("LIWZ9~y[", hashMap0);
      Byte byte0 = new Byte((byte) (-11));
      Byte byte1 = new Byte((byte) (-11));
      JSONObject.doubleToString((byte) (-11));
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5901377123969231
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Byte.toUnsignedInt((byte)1);
      jSONObject1.keys();
      JSONObject.quote("aT=XOoE8");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.put("sh", (Object) "\"aT=XOoE8\"");
      jSONObject2.getDouble("");
      jSONObject0.length();
      jSONObject2.keys();
      jSONObject0.toString((int) (byte) (-99), 2981);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "A JSONObject text must end with '}'";
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", 0.0);
      long long0 = 5453L;
      Double double0 = new Double(0.0);
      Double double1 = null;
      hashMap0.replace(double0, double0, (Double) null);
      Long long1 = new Long(5453L);
      Long.min(5453L, 2127L);
      JSONObject.getNames((Object) long1);
      jSONObject1.getDouble("A JSONObject text must end with '}'");
      try { 
        jSONObject0.getJSONObject("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(69, 69);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      int int0 = 3386;
      // Undeclared exception!
      jSONObject0.toString(3386, 3386);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      hashMap0.put((Double) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "LIWZ9~y[";
      JSONObject jSONObject1 = jSONObject0.putOpt("LIWZ9~y[", hashMap0);
      Byte byte0 = new Byte((byte) (-11));
      Byte byte1 = new Byte((byte) (-11));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.put("e0aBtz2|O:S", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-1228), (-1228));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float((-1.0));
      hashMap0.put(float0, "islogicalAnd");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = jSONObject0.toString((-1228), (-1489));
      assertNotNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("null");
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "j=E%cS<VsKP";
      jSONObject0.put("j=E%cS<VsKP", (Object) null);
      try { 
        jSONObject0.getBoolean("j=E%cS<VsKP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j=E%cS<VsKP\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "VG,;,MpJNU{n2P.";
      stringArray0[1] = " +'k u=C?>";
      stringArray0[2] = " +'k u=C?>";
      stringArray0[3] = "BFC] 3)z-=w0L(UjkxL";
      stringArray0[4] = " +'k u=C?>";
      stringArray0[5] = "BFC] 3)z-=w0L(UjkxL";
      stringArray0[6] = " +'k u=C?>";
      stringArray0[7] = "BFC] 3)z-=w0L(UjkxL";
      stringArray0[8] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.putOpt("BFC] 3)z-=w0L(UjkxL", jSONArray0);
      boolean boolean0 = jSONObject2.has("BFC] 3)z-=w0L(UjkxL");
      assertEquals(1, jSONObject1.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("vHFO$Q|7ZA&1z0a", "vHFO$Q|7ZA&1z0a");
      try { 
        jSONObject1.getLong("vHFO$Q|7ZA&1z0a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vHFO$Q|7ZA&1z0a\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float(2044.6304333);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.8964366845326991
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = JSONObject.quote("EU`'a`6.E-k_v<");
      assertEquals("\"EU`'a`6.E-k_v<\"", string0);
      
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong(",:]}/\"[{;=#");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Integer integer0 = Integer.getInteger("getlongBitsToDouble", (-550));
      Integer.getInteger("getlongBitsToDouble", (-1669));
      jSONObject0.put("getlongBitsToDouble", (Object) integer0);
      long long0 = jSONObject0.getLong("getlongBitsToDouble");
      assertEquals((-550L), long0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject.doubleToString((-1200.08335874945));
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-1200.08335874945", 1650L);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("x}-cB", (Object) "x}-cB");
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = new Boolean("x}-cB");
      try { 
        jSONObject1.getInt("x}-cB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x}-cB\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "c*E`K]K!EJc%*Ke";
      JSONObject jSONObject1 = jSONObject0.put("c*E`K]K!EJc%*Ke", (Object) "c*E`K]K!EJc%*Ke");
      try { 
        jSONObject1.getDouble("c*E`K]K!EJc%*Ke");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"c*E`K]K!EJc%*Ke\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null pointer\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("x}ocB", (Object) "x}ocB");
      boolean boolean0 = new Boolean("x}ocB");
      Object object0 = jSONObject1.get("x}ocB");
      assertEquals("x}ocB", object0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("<}vh", "<}vh");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.toString(16);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble(",", 0.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("get", (-1));
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0218020909681602
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = JSONObject.quote("gvzH%Pr@/L=#H");
      assertEquals("\"gvzH%Pr@/L=#H\"", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "gvzH%Pr@/L=#H";
      JSONObject jSONObject0 = new JSONObject("\"gvzH%Pr@/L=#H\"", stringArray0);
      int int0 = jSONObject0.optInt("c_<}_");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getInt("gettoOctalString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoOctalString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(0.0);
      hashMap0.put(float0, ",:]}/\"[{;=#");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Float float0 = new Float((-1549.1691767188881));
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)2318);
      hashMap0.put(jSONArray0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("|DX 1BWL}", true);
      assertTrue(boolean0);
      
      Long long0 = new Long(0L);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1600));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("", 0L);
      jSONObject0.putOpt("Nxj", "Nxj");
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote(")l4I@H[u=ea_4Sgb");
      assertEquals("\")l4I@H[u=ea_4Sgb\"", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("gettoLowerCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoLowerCase\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble(",", (-614.81734557));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote("aT=XOoE8");
      assertEquals("\"aT=XOoE8\"", string0);
      
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("aT=XOoE8", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.8510944537717136
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = JSONObject.quote(" m9Zbf(j/38Ix3");
      assertEquals("\" m9Zbf(j/38Ix3\"", string0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("\" m9Zbf(j/38Ix3\"");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Double double0 = new Double((-1159.1466978204776));
      JSONObject.numberToString(double0);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Double@0000000001");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Double double0 = new Double((-1159.1466978204776));
      double double1 = new Double((-1159.1466978204776));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONObject(18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[18] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      jSONObject0.put("r;'", object0);
      boolean boolean0 = jSONObject0.isNull("r;'");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("vHFO$Q|7ZA&1z0a", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1158), 2);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "vHFO$Q|7ZA&1z0a");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(":", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.append("do", "do");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote("A/>,");
      assertEquals("\"A/>,\"", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.quote("Sj.`Rb'TL39H");
      assertEquals("\"Sj.`Rb'TL39H\"", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("A JSONObject text must end with '}'", 3745.0);
      assertEquals(3745.0, double0, 0.01);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("y`:<jF:\"g6kJ");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("c*E`K]K!EJc%*Ke");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"c*E`K]K!EJc%*Ke\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("a;/7b0Og,jdf'z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a;/7b0Og,jdf'z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("ge@getClss");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ge@getClss
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-1779), (-1779));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(13);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("true", "true");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("isvalues");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isvalues
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("[]");
      assertEquals("", string0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("z:,fws=*1$7");
      assertNull(object0);
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Map<Double, String> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      int int0 = 62;
      int int1 = 9;
      JSONObject.valueToString("<YvqORHwEF(/", 62, 9);
      jSONObject0.has("<YvqORHwEF(/");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((byte) (-89));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }
}
