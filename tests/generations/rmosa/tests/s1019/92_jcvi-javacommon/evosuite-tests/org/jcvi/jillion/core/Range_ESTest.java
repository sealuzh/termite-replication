/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 22:22:29 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6755662681588914
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(475L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      Long long0 = new Long((-233L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      boolean boolean0 = range2.equals(range0);
      assertTrue(boolean0);
      
      range2.iterator();
      assertNotSame(range2, range0);
      
      Range range3 = range1.asRange();
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(475L, 2692L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 475L, 2692L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.204400566065714
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(9223372036854774449L);
      Range range1 = Range.ofLength(9223372036854774449L);
      Range range2 = range0.intersection(range1);
      Long long0 = new Long((-233L));
      range2.equals(range0);
      // Undeclared exception!
      try { 
        range2.split((-233L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5418197350207192
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(475L, 9223372036854775807L);
      Range range1 = Range.of(255L, 9223372036854774260L);
      Range range2 = Range.ofLength(1598L);
      assertFalse(range2.isEmpty());
      
      Range range3 = range0.intersection(range1);
      boolean boolean0 = range0.equals(range3);
      assertFalse(range3.equals((Object)range0));
      assertFalse(boolean0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3892918442892537
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774464L);
      Range range1 = Range.of(9223372036854774464L, 9223372036854774464L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.995441463385456
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 934L;
      Range range1 = Range.ofLength(934L);
      range0.complement(range1);
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range_Builder0.expandBegin(32767L);
      range_Builder0.copy();
      range_Builder0.build();
      range0.isSubRangeOf(range2);
      range2.getBegin(range_CoordinateSystem2);
      range2.complement(range0);
      Range.ofLength(32767L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1110L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1342954248533537
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(475L, 9223372036854775807L);
      Range range1 = range0.intersection(range0);
      Long long0 = new Long((-233L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5519L, 5519L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3891897247992384
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774464L);
      Range range1 = Range.of(9223372036854774464L, 9223372036854774464L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(765L, 4294967295L);
      Range range1 = Range.of(1030L, 4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.386825658605385
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(475L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854774449L);
      Range range2 = range0.intersection(range1);
      Long long0 = new Long((-233L));
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3284514392943114
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(313L, 313L);
      boolean boolean0 = range0.intersects(range1);
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3286261880929136
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(9223372036854775806L, 9223372036854775806L);
      Range range1 = Range.of((-814L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -814 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Long long0 = new Long((-310L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 344L, 344L);
      range0.equals(range0);
      Object object0 = new Object();
      range0.equals("[VS|'>1");
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.689532269643912
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(0L);
      range0.equals(range1);
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.893547446711414
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(1L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(142L);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      assertNotSame(range0, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0577029806499434
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32L), (-32L));
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long long0 = new Long((-32L));
      range0.iterator();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-819L), (-819L));
      Range range1 = Range.of((-4840L), (-819L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.059202231024756
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long long0 = new Long(4294967295L);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      Long long1 = new Long(4294967295L);
      boolean boolean0 = range0.equals(long1);
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range1.spliterator();
      boolean boolean1 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967296L, 9223372036854775800L);
      range0.getBegin(range_CoordinateSystem0);
      String string0 = "`y`M<)eS;\\";
      // Undeclared exception!
      try { 
        Range.parseRange("`y`M<)eS;", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse `y`M<)eS; into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147480516L), 4294967295L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(9223372036854774139L);
      Range range1 = Range.of(9223372036854774139L);
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(243L);
      Range range1 = Range.of(142L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-819L), (-819L));
      Range range1 = Range.of((-4840L), (-819L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.894584014520225
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range0.intersection(range1);
      range0.toString();
      range1.equals(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("V4~t'^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.V4~t'^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-1924L), 32773L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 344L, 344L);
      boolean boolean0 = range0.equals("FqEM.m)W^l9y8`swm\"");
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-107L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2L), 32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(1804L);
      boolean boolean0 = range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2643L, 2794L);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.798452861589087
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(559L);
      Range.of(1433L);
      Object object0 = new Object();
      Long long0 = new Long(1416L);
      range0.equals(long0);
      Object object1 = new Object();
      Range range1 = Range.of(3924L);
      boolean boolean0 = range0.equals(range1);
      boolean boolean1 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.541166733025435
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854774449L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range1.intersection(range0);
      String string0 = range2.toString();
      assertEquals("[ 2147483647 .. 2147483646 ]/0B", string0);
      
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3885267394459806
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      List<Range> list1 = range0.split(1L);
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0613522351593794
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(9223372036854775553L);
      Range.of((-386L));
      Range range1 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775553 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854774449L, (-2032L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2032 would make range [9223372036854774449 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-443L));
      Range range1 = Range.of((-626L));
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147480516L), (-2147480516L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      boolean boolean0 = range0.equals(range_Builder0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.894245637761874
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      range0.equals(range1);
      assertSame(range1, range2);
      assertSame(range0, range2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-2147482227L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of((-1117L));
      Object object0 = new Object();
      Long long0 = Long.valueOf(255L);
      range1.equals(long0);
      Object object1 = new Object();
      range0.equals((Object) null);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      boolean boolean0 = range1.equals(object1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(3121L, 2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(780L, 4294967295L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-697L), 32767L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8894206965271843
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(4294967295L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long long1 = new Long(9223372036854775807L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(1606L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854773770L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775806L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(243L);
      Range range1 = Range.of(142L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-626L));
      Long long0 = new Long((-482L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.equals("W)Jbst}dR)");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6877906150720685
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(1L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      range0.getBegin(range_CoordinateSystem0);
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32767L), long1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long long0 = new Long(2147483647L);
      Range range0 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147480516L), 4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775804L));
      Long long0 = new Long((-2291L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2147480516L), (-2147480516L));
      Range range1 = Range.of(range_CoordinateSystem0, (-2147480516L), 4294967295L);
      boolean boolean0 = range0.intersects(range1);
      Long long0 = new Long((-2908L));
      boolean boolean1 = range0.equals(long0);
      assertTrue(boolean1 == boolean0);
      assertTrue(range0.isEmpty());
      
      boolean boolean2 = range1.equals(range_CoordinateSystem0);
      assertTrue(boolean2 == boolean1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.toString();
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin((-4294966864L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775806L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775806L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -5 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1848L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals("_!");
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals(object3);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.203099706052705
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(1651L);
      range0.toString();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 1650 ]/0B", range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 1168L;
      Object object0 = new Object();
      Range range0 = Range.ofLength(686L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.ofLength(1168L);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1002L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(243L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-2147483622L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-30L), 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775807L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.976432073516815
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(4978L, 9223372036854775807L);
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1359L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1804L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.getBegin(range_CoordinateSystem0);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.equals("_!");
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.892740633623113
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(133L);
      boolean boolean0 = range0.intersects(range1);
      Long long0 = new Long(469L);
      Long long1 = new Long((-626L));
      Object object0 = new Object();
      range1.equals(object0);
      Object object1 = new Object();
      range0.equals(object1);
      boolean boolean1 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.6923702084041805
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      
      Range range1 = Range.ofLength(415L);
      range0.startsBefore(range1);
      long long0 = range0.getLength();
      assertEquals(255L, long0);
      
      boolean boolean1 = range0.equals(range1);
      boolean boolean2 = range0.isSubRangeOf(range1);
      assertFalse(boolean2 == boolean1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean2);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.666352618518686
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(9223372036854775806L, 9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.intersects(range1);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("-bpwf", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse -bpwf into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.9844178912347266
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(243L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(5583L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(2804L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2804L, long0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.1359517395531467
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(2196L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 2195 ]/0B", string0);
      
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.parseRange("[ 0 .. 2195 ]/0B");
      Range range1 = Range.parseRange("[ 0 .. 2195 ]/0B");
      assertSame(range1, range0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.329667244765436
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-32762L));
      Range range1 = Range.of(32779L);
      Range range2 = range0.intersection(range1);
      String string0 = range2.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.795122406426881
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      range1.intersection(range0);
      Long long0 = new Long(75L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.8922772952702807
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(243L);
      Range range1 = Range.of(142L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(3131L, (-1294L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      long long0 = range0.getEnd();
      assertEquals(211L, long0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.134006824564753
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(1296L);
      long long0 = range0.getEnd();
      assertEquals(1295L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1030L), 1295L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775806L);
      Range range1 = Range.ofLength(65535L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.8936935921261018
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-364L));
      Range range1 = Range.of((-128L));
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of((-364L));
      assertSame(range2, range0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.6932245773362196
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-748L));
      Range range1 = Range.of((-626L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.endsBefore(range0);
      Range range2 = Range.of((-626L));
      boolean boolean2 = range2.equals(range1);
      assertFalse(range2.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertSame(range2, range1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(1848L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-4084L));
      Range range1 = range_Builder0.build();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.796560996608503
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(243L);
      Range range1 = Range.of(142L);
      boolean boolean0 = range0.startsBefore(range1);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-28L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775535L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(135L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.6916065998081296
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.toString();
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(0L);
      range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-586L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.0649051839479764
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 315L, 65535L);
      List<Range> list0 = range0.split(255L);
      assertFalse(list0.contains(range0));
      assertEquals(256, list0.size());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147480516L), 4294967295L);
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        range0.split((-1861L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-11L), 579L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.3305955430090957
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-820L), (-820L));
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147480516L), (-2147480516L));
      Range range1 = Range.of((-2147480516L), (-2147480516L));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Long long0 = new Long(4294967295L);
      range1.equals((Object) null);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967274L, 4294967274L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(1804L);
      range0.equals(range0);
      range0.getLength();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1414L, 1414L);
      range0.split(1414L);
      range0.split(1419L);
      range0.complement(range0);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.1378696811592013
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(9223372036854774464L, 9223372036854774464L);
      Range range1 = Range.of(9223372036854774464L, 9223372036854774464L);
      range1.complement(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      List<Range> list0 = range0.split(3842L);
      assertTrue(list0.contains(range0));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.059686199566801
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(929L);
      range0.getBegin();
      List<Range> list0 = range0.split(929L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.694854909089774
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.ofLength(997L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      Range range1 = Range.ofLength(686L);
      range0.startsBefore(range1);
      range0.getLength();
      Range range2 = Range.ofLength(686L);
      boolean boolean1 = range2.equals(range1);
      assertTrue(boolean1);
      
      range2.isSubRangeOf(range0);
      long long0 = range0.getEnd();
      assertEquals(996L, long0);
      
      range0.startsBefore(range1);
      range2.endsBefore(range0);
      Range range3 = Range.ofLength(686L);
      boolean boolean2 = range2.startsBefore(range0);
      assertTrue(boolean2 == boolean0);
      
      List<Range> list0 = range3.split(4233L);
      assertSame(range3, range2);
      
      List<Range> list1 = range0.split(1211L);
      assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.7974304538187877
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      range0.complementFrom(list1);
      assertTrue(list1.contains(range0));
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertSame(range0, range1);
      assertEquals(1L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.1360270265849555
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(9223372036854775806L, 9223372036854775806L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.0618047033734874
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775804L), (-9223372036854775804L));
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.793494183903136
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775804L));
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 430L, 430L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-819L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-819L));
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-547L));
      range0.spliterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.8940784789052407
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.2688293237435406
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(142L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.7987091240017974
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-1008L));
      Range range1 = Range.of((-1008L));
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      boolean boolean0 = range2.equals(range0);
      assertFalse(range1.isEmpty());
      assertSame(range2, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.566621028859323
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(8L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(81L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = 1278L;
      Range range0 = Range.ofLength(1278L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(8L);
      Range range0 = range_Builder0.build();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 9223372036854772993L);
      range_Builder0.shift(9223372036854772993L);
      range_Builder0.expandBegin(1L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -5630 would make range [9223372036854772992 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = 579L;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 1L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 579L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(9223372036854775807L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("'MB", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 'MB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-2168L));
      range_Builder0.contractBegin((-1058L));
      range_Builder0.copy();
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = (-705L);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(746L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.ofLength(2117L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2712L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.ofLength(475L);
      long long0 = range0.getLength();
      assertEquals(475L, long0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(8L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-1908L));
      long long0 = 33465L;
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(33465L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 65535L, (-2147483648L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1L);
      long long1 = (-128L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2117L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long long0 = (-705L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-705L));
      String string0 = "cluster distance can not be negative";
      // Undeclared exception!
      try { 
        Range.parseRange("cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cluster distance can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long long0 = (-705L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-705L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      String string0 = "cluster distance can not be negative";
      // Undeclared exception!
      try { 
        Range.parseRange("cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cluster distance can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-2444L));
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = 9223372036854773514L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long1 = 1L;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$EmptyIntRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$EmptyIntRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.of((-1L));
      long long0 = range0.getBegin();
      assertEquals((-1L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range range0 = Range.of(9223372036854774139L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854774139L, long0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Range range0 = Range.of((-21L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 169
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Range range0 = Range.of(1848L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 170
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range range0 = Range.of(263L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 171
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854774458L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2147480516L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147480517 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 173
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long long0 = (-2147483648L);
      long long1 = 32767L;
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), 1624L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(32767L, 2630L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
