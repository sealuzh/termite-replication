/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 08 04:10:34 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("G{n8[qc/Ye^R");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of G{n8[qc/Ye^R
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "getnextTo");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-55.0902922));
      hashMap0.put((String) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove((String) null);
      assertEquals((-55.0902922), object0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("\"ov'g", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("J~zyCJU}R6o&A`", 119L);
      assertEquals(119L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-1712L));
      assertEquals((-1712L), long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\r", (-2397.386960342));
      long long0 = jSONObject1.optLong("\r");
      assertEquals((-2397L), long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5171534199663776
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.optInt("\"wheel.json.JSONObject$1\"", 0);
      assertEquals(0, int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 20);
      assertEquals(20, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(">", 245.0);
      int int0 = jSONObject0.optInt(">");
      assertEquals(245, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getdehexchar", (-2354.7607956627035));
      assertEquals((-2354.7607956627035), double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("getcompare", (double) 2481.2F);
      double double0 = jSONObject1.optDouble("getcompare");
      assertEquals(4, jSONObject0.length());
      assertEquals(2481.199951171875, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Am>7G]Fz^O", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("M-a=", true);
      Object object0 = jSONObject1.opt("M-a=");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"<{P(<ePyLy'9@/Sw^\"");
      JSONObject jSONObject1 = jSONObject0.put("{", 1631L);
      jSONObject1.has("{");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("getcompare", (double) 2481.2F);
      jSONObject0.getString("getcompare");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1L);
      jSONObject0.put("getsplit", (Object) long0);
      long long1 = jSONObject0.getLong("getsplit");
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1L);
      jSONObject0.append("getsplit", long0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("getsplit");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"java.lang.String@0000000004\"", integer0);
      jSONObject1.getInt("\"java.lang.String@0000000004\"");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)91);
      JSONObject jSONObject1 = jSONObject0.put("q0aU`r\"V", (Object) byte0);
      double double0 = jSONObject1.getDouble("q0aU`r\"V");
      assertEquals(91.0, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(",S[,PQ<nuW1Z &ql", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-1066), (-1909));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.8239592165010823
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(128, (Collection) linkedList0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 128, 13);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1786549963416462
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double(0.0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      hashMap0.put((Integer) null, double0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 1124, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 547);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(2432);
      Double double0 = new Double((-1834.753928173821));
      hashMap0.put(integer0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("7.&U/La");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7.&U/La\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 2820, 638);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      String string0 = jSONObject0.toString(125, 125);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JSONObject.quote("\"<{P(<ePyLy'9/Sw^\"");
      assertEquals("\"\\\"<{P(<ePyLy'9/Sw^\\\"\"", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1L));
      try { 
        jSONObject0.put((String) null, (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optString("", "");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(11);
      jSONObject0.accumulate("\"java.lang.String@0000000002\"", integer0);
      jSONObject0.optString("\"java.lang.String@0000000002\"", ",\n");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.583258459420477
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      Float float0 = new Float(1561.673512168899);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Object) float0);
      double double0 = jSONObject1.optDouble("] is not a JSONArray.", 0.0);
      assertEquals(1561.6734619140625, double0, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("] is not a Boolean.", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("!uP~0Z");
      assertNull(object0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float(1270.0039F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "@Sw@ q~:");
      jSONObject0.put("@Sw@ q~:", (double) 0.0F);
      jSONObject0.getLong("@Sw@ q~:");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) jSONObject0);
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", (Map) null);
      Object object0 = jSONObject1.get("wheel.json.JSONObject$1");
      assertNotSame(jSONObject1, object0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3842181172398815
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"<{P(<ePyLy'9/Sw^\"");
      try { 
        jSONObject0.get("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("\"<{P(<ePyLy'9@/Sw^\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"<{P(<ePyLy'9@/Sw^\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      JSONObject jSONObject1 = jSONObject0.put("~", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7206699609551361
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.6859646722371444
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      StringWriter stringWriter0 = new StringWriter(2434);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6760216774759416
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.putOpt("fwV:dlO", linkedList0);
      String string0 = jSONObject0.toString((int) (byte) (-30), (int) (byte) (-30));
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 101, 70);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 32, 32);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7004209113281623
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)83);
      jSONObject0.put("\"\"\"\"", (Object) byte0);
      String string0 = jSONObject0.toString(2646, 17);
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float((-504.2601125335687));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(2481.2F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = JSONObject.quote("?ydhhwu</ez]-e9E-u-");
      assertEquals("\"?ydhhwu<\\/ez]-e9E-u-\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.quote("e,\n");
      assertEquals("\"e,\\n\"", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-166.60860993425507.", (Object) "-166.60860993425507.");
      String string0 = jSONObject1.optString("-166.60860993425507.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("getpush");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Null pointer");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("^S-n(#\"xJ>)p", 0L);
      double double0 = jSONObject1.optDouble("^S-n(#\"xJ>)p");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.0185543264956314
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Long long0 = new Long((-1L));
      jSONObject0.append("gettoString", long0);
      JSONObject.valueToString(jSONObject0, 32, 32);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0579054247036734
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Short short0 = new Short((short)70);
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.8883105696787474
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{@|oP<):K2LL<o");
      jSONObject0.toString((-1137), 1076);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.338872053314866
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1.0);
      jSONObject0.put("}5p!qM.Ke'ILJfow", (Object) double0);
      long long0 = jSONObject0.optLong("}5p!qM.Ke'ILJfow");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (Object) "");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(")Iop[qJbJ@[CE{", jSONObject0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject(")Iop[qJbJ@[CE{");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5945247843369215
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.putOpt("getcompare", "fwV:dlO");
      try { 
        jSONObject0.getJSONObject("getcompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcompare\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("is", stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("is", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("is");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("", (Object) jSONObject0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-75));
      JSONObject jSONObject1 = jSONObject0.put("", (Object) byte0);
      int int0 = jSONObject1.getInt("");
      assertEquals((-75), int0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", (-4766));
      double double0 = jSONObject1.getDouble(".");
      assertEquals((-4766.0), double0, 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.9338099989206319
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", 867L);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (Object) "");
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float(1.0F);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("{1lfP?8u Z", (Object) "4");
      int int0 = jSONObject0.getInt("{1lfP?8u Z");
      assertEquals(4, int0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2149.1);
      assertEquals("2149.1", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(0L);
      jSONObject0.put("QXYc_", (Object) long0);
      try { 
        jSONObject0.append("QXYc_", jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[QXYc_] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      jSONObject1.optJSONArray("jhmvvAO");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("q", (Collection) linkedList0);
      Iterator iterator0 = jSONObject0.keys();
      jSONObject0.append("q", iterator0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("quo", (Collection) linkedList0);
      Integer integer0 = new Integer(673);
      jSONObject1.accumulate("quo", integer0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.3579778549873243
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1.0);
      JSONObject jSONObject1 = jSONObject0.put("}5p!qM.Ke'ILJfow", (Object) double0);
      Long long0 = new Long(1L);
      jSONObject1.accumulate("}5p!qM.Ke'ILJfow", long0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6715952780212544
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000003\": {}}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{vi9e7FEm=C");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {vi9e7FEm=C
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{x2^5>9R?a9'T7:=d#J");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 15 of {x2^5>9R?a9'T7:=d#J
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("s`wfi{w4/CxKf$N");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of s`wfi{w4/CxKf$N
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{vi9e7FEm=");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 9 of {vi9e7FEm=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.5869133610136417
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";n8QP$-3+lz^TH");
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("Z'4K@5Dv7@f8q", object0);
      boolean boolean0 = jSONObject0.isNull("Z'4K@5Dv7@f8q");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(">");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("}5p!qM.Ke'ILJfow");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("[tz&EC", (-687));
      assertEquals((-687), int0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".", (-4766));
      boolean boolean0 = jSONObject0.isNull(".");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1894736293243366
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\"\"\"\"");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("eg,BZk `7E}cn2t?#/", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Am>7G]Fz^O", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("-166.60860993425507.");
      assertEquals("", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("t:5oU(SEIlQZvD*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of t:5oU(SEIlQZvD*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.4860325981639935
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ")}hij0)");
      // Undeclared exception!
      jSONObject0.toString(8192, 8192);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("null");
      assertFalse(boolean0);
  }
}
