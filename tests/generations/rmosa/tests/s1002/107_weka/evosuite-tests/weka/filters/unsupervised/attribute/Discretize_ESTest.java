/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 01 23:48:11 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("X*tob", (List<String>) null, (-2553));
      attribute0.copy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 540);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      binarySparseInstance0.setDataset(instances0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getAttributeIndices();
      discretize0.setUseEqualFrequency(true);
      discretize0.getUseEqualFrequency();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.useEqualFrequencyTipText();
      discretize0.makeBinaryTipText();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      sparseInstance0.toStringNoWeight();
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      discretize0.getCapabilities();
      boolean boolean0 = discretize0.getInvertSelection();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(boolean0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 4);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.batchFinished();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attribute attribute0 = new Attribute("X*tob");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 3206);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.setUseEqualFrequency(true);
      Discretize discretize1 = new Discretize();
      discretize1.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3206);
      // Undeclared exception!
      try { 
        discretize1.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("iXU2?ob");
      attribute0.copy();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("iXU2?ob", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      discretize0.output();
      discretize0.findNumBins(0);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(2145964228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2145964228
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 4);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.convertInstance(binarySparseInstance0);
      attribute0.enumerateValues();
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(boolean0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048189));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList1, 0);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      boolean boolean1 = discretize0.batchFinished();
      assertFalse(discretize0.getFindNumBins());
      assertTrue(boolean1 == boolean0);
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 4);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.isFirstBatchDone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      attribute0.enumerateValues();
      discretize0.batchFinished();
      boolean boolean0 = discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048189));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-2t?ob", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(592);
      discretize0.convertInstance(binarySparseInstance0);
      // Undeclared exception!
      try { 
        instances0.instance(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048189));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("100,2052,4568,20,-1280,12", arrayList1, 0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.batchFinished();
      discretize0.findNumBinsTipText();
      DenseInstance denseInstance0 = new DenseInstance(2239);
      boolean boolean0 = discretize0.input(denseInstance0);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("iXU2?ob");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("iXU2?ob", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.batchFinished();
      discretize0.findNumBinsTipText();
      DenseInstance denseInstance0 = new DenseInstance(3);
      boolean boolean0 = discretize0.input(denseInstance0);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute attribute0 = new Attribute("X*tob", (List<String>) null, (-2553));
      attribute0.copy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 540);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.StringLocator", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048188));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList1, 4);
      Discretize discretize0 = new Discretize();
      discretize0.getIgnoreClass();
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      System.setCurrentTimeMillis((-1879048188));
      discretize0.input((Instance) null);
      discretize0.invertSelectionTipText();
      discretize0.attributeIndicesTipText();
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = new Attribute("If set to true, equal-frequency binning will be used instead of equal-wth binning.");
      attribute0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("If set to true, equal-frequency binning will be used instead of equal-wth binning.", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 2;
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      assertEquals(2.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048188));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-2t?ob", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-3086.114);
      doubleArray0[3] = (-3086.114);
      doubleArray0[4] = (-3086.114);
      DenseInstance denseInstance0 = new DenseInstance((-3086.114), doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("iXU2?ob");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("iXU2?ob", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.setAttributeIndices("u#Kx!YCL5Df9a");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_NumBins = (-794);
      int int0 = discretize0.getBins();
      assertEquals((-794), int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", linkedList0, 1431655773);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("-2t?ob", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048189));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-2t?ob", arrayList1, 3);
      LinkedList<SparseInstance> linkedList0 = new LinkedList<SparseInstance>();
      instances0.addAll((Collection<? extends Instance>) linkedList0);
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.m_NumBins = (-452);
      discretize0.setInputFormat(instances0);
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-2113396603));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", (-1879048188));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-2t?ob", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 0;
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute("If set to true, equal-frequency binning will be used instead of equal-with binning.");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("If set to true, equal-frequency binning will be used instead of equal-with binning.", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 2;
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-t?ob", arrayList0, (-1879048189));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-t?ob", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getUseBinNumbers());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 4);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'null' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048188));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-2t?ob", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1879048188));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1879048188
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(210);
      discretize0.convertInstance(binarySparseInstance0);
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048189));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-2t?ob", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 4);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("relational");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at relational
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = new Attribute("X*tob");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("X*tob", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = (-122);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-122));
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("date", arrayList1, 4);
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048189));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("string", arrayList1, 4);
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      attribute0.enumerateValues();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '-2t?ob' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attribute attribute0 = new Attribute("n>");
      attribute0.copy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      int int0 = 47;
      Instances instances0 = new Instances("string", arrayList0, 47);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      arrayList0.add(attribute0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute attribute0 = new Attribute("X*tob");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("X*tob", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.206373767881638
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048189));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-2t?ob", arrayList1, 3);
      arrayList1.add(attribute0);
      LinkedList<SparseInstance> linkedList0 = new LinkedList<SparseInstance>();
      instances0.addAll((Collection<? extends Instance>) linkedList0);
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[12][6];
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(1);
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      
      discretize0.getCutPoints(1);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("-");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("-", arrayList0, 3);
      Discretize discretize0 = new Discretize("string");
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048188));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-2t?ob", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "date";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[7][0];
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getCutPoints(4);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048188));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-2t?ob", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1879048188));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -B option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(3001.781);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(3001.781, double0, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      discretize0.getAttributeIndices();
      discretize0.setMakeBinary(true);
      discretize0.toString();
      discretize0.getInvertSelection();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.getInvertSelection();
      discretize0.getMakeBinary();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048189));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-2t?ob", arrayList1, 3);
      arrayList1.add(attribute0);
      LinkedList<SparseInstance> linkedList0 = new LinkedList<SparseInstance>();
      instances0.addAll((Collection<? extends Instance>) linkedList0);
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.getFindNumBins();
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[7][0];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.709006195206491
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      int int0 = 86;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-2t?ob", arrayList0, (-1879048189));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      attribute0.setWeight((-1305.9748844011601));
      Discretize discretize0 = new Discretize("relational");
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.getBinRangesString(2);
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("!RZs", arrayList0, 449);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("first-last");
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      discretize0.setMakeBinary(false);
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      int[] intArray0 = new int[6];
      range0.toDisplay();
      intArray0[1] = 939;
      intArray0[2] = (-1578);
      int int0 = (-1789569704);
      intArray0[3] = (-1789569704);
      intArray0[4] = 2;
      intArray0[5] = (-225);
      Range.indicesToRangeList(intArray0);
      range0.getRanges();
      discretize0.getUseBinNumbers();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.613628922152431
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setIgnoreClass(true);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("first-last");
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      discretize0.setMakeBinary(true);
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "inf";
      stringArray0[1] = "-";
      stringArray0[2] = "Expected e$d of range string,fouaR:";
      stringArray0[3] = "<zpO6EZ)xk4";
      stringArray0[0] = "Explorer.props";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.709006195206491
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.toString();
      discretize0.m_MakeBinary = false;
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "indxnumer expected");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "indxnumer expected";
      stringArray0[1] = "indxnumer expected";
      stringArray0[2] = "J_Z~Pg";
      stringArray0[3] = "indxnumer expected";
      stringArray0[4] = "-R";
      Filter.runFilter(discretize0, stringArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      
      stringArray0[5] = "J_Z~Pg";
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-B";
      stringArray0[1] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-M";
      stringArray0[1] = "-B <num>";
      stringArray0[2] = "-M";
      stringArray0[3] = "-V";
      stringArray0[4] = "-B";
      stringArray0[5] = "5[VY.b):k@K.zz6>";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.m_IgnoreClass = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.613628922152431
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Number of bins.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      double[][] doubleArray0 = new double[10][0];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1104);
      intArray0[1] = (-1104);
      discretize0.setAttributeIndicesArray(intArray0);
      boolean boolean0 = discretize0.m_IgnoreClass;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String string0 = discretize0.getRevision();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("8964", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(3975);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_IgnoreClass = false;
      discretize0.setAttributeIndices("ab53&*N!@7?##|r");
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "J_Z~Pg";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      double[][] doubleArray0 = new double[10][0];
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(3975);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, int0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Discretize discretize0 = new Discretize("ak\"uj/%)Ig;Wh");
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.485657582461209
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[12][6];
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(1);
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Discretize.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      int[] intArray0 = new int[3];
      intArray0[0] = (-2120);
      discretize0.setBins((-2120));
      intArray0[1] = 2;
      intArray0[2] = 2117;
      SparseInstance sparseInstance0 = new SparseInstance(Double.POSITIVE_INFINITY, doubleArray0, intArray0, 2117);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("X*tob", "", protectedProperties1);
      // Undeclared exception!
      try { 
        sparseInstance0.relationalValue(attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Discretize discretize0 = new Discretize("c#*E");
      discretize0.setDesiredWeightOfInstancesPerInterval((-1727.72198094791));
      assertEquals((-1727.72198094791), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.3861547465398494
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[12][6];
      discretize0.m_CutPoints = doubleArray0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&;2K~x";
      stringArray0[1] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[2] = "t*|8r3:SO[w>|-=";
      stringArray0[3] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[4] = "Num";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: &;2K~x Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\". t*|8r3:SO[w>|-= \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10) Num 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }
}
