/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 01 23:54:23 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4971428571428571
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The WWW Universal Resource3Locator that points to the item ing referenced. This often isused for technical reports to point to the ftp site where the postscrpt source ofth: report is located.");
      assertEquals("th www univers resource3loc that point to th item ing refer. th oft isus for techn report to point to th ftp sit whes th postscrb sourc ofth: report is loc.", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4929577464788732
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be capital.lux");
      assertEquals("how someth strang ha been publ. th first word should be capit.luc", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4984894259818731
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string0);
      
      String string1 = lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.");
      assertEquals("nam(s) of edit(s), typ as ind in th lat book. if ther is al an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("N-.2umpt");
      assertEquals("n-.2um", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ndlOull");
      assertEquals("ndloul", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("!aS1bB");
      assertEquals("!as1b", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.ond";
      stringArray0[1] = "-h";
      stringArray0[2] = "eh>";
      stringArray0[3] = "KU";
      stringArray0[4] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.et";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("String should not finish with ");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("eh>");
      assertEquals("eh>", string1);
      
      lovinsStemmer1.getRevision();
      String string2 = lovinsStemmer1.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.et");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.es", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ical");
      assertEquals("ical", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ialite");
      assertEquals("ial", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("JdiU%L4:Dpp");
      assertEquals("jdiu%l4:dp", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2378101552242273
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("jc;l=-d?|z;w;fmnet");
      assertEquals("jc;l=-d?|z;w;fmnet", string0);
      
      String string1 = lovinsStemmer0.stem("w]ytpiHLkY");
      assertEquals("w]ytpihlk", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString(" _ption ");
      assertEquals(" _ption ", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("istr");
      assertEquals("ister", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4989384288747346
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      String string1 = lovinsStemmer0.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it vol and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ne#qrk0um@jc2ajmert");
      assertEquals("ne#qrk0um@jc2ajmers", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("iev");
      assertEquals("ief", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ening");
      assertEquals("ening", string0);
      
      String string1 = lovinsStemmer0.stem("ening");
      assertEquals("ening", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("\tUses lowercase strings.");
      assertEquals("\tus lowercas string.", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.190322321802883
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A work that is printed and bound, but without a named publisher or sponsoring institution.");
      assertEquals("a work that is print and bound, but without a nam publishes or sponsor institut.", string0);
      
      lovinsStemmer0.stemString("a work that is print and bound, but without a nam publishes or sponsor institut.");
      lovinsStemmer0.stem("U#I`VK}");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("a work that is print and bound, but without a nam publishes or sponsor institut.");
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("dex");
      assertEquals("dic", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("*Xp)FVCC7>WN");
      lovinsStemmer0.stem("metr");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("metr");
      assertEquals("meter", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("OFOn");
      assertEquals("ofon", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.103555559492924
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lud");
      lovinsStemmer0.stem("lus");
      lovinsStemmer0.stemString("lus");
      lovinsStemmer0.stemString("flpvad");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("flpvas");
      lovinsStemmer0.stemString("f~2^MP<`>-a/Hn[{\"");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("flpher");
      lovinsStemmer0.stem("dex");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("umpt");
      assertEquals("um", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4978902953586498
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("As2_d4D:yL");
      String string0 = lovinsStemmer1.stem("PDF");
      assertEquals("pdf", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("$q;bCaR");
      assertEquals("$q;bcar", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.lux");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.luc", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4909090909090909
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      lovinsStemmer0.stemString("Can't construct a path to file relative to user dir.");
      String string0 = lovinsStemmer0.stem("PS");
      assertEquals("ps", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("icide");
      assertEquals("ic", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("x$&6&2c1,XNN");
      String string0 = lovinsStemmer0.stem("x$&6&2c1,XNN");
      assertEquals("x$&6&2c1,xn", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ludix");
      assertEquals("ludic", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("year");
      assertEquals("year", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ifully");
      assertEquals("ifl", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("<rn%ex");
      assertEquals("<rn%ec", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("alize");
      assertEquals("aliz", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ax");
      assertEquals("ac", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("hvbuasyt");
      assertEquals("hvbuasys", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Sorted arra@ (ints): ");
      assertEquals("sort ar@ (int): ", string0);
      
      String string1 = lovinsStemmer0.stem("$Revision: 8080 $");
      assertEquals("$revision: 8080 $", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ioning");
      assertEquals("ion", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4954128440366972
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ix");
      assertEquals("ix", string0);
      
      String string1 = lovinsStemmer0.stemString("An annotation. It i not used by the standard bibliography styles, but may be used by others ha produce an annotated bibliography.");
      assertEquals("an annot. it i not us by th standard bibliograph styl, but may be us by other ha produc an annot bibliograph.", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.49122807017543857
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The name of the school where a thesis was written.");
      assertEquals("th nam of th school whes a thes wa writ.", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("anj'>f5pand");
      assertEquals("anj'>f5pans", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("end");
      assertEquals("ens", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string0);
      
      String string1 = lovinsStemmer0.stem("olv");
      assertEquals("olut", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("mit");
      assertEquals("mis", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("csylid");
      assertEquals("csylis", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("cid");
      assertEquals("cis", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ert");
      assertEquals("ers", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("^ujITnQXBzYz");
      assertEquals("^ujitnqxbzys", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem(")end");
      assertEquals(")ens", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("erisend");
      assertEquals("erisens", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("JOURNAL");
      assertEquals("journ", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ialize");
      assertEquals("ial", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("idine");
      assertEquals("id", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("isterid");
      assertEquals("isteris", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("luxlucet");
      assertEquals("luxluces", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("Induction of decision trees");
      assertEquals("induction of decision tree", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("/s&yko!s;ohu0onkqvad");
      assertEquals("/s&yko!s;ohu0onkqvas", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("aries");
      assertEquals("ar", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ond");
      assertEquals("ons", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("uopbex");
      assertEquals("uopbic", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("rud");
      assertEquals("rus", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("index");
      assertEquals("indic", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ucu{s)6`zuad");
      assertEquals("ucu{s)6`zuas", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("encies");
      assertEquals("enci", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("alism");
      assertEquals("alism", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("eness");
      assertEquals("enes", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("uct");
      assertEquals("uc", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("pa?7lud");
      assertEquals("pa?7lus", string0);
      
      String string1 = lovinsStemmer0.stem("pa?7lus");
      assertEquals("pa?7lus", string1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("d'");
      assertEquals("d'", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Fatal er9or.");
      assertEquals("fat er9or.", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("atex");
      assertEquals("atic", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("her");
      assertEquals("hes", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("+VMm%YvEWs8JJKz,");
      assertEquals("+vm%yvews8jjkz,", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("picher");
      assertEquals("piches", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("null");
      assertEquals("nl", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("Machine Learning");
      assertEquals("machine learn", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4963503649635037
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31Ulux");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31uluc", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ement");
      String string0 = lovinsStemmer0.stem("lux");
      assertEquals("luc", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("iffly");
      assertEquals("iff", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ens");
      assertEquals("en", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("vn}L>a");
      assertEquals("vn}l>", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("$VALUES");
      assertEquals("$valu", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("pex");
      assertEquals("pic", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.3022531176406211
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem(")R4QRW5V41(u*['Ite");
      String string0 = lovinsStemmer0.stem(")R4QRW5V41(u*['Ite");
      assertEquals(")r4qrw5v41(u*['it", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }
}
