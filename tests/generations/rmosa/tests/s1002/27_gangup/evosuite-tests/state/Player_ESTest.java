/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 00:37:02 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((-488));
      Player player1 = new Player((-169), "MfzK{H[^BP5`4", "MfzK{H[^BP5`4", (short)4919);
      player0.isJoinOK(player1, false);
      player0.setX((-1234.35F));
      player0.getX();
      player1.pack();
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertEquals((-1234.35F), player0.getX(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((-10083), "J", "J", (-10083), (-30244));
      Player player1 = new Player(10, "", "J", 911, 0);
      player1.remove(player0);
      player1.gangStrength();
      player0.remove(player1);
      Player player2 = new Player((short)4919, "", "J", 0, 1002);
      player2.next = (Party) player1;
      player2.reset(false);
      player0.isJoinOK(player2, true);
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(2147340491, "", "", 2147340491, (-29966));
      player0.getSubparty();
      Player player1 = new Player(2306);
      player0.next = (Party) player1;
      player0.id = 2306;
      FileSystemHandling.shouldAllThrowIOExceptions();
      player1.gangStrength();
      Player player2 = new Player(2096);
      Party party0 = player2.prev;
      player2.remove((Party) null);
      player1.setY((-764.9238F));
      player2.setMoney(10.0F);
      player0.boss = (Party) player1;
      player1.prev = (Party) player0;
      player0.setJoinOK(player2, true);
      player1.boss = player0.boss;
      player0.getX();
      player0.getMoney();
      player1.pack();
      player2.getMoney();
      player1.getX();
      player1.type();
      player2.isJoinOK(player1, true);
      player0.type();
      player1.getX();
      player1.type();
      player1.getMoney();
      float float0 = player2.getMoney();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 722;
      Player player0 = new Player(722);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(1823, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-18220));
      assertEquals(0.0F, player0.getY(), 0.01F);
      
      player0.setY(0.1F);
      float float0 = player0.getY();
      assertEquals(0.1F, float0, 0.01F);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(0, (String) null, 0);
      Player player1 = new Player(0, (String) null, (String) null, 0);
      player0.setJoinOK(player1, true);
      player0.getName();
      player0.gangStrength();
      // Undeclared exception!
      try { 
        player1.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(3);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-186), 2147340491);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(1);
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      player0.getX();
      player0.pack();
      Player player1 = new Player(1139, "q2yE", "q2yE", 334);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(22193, ")#", "module.ModuleBrowserDialog$ModuleFilter", 0, 0);
      Player player1 = new Player();
      player1.setJoinOK(player0, false);
      player0.setZ(0.2F);
      player0.getTimeOfDeath();
      int int0 = player0.getStrength();
      assertEquals(0.2F, player0.getZ(), 0.01F);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(1220);
      byte[] byteArray0 = player0.pack();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MU2\":p9% (H[@3uq");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((-3277), "", "", (-3277));
      player0.reset(false);
      player0.setConnected(true);
      player0.pack();
      player0.setDead(1392409281320L, true);
      player0.setDead((long) (-3277), false);
      player0.setConnected(false);
      player0.setMoney((-4287.796F));
      player0.getTimeOfDeath();
      player0.pack();
      player0.getSubparty();
      player0.getSubparty();
      player0.getName();
      player0.pack();
      player0.getMoney();
      player0.getY();
      player0.pack();
      Player player1 = new Player((-3277));
      player0.isJoinOK(player1, true);
      int int0 = player0.gangStrength();
      assertTrue(player0.isDead());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(4);
      assertEquals(0L, player0.getTimeOfDeath());
      
      Player player1 = new Player(4, "u@", 0);
      player0.setDead((-1L));
      player1.setZ(0.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.getTimeOfDeath();
      player1.gangStrength();
      System.setCurrentTimeMillis(0);
      player1.isJoinOK(player0, true);
      System.setCurrentTimeMillis(4);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-1958), "!{Gk", (-1958));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Player player1 = new Player((-2122), "!{Gk", "!{Gk", (-2122), (-762));
      player0.setJoinOK(player1, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      player1.setZ((-1.0F));
      player0.getTimeOfDeath();
      player1.getTimeOfDeath();
      player1.isJoinOK(player0, false);
      player1.getZ();
      assertEquals((-1.0F), player1.getZ(), 0.01F);
      
      int int0 = player0.getStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((-19471), "", "AQ|]2zO[VKi{", 5, 0);
      Player player1 = new Player((short)4919, "mw;(P;|N^", 5);
      player0.setJoinOK(player1, false);
      player0.setZ((-1.0F));
      player1.getTimeOfDeath();
      player0.getTimeOfDeath();
      player0.isJoinOK(player1, false);
      player0.getIP();
      assertEquals((-1.0F), player0.getZ(), 0.01F);
      
      float float0 = player1.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player();
      assertTrue(player0.isConnected());
      
      player0.setConnected(false);
      player0.setJoinOK(player0, false);
      boolean boolean0 = player0.isConnected();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-73);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-81);
      Player player0 = new Player((byte) (-1));
      player0.setDead((long) (byte)26);
      boolean boolean0 = player0.isDead();
      assertEquals(26L, player0.getTimeOfDeath());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(5, "", 5);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      dataInputStream0.read();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-1);
      byteArray0[0] = (byte)17;
      sequenceInputStream0.read(byteArray0, (-1177), (-634));
      player0.unpack(dataInputStream0);
      Player player1 = new Player((byte)116, "", " @>`6Z=-w[Y", (-1));
      player0.setZ(2056.713F);
      byte[] byteArray1 = new byte[0];
      dataInputStream0.read(byteArray1);
      player1.setY(1299.871F);
      player1.setJoinOK(player0, false);
      player0.isJoinOK(player1, false);
      player1.gangStrength();
      System.setCurrentTimeMillis((-1));
      player0.isDead();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      float float0 = Player.TOLERANCE;
      player0.getX();
      player1.isJoinOK(player0, false);
      player1.gangStrength();
      player1.getStrength();
      player0.getZ();
      player0.pack();
      player0.unpack(dataInputStream0);
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((-4359), (String) null, (-4359));
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((-1171), "", "", 379, (-13170));
      player0.getSubparty();
      int int0 = player0.getStrength();
      assertEquals((-13170), int0);
      
      player0.pack();
      Player player1 = new Player();
      player0.boss = (Party) player1;
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals("Player-1", player0.boss.toString());
      assertEquals(0, player1.getPictureId());
      
      int int1 = player0.gangStrength();
      assertEquals(379, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(1, int1);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((-488));
      player0.setJoinOK(player0, true);
      boolean boolean0 = player0.isJoinOK(player0, false);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals("Player-488", player0.toString());
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(2045);
      Party party0 = new Party(2045);
      party0.next = (Party) player0;
      player0.add(party0);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((-4201), "AQ|]2zO[VKi{", (-312));
      player0.setZ((-312));
      Player player1 = new Player((-4201), (String) null, "AQ|]2zO[VKi{", (-312));
      player1.getIP();
      byte byte0 = (byte) (-102);
      Player player2 = new Player(4919, (String) null, " KU72", 1139);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-22);
      MockFile mockFile0 = new MockFile((String) null, "AQ|]2zO[VKi{");
      File file0 = MockFile.createTempFile("AQ|]2zO[VKi{", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) player1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) player2;
      objectArray0[3] = (Object) player0;
      objectArray0[4] = (Object) player0;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        mockPrintStream0.format(locale0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(1630, "", 1630);
      player0.getName();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1630, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(688, "Q.r[`tX+\"=2w8", "module.ModuleBrowserDialog$ModuleFilter", 0, 234);
      assertEquals(0, player0.getPictureId());
      assertEquals(234, player0.getStrength());
      
      Player player1 = new Player(179, "Q.r[`tX+\"=2w8", "oRNX<0SAR]8AvuhtV'K", 179);
      int int0 = player1.getPictureId();
      assertEquals("Q.r[`tX+\"=2w8", player1.getIP());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals(179, int0);
      assertEquals(1, player1.getStrength());
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player((-20));
      boolean boolean0 = player0.isDead();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("Player-20", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((byte)46);
      player0.reset(true);
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player46", player0.toString());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2774737549423403
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player((-1), " ", " ", (-983), 4260);
      Player player1 = new Player((-2256));
      player0.next = (Party) player1;
      player0.remove(player1);
      player1.head = (Party) player0;
      Player player2 = new Player((-983), " ", " ", (-983), (-10191));
      player0.isJoinOK(player2, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player1.pack();
      player1.pack();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      player0.pack();
      // Undeclared exception!
      player1.gangStrength();
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Player player0 = new Player((-1001), "state.Player", "state.Player", (-1001));
      player0.setY((-1.0F));
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX((-1.0F));
      player0.setZ(0.0F);
      player0.pack();
      int int0 = Packable.GAME_EVENT;
      player0.head = null;
      player0.getMoney();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-3201L));
      float float0 = player0.getY();
      assertEquals((-1.0F), float0, 0.01F);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player(1732);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(boolean0);
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player1732", player0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(0, "Player.unpack(): *** WARNING *** data is not of proper type!", (String) null, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)126;
      Player player1 = new Player((short)4919, (String) null, "gui.ModuleBrowserDialog$ModuleFilter", 0);
      player0.setZ(0);
      player0.remove(player1);
      assertEquals(0, player1.getPictureId());
      
      player0.toString();
      int int0 = player0.gangStrength();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getZ(), 0.01F);
      assertEquals(1, int0);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player((-1727), "Z10'kHf3B2hCH%NEq5n", (String) null, (-1727), 29229);
      MockFile mockFile0 = new MockFile((String) null, "gui.ModuleBrowserDialog$ModuleFilter");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "Z10'kHf3B2hCH%NEq5n";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "Sw";
      objectArray0[4] = (Object) "Z10'kHf3B2hCH%NEq5n";
      objectArray0[5] = (Object) "gui.ModuleBrowserDialog$ModuleFilter";
      objectArray0[6] = (Object) player0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "Sw", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player((-1778), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1778));
      Player player1 = new Player((short)4919);
      Player player2 = new Player((-1778), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "gui.ModuleBrowserDialog$ModuleFilter", 31232);
      String string0 = player1.toString();
      assertEquals("Player4919", string0);
      
      int int0 = player2.getPictureId();
      assertEquals(31232, int0);
      assertEquals("Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", player2.getIP());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0.0.0.0");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      player1.pack(dataOutputStream0);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(1, player1.getStrength());
      assertEquals(0, player1.getPictureId());
      assertTrue(player1.isConnected());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(2055);
      player0.setDead(2185L);
      player0.getSubparty();
      long long0 = player0.getTimeOfDeath();
      assertEquals(2185L, long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player(0, (String) null, 722);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player(1895);
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player(4);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      boolean boolean0 = player0.isConnected();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player4", player0.toString());
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      Player player0 = new Player(0, "", "", 0);
      player0.toString();
      player0.getPictureId();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player((-2226));
      Player player1 = new Player((-2226));
      player0.setJoinOK(player1, false);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0, player1.getPictureId());
      assertEquals(1, player1.getStrength());
      assertTrue(boolean0);
      assertEquals("Player-2226", player1.getName());
      assertEquals("0.0.0.0", player1.getIP());
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(2702, "D{I7XT9miBY", "", 2702, 2702);
      int int0 = player0.getStrength();
      assertTrue(player0.isConnected());
      assertEquals("D{I7XT9miBY", player0.getIP());
      assertEquals(2702, int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(2702, player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player((-509));
      player0.setJoinOK(player0, true);
      boolean boolean0 = player0.isJoinOK(player0, true);
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertTrue(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-509", player0.getName());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player(25, "", "", (-22733));
      player0.toString();
      player0.getPictureId();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player((-4270));
      int int0 = player0.getStrength();
      assertEquals(1, int0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals("Player-4270", player0.getName());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player(2055);
      player0.getSubparty();
      long long0 = player0.getTimeOfDeath();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, long0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player2055", player0.getName());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player((-339));
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = player0.gangStrength();
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(player0.isDead());
      assertEquals(1, int0);
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-339", player0.getName());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player((-902));
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player((-488));
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player((-20731));
      String string0 = player0.getName();
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals("Player-20731", string0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player(1630);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertFalse(boolean0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("Player1630", player0.getName());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(16896);
      player0.setDead();
      int int0 = player0.gangStrength();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player((-2565), "", "", (-2565), (-2565));
      int int0 = player0.gangStrength();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals((-2565), int0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals((-2565), player0.getPictureId());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player(2045);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player1 = new Player();
      player0.head = (Party) player1;
      player0.gangStrength();
      player0.getIP();
      System.setCurrentTimeMillis((-2271L));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player(1813, "state.Party", "state.Party", 1813, 1813);
      int int0 = player0.gangStrength();
      assertTrue(player0.isConnected());
      assertEquals(1813, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1813, int0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player(1927, "", 1927);
      assertTrue(player0.isConnected());
      
      player0.setConnected(false);
      assertFalse(player0.isConnected());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player(2045);
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      String string0 = player0.getIP();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertEquals("Player2045", player0.toString());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("0.0.0.0", string0);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[2] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      int int0 = Packable.ACTION;
      Player player0 = new Player(867);
      player0.unpack(dataInputStream0);
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[2] = (byte)26;
      Player player0 = new Player((byte)26);
      player0.unpack(byteArray0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Player player0 = new Player(31);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player(1692);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Player player0 = new Player(1);
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }
}
