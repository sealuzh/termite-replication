/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 01 22:48:27 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.NodeType;
import org.dom4j.dom.DOMDocument;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Parser;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setEncoding("");
      PipedInputStream pipedInputStream0 = new PipedInputStream(47);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      // Undeclared exception!
      sAXReader0.installXMLFilter(xMLReader0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity("", "");
      sAXReader0.setEncoding("");
      File file0 = MockFile.createTempFile("Ps@Ka9iUVPH-p", "kE=n;]rEF#}aTV+Qn");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.createDefaultEntityResolver("http://xml.org/sax/features/use-locator2");
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.endElement((String) null, "//tmp/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/0!Nb-XHS0/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/*jkhz0org.dom4j.util.UserDataAttribute/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tce2`9Jaz/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{0/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tce2`9Jaz/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{0i'=m}|:\"h]", (String) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, xMLFilterImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.unparsedEntityDecl("number", "number", (String) null, "//tmp/COMMENT_NODE0COMMENT_NODE");
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      StringReader stringReader0 = new StringReader("number");
      try { 
        sAXReader0.read((Reader) stringReader0, "number");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(":");
      sAXReader_SAXEntityResolver0.resolveEntity(":", ":");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
          SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
          sAXReader0.setEncoding("Y'q|wEU3");
          sAXReader0.setXMLFilter(xMLFilterImpl0);
          sAXReader0.setEntityResolver(xMLFilterImpl0);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor297.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor297.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)47;
      String string0 = "as>^;";
      sAXReader0.setEncoding("as>^;");
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "2;U#4{qJT>&WNG");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "http://xml.org/sax/properties/lexical-handler";
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", xMLFilterImpl0);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.197846119469557
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.setEncoding(",");
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.getEncoding();
      try { 
        sAXReader0.read(",");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/, (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/, (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Failed to parse document for URI: ");
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      sAXReader_SAXEntityResolver0.resolveEntity("PRpGh7EPIMp:]kWMR", "//home/ubuntu/termite/projects/62_dom4j/X>7v/.7w4Y9:CK>H<'RG/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/1^>LW5N_+9$4$9_WX{0.7w4Y9:CK>H<'RG");
      sAXReader_SAXEntityResolver0.resolveEntity("", "b6'b:s^5y=");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ".i30\"MCm");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.createDefaultEntityResolver("/jDUxuSzuOF4LS&");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setFeature("http://xml.org/sax/features/validation", false);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      byte[] byteArray0 = new byte[8];
      parserAdapter0.endDocument();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputSource inputSource0 = new InputSource(byteArrayInputStream0);
      inputSource0.setSystemId("UUsbM\">gtV");
      xMLReaderAdapter0.startDocument();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document UUsbM\">gtV : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      MockURL.getHttpExample();
      StringReader stringReader0 = new StringReader("org.jaxen.expr.iter.IterableAncestorAxis");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      StringReader stringReader1 = new StringReader("org.jaxen.expr.iter.IterableAncestorAxis");
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockURL.getFileExample();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEncoding("{%");
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.getDocumentFactory();
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", false);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(58);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/ B.!\\**x/^>LW5N_+9$4$9_WX{/ B.!\\**x0@?[#6@u?@(Bjxf5/9!";
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/ B.!**x/^>LW5N_+9$4$9_WX{/ B.!**x0@?[#6@u?@(Bjxf5/9!");
      String string1 = "//home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tmp/:M60s[?sO}w ^#=%c/ggeB}\"'v-h1rd0ggeB}\"'v-h1rd";
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "The Node already has an existing document: ");
      // Undeclared exception!
      try { 
        sAXReader0.read("The Node already has an existing document: ");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) null, "//home/ubuntu/termite/projects/62_dom4j/wyQ9[4:/^>LW5N_+9$4$9_WX{/0J@v&Yq");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-93);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "//home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/0/home/ubuntu/termite/projects/62_dom4j/Cannot convert: /^>LW5N_+9$4$9_WX{/Cannot convert: 0string-length");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      byte[] byteArray0 = new byte[8];
      parserAdapter0.endDocument();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputSource inputSource0 = new InputSource(byteArrayInputStream0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(47);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8267437978268286
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("s[?sO}w ^#=%c");
          String string0 = "PROCESSING_INSTRUCTION_NODE";
          sAXReader_SAXEntityResolver0.uriPrefix = "PROCESSING_INSTRUCTION_NODE";
          sAXReader_SAXEntityResolver0.resolveEntity("s[?sO}w ^#=%c", "s[?sO}w ^#=%c");
          XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
          ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
          SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLReaderAdapter.parse(XMLReaderAdapter.java:249)
             // org.xml.sax.helpers.ParserAdapter.parse(ParserAdapter.java:430)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor297.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLReaderAdapter.parse(XMLReaderAdapter.java:249)
             // org.xml.sax.helpers.ParserAdapter.parse(ParserAdapter.java:430)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor297.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0533214504847934
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setEncoding("l~#:>u~G~xRI");
      StringReader stringReader0 = new StringReader("?1F:`/Xv_Z");
      try { 
        sAXReader0.read((Reader) stringReader0, "?1F:`/Xv_Z");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document ?1F:`/Xv_Z : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter(xMLFilter0);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/ B.!**x/^>LW5N_+9$4$9_WX{/ B.!**x0@?[#6@u?@(Bjxf5/9!");
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      File file0 = MockFile.createTempFile("//home/ubuntu/termite/projects/62_dom4j/ B.!**x/^>LW5N_+9$4$9_WX{/ B.!**x0@?[#6@u?@(Bjxf5/9!", "//home/ubuntu/termite/projects/62_dom4j/ B.!**x/^>LW5N_+9$4$9_WX{/ B.!**x0@?[#6@u?@(Bjxf5/9!", (File) mockFile0);
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/ B.!**x/^>LW5N_+9$4$9_WX{/ B.!**x0@?[#6@u?@(Bjxf5/9!/,y1pgq+bZic\u0000http:/xml.org/sax/features/validation", "YfY)(0pw#2");
      File file0 = MockFile.createTempFile("file://", "file://", (File) mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      dispatchHandler0.removeHandler("@bNBSqh)");
      xMLFilterImpl0.processingInstruction((String) null, "@bNBSqh)");
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setIgnoreComments(true);
      sAXReader0.isStringInternEnabled();
      sAXReader0.getEntityResolver();
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.isIgnoreComments();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter1);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter1);
      xMLReaderAdapter1.processingInstruction("NbHu", "NbHu");
      xMLReaderAdapter1.processingInstruction("NbHu", (String) null);
      xMLReaderAdapter0.endDocument();
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler(")", dispatchHandler0);
      DOMDocument dOMDocument0 = new DOMDocument();
      assertEquals("#document", dOMDocument0.getNodeName());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("TC", "//home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$49_WX{/^>LW5N_+9$49_WX{/0^>LW5N_+9$49_WX{");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      try { 
        sAXReader0.setXMLReaderClassName("//home/ubuntu/termite/projects/62_dom4j/B+8`pItCKcpY\"F\"|:/B+8`pItCKcpY\"F\"|:/B+8`pItCKcpY\"F\"|:0B+8`pItCKcpY\"F\"|:/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //home/ubuntu/termite/projects/62_dom4j/B+8`pItCKcpY\"F\"|:/B+8`pItCKcpY\"F\"|:/B+8`pItCKcpY\"F\"|:0B+8`pItCKcpY\"F\"|:/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      MockFile mockFile0 = new MockFile(">,kH");
      sAXReader0.setDefaultHandler((ElementHandler) null);
      MockFile mockFile1 = new MockFile(mockFile0, "]");
      MockFile.createTempFile(":uGw!mzgG0Z'qANv", ">,kH", (File) mockFile1);
      MockFile mockFile2 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{", "<w*\"r");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLReader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " slN~Xh3 A_x");
      sAXReader0.getEncoding();
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.isStringInternEnabled();
      sAXReader0.isValidating();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      MockFile.createTempFile("('C{<L)e0<5] OA", "http://xml.org/sax/features/namespace-prefixes");
      xMLFilterImpl0.endDocument();
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(boolean0);
      
      sAXReader0.isValidating();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      sAXReader0.setEncoding("");
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8272605936924617
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "s[?sO}w ^#=%c";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("s[?sO}w ^#=%c");
      sAXReader_SAXEntityResolver0.resolveEntity("s[?sO}w ^#=%c", "s[?sO}w ^#=%c");
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      StringReader stringReader0 = new StringReader("http://xml.org/sax/handlers/LexicalHandler");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8272605936924617
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("s[?sO}w ^#=%c");
      sAXReader_SAXEntityResolver0.resolveEntity("s[?sO}w ^#=%c", "s[?sO}w ^#=%c");
      SAXReader sAXReader0 = new SAXReader((String) null);
      File file0 = MockFile.createTempFile(":M6", "s[?sO}w ^#=%c");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/validation");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/Validation not supported for XMLReader: /home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/0!Nb-XHS0/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/*jkhz0org.dom4j.util.UserDataAttribute/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tce2`9Jaz/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{0/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tce2`9Jaz/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/0!Nb-XHS0/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/*jkhz0org.dom4j.util.UserDataAttribute/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tce2`9Jaz/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{0/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tce2`9Jaz/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{0");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/Validation not supported for XMLReader: /home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/0!Nb-XHS0/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/*jkhz0org.dom4j.util.UserDataAttribute/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tce2`9Jaz/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{0/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tce2`9Jaz/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/0!Nb-XHS0/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/*jkhz0org.dom4j.util.UserDataAttribute/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tce2`9Jaz/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{0/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tce2`9Jaz/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{0", "//home/ubuntu/termite/projects/62_dom4j/:>eI2Z=$/:>eI2Z=$/:>eI2Z=$/:>eI2Z=$0:>eI2Z=$");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("^>LW5N_+9$4$9_WX{/");
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0, "^>LW5N_+9$4$9_WX{/");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      sAXReader0.setXMLFilter(xMLFilterImpl3);
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl1);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertNotSame(xMLReader0, xMLFilterImpl2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      MockFile mockFile0 = new MockFile("GCyXW2bBZD;d", "Validation not supported for XMLReader: ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "?>", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("-mSCJ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("ZlD", "ZlD");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "//tmp/('C{<L)e0<5] OA0('C{<L)e0<5] OA";
      MockFile mockFile0 = new MockFile((String) null, "//tmp/('C{<L)e0<5] OA0('C{<L)e0<5] OA");
      String string1 = "//home/ubuntu/termite/projects/62_dom4j/file:/^>LW5N_+9$49_WX{/0\"Fm!'fV2,s";
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "//home/ubuntu/termite/projects/62_dom4j/file:/^>LW5N_+9$49_WX{/0\"Fm!'fV2,s", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("{!4p5?@LL");
      try { 
        sAXReader0.read("{!4p5?@LL");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@5fc6a5da Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.setValidation(false);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.82555119198306
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      HandlerBase handlerBase0 = new HandlerBase();
      xMLFilterImpl0.setErrorHandler(handlerBase0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read(" of document ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      MockURL.getFileExample();
      PipedInputStream pipedInputStream0 = new PipedInputStream(58);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'H';
      defaultHandler2_0.ignorableWhitespace(charArray0, 58, (-1308));
      defaultHandler2_0.resolveEntity((String) null, "//home/ubuntu/termite/projects/62_dom4j/%84ZI4</home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/^>LW5N_+9$4$9_WX{/0/home/ubuntu/termite/projects/62_dom4j/Cannot convert: /^>LW5N_+9$4$9_WX{/Cannot convert: 0string-length/]]zD8z-/_0.tmp/CsFfo9YoRCVP/home/ubuntu/termite/projects/62_dom4j/^>LW5N_+9$4$9_WX{/tce2`9Jaz/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{0&BtTQ]lkBr(B`BN;lUF");
      // Undeclared exception!
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputSource inputSource0 = new InputSource();
      // Undeclared exception!
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("@P");
      stringReader0.markSupported();
      try { 
        sAXReader0.read((Reader) stringReader0, "l|e:Q_o?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/wyQ9[4:/^>LW5N_+9$4$9_WX{/0^>LW5N_+9$4$9_WX{", "http://xml.org/sax/features/string-interning");
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      DOMDocument dOMDocument0 = new DOMDocument("org.dom4j.xpath.DefaultXPath");
      assertEquals(NodeType.DOCUMENT_NODE, dOMDocument0.getNodeTypeEnum());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.getEntityResolver();
      xMLFilterImpl0.getEntityResolver();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getDispatchHandler();
      sAXReader0.setStringInternEnabled(true);
      String string0 = "";
      MockFile mockFile0 = new MockFile("-1", "");
      boolean boolean0 = true;
      mockFile0.setReadable(true);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.isIgnoreComments();
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.isMergeAdjacentText();
      String string0 = "";
      try { 
        MockURI.URI("", "", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      MockFile.createTempFile("('C{<L)e0<5] OA", "http://xml.org/sax/features/namespace-prefixes");
      sAXReader0.isMergeAdjacentText();
      sAXReader0.getXMLFilter();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.createDefaultEntityResolver("//tmp/kQy5IfDYae7=s0kQy5IfDYae7=s");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      MockFile mockFile0 = new MockFile("");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.installXMLFilter((XMLReader) null);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.createContentHandler(xMLFilterImpl0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(47);
      assertEquals(0, pipedInputStream0.available());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler("j&CLS-QMfB[v}![ W");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.createXMLReader();
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      DefaultDocumentFactory.getInstance();
      DocumentFactory documentFactory1 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory1);
      boolean boolean0 = false;
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter((Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Parser argument must not be null
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setValidation(true);
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty("8vqk", xMLFilterImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: 8vqk
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setStripWhitespaceText(false);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("//home/ubuntu/termite/projects/62_dom4j/http:/xml.org/sax/properties/declaration-handler/}mg.C$iIXmp0^>LW5N_+9$4$9_WX{");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4493);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      sAXReader0.setMergeAdjacentText(false);
      pushbackInputStream0.mark(0);
      try { 
        pushbackInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("`8", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class `8 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("FailCd t pare document for UR0: ");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class FailCd t pare document for UR0:  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.createDefaultEntityResolver("");
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.createDefaultEntityResolver("|B%+=,");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertSame(documentFactory0, defaultDocumentFactory0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.createDefaultEntityResolver((String) null);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "v{n?E-30!";
      stringArray0[1] = "*,,(TgCD*g\"#";
      stringArray0[2] = "*,,(TgCD*g\"#";
      sAXReader0.getDispatchHandler();
      sAXReader0.getDispatchHandler();
      MockFile mockFile0 = new MockFile("J0Yn~NxM|IdkX}");
      InputSource inputSource0 = null;
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter((Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Parser argument must not be null
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertNotNull(dispatchHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.resetHandlers();
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setFeature("`8", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: `8
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }
}
