/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 01 22:26:20 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.EM;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("@relation");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "outside");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      try { 
        Evaluation.handleCostOption("@relation", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"outside\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-510.7);
      evaluation0.setNumericPriorsFromBuffer();
      doubleArray0[1] = 590.1;
      SparseInstance sparseInstance0 = new SparseInstance((-510.7), doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, sparseInstance0, 267.0788667);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses1.getCapabilities();
      gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      gaussianProcesses1.toString();
      gaussianProcesses0.toString();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances1.generate("measureAttributesUsed");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval(92);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(">XL\"AeM7;3?e_-I4@^h");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 3328.564562;
      doubleArray0[4] = 3328.564562;
      doubleArray0[4] = 0.22499999403953552;
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.setNumRelational(1);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 0.17499999701976776;
      doubleArray0[2] = 0.17499999701976776;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(100.0, doubleArray0);
      binarySparseInstance0.setWeight(0.95);
      instances0.add((Instance) binarySparseInstance0);
      textDirectoryLoader0.setRetrieval((-2069));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(280106558);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      gaussianProcesses1.toString();
      gaussianProcesses0.toString();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances1.generate("measureAttributesUsed");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances1.setMultiInstance(true);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      Evaluation.getGlobalInfo(stacking0);
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Instances instances0 = testInstances0.generate((String) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-170);
      doubleArray0[1] = (double) (-170);
      doubleArray0[2] = (double) (-170);
      doubleArray0[3] = (double) (-170);
      doubleArray0[4] = (double) (-170);
      doubleArray0[5] = 0.17499999701976776;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      textDirectoryLoader0.setRetrieval((-170));
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval((-170));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      M5Rules m5Rules0 = new M5Rules();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) m5Rules0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      gaussianProcesses0.toString();
      Instances instances0 = testInstances0.generate(">XL\"AeM7;3?e_-I4@^h");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 3328.564562;
      doubleArray0[2] = (double) 0;
      double double0 = evaluation0.m_SumClass;
      double double1 = evaluation0.errorRate();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.toString();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      gaussianProcesses0.toString();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4945054945054945
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses1.getCapabilities();
      gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      gaussianProcesses1.toString();
      gaussianProcesses0.toString();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances1.generate("measureAttributesUsed");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances1);
      try { 
        evaluation0.toClassDetailsString("getRevision");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.85930838197441
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      gaussianProcesses1.toString();
      gaussianProcesses0.toString();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances1.generate("measureAttributesUsed");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances1.setMultiInstance(true);
      evaluation0.setPriors(instances1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      evaluation0.correlationCoefficient();
      // Undeclared exception!
      try { 
        evaluation0.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      gaussianProcesses0.toString();
      Instances instances0 = testInstances0.generate(">XL\"AeM7;3?e_-I4@^h");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      int int0 = (-1238);
      double double0 = evaluation0.m_SumSqrClass;
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom(2L);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.m_ConfusionMatrix = null;
      evaluation2.coverageOfTestCasesByPredictedRegions();
      evaluation2.incorrect();
      evaluation1.SFPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation2.truePositiveRate((byte)10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5937579197360707
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(">XL\"AeM7;3?e_-I4@^h");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 3328.564562;
      doubleArray0[4] = 3328.564562;
      doubleArray0[4] = 0.22499999403953552;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-257.2768952);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3328.564562, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluateModelOnce((double) 0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4945054945054945
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      gaussianProcesses0.toString();
      Instances instances0 = testInstances0.generate(">XL\"AeM7;3?e_-I4@^h");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setMultiInstance(true);
      evaluation0.setPriors(instances0);
      try { 
        evaluation0.toMatrixString("graph");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("kE");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.SFEntropyGain();
      double[] doubleArray0 = new double[1];
      evaluation0.m_Unclassified = 1038.9877570981662;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2274.63458837);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      Capabilities capabilities0 = bayesNet0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setMultiInstance(true);
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5957551458109667
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setKNN");
      DenseInstance denseInstance0 = new DenseInstance(2077);
      BallNode ballNode0 = new BallNode((-2101), 2077, (-2101), denseInstance0, 280106558);
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      instances0.add(instance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setKNN");
      Instances instances1 = new Instances(instances0);
      instances0.equalHeadersMsg(instances1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_SumPriorEntropy = (-78.41466128823);
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.SFMeanEntropyGain(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MissingClass = 6.7;
      textDirectoryLoader0.setRetrieval((-1861));
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      ArffLoader arffLoader0 = new ArffLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      boolean boolean0 = evaluation0.equals(evaluation1);
      assertFalse(boolean0);
      
      evaluation1.unweightedMacroFmeasure();
      assertFalse(evaluation1.equals((Object)evaluation0));
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader1.setRetrieval(6);
      LogitBoost logitBoost0 = new LogitBoost();
      MockRandom mockRandom0 = new MockRandom(2072L);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("getTechnicalInformation", arrayList0, 6);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockRandom0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) instances0;
      objectArray0[3] = (Object) textDirectoryLoader0;
      objectArray0[4] = (Object) "getTechnicalInformation";
      objectArray0[5] = (Object) textDirectoryLoader1;
      objectArray0[6] = (Object) mockRandom0;
      objectArray0[7] = (Object) arrayList0;
      try { 
        evaluation0.crossValidateModel((Classifier) logitBoost0, instances1, 2, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2306);
      binarySparseInstance0.toString(272);
      try { 
        evaluation0.evaluateModelOnce((Classifier) naiveBayesUpdateable0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@data");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = "@data";
      stringArray0[3] = "@data";
      stringArray0[4] = " ";
      stringArray0[5] = "@relation";
      stringArray0[6] = "first";
      testInstances0.setOptions(stringArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumKBInfo = (double) 1;
      evaluation0.KBInformation();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setKNN");
      DenseInstance denseInstance0 = new DenseInstance(2077);
      BallNode ballNode0 = new BallNode((-2101), 2077, (-2101), denseInstance0, 280106558);
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      instances0.add(instance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.areaUnderROC((-1));
      evaluation0.toMatrixString("Available from http://www.autonlab.org/autonweb/14665.html");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2101);
      doubleArray0[1] = (double) 2077;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 280106558;
      doubleArray0[4] = Double.NaN;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.avgCost();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.truePositiveRate(1);
      costMatrix0.normalize();
      try { 
        costMatrix0.applyCostMatrix(instances0, (Random) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Misclassification cost matrix has wrong format!
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("=PQwk<%.3]7<EUD9h8%");
      Instances.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      MockRandom mockRandom0 = new MockRandom(0);
      logitBoost0.getOptions();
      try { 
        evaluation0.crossValidateModel((Classifier) logitBoost0, instances0, 1873, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = costSensitiveClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("specified");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getStructure();
      double double0 = evaluation0.precision(1);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.useNoPriors();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-127);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      textDirectoryLoader1.getDataSet();
      double double0 = evaluation0.falsePositiveRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.KBRelativeInformation();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Evaluation.getGlobalInfo(naiveBayesUpdateable0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 2438.86;
      doubleArray0[3] = (-45.0);
      doubleArray0[4] = 2773.4;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      gaussianProcesses1.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      gaussianProcesses1.toString();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-2829));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2829
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumClass;
      double double1 = evaluation0.errorRate();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double2, double1, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setKNN");
      DenseInstance denseInstance0 = new DenseInstance(2077);
      BallNode ballNode0 = new BallNode((-2101), 2077, (-2101), denseInstance0, 280106558);
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      instances0.add(instance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setKNN");
      Instances instances1 = testInstances0.generate("getMeasure");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDirectory();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-170);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.07500000298023224, doubleArray0);
      instances1.add((Instance) binarySparseInstance0);
      textDirectoryLoader1.setRetrieval(19);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval((-293));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.meanPriorAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.recall((-1995138716));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1995138716
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval((-1));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.getDiscardPredictions();
      evaluation0.numFalseNegatives((-1));
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Evaluation.handleCostOption("", (-1243));
      Bagging bagging0 = new Bagging();
      bagging0.setDebug(true);
      String string0 = Evaluation.makeOptionString(bagging0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalCoverage = 1454.5;
      testInstances0.setMultiInstance(true);
      evaluation0.confusionMatrix();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LinearRegression linearRegression0 = new LinearRegression();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.693147181;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      evaluation0.rootRelativeSquaredError();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.equals(evaluation0);
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_MissingClass;
      evaluation0.toMatrixString(".bsi");
      System.setCurrentTimeMillis((-889L));
      evaluation0.getClassPriors();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(">XL\"AeM7;3?e_-I4@^h");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.unweightedMicroFmeasure();
      double double1 = evaluation0.pctIncorrect();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("Ni");
      Instances instances1 = testInstances1.generate((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances1);
      testInstances0.getOptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation1.equals(evaluation0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2586;
      doubleArray0[1] = (double) (-2);
      evaluation1.m_SumPriorEntropy = 3504.768367072;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-253.1931559516203);
      doubleArray0[1] = (-253.1931559516203);
      doubleArray0[2] = (-253.1931559516203);
      doubleArray0[3] = (-253.1931559516203);
      doubleArray0[4] = 905.0;
      SparseInstance sparseInstance0 = new SparseInstance((-253.1931559516203), doubleArray0);
      try { 
        evaluation0.updateStatsForPredictor(905.0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setRetrieval((-2));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setDebug(true);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.unweightedMicroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2306);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      try { 
        evaluation1.evaluateModelOnce((Classifier) additiveRegression0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stringFreeStructure();
      Classifier classifier0 = null;
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SparseInstance sparseInstance0 = new SparseInstance(50);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-99.0);
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4946236559139785
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      gaussianProcesses0.toString();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setMultiInstance(true);
      evaluation0.setPriors(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gaussian Processes: No model built yet.");
      double double0 = evaluation0.correlationCoefficient();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("=== Summary ===\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval((-2));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Incorrect;
      double double1 = new Integer((-2));
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(">XL\"AeM7;3?e_-I4@^h");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      String string0 = "=PQwk<%.3]7<EUD9h8%";
      Instances instances0 = testInstances0.generate("=PQwk<%.3]7<EUD9h8%");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      Instances.main(testInstances0.DEFAULT_WORDS);
      textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("=== Summary ===\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.addNumericTrainClass((-2), (-1));
      double double1 = evaluation0.SFSchemeEntropy();
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setRetrieval((-767));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Correct = (double) (-767);
      evaluation0.addNumericTrainClass(363.855, (-767.0));
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setRetrieval(3764);
      try { 
        evaluation0.evaluateModel((Classifier) null, instances1, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 50;
      doubleArray0[3] = (double) 50;
      doubleArray0[4] = (double) 50;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) 50;
      doubleArray0[8] = (double) 8;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 8, 700.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      textDirectoryLoader1.setRetrieval(3764);
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval((-1));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(2829);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2829
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominalValues((-1967));
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedFMeasure();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      try { 
        Evaluation.handleCostOption("@relation", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("lx6NF<gfG$!W6");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval((-1));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-25);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "   * @param i the training data\n";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".bsi";
      stringArray0[4] = " ";
      testInstances0.setOptions(stringArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.975;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (-1008.8);
      doubleArray0[3] = (double) (byte)39;
      doubleArray0[4] = 0.7;
      doubleArray0[5] = (double) (byte)39;
      SparseInstance sparseInstance0 = new SparseInstance((byte) (-25), doubleArray0);
      evaluation0.getHeader();
      double double0 = evaluation0.m_SumPriorAbsErr;
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-1099.0), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 280106558, (Instance) sparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 280106558
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(43);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setRetrieval(4250);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      testInstances0.toString();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      testInstances0.setOptions(stringArray0);
      double double1 = evaluation0.m_Unclassified;
      evaluation0.falseNegativeRate((-1));
      double double2 = evaluation0.KBInformation();
      double double3 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation0.falseNegativeRate(4250);
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.falsePositiveRate((-1));
      testInstances0.clone();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setKNN");
      DenseInstance denseInstance0 = new DenseInstance(2077);
      BallNode ballNode0 = new BallNode((-2101), 2077, (-2101), denseInstance0, 280106558);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-2101));
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.setRetrieval((-170));
      testInstances0.setNumRelationalNominalValues(18);
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.numTruePositives((-2));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(922);
      Evaluation evaluation1 = new Evaluation(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      IBk iBk0 = new IBk();
      Capabilities capabilities0 = iBk0.getCapabilities();
      textDirectoryLoader0.getOptions();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives(2);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(true);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.unweightedMicroFmeasure();
      textDirectoryLoader1.getStructure();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      boolean boolean0 = evaluation0.equals(checkOptionHandler0);
      assertFalse(boolean0);
      
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      double double0 = evaluation0.numFalsePositives(5);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.equals(costSensitiveClassifier0);
      testInstances0.setNumNominalValues(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      double double0 = evaluation0.numTruePositives(1);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumClass;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3338.978392090606;
      doubleArray0[2] = 3338.978392090606;
      doubleArray0[3] = 3338.978392090606;
      doubleArray0[4] = 3338.978392090606;
      double double1 = evaluation0.numTruePositives(1088);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation.handleCostOption("", (-1));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = instances0.stringFreeStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.numFalseNegatives(105);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.totalCost();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      textDirectoryLoader0.setRetrieval(3764);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) textDirectoryLoader0;
      objectArray0[2] = (Object) instances0;
      objectArray0[3] = (Object) instances0;
      objectArray0[4] = (Object) textDirectoryLoader0;
      objectArray0[5] = (Object) textDirectoryLoader0;
      objectArray0[6] = (Object) evaluation0;
      objectArray0[7] = (Object) instances0;
      objectArray0[8] = (Object) textDirectoryLoader0;
      evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = instances0.stringFreeStructure();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(10.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(true);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(125);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance1, (-10.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-4094), 0.125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("=== Summary ===\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numTrueNegatives(5);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      assertEquals("Seed used to initialise the random number generator.Random numbers are used for setting the initial weights of the connections betweem nodes, and also for shuffling the training data.", multilayerPerceptron0.seedTipText());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      EM eM0 = new EM();
      Capabilities capabilities0 = eM0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_MissingClass;
      evaluation0.toMatrixString("@data");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String string0 = Evaluation.getGlobalInfo(naiveBayes0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.NaiveBayes:\n\nClass for a Naive Bayes classifier using estimator classes. Numeric estimator precision values are chosen based on analysis of the  training data. For this reason, the classifier is not an UpdateableClassifier (which in typical usage are initialized with zero training instances) -- if you need the UpdateableClassifier functionality, use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable classifier will  use a default precision of 0.1 for numeric attributes when buildClassifier is called with zero training instances.\n\nFor more information on Naive Bayes classifiers, see\n\nGeorge H. John, Pat Langley: Estimating Continuous Distributions in Bayesian Classifiers. In: Eleventh Conference on Uncertainty in Artificial Intelligence, San Mateo, 338-345, 1995.", string0);
      
      evaluation0.meanAbsoluteError();
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setDiscardPredictions(false);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOutputFilename(true);
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSchemeEntropy = 3.141592653589793;
      evaluation0.m_SumSqrPredicted = 1222.4;
      evaluation0.SFEntropyGain();
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals((-3.141592653589793), evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2480.08);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 21);
      evaluation0.toCumulativeMarginDistributionString();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("Ni");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      MockRandom mockRandom0 = new MockRandom(379);
      Object object0 = new Object();
      Object[] objectArray0 = null;
      try { 
        evaluation0.crossValidateModel((Classifier) additiveRegression0, instances0, 379, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader2.setRetrieval(42);
      LogitBoost logitBoost0 = new LogitBoost();
      MockRandom mockRandom0 = new MockRandom(4246);
      logitBoost0.getOptions();
      Object[] objectArray0 = new Object[1];
      try { 
        evaluation0.crossValidateModel((Classifier) logitBoost0, instances0, 42, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance1, 3348.486596888);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanSchemeEntropy();
      ArrayList<DefaultTableModel> arrayList0 = new ArrayList<DefaultTableModel>();
      instances0.retainAll(arrayList0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      evaluation0.weightedPrecision();
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'text' '@@class@@' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setDebug(true);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.unweightedMicroFmeasure();
      textDirectoryLoader0.getStructure();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_TotalCoverage;
      String string0 = evaluation0.toClassDetailsString("setNumFolds");
      assertEquals("setNumFolds\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setRetrieval(4246);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getOptions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom(577);
      IBk iBk0 = new IBk();
      evaluation0.toClassDetailsString();
      Logistic logistic0 = new Logistic();
      // Undeclared exception!
      try { 
        instances0.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toSummaryString("@data", true);
      assertEquals("@data\nTotal Number of Instances                0     \n", string0);
      
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@data";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".bsi";
      testInstances0.setOptions(stringArray0);
      double double0 = evaluation0.m_Unclassified;
      testInstances0.setNumNominal(95);
      evaluation0.falseNegativeRate(95);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 95;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 10.0);
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.trueNegativeRate(20);
      assertNotEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      double double0 = evaluation0.m_ClassPriorsSum;
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setRetrieval(4250);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@relation");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      testInstances0.toString();
      Instances instances1 = new Instances(instances0, 1007);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.precision(1007);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1007
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stringFreeStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.equals(naiveBayesUpdateable0);
      double double1 = evaluation0.m_SumPriorSqrErr;
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "1`AO8$bl&{kl");
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, ";C|gT,;vK_X2tBONoGI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Instances instances0 = testInstances0.generate((String) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-170);
      doubleArray0[1] = (double) (-170);
      doubleArray0[2] = (double) (-170);
      doubleArray0[3] = (double) (-170);
      doubleArray0[4] = (double) (-170);
      doubleArray0[5] = 0.17499999701976776;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      textDirectoryLoader0.setRetrieval((-170));
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval((-170));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.kappa();
      evaluation0.rootRelativeSquaredError();
      try { 
        CostMatrix.parseMatlab("@data");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[1] = "\tOutputs the distribution instead of only the prediction\n";
      stringArray0[2] = "@relation";
      stringArray0[3] = "]fAg";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@data";
      stringArray0[6] = "@data";
      stringArray0[7] = "@data";
      testInstances0.setOptions(stringArray0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.m_Unclassified;
      boolean boolean0 = evaluation1.getDiscardPredictions();
      assertFalse(boolean0);
      
      double double2 = evaluation1.numFalseNegatives(2985);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toSummaryString(".arff", false);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedRecall();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.setRetrieval(4246);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4246;
      doubleArray0[1] = (double) 4246;
      doubleArray0[2] = (double) 4246;
      doubleArray0[3] = (double) 4246;
      doubleArray0[2] = (double) 4246;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.75;
      doubleArray0[1] = 0.75;
      int[] intArray0 = new int[2];
      intArray0[0] = (-746);
      intArray0[1] = 2404;
      SparseInstance sparseInstance0 = new SparseInstance(0.75, doubleArray0, intArray0, 2404);
      instances0.add((Instance) sparseInstance0);
      evaluation0.m_CoverageStatisticsAvailable = false;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 1666);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = 3;
      try { 
        evaluation0.crossValidateModel("@relation", instances0, 3, (String[]) null, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-428.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      SparseInstance sparseInstance0 = new SparseInstance(10.0, doubleArray0, intArray0, 102);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setKNN");
      MockRandom mockRandom0 = new MockRandom((-162L));
      instances0.resampleWithWeights((Random) mockRandom0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-4537.418), doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(18);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 18;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-428.0);
      SparseInstance sparseInstance0 = new SparseInstance(498);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Maximum number of iterations must be > 0!";
      stringArray0[1] = "no-predictions";
      stringArray0[2] = "trimTipText";
      stringArray0[3] = "import weka.core.Attribute;\n";
      stringArray0[4] = "}9GM";
      stringArray0[5] = "'";
      stringArray0[6] = "NEIGHBOR_JOINING";
      stringArray0[7] = "IIwX.6*\"Q;3|-q";
      stringArray0[8] = "Complexity improvement     (Sf)    ";
      try { 
        Evaluation.evaluateModel((Classifier) serializedClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.misc.SerializedClassifier:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -model <filename>
         // \tThe file containing the serialized model.
         // \t(required)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_Mr;1";
      stringArray0[1] = "modelFileTipText";
      stringArray0[2] = "setOptions";
      stringArray0[3] = "      if (!i.isMissing(j)) {\n";
      stringArray0[4] = "%2FCw\"[EE.Z)1JDmk^";
      stringArray0[5] = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[6] = "getClass";
      stringArray0[7] = "";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      RandomTree randomTree0 = new RandomTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      randomTree0.setAllowUnclassifiedInstances(false);
      Evaluation.makeOptionString(randomTree0, false);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      AbstractClassifier.runClassifier(logitBoost0, testInstances0.DEFAULT_WORDS);
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      try { 
        cSVLoader1.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(23);
      double double0 = evaluation0.fMeasure(23);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Object object0 = new Object();
      LogitBoost logitBoost0 = new LogitBoost();
      String string0 = Evaluation.getGlobalInfo(logitBoost0);
      assertEquals("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", string0);
      
      double double0 = evaluation0.recall(2717);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1104.1);
      doubleArray0[1] = (-1104.1);
      doubleArray0[2] = (-1104.1);
      doubleArray0[3] = (-1104.1);
      double double0 = evaluation0.truePositiveRate((-2509));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2509));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2509
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ComplexityStatisticsAvailable = true;
      double double0 = evaluation0.m_SumKBInfo;
      double double1 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("!oD*Z Gn'", arrayList0, 20);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(2268, (char[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      MockRandom mockRandom0 = new MockRandom(379);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) instances0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      try { 
        evaluation0.crossValidateModel((Classifier) additiveRegression0, instances0, 379, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Instances cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setDebug(false);
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader1.setRetrieval(3764);
      Classifier classifier0 = null;
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(3764, charArray0, (-886));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 493);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setRetrieval(4246);
      LogitBoost logitBoost0 = new LogitBoost();
      MockRandom mockRandom0 = new MockRandom((-1595L));
      logitBoost0.getOptions();
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = '(';
      charArray0[2] = '6';
      charArray0[3] = '}';
      charArray0[4] = 'O';
      charArray0[5] = 'K';
      charArray0[6] = 'Y';
      String string0 = evaluation0.num2ShortID(4246, charArray0, 577);
      assertEqualsaO(}O", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_MissingClass;
      double double1 = evaluation0.sizeOfPredictedRegions();
      double double2 = evaluation0.avgCost();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.getHeader();
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      MockRandom mockRandom0 = new MockRandom(379);
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) additiveRegression0, instances0, 379, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = '`';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-193), charArray0, 3196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getStructure();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      instances0.compactify();
      textDirectoryLoader3.setRetrieval(42);
      LogitBoost logitBoost0 = new LogitBoost();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1, (char[]) null, 2268);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[3] = (-2);
      intArray0[4] = (-1);
      intArray0[5] = (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setRetrieval(20);
      LogitBoost logitBoost0 = new LogitBoost();
      SparseInstance sparseInstance0 = new SparseInstance(107);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("kE");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.falseNegativeRate((-251));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Instances instances1 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      int int0 = 42;
      textDirectoryLoader3.setRetrieval(42);
      LogitBoost logitBoost0 = new LogitBoost();
      MockRandom mockRandom0 = new MockRandom(4246);
      logitBoost0.getOptions();
      evaluation0.correct();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances2 = inputMappedClassifier0.getModelHeader(instances0);
      try { 
        BallNode.calcPivot((BallNode) null, (BallNode) null, instances2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Instances instances0 = testInstances0.generate((String) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.17499999701976776;
      doubleArray0[3] = 1.2000000029802322;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.2000000029802322, doubleArray0);
      binarySparseInstance0.setWeight(983.4756636508);
      instances0.add((Instance) binarySparseInstance0);
      textDirectoryLoader0.setRetrieval(21);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader3.setRetrieval((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumAbsErr;
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.numInstances();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "@data");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(1, testInstances0.getNumNominal());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      OneR oneR0 = new OneR();
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption(" ", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
