/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 08 01:21:10 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0, 2297, 4);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5654871739340268
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      long long0 = jSONObject0.optLong(",:]}/\"[{;=#");
      assertEquals(2, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{H&ZlFjDj2?1Uv2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 16 of {H&ZlFjDj2?1Uv2
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(753.6771806720014);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("hR4#U/j%$0121M*g").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      hashMap0.computeIfAbsent((Object) null, function1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(2944L);
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) long0);
      Object object0 = jSONObject1.remove("K%VmS$iKrXB!@");
      assertEquals(2944L, object0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("\">p", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("isjoin", 0L);
      String string0 = jSONObject1.optString("isjoin");
      assertNotNull(string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("dec", (long) 88);
      assertEquals(88L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("isclear", (-2175L));
      assertEquals((-2175L), long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(92);
      jSONObject0.putOpt("K%VmS$iKrXB!@", integer0);
      long long0 = jSONObject0.optLong("K%VmS$iKrXB!@");
      assertEquals(92L, long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-282));
      linkedList0.add(integer0);
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("isvalueOf");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ha", 0L);
      int int0 = jSONObject1.optInt("ha", 46);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Null pointer", (-1012));
      assertEquals((-1012), int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("lP-yuGNdUH^iv", 5547L);
      int int0 = jSONObject1.optInt("lP-yuGNdUH^iv");
      assertEquals(5547, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-87));
      jSONObject0.put("i~", (Object) byte0);
      int int0 = jSONObject0.optInt("i~");
      assertEquals((-87), int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("x#_P;p7.", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("' and instead saw '", (-197.4704601107));
      assertEquals((-197.4704601107), double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.791759469228055
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      jSONObject0.putOpt("K%VmS$iKrXB!@", double0);
      double double1 = jSONObject0.optDouble("K%VmS$iKrXB!@");
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("\"8mT{", "24.24567945727332");
      double double0 = jSONObject0.optDouble("\"8mT{");
      assertEquals(1, jSONObject0.length());
      assertEquals(24.24567945727332, double0, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("It", (-1381L));
      double double0 = jSONObject1.optDouble("It");
      assertEquals((-1381.0), double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("5kA$>", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("`8E.w2~]lV^Gd007`_", (long) (-2462));
      Object object0 = jSONObject1.opt("`8E.w2~]lV^Gd007`_");
      assertEquals((-2462L), object0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" of ", false);
      boolean boolean0 = jSONObject0.has(" of ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("whel.json.JSONTokener", (Collection) linkedList0);
      String string0 = jSONObject0.getString("whel.json.JSONTokener");
      assertNotNull(string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7326587201992076
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(12.969266F);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.lang.Long@0000000009.", float0);
      long long0 = jSONObject1.getLong("java.lang.Long@0000000009.");
      assertEquals(12L, long0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("getparseFloat", (-1889L));
      long long0 = jSONObject0.getLong("getparseFloat");
      assertEquals((-1889L), long0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(34);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("isparseByte", integer0);
      JSONObject jSONObject1 = jSONObject0.put("Er", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("Er");
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("] not foun", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("] not foun");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", 0L);
      int int0 = jSONObject1.getInt("Expected a ':' after a key");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("rthx", (-4834));
      int int0 = jSONObject0.getInt("rthx");
      assertEquals((-4834), int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] not found.", 0L);
      double double0 = jSONObject0.getDouble("] not found.");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getpars{9oolean", (long) 87);
      double double0 = jSONObject0.getDouble("getpars{9oolean");
      assertEquals(87.0, double0, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 0, 1109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6708114594932042
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = jSONObject0.names();
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 1671, 1671);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.792953480427564
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString(2147483645, 2147483645);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Double double0 = new Double(0.0);
      hashMap0.putIfAbsent((Float) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((int) (short) (-1), (int) (short) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0872663379836207
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("02UpBi~L!oK}j/{", 0L);
      jSONObject0.accumulate("int", jSONObject1);
      // Undeclared exception!
      jSONObject0.toString(92);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("getreplaceAll", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2127556469888376
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Float float0 = new Float(1903.273040065);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Float float0 = new Float(1903.273040065);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(21);
      hashMap0.put(integer0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("hR4#U/j%$0121M*g").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      hashMap0.computeIfAbsent(hashMap0, function1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("-2191.7421", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6383285682293793
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("`n|4", true);
      String string0 = jSONObject0.toString(88, (-1));
      assertNotNull(string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-282), (-282));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("get", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      try { 
        jSONObject0.put((String) null, (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8095142558492818
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.optString("", "");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("toS", 2500.9133449);
      assertEquals(2500.9133449, double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("] is not a JSONArray.");
      assertNull(object0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`n|4");
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(jSONTokener0, stringArray0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Byte byte0 = new Byte((byte)123);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float float0 = new Float((-821.927F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("null", (Object) hashMap0);
      try { 
        jSONObject0.getInt("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", boolean0);
      try { 
        jSONObject1.getDouble("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{}", false);
      boolean boolean0 = jSONObject0.getBoolean("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] not found.", 2);
      Object object0 = jSONObject0.get("] not found.");
      assertEquals(2, object0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{EZ.5>~hL*v!e");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {EZ.5>~hL*v!e
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("\"Bad value from toJSONString: \"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"Bad value from toJSONString: \"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("isjoin");
      assertNull(object0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("\"\"", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.008145843253696
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      jSONObject0.putOpt("YN w/}S!Z", jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6605302850777919
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.put("{}", (Object) boolean0);
      jSONObject1.putOpt("] not found.", boolean0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.78489484807327
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(34, (-177));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, (-3481), 123);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 8, 8448);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1078, 102);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 160, 160);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      hashMap0.put((Float) null, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-1058));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-282));
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float((-821.927F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("B>Gx* [%gO0+", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5842088652180688
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      long long0 = jSONObject0.optLong("RqL,]</?kpGRL-;(W7");
      assertEquals(2, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.quote("CZN'9f=b8c:hxx-/u'");
      assertEquals("\"CZN'9f=b8c:hxx-/u'\"", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.quote("[z{Z_Ae\"!R$!");
      assertEquals("\"[z{Z_Ae\\\"!R$!\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.quote("OD\n");
      assertEquals("\"OD\\n\"", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = JSONObject.quote(stringArray0[1]);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("m})ZtN}MX:`,!y[2", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "gtparseFloat");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("rthx", (-4834));
      String string0 = jSONObject0.optString("rthx", "wheel.json.JSONArray@0000000004");
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Null pointer");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("7k {K~Q [W", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("7k {K~Q [W");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.put("getparseFloat", (long) (byte)34);
      double double0 = jSONObject1.optDouble("getparseFloat", (double) (byte)34);
      assertEquals(2, jSONObject0.length());
      assertEquals(34.0, double0, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.981199010005725
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("Missing value", 0L);
      jSONObject1.put("Missing value", 0L);
      jSONObject1.toString(101, 101);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONException");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float(1903.273040065);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.7326587201992076
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.lang.Long@0000000009.", float0);
      long long0 = jSONObject1.getLong("java.lang.Long@0000000009.");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("toH", "toH");
      try { 
        jSONObject0.getJSONObject("toH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toH\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(0);
      jSONObject0.putOpt("Null pointer", integer0);
      try { 
        jSONObject0.getJSONArray("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null pointer\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.7202025435261348
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Null pointer", jSONObject0);
      int int0 = jSONObject1.optInt("Null pointer");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.6647400484083772
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.put("2etparseFlJat", (long) (byte)34);
      try { 
        jSONObject1.getBoolean("2etparseFlJat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2etparseFlJat\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("fsiqn", "fsiqn");
      try { 
        jSONObject0.getBoolean("fsiqn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fsiqn\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7653809497032729
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "U&#n.-WV1KVT#PL&~<o");
      JSONObject jSONObject1 = jSONObject0.put("U&#n.-WV1KVT#PL&~<o", true);
      boolean boolean0 = jSONObject1.optBoolean("U&#n.-WV1KVT#PL&~<o");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.9792045174343245
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.accumulate("] is not a number.", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("] is not a number.", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("rthx", 288);
      int int0 = jSONObject1.getInt("rthx");
      assertEquals(288, int0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2191.7421));
      assertEquals("-2191.7421", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2147483645);
      assertEquals("2.147483645E9", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5247073930301438
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("ZbBp6LAm}$N", 0.0);
      try { 
        jSONObject1.append("ZbBp6LAm}$N", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ZbBp6LAm}$N] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.377819508039033
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1.0);
      jSONObject0.append("W;W#~:", double0);
      JSONObject jSONObject1 = jSONObject0.append("W;W#~:", "W;W#~:");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("B>Gx* [%gO0+", (-300L));
      JSONObject jSONObject1 = jSONObject0.accumulate("B>Gx* [%gO0+", "B>Gx* [%gO0+");
      JSONObject jSONObject2 = jSONObject1.accumulate("B>Gx* [%gO0+", "ix)1'^");
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a number.", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.991509361356614
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Null pointer", integer0);
      jSONObject1.accumulate("Null pointer", jSONObject0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("Null pointer");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|K5-<~)7&k-y]# 8/ _");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |K5-<~)7&k-y]# 8/ _
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.9869667702348364
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("A($GGi1;lKU`#", 3092L);
      boolean boolean0 = jSONObject1.isNull("A($GGi1;lKU`#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.8437986072839696
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = new Float(1903.273040065);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(1877);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("cle", 111);
      assertEquals(111, int0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("1yRcNox,od", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "U&#n.-WV1KVT#PL&~<o");
      boolean boolean0 = jSONObject0.optBoolean("U&#n.-WV1KVT#PL&~<o");
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float(1903.273040065);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.optString("true");
      assertEquals(3, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.isNull("gettoHexString");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("Er", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("Er");
      assertNotSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("B>Gx* [%gO0+", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", (-1L));
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject1.getDouble("true");
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.469483727358999
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Float float0 = new Float(1903.273040065);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getString("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("7k {K~Q [W", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("7k {K~Q [W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7k {K~Q [W\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("$QgJG`Kt&");
      assertFalse(boolean0);
  }
}
