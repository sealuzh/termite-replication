/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 01 22:48:08 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{UP?wV=Dx4d+`J");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 14 of {UP?wV=Dx4d+`J
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3889686905521836
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("p vF\ftvw+03", (Object) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("iscopyValueOf", (Collection) linkedList0);
      jSONObject0.toString((-807), (-807));
      jSONObject1.put("do", (-310L));
      jSONObject2.toString(106);
      int int0 = jSONObject1.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("{}").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Byte byte0 = Byte.valueOf((byte)124);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function2 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function3);
      function1.compose((Function<? super Integer, ?>) function2);
      hashMap0.computeIfAbsent((Object) null, function1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("ExpecQed a %:'after aPkey", "GJrc&^JAKQ").when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.iterator();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject0.getLong("ExpecQed a %:'after aPkey");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ExpecQed a %:'after aPkey\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.39079422041509
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.getNames((Object) ".]o]9lPPGc*<La$0");
      JSONObject jSONObject0 = new JSONObject((Object) ".]o]9lPPGc*<La$0");
      jSONObject0.put(".]o]9lPPGc*<La$0", (double) (-3749));
      jSONObject0.toString((-3749));
      jSONObject0.optLong(".]o]9lPPGc*<La$0");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1840562714690361
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double double0 = new Double((-2228.132420504848));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.put((String) null, 1218.3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{h/NA");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {h/NA
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("0xI1z1GH+?t:%", object0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0xI1z1GH+?t:%";
      stringArray0[1] = "0xI1z1GH+?t:%";
      stringArray0[2] = "0xI1z1GH+?t:%";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = jSONObject1.isNull("0xI1z1GH+?t:%");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      Float float0 = new Float(0.0F);
      jSONObject0.append("H,VIG<A4NgW))vv", float0);
      Boolean boolean0 = new Boolean((String) null);
      JSONObject.valueToString(boolean0, 7, 43);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("H,VIG<A4NgW))vv");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("I_w5(U@RmE5GC/KI", " s~z").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Byte.valueOf((byte)124);
      Byte.valueOf((byte)124);
      hashMap0.put("~)#d{p_o-", "toS");
      hashMap0.put((Object) null, "java.lang.Long@0000000003.");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function5 = function2.andThen((Function<? super String, ? extends Integer>) function4);
      function3.compose((Function<? super Integer, ?>) function5);
      function1.compose((Function<? super Integer, ?>) function5);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      hashMap2.computeIfAbsent(unaryOperator1, function1);
      hashMap0.computeIfAbsent(unaryOperator1, function1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , any());
      hashMap2.replaceAll(biFunction0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("~)#d{p_o-", (-585L));
      // Undeclared exception!
      try { 
        jSONObject0.toString(44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2734509197973654
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("va", object0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      jSONObject0.put("iscopyValueOf", (Collection) linkedList0);
      int int0 = 0;
      jSONObject1.toString(int0, int0);
      int int1 = (-36872586);
      jSONObject0.toString(int1, int0);
      jSONObject0.toString();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optJSONArray("");
      try { 
        jSONObject1.getString("&+E\"(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&+E\\\"(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.722110108169336
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optInt(":vw", 93);
      jSONObject0.accumulate("@\"", float0);
      double double0 = jSONObject0.optDouble("@\"");
      assertEquals(4, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(1725);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("iscompareTo", (long) 1725);
      boolean boolean0 = jSONObject1.isNull((String) null);
      assertTrue(boolean0);
      
      jSONObject1.getLong("iscompareTo");
      double double0 = jSONObject1.optDouble("iscompareTo");
      assertEquals(1725.0, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(1726);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      Integer integer1 = new Integer(92);
      hashMap0.put(integer1, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("iscompareTo", (long) 1726);
      jSONObject1.optLong("iscompareTo");
      boolean boolean1 = jSONObject1.isNull("iscompareTo");
      assertFalse(boolean1);
      
      long long0 = jSONObject0.optLong("iscompareTo");
      assertEquals(1726L, long0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("Unterminated string", float0);
      jSONObject0.optInt("Unterminated string", (-631));
      jSONObject0.optJSONObject("q0(1");
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString((-631));
      assertEquals("-631", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(1740);
      hashMap0.keySet();
      Boolean boolean0 = new Boolean(false);
      Integer integer1 = new Integer(87);
      Integer integer2 = new Integer(1740);
      Integer integer3 = new Integer(92);
      hashMap0.put(integer3, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("iscompareTo", (long) 1740);
      boolean boolean1 = jSONObject1.isNull("iscompareTo");
      assertFalse(boolean1);
      
      int int0 = jSONObject1.optInt("iscompareTo");
      assertEquals(1740, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = new Short((short)69);
      Short short0 = new Short((short)69);
      JSONObject jSONObject1 = jSONObject0.append("", short0);
      Integer integer0 = new Integer((-1889));
      JSONObject jSONObject2 = jSONObject1.append("", integer0);
      JSONObject jSONObject3 = jSONObject2.put("", (int) (short)69);
      assertSame(jSONObject1, jSONObject3);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("rTR\"^E6P8Fi\"^\tJ+", (Map) hashMap0);
      byte byte0 = (byte)120;
      Byte byte1 = new Byte((byte)120);
      JSONObject.testValidity(byte1);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("rTR\"^E6P8Fi\"^\tJ+");
      jSONObject2.optDouble("rTR\"^E6P8Fi\"^\tJ+", (-1.0));
      int int0 = 102;
      try { 
        jSONObject1.getBoolean("rTR\"^E6P8Fi\"^\tJ+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rTR\\\"^E6P8Fi\\\"^\\tJ+\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "q0(1";
      stringArray0[1] = "sp";
      stringArray0[2] = "sp";
      JSONObject jSONObject0 = new JSONObject("q0(1", stringArray0);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      jSONObject0.put("sp", (Map) hashMap0);
      JSONObject.quote((String) null);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("sp");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (-1889));
      Short short0 = new Short((short)69);
      try { 
        jSONObject0.append("", short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Integer integer0 = new Integer((-3808));
      JSONObject.doubleToString(0.0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("?6Y7J", (Collection) linkedList0);
      jSONObject1.optLong("?6Y7J");
      jSONObject0.names();
      jSONObject0.optString("?6Y7J", "?6Y7J");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "}tW<{");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("}tW<{", stringArray0);
      jSONObject0.optJSONObject("0mnb1");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put(") v1\ftvw+03-", (Object) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject1.getJSONObject(") v1\ftvw+03-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\") v1\\ftvw+03-\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("");
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", false);
      try { 
        jSONObject1.getLong("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(402L);
      Integer integer0 = new Integer(0);
      Float float0 = new Float((double) 0L);
      Short short0 = new Short((short)3);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0";
      stringArray0[1] = "000";
      stringArray0[2] = "0";
      stringArray0[3] = "0";
      stringArray0[4] = "0";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Long long1 = new Long(402L);
      jSONObject0.accumulate("000", long1);
      jSONObject0.getLong("000");
      Object object1 = JSONObject.NULL;
      Float float1 = new Float((double) (-315));
      Float.isFinite((short)3);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      Double double0 = new Double(93);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "getvalueOf";
      JSONObject jSONObject0 = new JSONObject("isparseFloat", stringArray0);
      jSONObject0.accumulate("] is not a Boolean.", "is");
      jSONObject0.opt("] is not a Boolean.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Double.sum(2684.5524711747, 2684.5524711747);
      Double double0 = new Double(2684.5524711747);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("~:?~", (-1L));
      Byte byte0 = new Byte((byte)50);
      String string0 = jSONObject1.getString("~:?~");
      assertNotNull(string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject1.accumulate("", (Object) null);
      jSONObject0.optJSONArray("");
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("N");
      Byte byte0 = new Byte((byte)92);
      jSONObject0.put("wheel.json.JSONArray", (Object) byte0);
      jSONObject0.getDouble("wheel.json.JSONArray");
      Boolean boolean1 = Boolean.valueOf(false);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(boolean1, stringArray0);
      String[] stringArray1 = JSONObject.getNames((Object) jSONObject1);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      Long long0 = new Long((-1939L));
      short short0 = (short)92;
      Short short1 = new Short((short)92);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 69, (-711));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("RS~vr", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-35));
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.put("toH", (Object) byte0);
      String string0 = jSONObject0.optString("toH");
      assertNotNull(string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0F);
      Double double0 = new Double(0.0F);
      jSONObject0.accumulate("gettrim", "gettrim");
      jSONObject0.accumulate("gettrim", "issubstring");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("va", object0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject1.accumulate("va", object0);
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("va", object1);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Double double0 = new Double(2908.8726);
      hashMap0.put(double0, double0);
      JSONObject.doubleToString(2908.8726);
      Double double1 = new Double(2908.8726);
      hashMap0.replace((Double) null, double1, (Double) null);
      Long long0 = new Long(408L);
      JSONArray jSONArray2 = new JSONArray();
      jSONObject0.accumulate("2908.8726", jSONArray2);
      JSONArray jSONArray3 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(47);
      Writer writer0 = jSONArray2.write(stringWriter0);
      Writer writer1 = jSONObject0.write(writer0);
      assertSame(stringWriter0, writer1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0438443761683402
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject.quote("obV,!5A/,F/");
      JSONObject jSONObject0 = new JSONObject((Object) "obV,!5A/,F/");
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      jSONObject0.put("] is not a number.", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Double double1 = new Double(0.0);
      Boolean boolean0 = Boolean.valueOf("istoString");
      jSONObject1.accumulate("false", boolean0);
      Object object0 = jSONObject1.remove("false");
      assertEquals(false, object0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.accumulate("wheel.json.JSONObject", "wheel.json.JSONObject");
      try { 
        jSONObject0.getBoolean("wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 58;
      JSONObject.valueToString("Null key.", 58, (-4895));
      Short short0 = new Short((short)2861);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float((double) (-4895));
      Float.min((-4895), (short)2861);
      Float float1 = new Float((-8.05194F));
      hashMap0.put(float1, "Null key.");
      hashMap0.put(float0, "T/X\"e6]f");
      BiFunction<Float, Object, String> biFunction0 = (BiFunction<Float, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("isvalueOf", (Object) null).when(biFunction0).apply(anyFloat() , any());
      hashMap0.replaceAll(biFunction0);
      Float float2 = new Float((-2257.677F));
      JSONObject.quote("T/X\"e6]f");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(float2, (String) null);
      jSONObject0.toString();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("Null pointer", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float.min(3373.7324F, 3373.7324F);
      JSONObject.testValidity(jSONObject0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Long long0 = new Long(676);
      JSONObject.valueToString(long0, 676, 676);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(874.7418788097447);
      JSONObject jSONObject2 = jSONObject1.accumulate("java.lang.Long@0000000002", hashMap0);
      Object object0 = JSONObject.NULL;
      HashMap<Double, Object> hashMap2 = new HashMap<Double, Object>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap2);
      jSONObject2.optString("isparseFloat", "");
      try { 
        jSONObject0.getInt("<|p*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<|p*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long((-260L));
      hashMap0.put(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("FaO;x-,(zl-Yq", true);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject.quote("ADz8:tzAlH");
      JSONObject jSONObject0 = new JSONObject((Object) "\"ADz8:tzAlH\"");
      int int0 = 2965;
      // Undeclared exception!
      jSONObject0.toString(2965);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap<JSONArray, String> hashMap1 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.accumulate("isparseFloat", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("isparseFloat", false);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote(".");
      JSONObject jSONObject1 = jSONObject0.put("[]", (Object) "[]");
      JSONObject.valueToString(jSONArray0);
      try { 
        jSONObject1.getInt("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, (-36872586), (-951));
      JSONObject.doubleToString((-36872586));
      Byte byte0 = new Byte((byte)93);
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (Object) byte0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("JSON does not allow non-finite numbers.", (Object) null);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get("JSON does not allow non-finite numbers.");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5917629735996164
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float((-160.39));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer integer0 = new Integer(123);
      String string0 = JSONObject.doubleToString(123);
      assertEquals("123", string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = new JSONObject((Object) "123");
      jSONObject1.toString(123, 1490);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("*Qoc7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*Qoc7\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Boolean boolean0 = new Boolean("java.lang.Long@00000000030");
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-49), (-49));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put("9ak1f2Cb@9", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add((Byte) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("*=:1X!BLG3gv", 0.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("#M>A>Eo3P", "] is not a number.");
      assertEquals("] is not a number.", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString("aeH");
      assertEquals("", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.026378750007062
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = JSONObject.quote("o/V,!?5A/*,}K/]a");
      assertEquals("\"o/V,!?5A/*,}K/]a\"", string0);
      
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      long long0 = jSONObject0.optLong("\"o/V,!?5A/*,}K/]a\"");
      assertEquals(0L, long0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(835, 2147483645);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{ZG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {ZG
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("t`1hG4qcKT4bM?dQ-", (-2773.92078195264));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long(0L);
      hashMap0.put(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("~)#d{p_o-", " s~z").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Byte byte0 = new Byte((byte)124);
      Byte.valueOf((byte)124);
      hashMap0.put("~)#d{p_o-", "toS");
      hashMap0.put((Object) null, "java.lang.Long@0000000003.");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = function2.andThen((Function<? super String, ? extends Integer>) function3);
      function1.compose((Function<? super Integer, ?>) function4);
      function1.compose((Function<? super Integer, ?>) function4);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      hashMap2.computeIfAbsent(unaryOperator1, function1);
      hashMap0.computeIfAbsent(unaryOperator1, function1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , any());
      hashMap2.replaceAll(biFunction0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("~)#d{p_o-", (-585L));
      // Undeclared exception!
      try { 
        jSONObject0.toString(48, (-558));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(121.9815);
      hashMap0.put(float0, "fo");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("java.lang.Float@00000000030", (Collection) linkedList0);
      String string0 = jSONObject0.toString(0, (-3208));
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.clear();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.clone();
      JSONObject jSONObject1 = jSONObject0.put(":`kPz", (Object) jSONArray0);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      jSONObject1.put("false", (Collection) linkedList0);
      String string0 = jSONObject1.toString((-821), 115);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-8));
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.clone();
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{GDX~ q]ES?PL(7w", (Object) byte0);
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      jSONObject0.put("is", (Collection) linkedList1);
      String string0 = jSONObject1.toString((int) (byte) (-8), 326);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Float float0 = new Float(0.0);
      Boolean boolean0 = new Boolean((String) null);
      hashMap0.put(float0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("A0E$Ch", (Collection) null);
      String string0 = jSONObject1.toString(0, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1.0));
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(0L);
      Integer integer0 = new Integer((-315));
      Float float0 = new Float((-3261.2549261192285));
      JSONObject jSONObject1 = jSONObject0.accumulate("0", double0);
      jSONObject1.getLong("0");
      Object object1 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getspliterator", true);
      JSONArray jSONArray1 = new JSONArray();
      try { 
        jSONObject1.getDouble("getspliterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getspliterator\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(24);
      try { 
        jSONObject0.append((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("{}").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Byte byte0 = Byte.valueOf((byte)124);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function2 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function3);
      function1.compose((Function<? super Integer, ?>) function2);
      hashMap0.computeIfAbsent((Object) null, function1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("Expected a ':' after a key", (Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.iterator();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.toString();
      try { 
        jSONObject0.getLong("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      hashMap0.put(jSONArray0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONArray cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject.quote(")pQ!</.a?bKID2`h=");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\")pQ!</.a?bKID2`h=\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \")pQ!</.a?bKID2`h=\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0218020909681602
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.quote("obV,!5A/,F/");
      assertEquals("\"obV,!5A/,F/\"", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "obV,!5A/,F/";
      stringArray0[1] = "obV,!5A/,F/";
      stringArray0[2] = "obV,!5A/,F/";
      stringArray0[3] = "\"obV,!5A/,F/\"";
      stringArray0[4] = "\"obV,!5A/,F/\"";
      JSONObject jSONObject0 = new JSONObject("\"obV,!5A/,F/\"", stringArray0);
      jSONObject0.put("\"obV,!5A/,F/\"", false);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.018706115735962
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.quote("obV,!5A/,F/");
      assertEquals("\"obV,!5A/,F/\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("] is not a JSONObject.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      Long long0 = new Long(69);
      Short short0 = new Short((short)92);
      JSONObject.valueToString(hashMap0, (-30733247), 69);
      Double double0 = new Double((short)92);
      assertEquals(92.0, (double)double0, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Long long0 = new Long(183L);
      JSONObject.valueToString(long0, 676, 1);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Double double0 = new Double(183L);
      Byte byte0 = new Byte((byte)95);
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Long@0000000001", byte0);
      jSONObject1.has("java.lang.Long@0000000001");
      try { 
        jSONObject0.getJSONArray("isput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isput\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject.quote("");
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = Short.valueOf((short)8192);
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) short0);
      try { 
        jSONObject1.getBoolean("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.valueToString("H\f[n,P>1=OeHQ");
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Boolean boolean0 = new Boolean(false);
      JSONObject.valueToString(hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a Boolean.";
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 1486.26);
      jSONObject0.names();
      jSONObject1.optDouble("] is not a Boolean.", 1486.26);
      jSONObject1.getInt("] is not a Boolean.");
      String string1 = "isvalueOf";
      try { 
        jSONObject0.getJSONArray("$GhO%F9KH0gtFb{4x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$GhO%F9KH0gtFb{4x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      Long long0 = new Long((-76));
      JSONObject jSONObject1 = jSONObject0.accumulate("qQj#KSqw", long0);
      jSONObject1.optDouble("qQj#KSqw");
      try { 
        jSONObject1.getJSONArray("qQj#KSqw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qQj#KSqw\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(991.9622663);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.093308880176036
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Boolean boolean0 = new Boolean(false);
      boolean boolean1 = new Boolean(false);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove((String) null);
      JSONObject jSONObject1 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (-1L));
      double double0 = new Long((-1L));
      boolean boolean2 = jSONObject1.isNull("<,Bv+~f{+BQ:FPK0\"7");
      assertFalse(boolean2);
      
      double double1 = jSONObject0.optDouble((String) null, (-15.7502283403));
      assertEquals((-15.7502283403), double1, 0.01);
      
      StringWriter stringWriter0 = new StringWriter(2882);
      int int0 = jSONObject1.optInt("<,Bv+~f{+BQ:FPK0\"7");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Double.sum(2684.5524711747, 2684.5524711747);
      Double double0 = new Double(1558.5859204812);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Byte byte0 = new Byte((byte)50);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      JSONObject jSONObject1 = jSONObject0.put("~:?~", (-1L));
      int int0 = jSONObject1.getInt("~:?~");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("wheel.json.JSONException", 2243);
      assertEquals(2243, int0);
      
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Unterminated string";
      jSONObject0.put("Unterminated string", false);
      try { 
        jSONObject0.getJSONArray("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] is oot a JSONObject.", false);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject1.getBoolean("] is oot a JSONObject.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("0xI1z1GH+?t:%", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 3618, 3618);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = JSONObject.quote("getput");
      assertEquals("\"getput\"", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("getput", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-4114), (-36));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = new Float(4147.47F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("sho!DhLm", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      try { 
        jSONObject0.accumulate((String) null, jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator.identity();
      Byte byte0 = new Byte((byte)123);
      hashMap0.put(byte0, "Z|7(},s+@IK@");
      Short short0 = new Short((byte)123);
      hashMap0.put(short0, "java.lang.Long@0000000003.");
      UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Float float0 = new Float((double) (byte)123);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("~)#d{p_o-", (long) (byte)123);
      assertEquals(123L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Byte byte0 = Byte.valueOf((byte)12);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      hashMap0.replace((Object) byte0, "-}JG5C.r_o:7Q");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("isclear").when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float((-821.927F));
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|B)C-$'@.i=&z%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |B)C-$'@.i=&z%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Byte byte0 = Byte.valueOf((byte)12);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0337275976219487
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = JSONObject.quote("qO\"<36 Pgm\"Ug)8\"~Rf");
      assertEquals("\"qO\\\"<36 Pgm\\\"Ug)8\\\"~Rf\"", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"qO\"<36 Pgm\"Ug)8\"~Rf\"";
      stringArray0[1] = "\"qO\"<36 Pgm\"Ug)8\"~Rf\"";
      stringArray0[2] = "qO\"<36 Pgm\"Ug)8\"~Rf";
      stringArray0[3] = "\"qO\"<36 Pgm\"Ug)8\"~Rf\"";
      stringArray0[4] = "*6)GwP9kb?gnRR/@Fz";
      stringArray0[5] = "qO\"<36 Pgm\"Ug)8\"~Rf";
      stringArray0[6] = "qO\"<36 Pgm\"Ug)8\"~Rf";
      stringArray0[7] = "\"qO\"<36 Pgm\"Ug)8\"~Rf\"";
      JSONObject jSONObject0 = new JSONObject("qO\"<36 Pgm\"Ug)8\"~Rf", stringArray0);
      String string1 = jSONObject0.toString((-392));
      assertEquals("{}", string1);
      
      String string2 = JSONObject.doubleToString((-392));
      assertEquals("-392", string2);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("0xI1z1GH+?t:%", "0xI1z1GH+?t:%");
      boolean boolean0 = jSONObject1.isNull("0xI1z1GH+?t:%");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"cphHq42fiz&.$wbiX*";
      stringArray0[1] = "re";
      stringArray0[2] = "b<u!lI(=N\"-H^N7";
      stringArray0[3] = "dmu8sr~N|-J9:A=/q";
      stringArray0[4] = "] is not a JSONArray.";
      jSONObject0.optDouble("dmu8sr~N|-J9:A=/q", (-558.454));
      stringArray0[5] = "";
      stringArray0[6] = "true";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 3581L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Long long0 = new Long(0L);
      hashMap0.put((Float) null, (String) null);
      int int0 = (-76);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 676, (-76));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte)10);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add(byte0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("~<XE", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.keySet();
      Integer integer0 = new Integer(266);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(integer0, boolean0);
      Integer integer1 = new Integer(266);
      Integer integer2 = new Integer(266);
      hashMap0.put(integer2, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      CharBuffer.wrap(charArray0);
      String string0 = jSONObject0.toString(266, (-431));
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      hashMap0.put((Float) null, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(2836, 2836);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-1), (-1));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("8VMrX", "8VMrX");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer integer0 = new Integer(29);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.quote("UVia");
      assertEquals("\"UVia\"", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      Long long0 = new Long(2146L);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      UnaryOperator.identity();
      hashMap2.entrySet();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      jSONObject0.opt("71pk(zTii3'r5");
      String string1 = JSONObject.quote("71pk(zTii3'r5");
      assertEquals("\"71pk(zTii3'r5\"", string1);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("9^gm5H#Fq");
      assertNull(object0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, "toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject.valueToString(linkedList0, (-38), (-1087));
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = "to";
      hashMap0.put("[]", "to");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Integer, String> function3 = unaryOperator0.andThen((Function<? super Integer, ? extends String>) function2);
      // Undeclared exception!
      try { 
        function3.compose((Function<? super HashMap<Short, Short>, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote("&JcP K.xN{\"");
      assertEquals("\"&JcP K.xN{\\\"\"", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("] is not  Bolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not  Bolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "q0(1";
      String string1 = "isparseFloat";
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("isparseFloat", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("gettrim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettrim\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("q0(1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q0(1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Byte.valueOf((byte)124);
      Byte.valueOf((byte)59);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      Integer integer0 = new Integer((-1399));
      hashMap2.put(integer0, "2,y0^Zbq$bfNb8S`\"[");
      hashMap1.put("~)#d{p_o-", "~)#d{p_o-");
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      Function<Integer, String> function4 = unaryOperator3.andThen((Function<? super Integer, ? extends String>) function1);
      unaryOperator2.andThen((Function<? super Integer, ? extends String>) function4);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = function2.andThen((Function<? super String, ? extends Integer>) function5);
      function1.andThen((Function<? super String, ? extends Integer>) function6);
      function1.compose((Function<? super Integer, ?>) unaryOperator2);
      function2.compose((Function<? super Integer, ?>) function6);
      Boolean boolean0 = Boolean.TRUE;
      hashMap1.computeIfAbsent(boolean0, function1);
      hashMap1.computeIfAbsent(unaryOperator0, function3);
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      hashMap1.replaceAll(biFunction1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optLong("5[}'w", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("] is not a number.");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("V1/v");
      assertEquals("\"V1/v\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("wheel.json.JSONException").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function2);
      function1.compose((Function<? super Integer, ?>) unaryOperator0);
      Function<Integer, Double> function3 = (Function<Integer, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      hashMap0.computeIfAbsent(unaryOperator0, function4);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("wheel.json.JSONException", (-585L));
      assertEquals((-585L), long0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("co");
      jSONObject0.optInt("co", (-1979));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("-WZ");
      Double double0 = new Double(1959.9048906202);
      assertEquals(1959.9048906202, (double)double0, 0.01);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("o/V,!?5A/*,}K/]a", 1275.8242933837);
      boolean boolean0 = new Boolean("o/V,!?5A/*,}K/]a");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("getsplit");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("ke");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ke\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("btKqC#)6Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"btKqC#)6Z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf(" +$nHL{F");
      try { 
        jSONObject0.get(" +$nHL{F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" +$nHL{F\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1005.0451670865564);
      assertEquals("1005.0451670865564", string0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
