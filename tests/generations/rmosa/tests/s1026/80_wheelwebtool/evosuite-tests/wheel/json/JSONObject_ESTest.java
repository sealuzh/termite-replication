/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 07:47:46 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("o", 2261);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Float float0 = new Float(1.0F);
      hashMap0.putIfAbsent((Byte) null, float0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5884082070354566
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject.doubleToString((-677));
      JSONObject jSONObject0 = new JSONObject((Object) "-677");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1963, (-677));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float(1578.0104856995351);
      Short short0 = new Short((short) (-303));
      hashMap0.put(float0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      jSONObject0.put("+dVPc&LXp}*", 1824);
      long long0 = jSONObject0.optLong("+dVPc&LXp}*");
      assertEquals(1824L, long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("}tv]", (Object) boolean0);
      jSONObject0.getBoolean("}tv]");
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}tv]";
      stringArray0[0] = "}tv]";
      stringArray0[2] = "}tv]";
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.095924398920587
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("7(", (-167));
      jSONObject0.optLong("7(");
      jSONObject0.getInt("7(");
      jSONObject0.optLong("7(");
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) "false");
      jSONObject1.getBoolean("false");
      try { 
        jSONObject1.getJSONArray("FlrCr>s=W5K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"FlrCr>s=W5K\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("a%}%g)k'28nL9LE:JWn", (Collection) linkedList0);
      jSONObject1.getJSONArray("a%}%g)k'28nL9LE:JWn");
      JSONObject jSONObject2 = new JSONObject((Object) "a%}%g)k'28nL9LE:JWn");
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject.quote("A8,$YC^_^h%A#/");
      JSONObject jSONObject0 = new JSONObject((Object) "A8,$YC^_^h%A#/");
      Short short0 = new Short((short)34);
      Short.compare((short)2371, (short)2371);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"A8,$YC^_^h%A#/\"", short0);
      jSONObject0.putOpt("wheel.json.JSONObject", "A8,$YC^_^h%A#/");
      jSONObject1.getInt("\"A8,$YC^_^h%A#/\"");
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("7h7>epxS");
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("7h7>epxS", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "xDnw^'t\"iWyH^";
      Byte byte0 = new Byte((byte) (-68));
      hashMap0.put((JSONArray) null, byte0);
      int int0 = (-3524);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-3524), (-3524));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList1.add((JSONObject) null);
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf(true);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 30, (-731));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      hashMap0.put((Double) null, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString((-46608889));
      assertEquals("-4.6608889E7", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-931), (-931));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.iterator();
      jSONObject0.put("{}", (Collection) linkedList0);
      jSONObject0.toString((-931), (-931));
      boolean boolean0 = jSONObject0.has("{}");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append("c&#c/&.S", object0);
      JSONObject jSONObject1 = jSONObject0.put("c&#c/&.S", 44);
      jSONObject1.getLong("c&#c/&.S");
      jSONObject1.remove("c&#c/&.S");
      int int0 = 46;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("c&#c/&.S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of c&#c/&.S
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("{^EUNO}ok#3");
      String string0 = JSONObject.quote("T-q</Pv7YNt>4[1i");
      assertEquals("\"T-q<\\/Pv7YNt>4[1i\"", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4361062274866856
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)39);
      linkedList0.add(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject2 = jSONObject0.put("] not found.", (-960));
      jSONObject2.toString((-960), (-960));
      int int0 = jSONObject0.optInt("] not found.");
      assertEquals((-960), int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("0E0l&cJG]WYth>&Q", "0E0l&cJG]WYth>&Q");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      try { 
        jSONObject1.getJSONArray("0E0l&cJG]WYth>&Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0E0l&cJG]WYth>&Q\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-2271), (-2271));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = JSONObject.quote("(Y2/`M+v$d^^v");
      assertEquals("\"(Y2/`M+v$d^^v\"", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("a%}%g)k'28nL9LE:JWn", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("gettoLow<rCse", (Collection) linkedList0);
      jSONObject1.isNull("] is not a JSONArray.");
      JSONObject.testValidity("] is not a JSONArray.");
      JSONArray jSONArray0 = jSONObject2.optJSONArray("gettoLow<rCse");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = new Double((-2100.954368819725));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.append("?", double0);
      jSONObject0.optJSONArray("?");
      try { 
        jSONObject0.get("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.437138219230752
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      jSONObject0.optLong("ux%f");
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("mi", 110);
      int int0 = jSONObject1.optInt("mi");
      assertEquals(110, int0);
      
      String string1 = jSONObject0.optString(": ");
      assertEquals("", string1);
      
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
      
      String string2 = JSONObject.quote((String) null);
      assertEquals("\"\"", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4384474624881487
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1599));
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-3204));
      linkedList0.addLast(integer1);
      Integer integer2 = new Integer((-1599));
      linkedList0.add(integer2);
      JSONObject jSONObject1 = jSONObject0.put("H7c6UGFbM|", (Collection) linkedList0);
      jSONObject1.put("H7c6UGFbM|", (double) (-3204));
      StringWriter stringWriter0 = new StringWriter(55);
      jSONObject1.write(stringWriter0);
      Integer integer3 = new Integer(92);
      Integer.toUnsignedLong(16);
      JSONObject.getNames((Object) integer3);
      jSONObject1.getDouble("H7c6UGFbM|");
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float0 = new Float((double) (-1599));
      jSONObject1.optDouble("H7c6UGFbM|");
      Double double0 = new Double(92);
      jSONObject1.put("H7c6UGFbM|", (Map) hashMap0);
      Double.max(0.0, 0.0);
      Double.sum(Double.NaN, 0.0);
      hashMap0.put(float0, double0);
      JSONObject jSONObject2 = jSONObject1.put("H7c6UGFbM|", (Map) hashMap0);
      jSONObject1.getString("H7c6UGFbM|");
      JSONArray jSONArray0 = jSONObject2.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-3419);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{ko!jx{YgKAely");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {ko!jx{YgKAely
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.append("false", "Unterminated string");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("false");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      int int0 = 34;
      JSONObject.valueToString(hashMap0, 1659, 34);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(1659);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1659] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put("hcH", (Collection) linkedList0);
      jSONObject1.accumulate("hcH", "hcH");
      boolean boolean0 = jSONObject1.isNull("hcH");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject.quote("par");
      JSONObject jSONObject0 = new JSONObject((Object) "\"par\"");
      String string0 = JSONObject.valueToString("\"par\"", 741, 741);
      Short short0 = new Short((short)558);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.append("toS", "toS");
      Writer writer0 = jSONObject0.write(stringWriter0);
      Writer writer1 = jSONObject0.write(writer0);
      assertSame(writer1, writer0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("AVh4z`6Us6wWB", (-504L));
      jSONObject0.optDouble("AVh4z`6Us6wWB", (double) (-504L));
      String string0 = jSONObject1.toString(58, 14);
      String string1 = JSONObject.quote("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isputOpt", 128);
      double double0 = jSONObject1.optDouble("isputOpt");
      assertEquals(128.0, double0, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      jSONArray0.put((Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      jSONObject0.put("P,'Vu4a2_y", (Map) hashMap0);
      JSONObject.valueToString((Object) null, 600, 600);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("P,'Vu4a2_y");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "}tv]";
      Object object0 = JSONObject.NULL;
      jSONObject0.put("}tv]", object0);
      String string1 = "T$]L;fO+q1T#M%Ld";
      try { 
        jSONObject0.getJSONObject("}tv]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}tv]\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("getspliterator", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = jSONObject0.toString((-931), (-931));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected a ':' after a key", true);
      jSONObject0.keys();
      Object object1 = jSONObject0.opt("Expected a ':' after a key");
      assertEquals(true, object1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (-1563.06329928304));
      assertEquals((-1563.06329928304), double0, 0.01);
      
      String string0 = JSONObject.doubleToString(2814.28447052);
      assertEquals("2814.28447052", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1846.5822);
      jSONObject0.put("isparseByte", (Object) double0);
      jSONObject0.getDouble("isparseByte");
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("wD2#N", "wD2#N");
      Integer integer0 = new Integer((-730));
      JSONObject jSONObject1 = jSONObject0.accumulate("wD2#N", integer0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float.valueOf(2907.343F);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("issplit", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString(2739, 2739);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("$r", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>(136, 136);
      Double double0 = new Double(Double.NaN);
      Double.max(Double.NaN, Double.NaN);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(double0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(136);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      Byte byte0 = new Byte((byte)15);
      hashMap0.put(byte0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("istoLowerCase");
      jSONTokener0.syntaxError("istoLowerCase");
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object1 = new Object();
      Boolean boolean0 = new Boolean("] is not a JSONArray.");
      Long long0 = new Long(1L);
      Integer integer0 = new Integer((-1399));
      Boolean.valueOf(false);
      hashMap0.put((Object) null, (Boolean) null);
      Boolean boolean1 = Boolean.TRUE;
      Object object2 = new Object();
      Boolean boolean2 = new Boolean(true);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Float float0 = new Float((-759.2473876));
      hashMap1.put(float0, (Boolean) null);
      HashMap<Object, JSONArray> hashMap2 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.removeFirstOccurrence(float0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "istoLowerCase");
      StringWriter stringWriter2 = stringWriter1.append('H');
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",", 111.2636);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-520.62434));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-31));
      Byte.toUnsignedLong((byte) (-31));
      BiFunction<Byte, Object, Float> biFunction0 = (BiFunction<Byte, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(java.lang.Byte.class) , any());
      hashMap0.compute(byte0, biFunction0);
      jSONObject0.optJSONObject("Missing value");
      JSONObject jSONObject1 = jSONObject0.put("sHM", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-46608889), (-46608889));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("}tv]", object0);
      jSONObject1.remove("}tv]");
      try { 
        jSONObject1.getBoolean("}tv]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}tv]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (Collection) linkedList0);
      boolean boolean0 = jSONObject1.isNull("Missing value");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("}tv]", object0);
      try { 
        jSONObject1.getBoolean("}tv]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}tv]\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(jSONArray1, 2031, 88);
      boolean boolean0 = jSONObject0.has("[]");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1L);
      JSONObject jSONObject1 = jSONObject0.append("R[0:A\"E'", long0);
      jSONObject1.getString("R[0:A\"E'");
      jSONObject0.optJSONArray("IJb?Ie}iEwp ~\"H");
      String string0 = JSONObject.quote(")clZIC");
      assertEquals("\")clZIC\"", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONTokener0.nextClean();
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(jSONObject0, (-225), 2287);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "{}", (-332), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("|", "K5m6ff z+/XVP]s.");
      jSONObject1.get("|");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("3*&RM0", (String) null);
      Integer integer0 = new Integer(108);
      assertEquals(108, (int)integer0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(35, 35);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString(87, (-399));
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{mMqnz:^ja.Y=k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {mMqnz:^ja.Y=k
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("imax", (Object) "imax");
      JSONObject.getNames((Object) jSONObject0);
      String string0 = jSONObject0.optString("imax");
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      String string0 = JSONObject.valueToString(linkedList0, 4, (-400));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(false);
      Double double0 = new Double(0.0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Long long0 = new Long((-8L));
      JSONObject jSONObject1 = jSONObject0.put("", (Object) long0);
      jSONObject1.getInt("");
      jSONObject1.getDouble("");
      JSONObject.valueToString(jSONArray0);
      Short short0 = new Short((short)4688);
      jSONObject0.putOpt("ky(G!7N[TvX", short0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isformat", (-2107L));
      jSONObject0.getLong("isformat");
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put(".", (Collection) linkedList0);
      Float float0 = new Float((float) 44);
      JSONObject jSONObject2 = jSONObject1.append(".", ">e$2^@~Brm");
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wD2#N", (Object) "wD2#N");
      boolean boolean0 = new Boolean("wD2#N");
      Boolean boolean1 = new Boolean("wD2#N");
      try { 
        jSONObject0.append("wD2#N", boolean1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wD2#N] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.1027712457674337
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "] is not a Boolean.";
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", true);
      JSONObject jSONObject2 = jSONObject0.put("] is not a Boolean.", (-837L));
      JSONObject jSONObject3 = jSONObject0.put("Unterminated string", 67);
      jSONObject3.toString();
      Object object0 = new Object();
      JSONObject.getNames(object0);
      jSONObject0.keys();
      int int0 = 0;
      jSONObject2.optInt(".", 0);
      jSONObject1.put("{\"java.lang.String@0000000002\":java.lang.Long@0000000004,\"java.lang.String@0000000005\":java.lang.Integer@0000000006}", 0);
      jSONObject1.names();
      JSONObject.getNames(object0);
      try { 
        jSONObject1.getJSONArray("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("a%}%g)k'28nL9LE:JWn", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("a%}%g)k'28nL9LE:JWn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a%}%g)k'28nL9LE:JWn\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "}tv]";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("}tv]", object0);
      try { 
        jSONObject1.getLong("}tv]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}tv]\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("sum", 3778.5155841064206);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("true", (-774));
      assertEquals((-774), int0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "c\\uZnl'h>X]l_\\";
      JSONObject jSONObject1 = jSONObject0.put(string0, false);
      try { 
        jSONObject1.getInt(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"c\\\\uZnl'h>X]l_\\\\\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wD2#N";
      JSONObject jSONObject1 = jSONObject0.put("wD2#N", (Object) "wD2#N");
      try { 
        jSONObject1.getDouble("wD2#N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wD2#N\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("wheel.json.JSONArray");
      assertEquals("\"wheel.json.JSONArray\"", string0);
      
      String string1 = jSONObject0.optString("(^j&", " at character ");
      assertEquals(" at character ", string1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("xkFxbqFz_Tt[a}", 1.0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.doubleToString(1.0);
      jSONObject0.optLong("7@ta|jt&Q_W", 1316L);
      // Undeclared exception!
      try { 
        stringWriter0.write("xkFxbqFz_Tt[a}", 396, 396);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "}D";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }D
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-2035L));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, jSONArray1);
      JSONArray jSONArray2 = new JSONArray();
      assertFalse(jSONArray2.equals((Object)jSONArray1));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("}tv]", (Object) jSONObject0);
      try { 
        jSONObject1.getBoolean("}tv]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}tv]\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0407451414815978
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\",\n\"";
      stringArray0[1] = ",\n";
      stringArray0[2] = "\",\n\"";
      stringArray0[3] = "\",\n\"";
      stringArray0[4] = ",\n";
      stringArray0[5] = ")Nq(l";
      stringArray0[6] = "\",\n\"";
      JSONObject jSONObject0 = new JSONObject(",\n", stringArray0);
      boolean boolean0 = jSONObject0.optBoolean(")Nq(l");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("}tv]", (Object) "}tv]");
      try { 
        jSONObject1.getBoolean("}tv]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}tv]\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject0.put("Null pointer", (Object) boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("Null pointer");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float(0.0F);
      Object object0 = new Object();
      hashMap0.put(float0, object0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{}", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double double0 = new Double(0.0);
      Integer integer0 = new Integer(51);
      hashMap0.put(double0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.valueToString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("istoUnsignedLong", "istoUnsignedLong");
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      Double double0 = new Double(4355.51);
      Boolean boolean0 = new Boolean("toS");
      hashMap0.put(double0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(">e$2^@~Brm", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = JSONObject.quote("k_Gl:9:");
      assertEquals("\"k_Gl:9:\"", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("istoJSONObject", (-3603L));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0yu/PXk1XWFP!+Rx");
      String string0 = "ex%sw%nj?J?TW^#<Q";
      // Undeclared exception!
      jSONObject0.toString(2599);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("vze$^h0*uO)q~QOT");
      Boolean.logicalXor(true, true);
      Long long0 = new Long((-1334L));
      hashMap0.put("vze$^h0*uO)q~QOT", boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Object object1 = new Object();
      Short short0 = new Short((short)9);
      Boolean boolean2 = Boolean.valueOf("VZEwu?");
      hashMap0.put(short0, boolean2);
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((int) (short)9, 5);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.2221277926110472
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      
      jSONObject0.optJSONArray("gettoUnsignedLong");
      jSONObject0.toString(174);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Byte byte0 = new Byte((byte)12);
      String string0 = JSONObject.valueToString(byte0, 65, 42);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "#>sr5WYEaNF0gi";
      Long long0 = new Long(0L);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer(612);
      Boolean boolean0 = Boolean.valueOf("viQJQ");
      hashMap0.put(integer0, boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Object object0 = new Object();
      Double double0 = new Double(0L);
      hashMap0.put(double0, boolean0);
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(0, 1407);
      try { 
        jSONObject0.get("viQJQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"viQJQ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-1988));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("va");
      assertNull(object0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("is", "is");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("Jde^4o", 103);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("~U:AW)/ous");
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("has", 0L);
      Boolean boolean0 = new Boolean("getnotify");
      jSONObject0.put("getnotify", (Object) boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      Byte byte0 = new Byte((byte)0);
      hashMap0.put(byte0, "in");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(1214, 1590);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("A JSONObject text must begin with '{'");
      String string0 = JSONObject.valueToString(boolean0, 70, 59);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      hashMap0.put((Boolean) null, "java.lang.Long@00000000050");
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(67, 1590);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" t&i&1~AE");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of  t&i&1~AE
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("=]ckM~Cw'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of =]ckM~Cw'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("{6VM~<@U#v={_J", false);
      assertFalse(boolean0);
      
      String string0 = JSONObject.quote("000");
      assertEquals("\"000\"", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("da00:eCqt[n[N&r^", true);
      Byte byte0 = new Byte((byte)92);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("wD2N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wD2N\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("~H\"");
      assertEquals("\"~H\\\"\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("isisNaN", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("Expected a ':' after a key");
      assertNull(object0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("gettoLowerCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoLowerCase\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("-1196.94010");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-1196.94010\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.append("Unterminated string", "Unterminated string");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, "Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
