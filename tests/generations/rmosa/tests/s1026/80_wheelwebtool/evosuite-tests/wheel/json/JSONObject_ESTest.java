/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 17:13:34 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      String string0 = JSONObject.valueToString(hashMap0, 907, 22);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.78489484807327
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(32, (-565));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = JSONObject.quote("fnw9UC~UQP/");
      assertEquals("\"fnw9UC~UQP/\"", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Yx3wXN$)4|X3eusuS3");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 19 of {Yx3wXN$)4|X3eusuS3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{F=@|B/Y");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 7 of {F=@|B/Y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("b", (Object) boolean0);
      Object object0 = jSONObject1.remove("b");
      assertEquals(false, object0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.append("A JSONArray text must start with '['", boolean0);
      String string0 = jSONObject1.optString("A JSONArray text must start with '['");
      assertNotNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("wa", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("{}", 1052L);
      assertEquals(1052L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", 1919.592756299);
      long long0 = jSONObject1.optLong("Unterminated string");
      assertEquals(1919L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("oR..MC[=&K,U{al0(M", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("oR..MC[=&K,U{al0(M");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float((double) 1526L);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.optInt("$X~o~m`", 102);
      assertEquals(102, int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("get", (-38));
      assertEquals((-38), int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("1y{*?5UdaR}ac,5zzk", 3724.89992410563);
      int int0 = jSONObject0.optInt("1y{*?5UdaR}ac,5zzk");
      assertEquals(3724, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7422208751274786
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-74));
      Float float0 = new Float((double) (byte) (-74));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONObject$1", byte0);
      jSONObject1.optInt("wheel.json.JSONObject$1");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Long long0 = new Long(1526L);
      JSONObject jSONObject0 = new JSONObject(long0);
      double double0 = jSONObject0.optDouble("wheel.json.JSONArray", (double) 1526L);
      assertEquals(1, jSONObject0.length());
      assertEquals(1526.0, double0, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("1y{*?5UdaR}ac,5zzk", 3724.89992410563);
      double double0 = jSONObject1.optDouble("1y{*?5UdaR}ac,5zzk");
      assertEquals(3724.89992410563, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = new Float(4898.996F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("java.lang.Float@0000000001", (long) (-685));
      jSONObject0.opt("java.lang.Float@0000000001");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", hashMap0);
      boolean boolean0 = jSONObject1.has("] not found.");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      jSONObject0.put("Ex3UA&", (Collection) linkedList1);
      String string0 = jSONObject0.getString("Ex3UA&");
      assertNotNull(string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("Expected a ':' after a key", (-2654L));
      long long0 = jSONObject0.getLong("Expected a ':' after a key");
      assertEquals(2, jSONObject0.length());
      assertEquals((-2654L), long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9792045174343245
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.accumulate("] not found.", jSONObject1);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("] not found.");
      assertNotSame(jSONObject2, jSONObject3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Short short0 = new Short((short) (-1028));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("getrotateLeft", (int) (short) (-1028));
      int int0 = jSONObject0.getInt("getrotateLeft");
      assertEquals(2, jSONObject0.length());
      assertEquals((-1028), int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-2661.587566133", 0L);
      double double0 = jSONObject1.getDouble("-2661.587566133");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put((Object) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject0, (-513), (byte)75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3039878444401722
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Byte byte0 = new Byte((byte)12);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(byte0, boolean0);
      Short short0 = new Short((byte)12);
      hashMap0.put(short0, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      jSONObject0.toString(5328, (int) (byte)121);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9430096637858085
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1A=>Iu9Z");
      // Undeclared exception!
      jSONObject0.toString(3610);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9199261201964184
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("TcAK\"$\"d:/Zlm", stringArray0);
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      hashMap0.put((Float) null, (Float) null);
      jSONObject0.put("Expected '", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-1667));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.310686555367963
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = new Boolean("Bad value from toJSONString: ");
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      hashMap0.put(jSONArray0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONArray cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("getremainderUnsigned", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      hashMap1.put(hashMap0, (Boolean) null);
      hashMap0.put(hashMap1, (Boolean) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("TcAK\"$\"d:/Zlm", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      hashMap0.put((Object) null, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((int) (byte)12, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(4762, 4762);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = JSONObject.quote("/ -;*k=i|1'_9-");
      assertEquals("\"/ -;*k=i|1'_9-\"", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = JSONObject.quote("\"[]\"");
      assertEquals("\"\\\"[]\\\"\"", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("] not found.", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001", (long) (-685));
      double double0 = jSONObject1.optDouble("java.lang.Float@0000000001", (double) (-685));
      assertEquals((-685.0), double0, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("su", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("ma");
      assertNull(object0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "TcAK\"$\"d:/Zlm");
      jSONObject0.put("TcAK\"$\"d:/Zlm", 2616.3635658733565);
      long long0 = jSONObject0.getLong("TcAK\"$\"d:/Zlm");
      assertEquals(4, jSONObject0.length());
      assertEquals(2616L, long0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Boolean boolean0 = new Boolean("Missing value");
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      hashMap0.put("Missing value", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("] not found.", "] not found.");
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get("] not found.");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("\"Bad value from toJSONString: \"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"Bad value from toJSONString: \"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3826070734809082
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(3);
      jSONObject0.put("C1X", (Map) hashMap0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0, (byte) (-74), (byte) (-74));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 34, (-3123));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 2, (short) (-2193));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7119964716978848
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0888999753452238
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Byte byte0 = new Byte((byte)83);
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.2118433428703996
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Boolean boolean0 = new Boolean("{j9qMT:l\"Gn|lr");
      hashMap0.put(boolean0, "isdoubleToString");
      String string0 = JSONObject.valueToString(hashMap0, 39, 39);
      assertNotNull(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6904546939944762
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float((double) 1526L);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("C:h*_;", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.quote("A;&33~cG@K-6ckBy</");
      assertEquals("\"A;&33~cG@K-6ckBy<\\/\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("Vm|2\",+WLG", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.2013670042689852
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.putOpt(",;+Lh4NO-!", linkedList0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("&|o#s~vrK^ZeJ,8", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(":r~=]tr8Z1w", "] not found.");
      String string0 = jSONObject1.optString(":r~=]tr8Z1w", ":r~=]tr8Z1w");
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("8Bw[L>|R*^tg{");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ad", (-1501.60346418104));
      double double0 = jSONObject0.optDouble("ad");
      assertEquals((-1501.60346418104), double0, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5274528861988435
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float float0 = new Float((double) 1526L);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.append("$X~o~m`", "$X~o~m`");
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.338872053314866
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "?/;%L^vx*-NQu{o");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("TcAK\"$\"d:/Zlm", stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.7782333057997077
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ad", (-1501.60346418104));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.3803149872859355
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("@(/z:vm]'0k.t-BV:'W", "@(/z:vm]'0k.t-BV:'W");
      try { 
        jSONObject0.getLong("@(/z:vm]'0k.t-BV:'W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@(/z:vm]'0k.t-BV:'W\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("] not found.", jSONObject0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("] not found.");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", hashMap0);
      try { 
        jSONObject1.getJSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      jSONObject0.put("Ex3UA&", (Collection) linkedList1);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("Ex3UA&");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5374275205202255
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "TcAK\"$\"d:/Zlm");
      jSONObject0.put("TcAK\"$\"d:/Zlm", 2616.3635658733565);
      try { 
        jSONObject0.getJSONArray("TcAK\"$\"d:/Zlm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"TcAK\\\"$\\\"d:/Zlm\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("val", 2276.020859);
      int int0 = jSONObject0.getInt("val");
      assertEquals(2276, int0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("1y{?5UdaR}ac,5zzk", 3724.89992410563);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject1.getDouble("1y{?5UdaR}ac,5zzk");
      assertEquals(3724.89992410563, double0, 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("O[", (Object) "O[");
      try { 
        jSONObject0.getInt("O[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.5065950881316383
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("1y{*?5UdaR}ac,5zzk", 3724.89992410563);
      try { 
        jSONObject0.getBoolean("1y{*?5UdaR}ac,5zzk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1y{*?5UdaR}ac,5zzk\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("}$t", false);
      boolean boolean0 = jSONObject1.optBoolean("}$t", true);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("COzvSv", (-2222.7334468));
      long long0 = jSONObject1.optLong("COzvSv");
      assertEquals(1, jSONObject0.length());
      assertEquals((-2222L), long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2661.587566133));
      assertEquals("-2661.587566133", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-40792343));
      assertEquals("-4.0792343E7", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.6715952780212544
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", hashMap0);
      Byte byte0 = new Byte((byte)46);
      jSONObject1.accumulate("] not found.", "] not found.");
      jSONObject0.append("] not found.", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("&Igc.ojgW3}E8U]o6*D", "&Igc.ojgW3}E8U]o6*D");
      jSONObject0.optJSONArray("&Igc.ojgW3}E8U]o6*D");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("] not found.", hashMap0);
      Byte byte0 = new Byte((byte)46);
      try { 
        jSONObject0.append("] not found.", byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] not found.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("O[", (Collection) null);
      Double double0 = new Double(1160.89653396);
      jSONObject0.accumulate("O[", double0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("{{w3NR?mBU*TsO?I|D", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.Byte@0000000003\": null,\n\"java.lang.Object@0000000004\": null\n}");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.8143254657733845
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Byte byte0 = new Byte((byte)10);
      Boolean boolean0 = hashMap0.put(byte0, (Boolean) null);
      Object object0 = new Object();
      hashMap0.put(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(113, 3419);
      JSONObject jSONObject1 = new JSONObject(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Ny@ixgl C]pl`p");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {Ny@ixgl C]pl`p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{F=2@|B/Y");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 8 of {F=2@|B/Y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{S(fo:A[7[.R}UD");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 8 of {S(fo:A[7[.R}UD
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}kZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }kZ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate(" !aYf:", object0);
      boolean boolean0 = jSONObject0.isNull(" !aYf:");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate(" !aYf:", hashMap0);
      boolean boolean0 = jSONObject1.isNull(" !aYf:");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.8404675095994816
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(9);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float((double) (byte) (-74));
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.optInt("wheel.json.JSONObject$1");
      assertEquals(3, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("COzvSv");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("gethashCode", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("(*;D#zt.\"iCe cwe>j", (-243));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.271899083808096
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("TcAK\"$\"d:/Zlm", stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("wa", (-4276L));
      assertEquals((-4276L), long0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("xK3EAYv;>*F;7/HP");
      assertEquals("", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 3724.89992410563);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2828L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("Ex3UA&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ex3UA&\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isjoin", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("a7:KZps#LkN@tG>C`");
      assertFalse(boolean0);
  }
}
