/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 16:34:27 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(1300L, 3441L);
      Range range1 = Range.of(613L, 807L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1028108080271113
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(0L, 278L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8357589838940775
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-1122L));
      Range range1 = Range.of((-1411L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0431376047494716
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-60L), (-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8946578329942794
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(9223372036854745932L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(8347L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854772297 would make range [9223372036854770973 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.81137595726115
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(6800L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.788632205501092
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4183685675159614
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-60L), (-1L));
      Range range1 = Range.ofLength(1618L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.773036304877862
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.ofLength(2L);
      boolean boolean0 = range0.intersects(range0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0988344211424343
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 615L, 615L);
      Range range1 = Range.of(615L, 615L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7097029932964114
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.727229735164184
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7284075400342904
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.ofLength(2147483626L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9678674685340356
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-299L), 32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-128L), 127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.850790265580613
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.parseRange("[ 65519 .. 65518 ]/0B");
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Space Based", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6484383345463107
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8314802400679735
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(127L, long0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.719809854865039
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(9223372036854743042L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854743042L, long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.814359184750864
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-1122L));
      long long0 = range0.getEnd();
      assertEquals((-1122L), long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.ofLength(6800L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8314802400679735
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(127L, long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5798439652180236
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getBegin();
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.814359184750864
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-1805L));
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals((-1805L), long0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.010896723427115
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("`qrn,9LwL\"vos8Tq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse `qrn,9LwL\"vos8Tq into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -129 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(8348L, (-3091L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2533976735624135
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.648438334546311
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.5075063653108103
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), 9223372036854775807L);
      List<Range> list0 = range0.split(9223372036854775807L);
      Range range1 = Range.ofLength(6800L);
      // Undeclared exception!
      try { 
        range1.complementFrom(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1315061709253724
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of((-9223372034707292141L));
      Range range1 = Range.of(9223372036854710273L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372034707292141 would make range [9223372036854710273 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7738522086804824
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 256 .. 256 ]/RB", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.099704350637984
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.071811406723707
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-1122L));
      Range range1 = Range.of((-1415L));
      Range range2 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.215871484586937
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertSame(range2, range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7135785408057047
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range0.intersection(range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7555497906641793
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1609L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7722984534427955
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.773036304877862
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.648438334546311
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("SB", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(615L);
      Range.Builder range_Builder1 = range_Builder0.shift(615L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-3044L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3044 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1609L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1479L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1479 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-651L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 9223372036854775807L, 701L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.831480240067973
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4982L), (-4982L));
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7477418055719953
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65519L, 65519L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7410716301609974
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65519L, 65519L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.737140718477016
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65519L, 65519L);
      boolean boolean0 = range0.equals("[ 65519 .. 65518 ]/0B");
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.872327462020019
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 615L, 615L);
      List<Range> list0 = range0.split(70L);
      boolean boolean0 = range0.equals(list0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7730363048778623
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 615L, 615L);
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.649948793001987
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.630554953636816
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.7689014346007985
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.782394510033999
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8892632916692698
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372034707292182L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.7689014346007985
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(2147483626L);
      Range.Builder range_Builder0 = new Range.Builder(2147483626L);
      range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.7823945100339995
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(2147483626L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.013412304782512
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(8348L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 8348 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.939099261288858
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(8348L, 9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(8348L, 9223372036854775807L);
      boolean boolean0 = range0.equals("number of entries must be <= Integer.MAX_VALUE");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(816L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8892632916692698
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2217L, 4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.018553436736682
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(1554L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1554L, 2336L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(1896L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(1260L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(1809L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.767923626502885
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775789L);
      Long long0 = new Long(9223372036854775789L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.767923626502885
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.7886260379670387
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.7167107318285155
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.865703420347897
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.830713403754631
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(255L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.8314802400679735
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(127L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.7878762280875944
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      boolean boolean0 = range0.equals("=jGmp");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long((-644L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.811419498301342
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-1L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.068377970724912
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-3305L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3305L), 1477L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.858006239667225
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-1805L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.8712202522291133
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-1122L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.913172508394483
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.908318357393279
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-65517L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.902823587955807
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Long long0 = new Long((-2147483648L));
      range0.equals(long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.8848699633253068
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-9223372034707292122L));
      Range range1 = Range.of((-9223372034707292112L));
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.9504258637418848
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-9223372034707292141L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.936158557953129
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-9223372034707292141L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.8892632916692693
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(9223372036854775789L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.059354848590835
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(6800L);
      List<Range> list0 = range0.split(6800L);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.648438334546311
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split((-537L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.582424317350126
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.6499487930019865
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.7555497906641793
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(615L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.8114194983013423
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-20L));
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.1443140113476007
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-2278L), (-257L));
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.830713403754631
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(127L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.348191346141561
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(5074L);
      Range range1 = Range.of(9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      Range range2 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range2.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.7129621730528903
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1519659464618592
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(3745L, 3745L);
      Range range1 = Range.ofLength(3745L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.254725371770778
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.7135785408057047
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(615L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.900980466620676
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2098L, 2098L);
      Range range1 = Range.of(range_CoordinateSystem0, 414L, 1959L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.9390527729243106
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(9223372036854743042L);
      Range range1 = Range.ofLength(1053L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(1896L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.7689014346007985
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(9223372036854743042L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.9370665455009894
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.0197361271389958
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.parseRange("^-Ig0-9A-^9", range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("uxOCU", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse uxOCU into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.7519159690311215
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.6819941777226375
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.402298848248626
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.9042160517045543
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 728L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.4195168263130347
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65519L, 9223372036854775249L);
      List<Range> list0 = range0.split(9223372036854775249L);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertFalse(list2.contains(range0));
      //  // Unstable assertion: assertTrue(list2.equals((Object)list1));
      //  // Unstable assertion: assertEquals(1, list2.size());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.270815600131119
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-9223372034707292141L));
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.809783478004049
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4982L), (-4982L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.9448325079897435
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2838L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.719809854865039
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(9223372036854710273L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854710273L, long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.967112896979192
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-335L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.8754478444593765
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372034707292182L);
      Long long0 = new Long(4294967295L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.281228159001216
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(8348L, 9223372036854775807L);
      List<Range> list0 = range0.split(9223372036854775807L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.7782254130184434
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9987L, 4294967295L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.7878762280875944
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.6484383345463107
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[ 2188 .. 2187 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.6484383345463107
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range0.asRange();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.864738512190568
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(1896L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-1881L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1609L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1609L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1609L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1147L));
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1609L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-128L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.814359184750864
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of((-1376L));
      String string0 = range0.toString();
      assertEquals("[ -1376 .. -1376 ]/0B", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.2098732195459445
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(2147483626L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.6819941777226375
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertTrue(range0.isEmpty());
  }
}
