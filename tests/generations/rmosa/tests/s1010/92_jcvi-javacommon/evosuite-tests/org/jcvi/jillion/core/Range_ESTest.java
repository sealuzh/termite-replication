/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 11:09:00 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.756967869849926
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(4294967305L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.ofLength(896L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      linkedList0.add(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      List<Range> list0 = range1.complementFrom(linkedList0);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.139044846779158
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 558L, 4294901746L);
      range0.equals((Object) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(1L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Long long0 = new Long(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-123L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.of((-112L), 32767L);
      // Undeclared exception!
      try { 
        Range.parseRange("unable to delete ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse unable to delete  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.equals(linkedList0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1339026904400007
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, (-9223372036854775808L));
      boolean boolean0 = range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      boolean boolean1 = range0.endsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.add(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean2 == boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.203099706052705
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(4294967295L, 4294967295L);
      range1.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(4294967296L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.130285399790697
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1888L), (-1888L));
      range0.equals((Object) null);
      range0.split(65535L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967300L, (-9223372036854775808L));
      Long long0 = new Long(10499L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long((-128L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Long long0 = new Long(1657086L);
      Range range0 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1342954248533537
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      Range.of(2672L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2672L, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-3087L));
      Range range1 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7974304538187877
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range0.equals((Object) null);
      long long0 = range0.getBegin();
      assertEquals((-9223372036854775808L), long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-9223372036854775808L), (-9223372036854775808L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-1508L));
      Long long0 = new Long((-1508L));
      range0.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.7952016013329124
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, (-9223372036854775808L));
      Long long0 = new Long((-9223372036854775808L));
      Long long1 = new Long(65535L);
      Long long2 = new Long(3868L);
      range0.toString(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerLast(range0);
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      range0.complementFrom(linkedList1);
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1831L, 1831L);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Long long0 = new Long((-9223372036854775808L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long long0 = new Long(702L);
      Long long1 = new Long(702L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.204601925240141
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(9223372036854772942L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1888L), 65548L);
      assertFalse(range1.isEmpty());
      
      Object object1 = new Object();
      range0.getEnd();
      Range range2 = Range.of(9223372036854775779L);
      String string0 = range2.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775779 .. 9223372036854775780 ]/SB", string0);
      
      boolean boolean0 = range2.equals(range0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.ofLength(4294967291L);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65541L, (-9223372036854775808L));
      Long long0 = new Long((-9223372036854775808L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.205019898071907
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.of(127L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Range range3 = Range.ofLength(127L);
      range3.equals(range1);
      assertFalse(range3.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2683870415675123
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854772942L);
      Long long0 = new Long(9223372036854772942L);
      Range range1 = Range.ofLength(9223372036854772942L);
      Range range2 = Range.of(1L, 1L);
      assertFalse(range2.isEmpty());
      
      Long long1 = new Long(9223372036854772942L);
      range1.equals(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(9223372036854772966L);
      Long long0 = new Long((-128L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(154L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1870L);
      Long long0 = new Long(65549L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(4005L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Long long0 = new Long(65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 528L, (-2401L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65548L, 65548L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1354602073131
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      String string0 = range2.toString();
      //  // Unstable assertion: assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range range3 = range2.intersection(range0);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range1));
      
      range2.equals((Object) null);
      //  // Unstable assertion: assertNotSame(range2, range3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(509L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(9223372036854775806L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.269731579382638
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = 126L;
      Range range0 = Range.of(126L);
      Range range1 = Range.of(1L);
      Range.of(0L);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.intersection(range2);
      String string0 = "%&!w";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("%&!w", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %&!w into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), 194L);
      Range range1 = Range.of((-1862L), 194L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, (-9223372036854775808L));
      Long long0 = new Long((-9223372036854775808L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, (-9223372036854775808L));
      Long long0 = new Long((-9223372036854775808L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(855L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.5891119514278125
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(622L);
      Range range1 = Range.of((-400L), 9223372036854773227L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder(622L);
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854773228L, 622L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      long long0 = new Long((-1L));
      Long long1 = new Long((-1L));
      range0.equals((Object) null);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = (-3761L);
      Range range0 = Range.of((-3761L));
      range0.toString();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long((-128L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-1508L));
      Long long0 = new Long((-1508L));
      Long long1 = new Long((-1508L));
      Range range1 = Range.of((-2152L), (long) long0);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.691848233250198
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-731L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      Range range1 = Range.of((-2303L));
      range1.toString(range_CoordinateSystem0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Long long0 = new Long(4704L);
      range0.equals(long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.059202231024756
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.of((-88L));
      Range range0 = Range.ofLength(3L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775807 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-268L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(65535L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 506L, 4294967286L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2033773039059485
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      // Undeclared exception!
      try { 
        range1.complementFrom(linkedList1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Long long0 = new Long((-32768L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Long long0 = new Long((-32768L));
      range0.equals(long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long((-128L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.891722433292198
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(65534L);
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.7974304538187877
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(1621L);
      Range range1 = Range.ofLength(1373L);
      range1.isSubRangeOf(range0);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("$VALUES");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $VALUES into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.1341068345657535
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(3067L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ 3068 .. 3068 ]/RB", range_CoordinateSystem0);
      List<Range> list0 = new LinkedList<Range>();
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-32790L));
      Object object0 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.2068395473491833
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(9223372036854772942L, 9223372036854772942L);
      Range range1 = Range.of(9223372036854772942L);
      Range.Comparators.values();
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.063299192445036
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.endsBefore(range0);
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range range1 = Range.parseRange("[ 1 .. 0 ]/RB");
      assertTrue(range1.isEmpty());
      
      Long long0 = new Long(702L);
      Long long1 = new Long(702L);
      Long long2 = new Long((-459L));
      Long long3 = new Long(702L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-872L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -872 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 10486L, 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(276L);
      Long long0 = new Long(276L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.387932733505921
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-266L), 4294967305L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals("[ -265 .. 4294967305 ]/RB", string0);
      
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.9825592319476257
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.205866794988673
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.063391725062784
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list1);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.060362201498235
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Long long0 = new Long(9223372036854772942L);
      Range range0 = Range.ofLength(9223372036854772942L);
      Long long1 = new Long(688L);
      Long.compareUnsigned((-255L), 688L);
      range0.equals(long1);
      // Undeclared exception!
      try { 
        range0.split(9223372036854772942L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -5733 would make range [9223372036854772942 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long long0 = new Long(702L);
      Long long1 = new Long((-483L));
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.isEmpty();
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(9223372036854775794L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.7946485850575375
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Long long0 = new Long(9223372036854772942L);
      Range range0 = Range.ofLength(9223372036854772942L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(list0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      range0.complementFrom(linkedList2);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.9797520106127435
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.386970397351947
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(2361L);
      Range range1 = Range.of(range_CoordinateSystem0, (-2030L), (-2030L));
      Range range2 = Range.of(2361L);
      range2.isSubRangeOf(range1);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      range0.intersects(range1);
      assertSame(range0, range2);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1300L, 1300L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.891722433292198
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.of(127L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.897882787468633
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(4294967305L);
      range_Builder0.expandBegin(4294967305L);
      range_Builder0.expandBegin(4294967305L);
      Range range0 = range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Long long0 = new Long((-128L));
      range0.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.977443963220837
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Long long0 = new Long(1L);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      Long long1 = new Long((-1326L));
      // Undeclared exception!
      try { 
        Range.of((-1904L), (-1962L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.134006824564753
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(1656230L);
      Long long0 = new Long(688L);
      List<Range> list0 = range0.split(1656230L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      Long long1 = new Long(0L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.981638675931792
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Long long0 = new Long(9223372036854772942L);
      Range range0 = Range.of(9223372036854772942L, 9223372036854772942L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.split(1L);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(20439L);
      List<Range> list0 = range0.split(20464L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.5703506325889265
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967305L);
      Range range0 = range_Builder0.build();
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.794892785301738
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long long0 = new Long(702L);
      Long long1 = new Long((-483L));
      Range range1 = range_Builder0.build();
      List<Range> list0 = range1.complement(range0);
      assertSame(range1, range0);
      assertTrue(list0.contains(range1));
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = (-3304L);
      Range range0 = Range.of((-3304L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-1098L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1098L), 1478L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("U/eSO&}W}ZKA=urH}K", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse U/eSO&}W}ZKA=urH}K into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      boolean boolean1 = range0.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.980841609137595
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      long long1 = (-2510L);
      Range range1 = Range.of((-2510L));
      range0.isSubRangeOf(range1);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem1);
      range0.getEnd();
      long long2 = 1323L;
      Long long3 = new Long(1323L);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-451L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.3309091965907784
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long long0 = new Long((-632L));
      Range range0 = Range.of((-632L), (-128L));
      range0.toString(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ -632 .. -128 ]/0B", string0);
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-4125L));
      Range range1 = Range.of(range_CoordinateSystem0, (-4125L), 729L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.061012349587522
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(9223372036854772942L);
      Long long0 = new Long(9223372036854772942L);
      range0.getBegin();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.equals("");
      Range range1 = Range.of(9223372036854775807L);
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775807 .. -9223372036854775808 ]/SB", string0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      boolean boolean1 = range1.intersects(range0);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Range> linkedList2 = new LinkedList<Range>(linkedList0);
      range1.complementFrom(linkedList0);
      range1.iterator();
      long long1 = range1.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      range0.getEnd(range_CoordinateSystem0);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967295 .. 4294967294 ]/0B", string0);
      
      range0.getEnd();
      List<Range> list0 = range0.complement(range0);
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.getEnd();
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("{{}", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse {{} into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.complementFrom(linkedList1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.0620253808533504
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-9223372036854775808L), (-9223372036854775808L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.1375736500900357
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(9223372036854775805L, 9223372036854775805L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      boolean boolean1 = range0.endsBefore(range0);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-123L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.1351813606230103
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-1508L));
      Long long0 = new Long((-1508L));
      Long long1 = new Long((-1508L));
      Long long2 = new Long(2147483647L);
      Range range1 = Range.of((-4096L));
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      boolean boolean0 = range0.startsBefore(range1);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.689532269643912
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(215L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Long long0 = new Long(0L);
      range0.equals(long0);
      range0.toString();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split((-973L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long long0 = new Long((-641L));
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.89413587430213
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(62L);
      Range.ofLength(127L);
      range0.intersection(range0);
      String string0 = "length can not be negative";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("length can not be negative", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse length can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.5678136347030915
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2531L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long((-1430L));
      boolean boolean0 = range0.equals("org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
      assertFalse(boolean0);
      
      long long1 = range0.getEnd();
      assertEquals(2530L, long1);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getBegin();
      Long.getLong("L9>", (-128L));
      Long.min(755L, (-128L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("JG^Zr7ihj]<v]j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.JG^Zr7ihj]<v]j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.7955428394729185
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long long0 = new Long(702L);
      Range range1 = range_Builder0.build();
      range1.intersects(range0);
      range1.intersection(range0);
      boolean boolean0 = range0.endsBefore(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.5678136347030915
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(4294967305L);
      Range range0 = range_Builder0.build();
      range0.getBegin();
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(85L);
      long long0 = range0.getLength();
      assertEquals(85L, long0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.892740633623113
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      Long long1 = new Long((-1509L));
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      long long2 = range0.getEnd();
      assertTrue(long2 == long0);
      assertEquals((-128L), long2);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.4337150271040935
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractBegin((-8L));
      range_Builder1.copy();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-441L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.5688032438074955
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(4294967305L);
      range_Builder0.expandBegin(4294967305L);
      range_Builder0.expandBegin(4294967305L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4294967305L, long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L);
      Range.Builder range_Builder1 = new Range.Builder(127L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder2.copy();
      Long long0 = new Long(726L);
      Long long1 = new Long(9223372036854773235L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("f", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse f into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1677L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd((-4490L));
      long long1 = 0L;
      range_Builder1.expandBegin(0L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2405L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967305L);
      Range.Builder range_Builder1 = new Range.Builder(1608L);
      range_Builder1.expandBegin(4294967305L);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-267L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 9223372036854775779L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775779L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-459L));
      range_Builder0.shift(0L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long1 = (-4490L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-9223372036854772687L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854772687 would make range [4294967295 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2531L);
      Range range0 = range_Builder0.build();
      range0.spliterator();
      Long long0 = new Long(1L);
      Long.getLong("max cluster distance can not be negative");
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(989L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2326L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-1108L));
      range_Builder1.expandBegin((-1108L));
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2325L, long0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775068L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(9223372036854775068L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(9223372036854775068L);
      Range range0 = range_Builder2.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967305L);
      Range.Builder range_Builder1 = new Range.Builder(4294967305L);
      range_Builder0.expandBegin(1L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-268L), 2147483647L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2067L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -129 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.Builder range_Builder1 = new Range.Builder(1L);
      range_Builder0.expandBegin((-1532L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange("SB", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2361L, (-587L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-9223372036854775808L), 65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4294967305L;
      Range.Builder range_Builder0 = new Range.Builder(4294967305L);
      range_Builder0.expandBegin(4294967305L);
      // Undeclared exception!
      try { 
        Range.parseRange("UTF-8", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse UTF-8 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2431L, 2431L);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, 1L, 254L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
