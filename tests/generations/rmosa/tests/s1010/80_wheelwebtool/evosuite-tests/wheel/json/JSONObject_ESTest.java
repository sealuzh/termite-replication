/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 10:30:50 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.692069938160962
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(" of ", (Map) hashMap0);
      String string0 = "^cJ!GC";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("b", object0);
      JSONObject jSONObject2 = jSONObject1.put("^cJ!GC", (Object) "gettoString");
      jSONObject0.toString(118);
      Double double0 = new Double(0.0);
      JSONObject.valueToString(double0);
      JSONObject jSONObject3 = jSONObject0.put("^cJ!GC", (-2540));
      jSONObject0.put(" 7h5wA95[{ykq#6L", (-93.64));
      jSONObject2.put("\f", (-2197L));
      jSONObject2.put("java.lang.Double@0000000007", 0.0);
      jSONObject3.optLong(" 7h5wA95[{ykq#6L");
      try { 
        jSONObject1.getBoolean("{\n                                                                                                                      \"java.lang.String@0000000004\": null,\n                                                                                                                      \"java.lang.String@0000000005\": \"java.lang.String@0000000006\",\n                                                                                                                      \"java.lang.String@0000000003\": {}\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n                                                                                                                      \\\"java.lang.String@0000000004\\\": null,\\n                                                                                                                      \\\"java.lang.String@0000000005\\\": \\\"java.lang.String@0000000006\\\",\\n                                                                                                                      \\\"java.lang.String@0000000003\\\": {}\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.100963336162914
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = ",";
      jSONObject0.optDouble(",");
      JSONObject jSONObject1 = jSONObject0.put(",", (-654.191004));
      hashMap0.putIfAbsent(",", jSONObject0);
      JSONObject.getNames((Object) ",");
      JSONObject jSONObject2 = jSONObject0.put(",", 0L);
      jSONObject2.names();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('(');
      stringWriter1.append('(');
      stringWriter1.flush();
      jSONObject1.write(stringWriter1);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      hashMap0.replace((Object) null, jSONObject3);
      jSONObject1.getLong(",");
      int int0 = (-1247);
      jSONObject2.put(",", (-1247));
      jSONObject0.get(",");
      stringWriter0.append((CharSequence) "G;fEVgw=9W");
      JSONObject.quote("G;fEVgw=9W");
      JSONTokener jSONTokener0 = new JSONTokener("ecdK$*k8]g]MbI0");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ecdK$*k8]g]MbI0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Float.min(0.0F, 0.0F);
      int int0 = 51;
      int int1 = (-767);
      try { 
        JSONObject.valueToString(float0, 51, (-767));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Double.min((-831.85698168374), 0.0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      linkedList0.add((JSONObject) null);
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8845522008411448
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "vD`bAE:^S|1d\\7";
      JSONObject jSONObject0 = new JSONObject((Object) "vD`bAE:^S|1d\u0007");
      String string1 = "gettoHexString";
      JSONObject jSONObject1 = jSONObject0.put("vD`bAE:^S|1d\u0007", (-358L));
      Double double0 = new Double((-358L));
      jSONObject1.putOpt("gettoHexString", double0);
      jSONObject0.getLong("gettoHexString");
      jSONObject0.toString((-24668172), (-24668172));
      JSONObject.quote("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000102,\njava.lang.Byte@0000000103,\njava.lang.Byte@0000000104,\njava.lang.Byte@0000000105,\njava.lang.Byte@0000000106,\njava.lang.Byte@0000000107,\njava.lang.Byte@0000000108,\njava.lang.Byte@0000000109,\njava.lang.Byte@0000000110,\njava.lang.Byte@0000000111,\njava.lang.Byte@0000000112,\njava.lang.Byte@0000000113,\njava.lang.Byte@0000000114,\njava.lang.Byte@0000000115\n],\n\"java.lang.String@0000000052\": java.lang.Long@0000000053,\n\"java.lang.String@0000000084\": java.lang.Double@0000000085,\n\"java.lang.String@0000000035\": \"java.lang.Class@0000000036\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONObject.doubleToString(0.0);
      jSONObject0.toString((-24668172), (-24668172));
      String string2 = "7d65DwnT]/K,dn{\"c";
      try { 
        jSONObject0.getJSONArray("7d65DwnT]/K,dn{\"c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7d65DwnT]/K,dn{\\\"c\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.testValidity("wheel.json.JSONTokener");
      JSONObject.doubleToString((-2466.1));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null);
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject.quote("Be}<8=5?y,XSu`");
      HashMap<Boolean, JSONObject> hashMap1 = new HashMap<Boolean, JSONObject>(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-2466.1", (Map) hashMap1);
      Float float0 = new Float(0.0F);
      Float.min(0L, 1.0F);
      jSONObject0.put("^8c8", (Object) float0);
      double double0 = jSONObject1.getDouble("^8c8");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("[", "[");
      jSONObject0.toString(4, 5);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.optJSONArray("[");
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\t";
      JSONObject jSONObject1 = jSONObject0.put("\t", 208L);
      jSONObject1.optDouble("1dL:k##ujQ+yyJ", (double) 208L);
      jSONObject1.optInt("b!~/iI*9$Y3cs{*R", 92);
      jSONObject1.put("b!~/iI*9$Y3cs{*R", 208L);
      jSONObject0.getDouble("\t");
      JSONTokener jSONTokener0 = new JSONTokener("\t");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      Byte byte1 = new Byte((byte)91);
      Byte byte2 = new Byte((byte)10);
      Byte byte3 = new Byte((byte)14);
      Byte byte4 = new Byte((byte)42);
      String string0 = "] is not a JSONArray.";
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "] is not a JSONArray.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("] is not a JSONArray.", (-1247));
      try { 
        jSONObject0.getJSONObject("5o2V*kA<//z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5o2V*kA<\\//z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", 2166);
      boolean boolean0 = jSONObject0.isNull("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.clone();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("isputOpt");
      JSONObject.valueToString(linkedList0, 123, 123);
      JSONObject jSONObject1 = jSONObject0.put("isputOpt", (Object) "T&!pAkkov?Nigi/Pz");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.57613028340169
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "I";
      stringArray0[1] = "] is not a JSONArray.";
      stringArray0[2] = "to5S";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = jSONObject0.toString((int) (byte)10, (int) (byte)10);
      Short short0 = new Short((byte)10);
      Byte.toUnsignedInt((byte)39);
      JSONObject jSONObject1 = jSONObject0.append("I", short0);
      jSONObject0.optInt(stringArray0[0]);
      JSONObject jSONObject2 = jSONObject1.put("to5S", true);
      JSONObject.valueToString(stringArray0[0], (byte)10, 0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject3 = jSONObject0.put("I", (Collection) linkedList0);
      jSONObject2.optInt("{}", (int) (byte)10);
      jSONObject1.optLong("to5S", (long) 0);
      Boolean boolean0 = new Boolean("] is not a JSONArray.");
      jSONObject2.toString((int) (byte)10);
      jSONObject0.getBoolean("to5S");
      jSONObject1.optLong("Hp+q`,W?'D[Dt&Bt", (long) (byte)10);
      jSONObject3.toString((int) (byte)10);
      jSONObject3.toString((-380));
      JSONTokener jSONTokener0 = new JSONTokener(" 0kai;^LNDWpWoN%:");
      JSONTokener jSONTokener1 = new JSONTokener("{\n          \"java.lang.String@0000000003\": [],\n          \"java.lang.String@0000000005\": java.lang.Boolean@0000000006\n}");
      JSONObject jSONObject4 = new JSONObject(jSONTokener1);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      Short short0 = new Short((short)2011);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = jSONObject0.optString("getdoubleToString", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(97);
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                                 \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n                                                                                                 \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(41, (double) 9);
      try { 
        jSONArray1.getBoolean(9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[9] is not a Boolean.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5104605475108208
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Double double0 = new Double(0.0);
      Double.max(Double.NaN, 0.0);
      hashMap0.put((Float) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.quote(",\n");
      // Undeclared exception!
      try { 
        jSONObject0.toString(27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Li4");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {Li4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(239);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{V.:91+>-N|!\"Oyti _");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {V.:91+>-N|!\"Oyti _
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject.getNames((Object) "]ieimDD-_Nh4ab%VIX");
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(5716);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "kVt@m>b=sA?1-ktNq";
      jSONObject0.put("kVt@m>b=sA?1-ktNq", false);
      Integer integer0 = new Integer((-1136));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("va", (Collection) linkedList0);
      // Undeclared exception!
      jSONObject1.toString(4743, 3671);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("0");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = "0";
      stringArray0[4] = "0";
      stringArray0[5] = "0";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Double double0 = new Double((-5660.779));
      JSONObject jSONObject1 = jSONObject0.putOpt("islowestOneBit", double0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("0", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject2.opt("0");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "&pK#";
      String[] stringArray0 = JSONObject.getNames((Object) "&pK#");
      JSONObject jSONObject0 = new JSONObject("&pK#", stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(59);
      JSONObject.getNames((Object) null);
      try { 
        Long.valueOf("&pK#", (-944));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -944 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("|2_8^!N;CRR", 1125);
      jSONObject1.keys();
      jSONObject1.optDouble("|2_8^!N;CRR", (double) 1125);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("|2_8^!N;CRR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |2_8^!N;CRR
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("int", 1855L);
      long long0 = jSONObject0.optLong("int");
      assertEquals(1855L, long0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5906757807316017
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "Nr5.+H]4qJZ";
      stringArray0[1] = "Nr5.+H]4qJZ";
      stringArray0[2] = "Nr5.+H]4qJZ";
      JSONObject jSONObject0 = new JSONObject("Nr5.+H]4qJZ", stringArray0);
      JSONObject.quote("cop");
      JSONObject jSONObject1 = jSONObject0.append("JSONArray[", jSONArray0);
      JSONObject jSONObject2 = jSONObject1.append("cop", jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener("\"cop\"");
      JSONObject.valueToString(jSONObject2, (-1908), 530);
      JSONObject jSONObject3 = jSONObject2.append("Nr5.+H]4qJZ", jSONObject1);
      JSONObject jSONObject4 = jSONObject3.accumulate("JSONArray[", "Nr5.+H]4qJZ");
      assertSame(jSONObject3, jSONObject4);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Map) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.append("Nu\"I", jSONArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Nu\"I");
      StringWriter stringWriter2 = stringWriter1.append('6');
      Writer writer0 = jSONObject0.write(stringWriter2);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "va";
      jSONObject0.put("kVt@m>b=sA?1-ktNq", true);
      Integer integer0 = new Integer((-1144));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("va", (Collection) linkedList0);
      try { 
        jSONObject1.getDouble("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1210.7346F));
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      Float.min((-1210.7346F), (-3327.22F));
      Double.min((-1210.7346F), 1150.94087);
      Byte byte0 = new Byte((byte) (-17));
      jSONObject0.putOpt("for", float0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble("for");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("for");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of for
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.18765267506544
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(36);
      JSONObject jSONObject1 = jSONObject0.put("f=q'D{kW{J~d;", (Object) double0);
      double double1 = jSONObject1.optDouble("f=q'D{kW{J~d;");
      assertEquals(36.0, double1, 0.01);
      
      JSONArray jSONArray1 = jSONArray0.put(36, false);
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray0);
      assertEquals(37, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2000640963029916
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject.quote("_rVTA;/X!n,oExal");
      JSONObject jSONObject0 = new JSONObject((Object) "\"_rVTA;/X!n,oExal\"");
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject1 = jSONObject0.put("\"_rVTA;/X!n,oExal\"", (Map) hashMap0);
      jSONObject1.toString(12, 12);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = ".";
      JSONObject jSONObject0 = new JSONObject((Object) ".");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) ".");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5898403588435481
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ps{MU,Hg}";
      stringArray0[1] = "true";
      stringArray0[2] = "GO2lPBC";
      stringArray0[3] = ".cA$4q+>j!,}t*";
      stringArray0[5] = "ctP}0|";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      JSONObject.quote("to");
      Long long0 = new Long((-1L));
      jSONObject1.append("iEyHi=?B~r/2*", long0);
      Short short0 = new Short((short) (-10));
      jSONObject2.put("Ps{MU,Hg}", true);
      JSONObject jSONObject3 = jSONObject2.append(".cA$4q+>j!,}t*", short0);
      jSONObject3.toString((-729), 1126);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean((String) null, true);
      try { 
        jSONObject0.getJSONObject("|2_8^N;CaR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|2_8^N;CaR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(3679.9F);
      Float float1 = new Float((-765.889135));
      jSONObject0.names();
      Object object0 = jSONObject0.opt("0");
      assertNull(object0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(42);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float(1.0F);
      hashMap0.put(jSONObject0, float0);
      JSONObject jSONObject1 = jSONObject0.put("A*mD@2gbOxNxgtwA", (double) 1.0F);
      Boolean boolean0 = new Boolean("A*mD@2gbOxNxgtwA");
      jSONObject1.optInt("A*mD@2gbOxNxgtwA");
      try { 
        jSONObject1.getJSONObject("<]GP||~%s*paw0TVxD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<]GP||~%s*paw0TVxD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.093308880176036
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Missing value";
      stringArray0[1] = "Missing value";
      stringArray0[2] = "Missing value";
      JSONObject jSONObject0 = new JSONObject("Missing value", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (-666));
      jSONObject1.toString();
      JSONObject.getNames(jSONObject1);
      boolean boolean0 = jSONObject1.has("Missing value");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = JSONObject.quote("l@<$/G");
      assertEquals("\"l@<$/G\"", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 1493, 1493);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONObject$1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "[";
      JSONObject jSONObject1 = jSONObject0.put("[", false);
      try { 
        jSONObject1.getLong("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf((String) null);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("isintern");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = JSONObject.valueToString(",:]}/\"[{;=#");
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Y1?bnxw/o&L6AnBj", (Object) linkedList0);
      jSONArray0.optJSONObject(34);
      jSONObject0.getString("Y1?bnxw/o&L6AnBj");
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{}", false);
      jSONObject1.optJSONArray("{}");
      try { 
        jSONObject1.append("{}", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(42);
      HashMap<JSONObject, Float> hashMap1 = new HashMap<JSONObject, Float>(42);
      HashMap<JSONObject, Float> hashMap2 = new HashMap<JSONObject, Float>(42);
      HashMap<JSONObject, Float> hashMap3 = new HashMap<JSONObject, Float>(114);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((float) 114);
      Float float1 = new Float(1.0F);
      Float float2 = new Float((double) 1.0F);
      hashMap2.put((JSONObject) null, float2);
      Float float3 = new Float((-511.79050065082));
      hashMap3.put((JSONObject) null, float3);
      JSONObject jSONObject2 = jSONObject0.put("A*mD@2gbOxNxgtwA", 422.6160340107);
      Float float4 = new Float((double) 114);
      Float.sum(42, 0.0F);
      Float.max((-1.0F), 2257.0F);
      hashMap1.put((JSONObject) null, float1);
      jSONObject2.accumulate("A*mD@2gbOxNxgtwA", (Object) null);
      jSONObject0.getJSONArray("A*mD@2gbOxNxgtwA");
      JSONObject.quote((String) null);
      try { 
        jSONObject2.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(361);
      HashMap<JSONObject, Float> hashMap1 = new HashMap<JSONObject, Float>(4557);
      HashMap<JSONObject, Float> hashMap2 = new HashMap<JSONObject, Float>(42);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) jSONArray0);
      double double0 = jSONObject0.optDouble("", 363.0);
      assertEquals(363.0, double0, 0.01);
      
      jSONObject0.getJSONArray("");
      jSONObject1.length();
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "] is not a Boolean.";
      jSONObject0.isNull("] is not a Boolean.");
      Double double0 = new Double(652.3994);
      Object object0 = new Object();
      Double.sum(0.0, 652.3994);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      jSONObject1.accumulate("ad", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertEquals(0, jSONObject1.length());
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("", (-3161.549));
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Object object0 = new Object();
      int int0 = 3779;
      JSONObject.valueToString(hashMap0, 58, 3779);
      int int1 = 48;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{}");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "{}", 92, 92);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(15, 15);
      String string0 = JSONObject.valueToString(jSONObject0, 372, 725);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.182036069448834
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONTokener", (Object) null);
      Float float0 = new Float((-891.55F));
      jSONObject1.append("Expected a ':' after a key", float0);
      JSONTokener jSONTokener0 = new JSONTokener("gettoString");
      String string0 = jSONObject1.toString((-1449), 2447);
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.182036069448834
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("", "");
      JSONObject jSONObject1 = jSONObject0.append("gettoString", "gettoString");
      jSONObject1.toString(693, (-1925));
      JSONTokener jSONTokener0 = new JSONTokener("C>(");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of C>(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(44);
      jSONArray0.optDouble(44, (-2375.75238759));
      jSONArray0.optInt(0, 160);
      Byte byte0 = new Byte((byte)81);
      JSONArray jSONArray1 = jSONArray0.put((Object) byte0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      jSONArray1.toJSONObject(jSONArray0);
      jSONArray0.put(1L);
      JSONObject.numberToString(byte0);
      jSONObject0.getInt("java.lang.Byte@0000000006");
      long long0 = jSONObject0.getLong("java.lang.Byte@0000000006");
      assertEquals(81L, long0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("RPDvm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RPDvm\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.03198884818378
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = JSONObject.quote("_rfTA;/f5noExak");
      assertEquals("\"_rfTA;/f5noExak\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "_rfTA;/f5noExak");
      boolean boolean0 = jSONObject0.optBoolean("\"_rfTA;/f5noExak\"");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("va", false);
      jSONObject1.remove("va");
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 27;
      // Undeclared exception!
      try { 
        linkedList0.subList((-1), 27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clear();
      jSONObject0.remove("wheel.json.JSONTokener");
      try { 
        jSONObject0.getJSONObject("<J%caRi>eL560]8.(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<J%caRi>eL560]8.(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("aB0JL_{q\u0000q..>K", hashMap0);
      String string0 = jSONObject0.getString("aB0JL_{q\u0000q..>K");
      String string1 = jSONObject1.optString("aB0JL_{q\u0000q..>K");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)2011);
      jSONObject0.append("getdoubleToString", short0);
      String string0 = jSONObject0.optString("getdoubleToString", (String) null);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(42);
      HashMap<JSONObject, Float> hashMap1 = new HashMap<JSONObject, Float>(42);
      HashMap<JSONObject, Float> hashMap2 = new HashMap<JSONObject, Float>(42);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((float) 42);
      Float float1 = new Float(1.0F);
      Float float2 = new Float((double) 1.0F);
      String string0 = jSONObject0.optString("sR3OBT~Q", "sR3OBT~Q");
      assertEquals("sR3OBT~Q", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray2 = new JSONArray();
      String string0 = jSONObject0.optString("it");
      assertEquals("", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("SyEnM5rzm~FE", "SyEnM5rzm~FE");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.getInt("SyEnM5rzm~FE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SyEnM5rzm~FE\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-3131.254925));
      jSONObject0.putOpt("t>", double0);
      jSONObject0.getInt("t>");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Dgspos7[;vPyd.<}";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("Dgspos7[;vPyd.<}", 2313);
      long long0 = jSONObject1.getLong("Dgspos7[;vPyd.<}");
      assertEquals(2313L, long0);
      
      Boolean boolean0 = new Boolean("Dgspos7[;vPyd.<}");
      jSONObject0.putOpt("Dgspos7[;vPyd.<}", boolean0);
      jSONObject1.toString();
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      Boolean boolean1 = new Boolean(stringArray0[1]);
      Boolean boolean2 = new Boolean(false);
      boolean boolean3 = jSONObject0.getBoolean("Dgspos7[;vPyd.<}");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", 3824.00847181);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float.min((-1711.315F), 0.0F);
      Float float0 = new Float(1.0F);
      JSONObject.testValidity((Object) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2349;
      try { 
        jSONArray0.getJSONObject(2349);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2349] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("[]", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(36);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Y?bnxw/o&L6AnBj", (Object) "Y?bnxw/o&L6AnBj");
      jSONObject1.optDouble("Y?bnxw/o&L6AnBj", (-2212.0));
      try { 
        jSONObject0.getJSONArray("Y?bnxw/o&L6AnBj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y?bnxw/o&L6AnBj\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      HashMap<JSONObject, JSONObject> hashMap1 = new HashMap<JSONObject, JSONObject>();
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("KHCXCZFMvL}", (Object) "{}");
      jSONObject0.toString();
      HashMap<JSONObject, Float> hashMap2 = null;
      try {
        hashMap2 = new HashMap<JSONObject, Float>((-2014));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2014
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(727);
      hashMap0.put((JSONObject) null, (JSONObject) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONArray0.put(false);
      double double0 = jSONObject0.optDouble("getsubstring", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      JSONArray jSONArray3 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray3.length());
      assertNotNull(jSONArray3);
      assertNotSame(jSONArray3, jSONArray2);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (-2388L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.optInt((String) null, 125);
      JSONTokener jSONTokener0 = new JSONTokener(";[T/O13]f");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ;[T/O13]f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-475.68808061348));
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(float0, biFunction0);
      JSONObject jSONObject1 = jSONObject0.put("kVt@m>b=sA?1-ktNq", false);
      Integer integer0 = new Integer((-1136));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("va", (Collection) linkedList0);
      Object object0 = jSONObject1.get("kVt@m>b=sA?1-ktNq");
      assertEquals(false, object0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{.}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {.}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 1L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("LbGE8O>", "LbGE8O>");
      jSONObject1.accumulate("LbGE8O>", jSONObject0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[11];
      stringArray0[0] = " r5.+H]4q!Z";
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 3824.00847181);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"\"", (Object) "");
      JSONObject jSONObject1 = jSONObject0.accumulate("\"\"", "");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float0 = new Float((-466.02));
      Double double0 = new Double((-466.02));
      Double.max((-767.21), (-767.21));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Float) null, double0);
      boolean boolean0 = jSONObject0.optBoolean("Expected a ':' after a key", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.values();
      jSONObject0.optInt("D");
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("gettoJSONArray", "gettoJSONArray");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("gettoJSONArray", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(42);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((float) 42);
      hashMap0.put(jSONObject0, float0);
      JSONObject.quote((String) null);
      jSONObject0.put("A*mD@2gbOxNxgtwA", (-1.0));
      assertEquals(1, jSONObject0.length());
      
      Float float1 = new Float((float) 42);
      double double0 = jSONObject0.getDouble("A*mD@2gbOxNxgtwA");
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("|2_8^!N;CRR", 2166);
      try { 
        jSONObject0.getJSONObject("|2_8^!N;CRR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|2_8^!N;CRR\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-769.36348));
      try { 
        jSONObject0.append((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 42;
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(42);
      HashMap<JSONObject, Float> hashMap1 = new HashMap<JSONObject, Float>(42);
      HashMap<JSONObject, Float> hashMap2 = new HashMap<JSONObject, Float>(114);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      String string0 = JSONObject.quote("");
      String string1 = JSONObject.valueToString(hashMap0, (-646), (-114));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0, (-1325), 44);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(",", ",");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.quote("2o-M44}");
      assertEquals("\"2o-M44}\"", string0);
      
      jSONObject0.toString((-3463), (-3463));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      hashMap0.put((Float) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(1323, 1323);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = new Integer(1048);
      String string0 = JSONObject.valueToString(integer0, 1048, 1048);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("sum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sum\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.018706115735962
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.quote("_rfTA;/f5noExak");
      assertEquals("\"_rfTA;/f5noExak\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("hhA*Ze@");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("joi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"joi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote("Unclosed comment");
      assertEquals("\"Unclosed comment\"", string0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(3);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, "vIE$!U7", biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0308765011314998
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Float.min(0.0F, 0.0F);
      Float float0 = new Float(0.0F);
      Float.max(2297.4456F, 134.0F);
      String string0 = JSONObject.quote("u_rfTX;/f5noEx2k");
      assertEquals("\"u_rfTX;/f5noEx2k\"", string0);
      
      JSONObject.numberToString(float0);
      JSONObject jSONObject0 = new JSONObject((Object) "u_rfTX;/f5noEx2k");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.8471728851442626
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject.quote("_rfTA;/f5noExak");
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float(0.0);
      hashMap0.put(float0, "\"_rfTA;/f5noExak\"");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONObject("isshortValue");
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("] is not a number.", 0);
      String string0 = "i!`=#Rr2";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "i!`=#Rr2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.quote("l@<G/G");
      assertEquals("\"l@<G/G\"", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.quote("$/cX7ir1ErA\"4T}");
      assertEquals("\"$/cX7ir1ErA\\\"4T}\"", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(3679.9F);
      Float float1 = new Float((-632.4791F));
      jSONObject0.optInt("b", (-1182));
      Float float2 = new Float((double) 3679.9F);
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(".", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("G_w}4;wl&5.rR");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of G_w}4;wl&5.rR
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("h\"L*,k&", (-403L));
      assertEquals((-403L), long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("|P3rnNYz;AL1[4~ i", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject.testValidity(hashMap0);
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Double double0 = new Double((-339.60219592992866));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, double0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("L;/uu8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L;/uu8\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
