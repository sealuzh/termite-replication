/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 10:15:33 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.function.Consumer;
import org.apache.derby.iapi.services.locks.LockFactory;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.locks.ConcurrentPool;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "selectalter mteialized eiew";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.mutatesStructure("selectalter mteialized eiew = 'selectalter mteialized eiew'");
      SQLUtil.normalize("*/", true);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(",u,^", "truncatex", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("M|EE'Z?573)", defaultDatabase0);
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("M|EE'Z?573)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'M|EE'Z?573)'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("inner", true, "inner", "inner");
      dBCheckConstraint0.setDoc("inner");
      SQLUtil.constraintName(dBCheckConstraint0);
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 1.0;
      streamTokenizer0.pushBack();
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|eUlete#eUists=", defaultDBTable0, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T(";
      stringArray0[1] = "xJ<i,1";
      stringArray0[2] = "xJ<i,1";
      stringArray0[3] = "xJ<i,1";
      stringArray0[4] = "6H";
      stringArray0[5] = "xJ<i,1";
      String string0 = SQLUtil.join("6H", "T(", stringArray0, "xJ<i,1", "xJ<i,1", stringArray0);
      assertEquals("6H join xJ<i,1 as xJ<i,1 on T(.T( = xJ<i,1.T( and T(.xJ<i,1 = xJ<i,1.xJ<i,1 and T(.xJ<i,1 = xJ<i,1.xJ<i,1 and T(.xJ<i,1 = xJ<i,1.xJ<i,1 and T(.6H = xJ<i,1.6H and T(.xJ<i,1 = xJ<i,1.xJ<i,1", string0);
      
      DBSchema dBSchema0 = new DBSchema("xJ<i,1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xJ<i,1", dBSchema0);
      defaultDBTable0.getColumns();
      DBDataType dBDataType0 = DBDataType.getInstance((-2463), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("xJ<i,1", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      tableContainer0.getTable(" (");
      DBDataType dBDataType0 = DBDataType.getInstance(45, " (");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0, (Integer) null);
      dBDataType0.isNumber();
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        defaultDBColumn0.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("", "updatecxeate unique index", object0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("B8n", true, "B8n", "B8n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("B8n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "B8n";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "B8n", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("B8n", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.toString();
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(dBTable0.getName());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "exec";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "delete";
      stringArray1[1] = "XMLSerialize";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, stringArray0, "XMLSerialize", "XMLSerialize", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|eUlete#eUists=");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|eUlete#eUists=", defaultDBTable0, (DBDataType) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("|eUlete#eUists=, |eUlete#eUists=", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "gOJbj";
      stringArray0[1] = "gOJbj";
      stringArray0[2] = "gOJbj";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("insert", true, defaultDBTable0, "gOJbj");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select intose_ect intogroup by");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("execexec%4].yvt=>a1");
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("alter indexalter tabletgppvz}qx?", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\"", (DBSchema) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(d";
      stringArray0[1] = "execexec%4].yvt=>a1";
      stringArray0[2] = "\"";
      stringArray0[3] = "drop tableexec%4].yvt=>a1";
      stringArray0[4] = "\"";
      stringArray0[5] = "\"";
      stringArray0[6] = "execexec%4].yvt=>a1";
      stringArray0[7] = "alter indexalter tabletgppvz}qx?";
      stringArray0[8] = "execexec%4].yvt=>a1";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.7957596077518445
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = SQLUtil.normalize("Vt%>j**+Q9k{%A0%", true);
      assertEquals("Vt % > j * * + Q9k { % A0 %", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", true, "Vt%>j**+Q9k{%A0%", "resultSetType");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" NULL\" CHECK resultSetType", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gOJbj");
      MockFileWriter mockFileWriter0 = new MockFileWriter("gOJbj");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("gOJbj", objectArray0);
      String[] stringArray0 = new String[6];
      stringArray0[5] = "gOJbj";
      stringArray0[1] = "gOJbj";
      stringArray0[2] = "gOJbj";
      stringArray0[5] = "gOJbj";
      stringArray0[4] = "gOJbj";
      stringArray0[5] = "gOJbj";
      SQLUtil.join("gOJbj", "gOJbj", stringArray0, "gOJbj", (String) null, stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "gOJbj join gOJbj as null on gOJbj.null = null.null and gOJbj.gOJbj = null.gOJbj and gOJbj.gOJbj = null.gOJbj and gOJbj.null = null.null and gOJbj.gOJbj = null.gOJbj and gOJbj.gOJbj = null.gOJbj";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(stringArray0[3], stringArray0, "gOJbj join gOJbj as null on gOJbj.null = null.null and gOJbj.gOJbj = null.gOJbj and gOJbj.gOJbj = null.gOJbj and gOJbj.null = null.null and gOJbj.gOJbj = null.gOJbj and gOJbj.gOJbj = null.gOJbj", stringArray0[3], stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1y?");
      DBSchema dBSchema0 = new DBSchema("se_ect intogroup by");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("X5A7_kdc", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1y?";
      stringArray0[1] = "drop tablealter talegpvz}qx?";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop tablealter talegpvz}qx?", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop tablealter talegpvz}qx?", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean.valueOf(":DQ");
      SQLUtil.normalize("-- ERROR page ", false);
      Integer integer0 = RawTransaction.COMMIT;
      assertEquals(0, (int)integer0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "A CallableStatement was declared, but no call to registerOutParameter(1, <some type>) was made.";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("A CallableStatement was declared, but no call to registerOutParameter(1, <some type>) was made.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<some type>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.469384931184183
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SQLUtil.join("xJ<i,1", "xJ<i,1", stringArray0, "xJ<i,1", "xJ<i,1", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XiEa-$zqEsk:;C55Ap");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" WHERE NOT(", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.getReferrers();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis((-25L));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLUtil.normalize("//", false);
      String string0 = "Ngx&{?";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "//");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = "update";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, defaultDBTable0, "update");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) stringBuilder1, 57, 1651);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 57, end 1651, s.length() 2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getIndexes();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cxe\"ate ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "write";
      stringArray0[1] = "cxe\"ate ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "write", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("cxe\"ate ", true, dBUniqueConstraint0);
      String string0 = SQLUtil.ownerDotComponent(dBUniqueIndex0);
      assertEquals("cxe\"ate .cxe\"ate ", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*";
      stringArray0[1] = "*";
      stringArray0[2] = "*";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "*", true, stringArray0);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue(stringBuilder0);
      Integer integer0 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        DBDataType.getInstance("create materialized view");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("=", defaultDBTable0, (DBDataType) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("inner", true, "inner", "inner");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "inner";
      stringArray0[1] = "inner";
      stringArray0[2] = "inner";
      stringArray0[3] = "inner";
      stringArray0[4] = "";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "inner";
      stringArray1[1] = "inner";
      stringArray1[2] = "";
      stringArray1[3] = "inner";
      stringArray1[4] = "inner";
      stringArray1[5] = "";
      stringArray1[6] = "inner";
      String string0 = SQLUtil.innerJoin("inner", stringArray0, "Z>#:ks3On516!8-", "inner", stringArray1);
      assertEquals("Z>#:ks3On516!8- as inner on inner.inner = inner.inner and inner.inner = inner.inner and inner.inner = inner. and inner.inner = inner.inner and inner. = inner.inner", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder((CharSequence) "create materialized view");
      StringBuilder stringBuilder2 = stringBuilder0.append(0L);
      StringBuilder stringBuilder3 = stringBuilder2.append(3413.1F);
      DBDataType dBDataType0 = DBDataType.getInstance((-26587893), "j^;F}=5");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("HSQLDB", (DBTable) null, dBDataType0, integer0, integer1);
      Integer integer2 = new Integer((-26587893));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("deleteq#bq!<b", (DBTable) null, dBDataType0, integer2);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder3);
      assertEquals("03413.1J^;F}=5(2,1)", stringBuilder3.toString());
      assertEquals("03413.1J^;F}=5(2,1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("left", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "se_ect ibntogroup by";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      double double0 = 0.75;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2, "Cx_(<uK)>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select intogroup by");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      LinkedList<DBColumn> linkedList1 = new LinkedList<DBColumn>();
      linkedList1.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList1);
      assertEquals("", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "executealter";
      stringArray0[1] = "executealter";
      stringArray0[2] = "executealter";
      stringArray0[3] = "executealter";
      stringArray0[4] = "executealter";
      stringArray0[5] = "executealter";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "executealter", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("executealter", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "org.apache.derby.impl.sql.execute.DropViewConstantAction", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (executealter, executealter, executealter, executealter, executealter, executealter)", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9971762968966938
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = SQLUtil.normalize("//", false);
      assertEquals("/ /", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "HmS";
      stringArray0[1] = "/ /";
      stringArray0[2] = "HmS";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("43X97.U", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (HmS, / /, HmS) REFERENCES null(HmS, / /, HmS)", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.7887666007588374
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLUtil.normalize("6EdGOdu hbto87/+", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("6EdGOdu hbto87/+", defaultDBTable0, 9, "e?t");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0951521981483863
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("2^K89");
      DBSchema dBSchema0 = new DBSchema("J@:7{oVz7f!IM>@", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2^K89", dBSchema0);
      String[] stringArray0 = new String[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6e");
      stringArray0[0] = "J@:7{oVz7f!IM>@";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("6e", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      dBSchema0.equals((Object) null);
      dBSchema0.setName("create materialized view");
      DBDataType dBDataType0 = DBDataType.getInstance((-577917647), "J@:7{oVz7f!IM>@");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("J@:7{oVz7f!IM>@", defaultDBTable0, dBDataType0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBColumn0.getForeignKeyConstraint();
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint1.setDeleteRule(fKChangeRule0);
      dBSchema0.setName("drop index");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint1, nameSpec0);
      SQLUtil.normalize("create materialized view", false);
      DBForeignKeyConstraint dBForeignKeyConstraint2 = defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.substituteMarkers("create unique index", "J@:7{oVz7f!IM>@", dBForeignKeyConstraint2);
      NameSpec nameSpec1 = NameSpec.NEVER;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)82;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      PrintWriter printWriter0 = mockPrintWriter0.append('L');
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = SQLUtil.normalize("r+7-vxX.u`7", false);
      assertEquals("r + 7 - vxX.u ` 7", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[28];
      stringArray0[0] = "gOJbj";
      stringArray0[2] = "gOJbj";
      stringArray0[3] = "gOJbj";
      stringArray0[4] = "inner";
      stringArray0[5] = "gOJbj";
      stringArray0[6] = "gOJbj";
      stringArray0[7] = "gOJbj";
      stringArray0[8] = "gOJbj";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "gOJbj", false, stringArray0);
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
      
      Boolean.valueOf("inner");
      String string1 = SQLUtil.join((String) null, "gOJbj", stringArray0, "6`cn|^1RJE", "gOJbj", stringArray0);
      assertEquals("6`cn|^1RJE as gOJbj on gOJbj.gOJbj = gOJbj.gOJbj and gOJbj.null = gOJbj.null and gOJbj.gOJbj = gOJbj.gOJbj and gOJbj.gOJbj = gOJbj.gOJbj and gOJbj.inner = gOJbj.inner and gOJbj.gOJbj = gOJbj.gOJbj and gOJbj.gOJbj = gOJbj.gOJbj and gOJbj.gOJbj = gOJbj.gOJbj and gOJbj.gOJbj = gOJbj.gOJbj and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null and gOJbj.null = gOJbj.null", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String[] stringArray1 = new String[2];
      stringArray1[0] = ".h3a";
      stringArray1[1] = ".h3a";
      // Undeclared exception!
      try { 
        SQLUtil.join("xJ<i,1", "xJ<i,1", stringArray0, "xJ<i,1", ".h3a", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = SQLUtil.normalize("FrLQ:KA(?L{0f&", true);
      assertEquals("FrLQ : KA (? L { 0f &", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("T(");
      SQLUtil.addRequiredCondition("T(", stringBuilder0);
      assertEquals("T( and T(", stringBuilder0.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "INSERT INTO SYSTEM_LOB_STREAM VALUES(";
      stringArray0[1] = "INSERT INTO SYSTEM_LOB_STREAM VALUES(";
      stringArray0[2] = "INSERT INTO SYSTEM_LOB_STREAM VALUES(";
      stringArray0[3] = "INSERT INTO SYSTEM_LOB_STREAM VALUES(";
      stringArray0[4] = "INSERT INTO SYSTEM_LOB_STREAM VALUES(";
      stringArray0[5] = "INSERT INTO SYSTEM_LOB_STREAM VALUES(";
      stringArray0[6] = "INSERT INTO SYSTEM_LOB_STREAM VALUES(";
      SQLUtil.renderColumnListWithTableName("INSERT INTO SYSTEM_LOB_STREAM VALUES(", stringArray0);
      SQLUtil.parseColumnTypeAndSize("/");
      DBSchema dBSchema0 = new DBSchema("INSERT INTO SYSTEM_LOB_STREAM VALUES(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("INSERT INTO SYSTEM_LOB_STREAM VALUES(", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("bVa7h:", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = SQLUtil.normalize("X,", true);
      assertEquals("X,", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" ADD ", false, "ISO8859_1", "UNPl2");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \" ADD \" ", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema("cxeate ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet", dBSchema0);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet WHERE ", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      ConcurrentPool concurrentPool0 = new ConcurrentPool();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      constraintDescriptorList0.forEach(consumer0);
      dataDictionaryImpl0.lockFactory = (LockFactory) concurrentPool0;
      constraintDescriptorList0.add((Object) dataDictionaryImpl0);
      ConstraintDescriptorList constraintDescriptorList1 = dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.derby.impl.sql.catalog.DataDictionaryImpl cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      byte[] byteArray0 = new byte[1];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2129), "update");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")r", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("org.h2.command.ddl.DropFunctionAlias");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("org.h2.command.ddl.DropFunctionAliasUPDATE(0)", stringBuilder0.toString());
      
      Random.setNextRandom((-83389486));
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ")r", false, (String[]) null);
      StringBuilder stringBuilder1 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "oun (1B.";
      String string1 = "W\"hwc";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "W\"hwc";
      stringArray0[1] = "oun (1B.";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("oun (1B.", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      int int0 = 196;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(196, (CharSequence) "oun (1B.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 196
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderColumnListWithTableName("execunaligned setle", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.removeComments("");
      StringBuilder stringBuilder1 = new StringBuilder();
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("COUNT(*)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("se_ect intogroup by");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog se_ect intogroup by", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5280883009539776
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "|<";
      String string0 = SQLUtil.join("|<", (String) null, stringArray0, "|<", "|<", stringArray0);
      assertEquals("|< join |< as |< on null.|< = |<.|<", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (|<)", string1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("exec");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(" not set and ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(46, "T(");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("T(", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(" not set and T(", stringBuilder0.toString());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("X0Y25.S", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selectvt%>j*+q]9k{%a0%", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1222), "selectvt%>j*+q]9k{%a0%");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("X0Y25.S", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("SELECTVT%>J*+Q]9K{%A0%", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer(1672);
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop tabledelete", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      assertEquals(3, (int)integer1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|eUlete#eUists=", defaultDBTable0, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("=", defaultDBTable0, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[11];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|eUlete#eUists=");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|eUlete#eUists=", defaultDBTable0, (DBDataType) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "|eUlete#eUists=", true, "|eUlete#eUists=");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("|eUlete#eUists= NOT NULL", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "\"hI;8ErV? ";
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\"hI;8ErV? ");
      int int0 = (-993);
      DBDataType.getInstance((-993), "eit");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "\"hI;8ErV? ", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "No JDBC URL specified", true, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"No JDBC URL specified\" ", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tablecallpos in");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create tablecallpos in", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \"create tablecallpos in\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.945928577776465
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.normalize("6EdGOtu Shbto87/+", true);
      assertEquals("6EdGOtu Shbto87 / +", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6EdGOtu Shbto87 / +";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " (", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" (\" PRIMARY KEY (6EdGOtu Shbto87 / +)", string1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.7786655906578275
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLUtil.normalize("Vt%>j**+Q9k{%A0%", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Vt%>j**+Q9k{%A0%");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "xJ<i,1", (String) null, stringArray0);
      assertEquals("xJ<i,1 as null on null.null = null.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xJ<i,1 as null on null.null = null.null");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " on ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("truncategojbj");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("Ngx&{?", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = SQLUtil.normalize("}Z:W)ku(4'1j)d ", false);
      assertEquals("} Z : W) ku (4  '1j)d '", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("T(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: T(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.join("'HASH'", "vt % > j * * + q9k ", stringArray0, " join ", "'HASH'", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("insert", "insert", (String[]) null, "insert", "insert", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(" join ", (String[]) null, "vt % > j *Y * + q9k ", "vt % > j *Y * + q9k ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.7786655906578275
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.normalize("Vt%>j**+Q9k{%A0%", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-13);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Vector<String> vector0 = new Vector<String>();
      DBCatalog dBCatalog0 = new DBCatalog("Vt % > j * * + Q9k { % A0 %");
      dBCatalog0.getSchema("alter materialized viewuh^tc=abx9vua&dr*");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("P\"B]vN5w", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "execunaligned setle", stringArray0);
      assertEquals(" as execunaligned setle on ", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("drop index", dBCatalog0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "execunaligned setle", versionNumber0);
      defaultDatabase0.getTable("*gb", false);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = SQLUtil.normalize("SDI,\"!", false);
      assertEquals("SDI, \"!\"", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = SQLUtil.normalize("HEBx!1eQ4s[;[i}&p2", true);
      assertEquals("HEBx ! 1eQ4s [ ; [ i } & p2", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet", true);
      assertEquals("org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("!l_N#}V{@'UK,zE>a", " NOT NULL", " NOT NULL");
      assertEquals("!l_N#}V{@'UK,zE>a", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("T(");
      SQLUtil.addOptionalCondition("T(", stringBuilder0);
      assertEquals("T( or T(", stringBuilder0.toString());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("K3@iw#FB\"zhk&h~g", stringBuilder0);
      assertEquals("K3@iw#FB\"zhk&h~g", stringBuilder0.toString());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue("exec");
      Integer integer0 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        DBDataType.getInstance("7/'0i#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "d";
      String string1 = "se_e";
      Character character0 = new Character('8');
      SQLUtil.renderValue(character0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "'8'");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(834, (char[]) null, 834, 57);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 834
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[2] = stringArray0[0];
      String string0 = SQLUtil.renderValue(stringArray0[1]);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cXeate unique index";
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = SQLUtil.join(">jL", ">jL", stringArray0, "create unique index", "create unique index", stringArray0);
      assertEquals(">jL join create unique index as create unique index on >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null and >jL.null = create unique index.null", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = SQLUtil.join("gojbj", "{", stringArray0, "{", "gojbj", stringArray0);
      assertEquals("gojbj join { as gojbj on {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null and {.null = gojbj.null", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin(".C@GE66B", stringArray0, "3]B", ".C@GE66B", stringArray0);
      assertEquals("3]B as .C@GE66B on ", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[23];
      String string0 = SQLUtil.join("inner", "inner", stringArray0, "inner", "inner", stringArray0);
      assertEquals("inner as inner on inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("columnNames == null\n", stringArray0, "columnNames == null\n", "org.apache.derby.iapi.types.DataValueFactoryImpl", stringArray0);
      assertEquals("left join columnNames == null\n as org.apache.derby.iapi.types.DataValueFactoryImpl on ", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("f", "f", stringArray0, stringArray0[1], "f", stringArray0);
      assertEquals("f join null as f on f.null = f.null and f.null = f.null", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("gOJbj", "TM>K0~#,Z~)D", (String[]) null, "gOJbj", "TM>K0~#,Z~)D", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("ZV4T\"alL!9[>{");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("create table ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("Ye2_ect intoroup by");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create table ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("cXeate unique index");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter tabletgppvz}qx?");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execunaligned setlength");
      assertNull(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intosn#>cb");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.mutatesDataOrStructure("alter sessionalter tablegppvz}qx?");
      Random.setNextRandom((-2955));
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, )", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = SQLUtil.removeComments("exec%4].yvt=>a1");
      assertEquals("exec%4].yvt=>a1", string0);
  }
}
