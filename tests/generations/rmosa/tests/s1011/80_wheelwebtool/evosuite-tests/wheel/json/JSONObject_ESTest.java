/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 12:34:15 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 34, 104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float float0 = new Float((-1049.6395F));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(452.1571702);
      JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      String string0 = JSONObject.quote("Unclosed comment");
      assertEquals("\"Unclosed comment\"", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("]q5O>L", stringArray0);
      Float float0 = new Float(Double.NaN);
      Float.sum(1.0F, 1.0F);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("getcf@>mpre", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("getcf@>mpre");
      assertNotSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer((-124622348));
      JSONObject jSONObject0 = new JSONObject(integer0);
      Integer.divideUnsigned((-124622348), 7);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (-124622348));
      jSONObject0.getLong("] is not a JSONObject.");
      Integer.getInteger("Expected a ',' or ']'", (-124622348));
      JSONObject.quote("Expected a ',' or ']'");
      jSONObject0.optString("wheel.json.JSONArray");
      try { 
        jSONObject1.getLong(";,TD|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";,TD|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5875011775569985
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = " IjJ_;Tzw";
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt(" IjJ_;Tzw", float0);
      jSONObject1.optBoolean(" IjJ_;Tzw", false);
      Float.max(2137.565F, 0.0F);
      JSONObject.valueToString(jSONObject0);
      jSONObject1.getDouble(" IjJ_;Tzw");
      Float.min(1.0F, 1216.0F);
      jSONObject0.optString(" IjJ_;Tzw");
      try { 
        jSONObject1.getDouble("getputAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getputAll\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5375232203212748
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("^JO=!:/s\bT+B");
      JSONObject jSONObject1 = jSONObject0.put(",\n", 0L);
      jSONObject1.getLong(",\n");
      jSONObject0.put("wheel.json.JSONObject$Null", (Collection) null);
      jSONObject1.keys();
      String string0 = jSONObject1.toString((-343), (-343));
      String string1 = jSONObject1.toString((-343));
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2782459557145414
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",\n", 9L);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject0.optLong(",\n");
      jSONObject1.put("whhel.j9on.JSONObject$Null", 0.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "whhel.j9on.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      hashMap0.put((Byte) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(605);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Long long0 = Long.getLong("0", (-880L));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("83_F!$F[3eCw_6", (double) (-880L));
      long long1 = jSONObject1.optLong("83_F!$F[3eCw_6");
      assertEquals((-880L), long1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("m.G! i", jSONObject0);
      jSONObject1.getJSONObject("m.G! i");
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put(" Yb]o0vq", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject(" Yb]o0vq");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject2);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getBoolean("WwcwQ</DL)2<Bk0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WwcwQ<\\/DL)2<Bk0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("ofG ", "ofG ");
      String string0 = jSONObject1.optString("ofG ");
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{,";
      stringArray0[1] = "{,";
      stringArray0[2] = "{,";
      stringArray0[3] = "{,";
      stringArray0[4] = "{,";
      stringArray0[5] = "{,";
      stringArray0[6] = "{,";
      stringArray0[7] = "{,";
      JSONObject jSONObject0 = new JSONObject("{,", stringArray0);
      jSONObject0.append("{,", "{,");
      boolean boolean0 = jSONObject0.isNull("{,");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(boolean0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('=');
      StringWriter stringWriter1 = new StringWriter('=');
      stringWriter1.append((CharSequence) "0..");
      Writer writer0 = jSONObject1.write(stringWriter1);
      assertSame(writer0, stringWriter1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("]>a");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("(XA.=dMz;KEGM3?", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("ofa o", object0);
      try { 
        jSONObject0.getBoolean("ofa o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ofa o\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      hashMap0.computeIfAbsent(jSONArray0, unaryOperator0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONArray cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.doubleToString((-424.6));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-176L));
      linkedList0.add(long0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("-424.6");
      JSONObject jSONObject1 = jSONObject0.put("true", (Collection) null);
      jSONObject1.optString("null", (String) null);
      try { 
        jSONObject1.getJSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1023956589129735
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte) (-66));
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = " Yb]o0vq";
      stringArray0[1] = " Yb]o0vq";
      stringArray0[2] = " Yb]o0vq";
      stringArray0[3] = "u( JKdjq?T?13";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) " Yb]o0vq");
      JSONObject jSONObject2 = jSONObject0.put("X`aEUC2up`'`T.!", 2973L);
      jSONObject2.keys();
      jSONObject2.put("u( JKdjq?T?13", 0L);
      jSONObject0.put(" Yb]o0vq", (Collection) null);
      jSONObject1.keys();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Byte.compare((byte) (-66), (byte)50);
      jSONObject0.toString(45, (-2353));
      StringWriter stringWriter0 = new StringWriter();
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000027\": java.lang.Long@0000000028,\n\"java.lang.String@0000000029\": java.lang.Long@000000003,\n\"java.lang.String@0000000032\": []\n}");
      Long long0 = new Long(839L);
      String[] stringArray1 = JSONObject.getNames((Object) long0);
      assertEquals(5, stringArray1.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[1] = " Yb]o0vq";
      Byte byte1 = new Byte((byte)16);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Double double0 = new Double((-1314.71062837));
      hashMap0.put((Integer) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      String string0 = JSONObject.valueToString(byte1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("2w", 1067.0);
      double double0 = jSONObject2.optDouble("2w");
      assertEquals(1067.0, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2463104650680035
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      linkedList0.add(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Collection) linkedList0);
      // Undeclared exception!
      jSONObject1.toString(15);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{K-&s.0f6 R#9", (-300L));
      jSONObject1.put("sauB#.:T=bCRk.$J", (Collection) null);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<Boolean, JSONObject> hashMap1 = new HashMap<Boolean, JSONObject>();
      JSONObject.quote("{K-&s.0f6 R#9");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("sauB#.:T=bCRk.$J");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{l|(Mt/", (-4062L));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("{l|(Mt/", (Collection) linkedList0);
      Short short0 = new Short((short)4088);
      jSONObject0.append("{l|(Mt/", short0);
      try { 
        jSONObject0.getInt("{l|(Mt/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{l|(Mt/\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{y-v`i%73pdsR:$x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 16 of {y-v`i%73pdsR:$x
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "P5=";
      Boolean boolean0 = new Boolean("P5=");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      String string1 = "getforat";
      JSONObject jSONObject1 = jSONObject0.put("getforat", (-1093.7381341));
      Boolean.getBoolean("P5=");
      jSONObject1.has("getforat");
      String string2 = "{}";
      try { 
        jSONObject1.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("l@E/=T%YTBSp #u", 7L);
      int int0 = jSONObject1.getInt("l@E/=T%YTBSp #u");
      assertEquals(7, int0);
      
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "{l|(Mt/";
      stringArray0[2] = "l@E/=T%YTBSp #u";
      JSONObject jSONObject2 = new JSONObject(object0, stringArray0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.optBoolean(7);
      JSONArray jSONArray1 = jSONArray0.put(false);
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "\\]>a";
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("]>a", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("]>a", "]>a");
      JSONObject.getNames((Object) jSONObject1);
      try { 
        jSONObject1.getJSONObject("]>a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]>a\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt(" Yb]o0vq", object0);
      try { 
        jSONObject0.getJSONObject(" Yb]o0vq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" Yb]o0vq\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("l@E/=T%YTBSp #u", (-1728L));
      JSONObject jSONObject1 = jSONObject0.put("{l|(Mt/", (-4062L));
      double double0 = jSONObject1.optDouble("{l|(Mt/", 0.0);
      assertEquals((-4062.0), double0, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("] is not a Boolean.", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      String string0 = " Yb]o0vq";
      Byte byte1 = new Byte((byte)16);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(byte0);
      jSONObject0.put(",:]}/\"[{;H", 0L);
      jSONObject0.opt(",:]}/\"[{;H");
      JSONObject.getNames((Object) jSONObject1);
      StringWriter stringWriter0 = new StringWriter((byte)16);
      int int0 = (-352);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      jSONObject1.toString(4411, 854);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "{K-&s.0f6 R#9");
      Collection<Object> collection0 = null;
      jSONObject1.put("sauB#.:T=bCRk.$J", (Collection) null);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<Boolean, JSONObject> hashMap1 = new HashMap<Boolean, JSONObject>();
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 2147483645, 2147483645);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Collection) null);
      jSONObject1.optString("] is not a number.", "] is not a number.");
      try { 
        jSONObject1.getJSONObject("wheel.json.JSONArray@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray@0000000002\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 1746, 1494);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Float float0 = new Float(1.2659235F);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 459, (-1079));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~yctG~m52_,|t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~yctG~m52_,|t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      Set<Map.Entry<Byte, Object>> set0 = (Set<Map.Entry<Byte, Object>>)hashMap0.entrySet();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(set0, 1998, 1998);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{l|(Mt/");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {l|(Mt/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "3kA9@$cJDH[H";
      JSONObject jSONObject1 = jSONObject0.put("3kA9@$cJDH[H", (-3586L));
      jSONObject1.remove("3kA9@$cJDH[H");
      JSONTokener jSONTokener0 = new JSONTokener("'");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of '
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("m.G! i", jSONObject0);
      try { 
        jSONObject0.getDouble("m.G! i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m.G! i\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{l|(Mt/", (-4062L));
      jSONObject0.getInt("{l|(Mt/");
      JSONTokener jSONTokener0 = new JSONTokener("{l|(Mt/");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {l|(Mt/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Boolean boolean0 = new Boolean("\"\"");
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      StringWriter stringWriter0 = new StringWriter(25);
      StringWriter stringWriter1 = stringWriter0.append('B');
      jSONObject0.write(stringWriter1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.8643771862195314
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject.quote("??;/2Qxo7N7J9@G");
      JSONObject jSONObject0 = new JSONObject((Object) "\"??;/2Qxo7N7J9@G\"");
      JSONObject jSONObject1 = jSONObject0.put("{G:V~eBB*ljM", 0.0);
      jSONObject1.getInt("{G:V~eBB*ljM");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "fa o";
      JSONObject jSONObject1 = jSONObject0.putOpt("fa o", "fa o");
      try { 
        jSONObject1.getInt("fa o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fa o\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-863), 506);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("fl4<nwH?>L-:T#%y", "fl4<nwH?>L-:T#%y");
      JSONObject jSONObject2 = jSONObject1.accumulate("fl4<nwH?>L-:T#%y", "fl4<nwH?>L-:T#%y");
      jSONObject2.optBoolean("fl4<nwH?>L-:T#%y");
      String string0 = "Pjc}9>Vmtc sM=";
      try { 
        jSONObject1.getInt("Pjc}9>Vmtc sM=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Pjc}9>Vmtc sM=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Boolean boolean1 = new Boolean(false);
      hashMap0.put(boolean1, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('<');
      Float float0 = new Float((double) (byte)16);
      JSONObject.numberToString(float0);
      stringWriter1.append((CharSequence) "java.lang.Float@0000000004");
      Writer writer0 = jSONObject0.write(stringWriter1);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.439243482388646
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Qc";
      Byte.compare((byte)0, (byte)0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = " Yb]o0vq";
      stringArray1[1] = "Qc";
      stringArray1[2] = "";
      stringArray1[3] = "Qc";
      JSONObject jSONObject0 = new JSONObject("", stringArray1);
      JSONObject jSONObject1 = jSONObject0.put("Qc", 1631.801);
      JSONObject jSONObject2 = jSONObject0.append("", "Qc");
      jSONObject0.put(" Yb]o0vq", (long) 0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject2.put("Qc", (Collection) linkedList0);
      jSONObject2.toString(13);
      jSONObject1.getJSONArray("Qc");
      try { 
        jSONObject0.getJSONArray("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote(":s>h_iBDs+Z6+");
      JSONObject jSONObject1 = jSONObject0.put("(<UVtG/", (Map) null);
      jSONObject1.append("]l,g|yY`L8v/[i", "(<UVtG/");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("]l,g|yY`L8v/[i");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      Double double0 = new Double(1.0);
      jSONObject1.putOpt((String) null, double0);
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("yEm", (Object) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      short short0 = (short)13;
      Short short1 = new Short((short)13);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONObject.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double(1504.0);
      Double.sum((-2248.21), 2476.91025);
      hashMap0.put(double0, "AIY5 j95lyU[b[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>(44);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("0U8M^Y{vElE#9~-");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("g=nV", false);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject2 = jSONObject1.accumulate("g=nV", jSONObject0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float((-2652.605F));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("pw<O$", 2603.272097006388);
      jSONObject0.put("pw<O$", false);
      Long long0 = new Long((-18L));
      JSONObject.getNames((Object) long0);
      JSONObject.quote(".");
      Float float1 = new Float(1.0);
      Float float2 = new Float((float) (-18L));
      Object object1 = JSONObject.NULL;
      jSONObject0.optInt("\".\"", 42);
      hashMap0.put(float1, (Object) null);
      try { 
        jSONObject0.getDouble("xe%Oy)Y#QKj^'sE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xe%Oy)Y#QKj^'sE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Byte byte0 = new Byte((byte)31);
      Byte.compare((byte)0, (byte) (-88));
      String[] stringArray0 = new String[7];
      stringArray0[0] = " of ";
      stringArray0[1] = " of ";
      stringArray0[2] = " of ";
      Double double0 = new Double((byte)0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int0 = jSONObject0.optInt(" Yb]o0vq", (int) (byte) (-88));
      assertEquals((-88), int0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "[";
      JSONObject jSONObject1 = jSONObject0.put("[", (-1.0));
      Boolean boolean0 = new Boolean("[");
      JSONObject.getNames(jSONObject1);
      byte byte0 = (byte)65;
      Byte byte1 = new Byte((byte)65);
      JSONObject jSONObject2 = jSONObject1.putOpt("[", byte1);
      jSONObject2.getLong("[");
      JSONTokener jSONTokener0 = new JSONTokener("isvalueOf");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isvalueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("toS", "toS");
      try { 
        jSONObject0.getLong("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string0 = null;
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(0L);
      JSONObject.getNames((Object) long0);
      jSONObject0.optDouble((String) null, (double) 0L);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("!A*{Bj-$0");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double((-174.35360943868));
      String string0 = JSONObject.quote(" F >j'-8oIHv+ysa");
      Float float0 = new Float((-174.35360943868));
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.optString("", "");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("istoUnsignedLong");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Y1/OHL%Rq7Ly", 0.0);
      try { 
        jSONObject0.append("Y1/OHL%Rq7Ly", hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Y1/OHL%Rq7Ly] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "fa o";
      JSONObject jSONObject1 = jSONObject0.putOpt("fa o", "fa o");
      try { 
        jSONObject1.append("fa o", "fa o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[fa o] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{,", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("lwScOpX_Gy.K%&", 724L);
      assertEquals(724L, long0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Short short0 = new Short((short)2);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.putOpt("co", short0);
      jSONObject0.toString(32, (-3005));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("qtiudF", "qtiudF");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("CPr?O,1tXa2", 160);
      String string0 = jSONObject1.getString("CPr?O,1tXa2");
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("] is not a number.");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("3{hC=zhg3T<xO/0zQ");
      JSONTokener jSONTokener1 = new JSONTokener("])Fi=uR|");
      Integer.toUnsignedLong(46);
      Integer.toUnsignedLong((-3741));
      JSONObject.doubleToString(4294963555L);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray1 = jSONArray0.put((long) (-3741));
      int int0 = (-2651);
      try { 
        jSONArray1.getJSONObject((-2651));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2651] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1079.04122531));
      assertEquals("-1079.04122531", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = new Integer(4137);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "gettrim";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Object object0 = jSONObject0.opt("gettrim");
      assertNull(object0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer(4137);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Object object0 = jSONObject0.opt(stringArray0[0]);
      assertNull(object0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      Float float0 = new Float((-1650.1889788));
      hashMap0.put(double0, float0);
      jSONObject0.optLong("wheel.json.JSONException", (-50L));
      try { 
        jSONObject0.getDouble("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString("`ids<<R_3VXj-m", "HB8 h");
      assertEquals("HB8 h", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString("not");
      assertEquals("", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = Byte.valueOf((byte) (-30));
      try { 
        jSONObject0.append((String) null, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "F0Y~tU";
      jSONObject0.remove("F0Y~tU");
      try { 
        Long.valueOf("F0Y~tU", (-64089270));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -64089270 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 1446);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("ofa o", jSONObject0);
      try { 
        jSONObject0.getBoolean("ofa o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ofa o\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0329663652903294
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject.quote("??XU;/2Qxo^7N79@G");
      JSONObject jSONObject0 = new JSONObject((Object) "??XU;/2Qxo^7N79@G");
      jSONObject0.optBoolean("\"??XU;/2Qxo^7N79@G\"");
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0281178804418445
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.quote("??XU;/2Qxo^7N79@G");
      assertEquals("\"??XU;/2Qxo^7N79@G\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"??XU;/2Qxo^7N79@G\"");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("fa o", "fa o");
      try { 
        jSONObject0.getBoolean("fa o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fa o\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("J}oh+");
      JSONObject jSONObject1 = jSONObject0.putOpt("get", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("get");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("+BK9VI_@&Q#z", (Object) "+BK9VI_@&Q#z");
      jSONObject1.get("+BK9VI_@&Q#z");
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(92);
      Double double0 = new Double((-4081.843285754025));
      hashMap0.put(integer0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("M_-<5f[$3ka", 0);
      assertEquals(0, int0);
      
      String string0 = JSONObject.quote("!g$K0+/lbb\"%Ub");
      assertEquals("\"!g$K0+/lbb\\\"%Ub\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.8510944537717136
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote("??XU;/2Qxo^7N79@G");
      assertEquals("\"??XU;/2Qxo^7N79@G\"", string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("gettoHexString");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float(2795.843F);
      Double double0 = new Double(2795.843F);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("joi", (Object) hashMap0);
      jSONObject1.append("?", "joi");
      jSONObject0.toString(1556, 1556);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      Byte byte0 = new Byte((byte)108);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.offerLast((Boolean) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(byte0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 0, 69);
      assertNotNull(string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 542, 542);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float float0 = new Float(1.0F);
      String string0 = JSONObject.valueToString(float0, (-682), 79);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0, 4, 4);
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 1154, 1154);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      hashMap0.put((JSONArray) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = Integer.valueOf((-620));
      hashMap0.put(integer0, (Byte) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Long long0 = new Long((-1061L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONTokener");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONTokener
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("null", 1L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer(250);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JSONObject.quote("8/T@Fr.,@/S\"swuD+");
      assertEquals("\"8/T@Fr.,@/S\\\"swuD+\"", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString((-1638), (-1638));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.009656341980306
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.quote("??XU;/2Qxo^7N79@G");
      assertEquals("\"??XU;/2Qxo^7N79@G\"", string0);
      
      Float float0 = new Float(812.022F);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wai";
      stringArray0[1] = "\"??XU;/2Qxo^7N79@G\"";
      stringArray0[2] = "\"??XU;/2Qxo^7N79@G\"";
      stringArray0[3] = "??XU;/2Qxo^7N79@G";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string1 = jSONObject0.toString(1462);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote("\u0003X%SVa`e6F-q");
      assertEquals("\"\\u0003X%SVa`e6F-q\"", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("isjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isjoin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble("{,", (-369.815));
      assertEquals((-369.815), double0, 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("39Z};2THFlM*57", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "[");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("istoString", (Object) "istoString");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject1.optBoolean("flo", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("Expected a ':' after a key");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("m.G! i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m.G! i\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{~R]*`nn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {~R]*`nn
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = JSONObject.quote("??';/2QxomvN7J9;G");
      assertEquals("\"??';/2QxomvN7J9;G\"", string0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("\u0000jvH&5N_cpNX", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("p0x\"L.7");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("toJ", "toJ");
      assertEquals("toJ", string0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      int int0 = (-932);
      String string0 = ";A|m6ph5<c|sCzB";
      try { 
        Long.valueOf(";A|m6ph5<c|sCzB", (-932));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -932 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("wHM3_?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wHM3_?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.get("XvLqe?k|,YZi*kzR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"XvLqe?k|,YZi*kzR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
