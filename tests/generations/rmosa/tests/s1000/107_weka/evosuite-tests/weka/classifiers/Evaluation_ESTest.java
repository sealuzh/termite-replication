/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 01 21:22:02 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.util.Random;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.CorrelationAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.Cobweb;
import weka.clusterers.MakeDensityBasedClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.NormalEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.listOptions();
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 1096.693055484674;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = 1096.693055484674;
      DenseInstance denseInstance0 = new DenseInstance(1096.693055484674, doubleArray0);
      instances0.add((Instance) denseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.assign(testInstances1);
      Instances instances0 = testInstances1.generate("minNoTipText");
      testInstances1.setNumInstancesRelational((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      testInstances1.setSeed(1111);
      int int0 = (-1882097014);
      Instances instances1 = converterUtils_DataSource0.getStructure((-1882097014));
      converterUtils_DataSource0.nextElement(instances1);
      evaluation0.setNumericPriorsFromBuffer();
      MockRandom mockRandom0 = new MockRandom((-1L));
      PART pART0 = new PART();
      try { 
        evaluation0.crossValidateModel((Classifier) pART0, instances1, (-1461032992), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.relativeAbsoluteError();
      evaluation0.truePositiveRate(1);
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure(1085);
      assertEquals(0.0, double0, 0.01);
      
      instances0.deleteWithMissingClass();
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'b';
      charArray0[2] = 'u';
      charArray0[3] = 'd';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      String string0 = evaluation0.num2ShortID(1085, charArray0, 2);
      assertEquals("MM", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("cbuBZk>0r");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-2136));
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) inputMappedClassifier0, instances0, (-1), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-1768));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      IBk iBk0 = new IBk();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.numTruePositives(5);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) (-1);
      evaluation0.updateMargins(doubleArray0, 3, (-2402.4188417194196));
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominalValues(2917);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      IBk iBk0 = new IBk();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      evaluation0.numTruePositives(4);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 2917;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, 2.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -729500
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumInstancesRelational(1379);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation.handleCostOption((String) null, 1684);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.precision(1);
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.falseNegativeRate(5);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.814298933966933
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumClasses = 423;
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      IBk iBk0 = new IBk();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 1076.3237055121706;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1076.3237055121706;
      evaluation0.updateMargins(doubleArray0, 1, (-1.0));
      evaluation0.unclassified();
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance((-2842.9227409), doubleArray1);
      try { 
        evaluation0.evaluateModelOnce((Classifier) iBk0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumInstancesRelational(1379);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Object object0 = new Object();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) multiClassClassifierUpdateable0, instances0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.MultiClassClassifier", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      String string0 = ".x0fS'.qL_z.a";
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominalValues(2917);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      IBk iBk0 = new IBk();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      evaluation0.numTruePositives(4);
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = 'l';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2103), charArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      evaluation0.toCumulativeMarginDistributionString();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SparseInstance sparseInstance0 = new SparseInstance(20);
      evaluation0.sizeOfPredictedRegions();
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.q_z.a");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominalValues(2917);
      instances0.deleteStringAttributes();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      costSensitiveClassifier0.getCostMatrix();
      IBk iBk0 = new IBk();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 2917;
      intArray0[1] = 2;
      intArray0[2] = 2917;
      intArray0[3] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.7976931348623157E308, intArray0, (-2));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      TestInstances testInstances1 = new TestInstances();
      int int0 = 2917;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals((Object) null);
      CSVLoader cSVLoader0 = new CSVLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.q_z.a");
      testInstances0.setNumInstancesRelational((-1343));
      DenseInstance denseInstance0 = new DenseInstance(500);
      instances0.add((Instance) denseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.q_z.a");
      testInstances0.setNumInstancesRelational((-1343));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.totalCost();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TestInstances testInstances1 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(cVParameterSelection0);
      cVParameterSelection0.setOptions(testInstances1.DEFAULT_WORDS);
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      testInstances1.assign(testInstances2);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stratify(491);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) stacking0, instances0, objectArray0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01);
      
      evaluation0.m_Correct = 4.0;
      evaluation0.truePositiveRate(97);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.pctCorrect();
      double double1 = evaluation0.numTrueNegatives(20);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.pctCorrect(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.recall(22);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 378.352336448195;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(378.352336448195, doubleArray0);
      Instances instances0 = textDirectoryLoader1.getDataSet();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.clear();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      String[] stringArray0 = new String[0];
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.unweightedMacroFmeasure();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      try { 
        evaluation1.crossValidateModel(classifier0, instances0, 2940, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-215);
      doubleArray0[1] = (double) (-215);
      doubleArray0[2] = (-334.55937);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominalValues(1221);
      testInstances1.setNumInstancesRelational(47);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 47;
      doubleArray0[1] = (double) 1221;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, (Instances) null, 6, (Random) mockRandom0, (Object[]) testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      Capabilities capabilities0 = makeDensityBasedClusterer0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominalValues(2917);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      testInstances0.setNumInstancesRelational((-80));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      CostMatrix costMatrix0 = new CostMatrix(2);
      MockRandom mockRandom0 = new MockRandom(224L);
      Instances instances1 = costMatrix0.applyCostMatrix(instances0, mockRandom0);
      Evaluation evaluation1 = new Evaluation(instances1, costMatrix0);
      double double0 = evaluation1.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) cVParameterSelection0, instances0, 1395, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.SFMeanPriorEntropy();
      SparseInstance sparseInstance0 = new SparseInstance(215);
      sparseInstance0.setMissing(53);
      try { 
        evaluation0.evaluateModelOnce((double) 6, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      evaluation0.makeDistribution(Double.NaN);
      doubleArray0[3] = (double) (-1);
      doubleArray0[7] = 0.0;
      evaluation0.addNumericTrainClass(0.0, (-1));
      DenseInstance denseInstance0 = new DenseInstance(19);
      BallNode ballNode0 = new BallNode(494, 494, (-1));
      ballNode0.m_NumInstances = 494;
      try { 
        BallNode.calcPivot(ballNode0, ballNode0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(true);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.trueNegativeRate((-1));
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(2, doubleArray0.length);
      
      double double2 = evaluation0.areaUnderPRC((-1));
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances.forCapabilities(capabilities0);
      Evaluation.handleCostOption("", (-1));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.avgCost();
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Vd");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorSqrErr;
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'F';
      charArray0[2] = 'a';
      charArray0[3] = 'n';
      charArray0[4] = '=';
      charArray0[5] = 'T';
      charArray0[6] = '{';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForPredictor(0.07500000298023224, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stratify(1507);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.toMatrixString("{`g'h?KZXTc]akW/a");
      evaluation0.matthewsCorrelationCoefficient((-319));
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.generate("@relation");
      testInstances0.setNumRelationalString(12);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.trueNegativeRate((-1));
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.incorrect();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setNumRelationalDate((-1620));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.m_ClassIsNominal = false;
      evaluation0.makeDistribution((-1620));
      IBk iBk0 = new IBk();
      String string0 = Evaluation.makeOptionString(iBk0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-2));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.stratify(34);
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.errorRate();
      evaluation0.setDiscardPredictions(true);
      double double0 = evaluation0.falseNegativeRate(1);
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.stratify(3261);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader1);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setDiscardPredictions(false);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setNumRelationalDate((-1620));
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1620));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1620
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stratify(496);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.m_Incorrect;
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 496;
      doubleArray0[1] = (-821.14116285);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      evaluation0.getRevision();
      doubleArray0[4] = (double) 496;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 496;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 496;
      int[] intArray0 = new int[7];
      intArray0[0] = 496;
      intArray0[1] = 496;
      intArray0[2] = 496;
      intArray0[3] = 496;
      intArray0[4] = 496;
      intArray0[5] = 496;
      intArray0[6] = 496;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(496, doubleArray0, intArray0, 496);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      instances0.setRelationName((String) null);
      double double0 = evaluation0.trueNegativeRate(380);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      evaluation0.areaUnderPRC((-1));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumInstancesRelational(1379);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, (-2994.262));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities0 = allFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Version.MAJOR = 75;
      double double0 = evaluation0.m_SumPriorSqrErr;
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2781.265988);
      doubleArray0[1] = (-2781.265988);
      doubleArray0[2] = (-2781.265988);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2781.265988), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1690.42826685713, doubleArray0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      String string0 = Evaluation.makeOptionString(cVParameterSelection0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(")Gh&&8f[o>J{&\\n4o");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      cVParameterSelection0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree();
      evaluation0.confusionMatrix();
      evaluation0.unweightedMicroFmeasure();
      M5Rules m5Rules0 = new M5Rules();
      // Undeclared exception!
      try { 
        m5Rules0.getM5RootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.m5.M5Base", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GU`eZ/F+o({7NpPm.}p");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("getClass", (String) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      testInstances0.setNumInstancesRelational(1221);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      byte[] byteArray0 = new byte[0];
      costSensitiveClassifier0.listOptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      costSensitiveClassifier0.getCostMatrix();
      IBk iBk0 = new IBk();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1221;
      doubleArray0[1] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) cVParameterSelection0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      testInstances0.setNumInstancesRelational(1221);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      byte[] byteArray0 = new byte[0];
      costSensitiveClassifier0.listOptions();
      costSensitiveClassifier0.getCostMatrix();
      IBk iBk0 = new IBk(984);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.assign(testInstances1);
      Instances instances0 = testInstances1.generate(".bsi");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TestInstances testInstances2 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(cVParameterSelection0);
      cVParameterSelection0.setOptions(testInstances0.DEFAULT_WORDS);
      cVParameterSelection0.getCapabilities();
      instances0.deleteWithMissingClass();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.addNumericTrainClass(866.9139931074785, (-3379.3119557879827));
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumInstancesRelational(1379);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      evaluation0.toCumulativeMarginDistributionString();
      SparseInstance sparseInstance0 = new SparseInstance(2829);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 3812.333973;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3812.333973, doubleArray0);
      evaluation0.toMatrixString(" ");
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      instances0.deleteWithMissingClass();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      evaluation0.addNumericTrainClass((-1), (-2));
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues(117);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 117;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-334.55937);
      doubleArray0[5] = (-334.55937);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      String string0 = testInstances0.toString();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      ZeroR zeroR0 = new ZeroR();
      zeroR0.listOptions();
      String string1 = Evaluation.wekaStaticWrapper(zeroR0, (String) null);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setNumInstancesRelational((-2716));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumKBInfo = (double) (-2);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumInstancesRelational((-1));
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals((-201.2011281858674), double1, 0.01);
      
      double double2 = evaluation0.weightedFalseNegativeRate();
      double double3 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double3, double2, 0.01);
      
      evaluation0.kappa();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.assign(testInstances0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) cVParameterSelection0, (Instances) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      DenseInstance denseInstance0 = new DenseInstance(2);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      BallNode ballNode0 = new BallNode(1, 1332, 1332, denseInstance1, 6);
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1332;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 1332;
      doubleArray0[3] = (-719.0634155588021);
      doubleArray0[4] = (double) 1332;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 1332;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.generate(" bits/instance\n");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      testInstances0.setRelationalClassFormat(instances0);
      int int0 = (-1620);
      testInstances0.setNumRelationalDate((-1620));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      int int1 = 32;
      IBk iBk0 = new IBk(32);
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) iBk0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setHandler(cVParameterSelection0);
      testInstances1.assign(testInstances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      cVParameterSelection0.getTechnicalInformation();
      double double0 = evaluation0.m_SumErr;
      double[] doubleArray0 = new double[6];
      Utils.SMALL = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) cVParameterSelection0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-2));
      testInstances0.setNumInstancesRelational(1221);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassPriorsSum = (double) 1221;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      CSVLoader cSVLoader0 = new CSVLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.pctIncorrect();
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      double double1 = evaluation0.m_ConfLevel;
      evaluation0.SFMeanPriorEntropy();
      SGDText sGDText0 = new SGDText();
      Instance instance0 = null;
      try { 
        evaluation0.evaluateModelOnce((Classifier) sGDText0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      testInstances0.setNumInstancesRelational(1221);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      byte[] byteArray0 = new byte[0];
      costSensitiveClassifier0.listOptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IBk iBk0 = new IBk(984);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) cVParameterSelection0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = evaluation0.SFEntropyGain();
      instances0.stringFreeStructure();
      double double2 = evaluation0.trueNegativeRate(8);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setSeed(494);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      double double1 = evaluation0.m_SumClass;
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OneR oneR0 = new OneR();
      oneR0.setDebug(true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      instances0.deleteWithMissingClass();
      Evaluation evaluation1 = new Evaluation(instances1);
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = testInstances0.generate("@data");
      try { 
        evaluation1.setPriors(instances2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumInstancesRelational((-1343));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumClassPredicted;
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      IBk iBk0 = new IBk();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      evaluation0.m_TrainClassVals = doubleArray0;
      doubleArray0[0] = 0.0;
      evaluation0.m_SumSchemeEntropy = 1076.3237055121706;
      doubleArray0[1] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      double double0 = evaluation0.m_SumAbsErr;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, (-2.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      costSensitiveClassifier0.getCostMatrix();
      IBk iBk0 = new IBk();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      evaluation0.m_TrainClassVals = doubleArray0;
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-2);
      doubleArray0[3] = (double) 4;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, (-2.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      org.evosuite.runtime.Random.setNextRandom(9);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.q_z.a");
      testInstances0.setNumInstancesRelational((-1338));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1690.42826685713, doubleArray0);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      try { 
        evaluation0.evaluateModel((Classifier) stacking0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.assign(testInstances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBMeanInformation();
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[5] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      double double1 = evaluation0.pctUnclassified();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[0];
      evaluation0.unweightedMacroFmeasure();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1690.42826685713, doubleArray0);
      evaluation0.toMatrixString("useAICTipText");
      evaluation0.KBInformation();
      evaluation0.numInstances();
      org.evosuite.runtime.Random.setNextRandom(4709);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      Instances instances0 = testInstances0.generate("@relation");
      SystemInUtil.addInputLine("@relation");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.precision(111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 111
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      IBk iBk0 = new IBk();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2102.49894278);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-2102.49894278);
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (-2102.49894278);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, doubleArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usePairwiseCouplingTipText");
      double double0 = evaluation0.precision((-788));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.assign(testInstances1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.assign(testInstances0);
      Instances instances0 = testInstances0.generate(".bsi");
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      TestInstances testInstances2 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(cVParameterSelection0);
      Capabilities capabilities1 = cVParameterSelection1.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-103);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TestInstances testInstances3 = TestInstances.forCapabilities(capabilities1);
      testInstances1.assign(testInstances3);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBMeanInformation();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Evaluation.makeOptionString(votedPerceptron0, true);
      double double1 = evaluation0.weightedRecall();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.assign(testInstances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBMeanInformation();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (-1);
      evaluation0.confusionMatrix();
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      TestInstances.forCapabilities(capabilities0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.SFSchemeEntropy();
      Stacking stacking0 = new Stacking();
      Stacking stacking1 = new Stacking();
      stacking1.getMetaClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Object object0 = new Object();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Object[] objectArray0 = new Object[3];
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        linearNNSearch0.nearestNeighbour((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IBk iBk0 = new IBk();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      evaluation0.m_TrainClassVals = doubleArray0;
      TestInstances testInstances1 = new TestInstances();
      testInstances0.assign(testInstances1);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5956883120599223
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.getWords();
      Cobweb cobweb0 = new Cobweb();
      Capabilities capabilities0 = cobweb0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumRelationalDate((-159));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("[MiningSchema] convertNumericAttToNominal: attribute is already nominal!");
      IBk iBk0 = new IBk((-159));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstancesRelational(351);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Object object0 = new Object();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.kappa();
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.falsePositiveRate(34);
      assertEquals(0.0, double0, 0.01);
      
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom((-1L));
      double double1 = evaluation1.m_SumPriorEntropy;
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstancesRelational(1753);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      // Undeclared exception!
      try { 
        testInstances0.setWords("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least 2 words must be provided!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.generate(" bits/instance\n");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setNumRelationalDate((-1620));
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1620);
      doubleArray0[1] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.remove((Object) testInstances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-215);
      doubleArray0[1] = (double) (-215);
      doubleArray0[2] = (-334.55937);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      int int0 = (-215);
      testInstances0.setNumRelationalNominalValues((-215));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumKBInfo = (double) (-2);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom(2L);
      evaluation0.KBInformation();
      try { 
        evaluation0.crossValidateModel("#xOo.lzh\"<iLcvAXO", instances0, (-1799), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: #xOo.lzh\"<iLcvAXO
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stratify(1507);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = 'b';
      String string0 = evaluation0.num2ShortID(2162, charArray0, 1507);
      assertNotNull(string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1690.42826685713, doubleArray0);
      evaluation0.toMatrixString("useAICTipText");
      try { 
        evaluation0.updateStatsForPredictor(0.07500000298023224, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      testInstances0.generate();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      testInstances0.generate(" P p1:(X3");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier1.getCurrentModel();
      Object object0 = new Object();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      MatlabLoader matlabLoader1 = new MatlabLoader();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational((-1343));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString(".arff", false);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString("@relation", true);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stratify(1507);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.toSummaryString();
      String string0 = evaluation0.toSummaryString(".bsi", true);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.falseNegativeRate(107);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-24);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte) (-13);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.assign(testInstances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1012.8442476787756));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.48717948717948717
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.listOptions();
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.falsePositiveRate(1072);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      NormalEstimator normalEstimator0 = new NormalEstimator((-1));
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      capabilities0.enableAllAttributeDependencies();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom((-2));
      evaluation0.errorRate();
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "weka/core/Capabilities.props");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational(400);
      KDTree kDTree0 = new KDTree(instances0);
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootRelativeSquaredError();
      instances0.deleteWithMissingClass();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      SerializedInstancesLoader serializedInstancesLoader1 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader1.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[3];
      testInstances0.setWordSeparators((String) null);
      doubleArray0[0] = (double) (-215);
      doubleArray0[1] = (double) (-215);
      doubleArray0[2] = (-334.55937);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanSquaredError();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 0.0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      capabilities0.enableAllClassDependencies();
      double double1 = evaluation0.m_MissingClass;
      double double2 = evaluation0.correct();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1676.68144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities0 = allFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.SFPriorEntropy();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      capabilities0.getOtherCapabilities();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "weka/core/Capabilities.props");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LWL lWL0 = new LWL();
      Capabilities capabilities0 = lWL0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Capabilities capabilities1 = Capabilities.forInstances(instances0, false);
      TestInstances.forCapabilities(capabilities1);
      testInstances0.assign(testInstances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate(1);
      double double1 = evaluation0.numFalseNegatives(9);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.assign(testInstances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_TotalCost = (double) (-1);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = evaluation0.getHeader();
      double double0 = 840.901775;
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getNextInstance(instances1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      String[] stringArray0 = new String[22];
      stringArray0[0] = "@relation";
      stringArray0[4] = ".bsi";
      stringArray0[6] = "main";
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setClassType(1796);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
      
      instances0.stringFreeStructure();
      double double2 = evaluation0.trueNegativeRate(8);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numTrueNegatives(8);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      testInstances0.clone();
      instances0.deleteWithMissingClass();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      evaluation0.errorRate();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      TestInstances testInstances1 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(cVParameterSelection0);
      cVParameterSelection1.setOptions(testInstances1.DEFAULT_WORDS);
      CVParameterSelection cVParameterSelection2 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection2.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances1.assign(testInstances2);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-4.0), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(6162);
      double double0 = evaluation0.numFalsePositives(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-215));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.numFalsePositives(511);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("izers");
      KDTree kDTree0 = new KDTree(instances0);
      testInstances0.getData();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      testInstances0.setNumRelationalDate((-157));
      double double1 = evaluation0.m_SumAbsErr;
      double double2 = evaluation0.numTrueNegatives(0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumInstancesRelational(1379);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(592);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 592
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBMeanInformation();
      evaluation0.areaUnderROC((-1));
      evaluation0.useNoPriors();
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.m_SumPredicted;
      double double3 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.falsePositiveRate(1004);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.useNoPriors();
      evaluation0.unclassified();
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominalValues(1024);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-187L));
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = testInstances0.generate("@relation");
      MockRandom mockRandom0 = new MockRandom((-2094L));
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorEntropy;
      try { 
        evaluation0.crossValidateModel("@relation", instances1, (-5344), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      KDTree kDTree0 = new KDTree(instances0);
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 2, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.qL_z.a");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-912));
      evaluation0.SFMeanSchemeEntropy();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumRelationalNominalValues((-2));
      testInstances0.setNumInstancesRelational(1221);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      byte[] byteArray0 = new byte[0];
      costSensitiveClassifier0.listOptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IBk iBk0 = new IBk();
      instances0.deleteWithMissingClass();
      IBk iBk1 = new IBk();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(4);
      double double0 = evaluation0.numFalseNegatives(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setNumRelationalNominalValues((-2));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)99;
      testInstances0.clone();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CostMatrix costMatrix0 = new CostMatrix(409);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumInstancesRelational((-1343));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumClassPredicted;
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate((-1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".x0fS'.q_z.a");
      testInstances0.setNumInstancesRelational((-1343));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.errorRate();
      org.evosuite.runtime.Random.setNextRandom((-1));
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate((-1));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      assertEquals("Matlab ASCII files", matlabLoader0.getFileDescription());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      testInstances0.setNumInstancesRelational(1379);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.falsePositiveRate(1379);
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      instances0.deleteWithMissingClass();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setPriors(instances1);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("51rUP2@Eh");
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      Evaluation.makeOptionString((Classifier) null, true);
      CSVLoader cSVLoader0 = new CSVLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      assertEquals(".libsvm", libSVMLoader0.getFileExtension());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Capabilities capabilities0 = simpleKMeans0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      String string0 = Evaluation.getGlobalInfo(classificationViaRegression0);
      assertEquals("\nSynopsis for weka.classifiers.meta.ClassificationViaRegression:\n\nClass for doing classification using regression methods. Class is binarized and one regression model is built for each class value. For more information, see, for example\n\nE. Frank, Y. Wang, S. Inglis, G. Holmes, I.H. Witten (1998). Using model trees for classification. Machine Learning. 32(1):63-76.", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("s9Dl.3iDV<o:-", (-1320));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      Evaluation.makeOptionString(randomTree0, false);
      CSVLoader cSVLoader0 = new CSVLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      assertEquals(".libsvm", libSVMLoader0.getFileExtension());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      AbstractClassifier.makeCopies(zeroR0, 1780);
      String string0 = Evaluation.makeOptionString(zeroR0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      ZeroR zeroR0 = new ZeroR();
      try { 
        Evaluation.evaluateModel((Classifier) zeroR0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ZeroR zeroR0 = new ZeroR();
      try { 
        Evaluation.evaluateModel((Classifier) zeroR0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }
}
