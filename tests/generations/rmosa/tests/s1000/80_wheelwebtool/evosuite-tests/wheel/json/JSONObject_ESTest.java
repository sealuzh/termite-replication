/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 08 00:41:22 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = JSONObject.quote("3BFI )q* ,}K[0g97/*");
      assertEquals("\"3BFI )q* ,}K[0g97/*\"", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("3BFI )q* ,}K[0g97/*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 3BFI )q* ,}K[0g97/*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("7W", (-57L));
      Object object0 = jSONObject1.remove("7W");
      assertEquals((-57L), object0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("MO[Aw32`wB8N9cr", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("mG", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("(!2uqEDq8M2xz/CL!n", (-793L));
      assertEquals((-793L), long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("xMrZ3 cRIS}t/EwrD", 1699L);
      long long0 = jSONObject1.optLong("xMrZ3 cRIS}t/EwrD");
      assertEquals(1699L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9867316488081912
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-1289.823582867329));
      jSONObject0.accumulate("Ak)7uVyVDr9J", float0);
      long long0 = jSONObject0.optLong("Ak)7uVyVDr9J");
      assertEquals((-1289L), long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3961001489141087
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Short short0 = new Short((short)8448);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      int int0 = jSONObject0.optInt("aJ", (int) (short)0);
      assertEquals(0, int0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("true", 10);
      assertEquals(10, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ro", 226.6372408);
      int int0 = jSONObject1.optInt("ro");
      assertEquals(226, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("-`~_=", 693.033);
      assertEquals(693.033, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("xMrZ3 cRIS}t/EwrD", 2344L);
      double double0 = jSONObject1.optDouble("xMrZ3 cRIS}t/EwrD");
      assertEquals(2344.0, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", (-237));
      double double0 = jSONObject1.optDouble("gethashCode");
      assertEquals((-237.0), double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 4071);
      Object object0 = jSONObject1.opt("");
      assertEquals(4071, object0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Double double0 = new Double((-233.42124297732));
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("'", (Collection) linkedList0);
      boolean boolean1 = jSONObject0.has("'");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("[]", jSONObject0);
      String string0 = jSONObject0.getString("[]");
      assertNotNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("^:'I", (-1L));
      long long0 = jSONObject1.getLong("^:'I");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("2NP^t#Osi\\+Mm", 0L);
      int int0 = jSONObject1.getInt("2NP^t#Osi\\+Mm");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("xMrZ3 cRIS}t/EwrD", (-1642L));
      int int0 = jSONObject0.getInt("xMrZ3 cRIS}t/EwrD");
      assertEquals((-1642), int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.591095563595939
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Double double0 = new Double(0.0);
      jSONObject0.accumulate("Gj8*Z]|t|%xU", double0);
      jSONObject0.getDouble("Gj8*Z]|t|%xU");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("^:'I", (-1L));
      double double0 = jSONObject1.getDouble("^:'I");
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 8, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9214934308679616
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = Integer.valueOf(120);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      // Undeclared exception!
      JSONObject.valueToString(linkedList0, 8192, 120);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7682192157531085
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double(5277.75677835751);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(9, 3904);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.011862682640677
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Short short0 = new Short((short)67);
      JSONObject jSONObject0 = new JSONObject(short0);
      hashMap0.put((Boolean) null, "null");
      JSONObject jSONObject1 = jSONObject0.append("@p;LF-R=h,^-:~Or/#", hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString((int) (byte)70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("nam", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1166);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = new Double((-233.42124297732));
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.put((String) null, (-1611.82));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(4, 4);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("^:'I", (Object) jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Expected a ',' or ']'", "\f");
      assertEquals("\f", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append("@p;LF-h,^-:~Or/#", object0);
      String string0 = jSONObject0.optString("@p;LF-h,^-:~Or/#", (String) null);
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("^:'I", (-1L));
      double double0 = jSONObject0.optDouble("^:'I", (double) (-1L));
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getgetchars", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("Ak)7uVyVDr9J");
      assertNull(object0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Short short0 = new Short((short)109);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("xMrZ3 cRIS}t/EwrD", 1699L);
      int int0 = jSONObject0.getInt("xMrZ3 cRIS}t/EwrD");
      assertEquals(1699, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("[]", jSONObject0);
      try { 
        jSONObject0.getDouble("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ZM", (-1L));
      Object object0 = jSONObject1.get("ZM");
      assertEquals((-1L), object0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3605413527076704
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.get("[2:[fv<%63b4hjp'\"tV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[2:[fv<%63b4hjp'\\\"tV\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{c*u");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {c*u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = new Double((-233.42124297732));
      JSONObject jSONObject0 = new JSONObject(double0);
      boolean boolean0 = jSONObject0.optBoolean(" ", true);
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("JERX|1pGb!)");
      assertNull(object0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      jSONObject0.put("v@V#].,", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7280868748471145
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6859646722371444
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      StringWriter stringWriter0 = new StringWriter(293);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, (-1769), (-1769));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      String string0 = JSONObject.valueToString(hashMap0, 3182, (-10));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 188, 55);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 7, 7);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("java.lang.Long@00000000030", (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-108916131), 45);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7870020467612302
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = new Double((-233.42124297732));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(9, 20);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.8883748344162048
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      jSONObject0.toString((-996), (-996));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7913563426828252
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(125);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "3FI )q* ,}K[0g97/*");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = Integer.valueOf(120);
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = Float.valueOf((-1682.2955F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Float float0 = new Float(1.0);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double double0 = new Double((-1882.8871));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.quote("aM9N*[4$]e</E*o1_z");
      assertEquals("\"aM9N*[4$]e<\\/E*o1_z\"", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "\\u";
      String string1 = JSONObject.quote(string0);
      assertEquals("\"\\\\u\"", string1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.quote("\"w'Q8HrlxlU&");
      assertEquals("\"\\\"w'Q8HrlxlU&\"", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("oh6w", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("94)*GkK5J+R\"", "94)*GkK5J+R\"");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "jo");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Double double0 = new Double((-233.42124297732));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("val", true);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-84L));
      String string0 = jSONObject1.optString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("0rJFKPpq=G!:\"m3BueE", (Map) hashMap0);
      jSONObject0.optJSONObject("0rJFKPpq=G!:\"m3BueE");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double((-237.94082750151702));
      JSONObject jSONObject0 = new JSONObject(double0);
      Integer integer0 = new Integer(772);
      jSONObject0.append("] not found.", integer0);
      jSONObject0.optJSONArray("] not found.");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\"3BFI )q* ,}K[0g97/*\"");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = new Integer(476);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5294599036351055
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("^:'I", 6L);
      long long0 = jSONObject1.getLong("^:'I");
      assertEquals(6L, long0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.276727835804178
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("xMrZ3 cRIS}t/EwrD", 2344L);
      try { 
        jSONObject1.getJSONObject("xMrZ3 cRIS}t/EwrD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xMrZ3 cRIS}t/EwrD\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getsplit", (Collection) null);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("getsplit");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ZM", (-1L));
      int int0 = jSONObject1.optInt("ZM");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.6941592577998341
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("s64V", object0);
      try { 
        jSONObject1.getInt("s64V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s64V\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("xMrZ3 cRIS}t/EwrD", 2344L);
      double double0 = jSONObject0.getDouble("xMrZ3 cRIS}t/EwrD");
      assertEquals(2344.0, double0, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5806491250694639
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      jSONObject0.put("v@V#].,", (Map) hashMap0);
      try { 
        jSONObject0.getLong("v@V#].,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"v@V#].,\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.8931150746121771
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(55);
      hashMap0.put("@/YqE3", integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("@/YqE3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@/YqE3\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("Ak)7uVyVDr9J", "Ak)7uVyVDr9J");
      try { 
        jSONObject0.getBoolean("Ak)7uVyVDr9J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ak)7uVyVDr9J\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = JSONObject.doubleToString(3577.11);
      assertEquals("3577.11", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)67);
      JSONObject jSONObject1 = jSONObject0.append("[]", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.append("[]", short0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean((String) null);
      try { 
        jSONObject0.append((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".atEP", 0L);
      try { 
        jSONObject1.append(".atEP", ".atEP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[.atEP] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.9338099989206319
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-61));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.accumulate("] is not a JSONObject.", "] is not a JSONObject.");
      jSONObject0.accumulate("] is not a JSONObject.", "] is not a JSONObject.");
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.getJSONArray("] is not a JSONObject.");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("!ijZ^'[ZwKtTsWxVfg", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Ak)7uVyVDr9J", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{c,*u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {c,*u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{?>?.:<1y)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {?>?.:<1y)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("}F!T]UV*");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }F!T]UV*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put(",;6@$\"JruzHqyD8", (Collection) linkedList0);
      Short short0 = new Short((short) (-1259));
      jSONObject1.accumulate(",;6@$\"JruzHqyD8", short0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("7W", (-54L));
      boolean boolean0 = jSONObject0.isNull("7W");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.6216272846849153
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString(2147483645);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("i_B-#6_+j31Pc<&n66J");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 59, (-1442));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("}/]*%m", (-808));
      assertEquals((-808), int0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", 414L);
      assertEquals(414L, long0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Double double0 = new Double((-233.42124297732));
      JSONObject jSONObject0 = new JSONObject(double0);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("2 #`HYi_*;jWosMU");
      assertEquals("", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("7W");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", 0.0);
      double double0 = jSONObject1.optDouble("wheel.json.JSONObject");
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NtCm", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has(" at character ");
      assertFalse(boolean0);
  }
}
