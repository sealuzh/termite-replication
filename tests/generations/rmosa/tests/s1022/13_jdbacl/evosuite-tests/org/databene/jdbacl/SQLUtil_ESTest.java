/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 01:55:50 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.AlterTableNode;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      TableContainer tableContainer0 = new TableContainer("renamBmu", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getTable("?v");
      DBDataType dBDataType0 = DBDataType.getInstance(227, "execalter taqljen%m/jmu");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("?v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '?v' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" join ", defaultDBTable0, (DBDataType) null);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("10.6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '10.6' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("=2zyc7k", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "renamerenambmu";
      stringArray0[1] = "alter table";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "renamerenambmu";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLUtil.normalize("*/", true);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("%%Yay\">E8<&");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("BLOB BLOB DEFAULT %%Yay\">E8<& NULL", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("BLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kQ\"VjZA b6Rm:7F\"@'");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "selct ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "eS?/*-}{j*";
      // Undeclared exception!
      SQLUtil.isQuery("eS?/*-}{j*");
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBSchema dBSchema0 = new DBSchema("+Zh2-k[wjx:!0Z9ath");
      dBSchema0.getTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|2(?'Tzd1bf", (DBTable) null, 1804, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer0);
      String string0 = defaultDBColumn0.toString();
      String string1 = SQLUtil.normalize("BLOB : BLOB", true);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (-2839), " scan for table number ");
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      String[] stringArray1 = new String[8];
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = null;
      stringArray1[4] = null;
      stringArray1[5] = null;
      stringArray1[6] = null;
      stringArray1[7] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , ) REFERENCES null(, , , , , , , )", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("//*eq\"^3<");
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("aaDljl");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "aaDljl";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "<`", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[18];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TableContainer tableContainer0 = new TableContainer("u]|kqz");
      tableContainer0.getTable("u]|kqz");
      DBDataType dBDataType0 = DBDataType.getInstance((-621), "renamealter tablerenam/jmu");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#.oHcMz-EF=\"", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("RENAMEALTER TABLERENAM/JMU(3,3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("selectsg\"l;p=-f^+");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "org.apache.derby.impl.sql.execute.TableScanResultSet", "org.apache.derby.impl.sql.execute.TableScanResultSet");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insertdefault");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JM;sP@8Vm^;J(");
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "^d@$pb^S>L";
      stringArray0[2] = null;
      stringArray0[3] = "JM;sP@8Vm^;J(";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("{-vg", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/@cgcr,o(;f9q3d");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/@cgcr,o(;f9q3d";
      stringArray0[1] = "16384";
      stringArray0[2] = "/@cgcr,o(;f9q3d";
      stringArray0[3] = "/@cgcr,o(;f9q3d";
      stringArray0[4] = "/@cgcr,o(;f9q3d";
      stringArray0[5] = "/@cgcr,o(;f9q3d";
      stringArray0[6] = "/@cgcr,o(;f9q3d";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/@cgcr,o(;f9q3d", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(2971);
      StringBuilder stringBuilder1 = stringBuilder0.append((float) 2971);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals("2971.0CONSTRAINT /@cgcr,o(;f9q3d ", stringBuilder1.toString());
      assertEquals("2971.0CONSTRAINT /@cgcr,o(;f9q3d ", stringBuilder0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "select     rf.rdb$field_name as col[mn_name,     f.rdb$field_type as field_type,     f.rdb$field_sub_type as field_sub_type,     f.rdb$field_scale as field_scale,     frdb$field_precision as field_precision from     rdb$relation_constraints rc,    rdb$index_segments idx,    rdb$relation_fields rf,    rdb$fields f where     rc.rdb$relation_name = ? and    rc.rdb$constraint_type = 'PRIMARY KEY' and     idx.rdb$indYx_name = rc.rdb$index_name and     rf.rdb$field_name = idx.rdb$field_name and     rf.rdb$relation_name = ? and     f.rdb$field_name = rf.rdb$field_source";
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      AlterTableNode alterTableNode0 = new AlterTableNode();
      TableDescriptor tableDescriptor0 = alterTableNode0.baseTable;
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) dataDictionaryImpl0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.derby.impl.sql.catalog.DataDictionaryImpl cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized viewsetblob(string, inputstream, long)", defaultDBTable0, 895, "call");
      defaultDBColumn0.getNotNullConstraint();
      SQLUtil.removeComments("j{i]w#w");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("h2.recompileAlways");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "j{i]w#w";
      stringArray0[1] = ",;t0~H\".";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "drop materialized viewsetblob(string, inputstream, long)", true, stringArray0);
      dBPrimaryKeyConstraint0.setName("call");
      MockFileWriter mockFileWriter0 = new MockFileWriter(",;t0~H\".");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      assertEquals(2, (int)integer0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      Integer integer0 = RawTransaction.ABORT;
      String string0 = null;
      String string1 = "";
      Integer.getInteger("");
      SQLUtil.substituteMarkers("", "XBCX5.S", integer0);
      SQLUtil.isDML("XBCX5.S");
      TableContainer tableContainer0 = new TableContainer("XBCX5.S");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("BLOB", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("BLOB BLOB NULL", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D4.MW0]M.b0:,D|k", defaultDBTable0, (DBDataType) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "select`}|]w?kf(?=z";
      stringArray1[1] = "select`}|]w?kf(?=z";
      stringArray1[2] = "select`}|]w?kf(?=z";
      stringArray1[3] = "select`}|]w?kf(?=z";
      stringArray1[4] = "select`}|]w?kf(?=z";
      stringArray1[5] = "select`}|]w?kf(?=z";
      stringArray1[6] = "select`}|]w?kf(?=z";
      stringArray1[7] = "select`}|]w?kf(?=z";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("select`}|]w?kf(?=z", stringArray1, "select`}|]w?kf(?=z", "alter index", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName(" NULL", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "KJH9J[", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewsetblob(string, inputstream, long)");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "drop materialized viewsetblob(string, inputstream, long)";
      stringArray0[1] = "truncate%tbtal =m3";
      stringArray0[2] = " join ";
      stringArray0[3] = " join ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "truncate%tbtal =m3", false, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop indexnull", true, dBUniqueConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("call", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFileWriter mockFileWriter0 = new MockFileWriter("&LBa8:(-]I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isQuery("/");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4642567260559776
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join("Bytes", "Bytes", stringArray0, "Bytes", "", stringArray0);
      assertEquals("Bytes join Bytes as  on Bytes.null = .null and Bytes.null = .null and Bytes.null = .null and Bytes.null = .null and Bytes.null = .null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create materialized viewinsert", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , )", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hOtD/", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputText rowOutputText0 = new RowOutputText("hOtD/", "hOtD/", "V/|N~m", false, "getOnceResultSet");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0, true);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) rowOutputText0;
      objectArray0[1] = (Object) nameSpec0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) rowOutputText0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) defaultDBTable0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "getOnceResultSet", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals(37, rowOutputText0.size());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = ",referZncespri`=";
      String string1 = ",;tk9Hn.";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewrenamjme");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",referZncespri`=";
      stringArray0[1] = ",referZncespri`=";
      stringArray0[2] = "executerenamjme";
      stringArray0[3] = ",;tk9Hn.";
      stringArray0[4] = ",;tk9Hn.";
      stringArray0[5] = ",referZncespri`=";
      stringArray0[6] = ",;tk9Hn.";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ",referZncespri`=", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("R/1");
      MockFileWriter mockFileWriter0 = new MockFileWriter("),r<od0u.V5o\"pq");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      // Undeclared exception!
      try { 
        DBDataType.getInstance("executerenamjme");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("INCREMENT BIGINT");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(xiDRilT`9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (xiDRilT`9
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Currently positioned before the start of the ResultSet.  You cannot call deleteRow() here.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "alter materialized view$^adwlsg{-0]ly|@w=#";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view$^adwlsg{-0]ly|@w=#");
      String string1 = "TABLESCAN";
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getActiveConstraintDescriptors((ConstraintDescriptorList) null);
      String string2 = "/*";
      SQLUtil.normalize("/*", false);
      VersionNumber versionNumber0 = null;
      try {
        versionNumber0 = new VersionNumber((List<VersionNumberComponent>) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.CollectionUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = SQLUtil.normalize("=2ZyC7KZrL/1ZcN7j", true);
      assertEquals("= 2ZyC7KZrL / 1ZcN7j", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "select     rf.rdb$field_name as column_name,     f.rdb$field_type as field_type,     f.rdb$field_sub_type as field_sub_type,     f.rdb$field_scale as field_scale,     frdb$field_precision as field_precision from     rdb$relation_constraints rc,    rdb$index_segments idx,    rdb$relation_fields rf,    rdb$fields f where     rc.rdb$relation_name = ? and    rc.rdb$constraint_type = 'PRIMARY KEY' and     idx.rdb$index_name = rc.rdb$index_name and     rf.rdb$field_name = idx.rdb$field_name and     rf.rdb$relation_name = ? and     f.rdb$field_name = rf.rdb$field_source";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("BULKINnSERT");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      Object object0 = new Object();
      StringBuilder stringBuilder2 = stringBuilder1.append(object0);
      int int0 = 1842;
      int int1 = (-93);
      // Undeclared exception!
      try { 
        stringBuilder2.delete(1842, (-93));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[22];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "hoD1V{y<", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , , , , , , , , , , , , , , , )", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = SQLUtil.normalize("aAhGK'T,s@B", true);
      assertEquals("aAhGK 'T,s@B'", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("O;|6h]O`<=[1i`r", (String[]) null, "O;|6h]O`<=[1i`r", "^", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = SQLUtil.normalize("@j?-LkZ'~J-Iq", false);
      assertEquals("@ j ? - LkZ '~J-Iq'", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("$ZLX1|10@$XMGELd8<");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "One of the version components not available: ", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog((String) null, defaultDatabase0);
      SQLUtil.typeAndName(dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("catalog null");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("$ZLX1|10@$XMGELd8<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      String string1 = SQLUtil.normalize("80000018-00d0-fd77-3ed8-000a0a0b1900", true);
      assertEquals("80000018 - 00d0 - fd77 - 3ed8 - 000a0a0b1900", string1);
      
      String string2 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null", string2);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "null = null", "PI");
      String string3 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint constraint", string3);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("80000018-00d0-fd77-3ed8-000a0a0b1900");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(143, "yDLtK,nDV8");
      Integer integer0 = RawTransaction.ABORT;
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("yDLtK,nDV8", false);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("yDLtK,nDV8", (DBTable) null, dBDataType0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("YDLTK,NDV8(2)", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = SQLUtil.normalize("Y3(9[KJQ1hchR2c(", true);
      assertEquals("Y3 (9 [ KJQ1hchR2c (", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = SQLUtil.normalize("<* -DOTbW)t", true);
      assertEquals("< * - DOTbW) t", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("insertdefault");
      SQLUtil.addOptionalCondition("insertdefault", stringBuilder0);
      assertEquals("insertdefault or insertdefault", stringBuilder0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("drop materialized viewsetblob(string, inputstream, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"string\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("`}|]w?Kf(?=z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: `}|]w?Kf(?=z
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" jin ", defaultDBTable0, (DBDataType) null);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "c3i/66vK+`v^#0", false, " jin ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals(" jin  NOT NULL", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("excepti", true, (String) null, "excepti");
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK excepti", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("CALL SYSTEM_COMBINE_BLOB(-1)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewsetblob(string, inputstream, long)");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " join ", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \" join \" ", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":/~_k";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(":/~_k = ':/~_k'", string0);
      
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^Tb");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getPrimaryKeyConstraint();
      DBPackage dBPackage0 = new DBPackage("gF+is3#", dBSchema0);
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = SQLUtil.normalize("mBR-$+,VEwo", false);
      assertEquals("mBR - $ +, VEwo", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select ", false, "select ", "select ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"select \" ", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Bj4Mz", false, "Bj4Mz", "Bj4Mz");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "L";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ",gx:", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("|G]");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      int int0 = (-328);
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-328), (-328));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -328
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("alter session7|dpt-ns0jh", stringBuilder0);
      assertEquals("alter session7|dpt-ns0jh", stringBuilder0.toString());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("dnw", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Character character0 = Character.valueOf('-');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'-'", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "aa)Djl";
      String[] stringArray0 = new String[23];
      stringArray0[0] = "aa)Djl";
      stringArray0[1] = "aa)Djl";
      stringArray0[4] = " B6uyG";
      String[] stringArray1 = new String[8];
      // Undeclared exception!
      try { 
        SQLUtil.join("aa)Djl", " B6uyG", stringArray0, stringArray0[2], " B6uyG", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("insetde!ult", "insetde!ult", (String[]) null, "insetde!ult", "insetde!ult", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "drop materialized view";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "drop materialized view";
      stringArray0[1] = "drop materialized view";
      stringArray0[2] = "drop materialized view";
      stringArray0[3] = "drop materialized view";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("drop materialized view", stringArray0, "drop materialized view", "drop materialized view", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("aa2l-2l", (String[]) null, stringArray0[0], "aa2l-2l", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "K2nkJ:'xnF<OVem[";
      DBDataType dBDataType0 = DBDataType.getInstance(122, "callrenamjme");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callrenamjme");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("callrenamjme", defaultDBTable0, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "K2nkJ:'xnF<OVem[");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("K2nkJ:'xnF<OVem[CALLRENAMJME", stringBuilder0.toString());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(38, "LOCK_TABLE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("renamjme", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("LOCK_TABLE(3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.7683676149794321
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLUtil.normalize("0vV>%%-&[CBJ1L~*\"q", true);
      SQLUtil.isDML("0vV > % % - & [ CBJ1L ~ * \"q\"");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.countProviders();
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DBDataType.getInstance("BLOB");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CHECK ";
      // Undeclared exception!
      try { 
        SQLUtil.join("create table?ud,2j.lbcch$e%#wt]", "CHECK ", stringArray0, "CHECK ", "selectxc", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.join("c*I.* $Iy.;", " normal ", stringArray0, " normal ", " normal ", stringArray1);
      assertEquals("c*I.* $Iy.; join  normal  as  normal  on ", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("", (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("dpq>]kc", stringArray0, "dpq>]kc", "dpq>]kc", stringArray0);
      assertEquals("left join dpq>]kc as dpq>]kc on ", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("select into", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "";
      SQLUtil.isProcedureCall("");
      String string1 = "5owrz-I";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5owrz-I");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5owrz-I", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5owrz-I");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("df|DHY |dZmpt,U>_", (CompositeDBObject<? extends DBObject>) null);
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container df|DHY |dZmpt,U>_", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = SQLUtil.renderValue("");
      assertEquals("''", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[20];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Unknown constraint type: ");
      SQLUtil.addRequiredCondition("Unknown constraint type: ", stringBuilder0);
      assertEquals("Unknown constraint type:  and Unknown constraint type: ", stringBuilder0.toString());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("alter session7|dpt-ns0jh", stringBuilder0);
      assertEquals("alter session7|dpt-ns0jh", stringBuilder0.toString());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLUtil.removeComments("update");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = SQLUtil.normalize("tl*o%@FbwA}@.Ij", false);
      assertEquals("tl * o  % @ FbwA } @.Ij", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("tL", "renameaadljl", "tL");
      assertEquals("tL", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[20];
      String string0 = SQLUtil.renderColumnListWithTableName("uMm]g,[\"Hny:", stringArray0);
      assertEquals("uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null, uMm]g,[\"Hny:.null", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = SQLUtil.normalize("tl*o%@FbwA}@.Ij", true);
      assertEquals("tl * o  % @ FbwA } @.Ij", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("BLOB SUB_TYPE 0");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index/", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("BLOB SUB_TYPE 0.create unique index/", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("'z2mb", "create tabley[zzr6.@=8u?w`c", stringArray0, "'z2mb", "create tabley[zzr6.@=8u?w`c", stringArray0);
      assertEquals("'z2mb join 'z2mb as create tabley[zzr6.@=8u?w`c on create tabley[zzr6.@=8u?w`c.null = create tabley[zzr6.@=8u?w`c.null", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[20];
      String string0 = SQLUtil.join("XCY00.S", "inner", stringArray0, "inner", "XCY00.S", stringArray0);
      assertEquals("XCY00.S join inner as XCY00.S on inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null and inner.null = XCY00.S.null", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("select into", "[5U8I <vhzrO*", stringArray0, "select into", "select into", stringArray0);
      assertEquals("select into join select into as select into on ", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(" NULL", (String[]) null, " NULL", "org.apache.derby.impl.db.BasicDatabase", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0vV>%%-&[CBJ1L~*\"q";
      String string0 = SQLUtil.innerJoin("A):~WQ>}0Nx?h", stringArray0, "nPZ", "nPZ", stringArray0);
      assertEquals("nPZ as nPZ on A):~WQ>}0Nx?h.0vV>%%-&[CBJ1L~*\"q = nPZ.0vV>%%-&[CBJ1L~*\"q", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter tableselect into");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Bytes";
      stringArray0[1] = "Bytes";
      stringArray0[2] = "Bytes";
      stringArray0[3] = "Bytes";
      stringArray0[4] = "Bytes";
      stringArray0[6] = "Bytes";
      stringArray0[7] = "Bytes";
      stringArray0[8] = "Bytes";
      String string0 = SQLUtil.join("inner", "Bytes", stringArray0, "@I(A~e)}eA*", "Bytes", stringArray0);
      assertEquals("@I(A~e)}eA* as Bytes on Bytes.Bytes = Bytes.Bytes and Bytes.Bytes = Bytes.Bytes and Bytes.Bytes = Bytes.Bytes and Bytes.Bytes = Bytes.Bytes and Bytes.Bytes = Bytes.Bytes and Bytes.null = Bytes.null and Bytes.Bytes = Bytes.Bytes and Bytes.Bytes = Bytes.Bytes and Bytes.Bytes = Bytes.Bytes", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("wj)C7ObI8");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("flush");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("renamjme");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(",referZncespri`=");
      assertNull(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select     rf.rdb$field_name as column_name,     f.rdb$field_type as field_type,     f.rdb$field_sub_type as field_sub_type,     f.rdb$field_scale as field_scale,     f.rdb$field_precision as field_precision from     rdb$relation_constraints rc,    rdb$index_segments idx,    rdb$relation_fields rf,    rdb$fields f where     rc.rdb$relation_name = ? and     rc.rdb$constraint_type = 'PRIMARY KEY' and     idx.rdb$index_name = rc.rdb$index_name and     rf.rdb$field_name = idx.rdb$field_name and     rf.rdb$relation_name = ? and     f.rdb$field_name = rf.rdb$field_source");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "rowcount remaining=";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("rowcount remaining=", true, "42Z47.U", "exec");
      int int0 = 335544327;
      StringBuilder stringBuilder0 = new StringBuilder(335544327);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      int int1 = 90064;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(90064, 90064);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 90064
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("yL", true, "yL", "yL");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT yL ", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "exe";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("exe", false, "exe", "exe");
      StringBuilder stringBuilder0 = new StringBuilder(3763);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(3763, (CharSequence) "exe");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3763
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "Bytes";
      Integer integer0 = RawTransaction.COMMIT;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Bytes", true, "Bytes", "Bytes");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String[] stringArray0 = new String[19];
      String string0 = SQLUtil.join("Bytes", "Bytes", stringArray0, "Bytes", "Bytes", stringArray0);
      assertEquals("Bytes join Bytes as Bytes on Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null and Bytes.null = Bytes.null", string0);
      
      DBSchema dBSchema0 = new DBSchema("<CSX[p#tCW");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertexec", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter indexexec", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , , , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.751273597885415
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLUtil.normalize("0vV>%%-&[CBJ1L~*\"q", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*s4LgBZYtQ(5dc_");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("!VgyZ1sGu$;Tb6K,kA");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("lessThan");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter materialized viewalter materialized viewrenamjme");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
