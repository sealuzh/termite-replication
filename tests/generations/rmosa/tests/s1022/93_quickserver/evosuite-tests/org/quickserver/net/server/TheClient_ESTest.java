/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 01:50:03 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6701173224114383
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("</prompt-name>\n", 0);
      quickServer0.run();
      theClient0.setServer(quickServer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z {'Jq43Uba3@9/$B");
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getClientBinaryHandler();
      theClient0.toString();
      theClient0.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(1000L);
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(1000L);
      theClient0.getSocket();
      theClient0.getServer();
      System.setCurrentTimeMillis(2390L);
      theClient0.getServer();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(2);
      QuickServer quickServer0 = new QuickServer();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.initServer(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.getClientObjectHandler();
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.getSocketChannel();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      assertEquals(2, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4273916305367944
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("\t<load>");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      theClient0.getSocketChannel();
      theClient0.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      theClient0.getServer();
      theClient0.getTimeoutMsg();
      theClient0.getTimeoutMsg();
      theClient0.getSocketChannel();
      theClient0.getServer();
      System.setCurrentTimeMillis(1L);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.setTrusted(false);
      theClient0.getTimeoutMsg();
      theClient0.getTimeoutMsg();
      System.setCurrentTimeMillis((-244L));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getAuthenticator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.getClientObjectHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getServer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.getClientWriteHandler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      theClient0.getClientCommandHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.setMaxConnectionMsg("");
      theClient1.getMaxConnectionMsg();
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      theClient0.setMaxAuthTry((-608));
      int int0 = theClient0.getMaxAuthTry();
      assertEquals((-608), int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getTimeout();
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      theClient0.getMaxAuthTryMsg();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.getMaxAuthTryMsg();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setMaxConnectionMsg("");
      theClient1.getClientExtendedEventHandler();
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = "no socket";
      theClient0.setMaxAuthTryMsg("no socket");
      theClient0.setMaxAuthTryMsg("no socket");
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.setMaxAuthTry(1);
      theClient0.getMaxAuthTry();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.getClientCommandHandler();
      theClient0.getClientObjectHandler();
      theClient0.getTimeoutMsg();
      try { 
        QuickServer.load("no socket");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientEventHandler();
      theClient0.getClientEvent();
      theClient0.setTimeout(0);
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("SocketChannel read was ");
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.toString();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getTrusted();
      theClient0.getAuthenticator();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getServer();
      ClientAuthenticationHandler clientAuthenticationHandler0 = theClient0.getClientAuthenticationHandler();
      // Undeclared exception!
      try { 
        clientAuthenticationHandler0.handleAuthentication((ClientHandler) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // String/Byte mode not implemented!
         //
         verifyException("org.quickserver.net.server.QuickAuthenticationHandler", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTryMsg("Q?R7");
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getServer();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setTimeoutMsg("h>+w%#`\"~G$*");
      System.setCurrentTimeMillis(0L);
      theClient0.getServer();
      theClient0.getAuthenticator();
      theClient0.getSocketChannel();
      ClientData clientData0 = theClient0.getClientData();
      theClient0.setTimeout(0);
      theClient0.setClientData(clientData0);
      theClient0.toString();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      theClient0.getSocketChannel();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.getServerHooks();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-2554));
      theClient0.getAuthenticator();
      String string0 = null;
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.setTimeoutMsg((String) null);
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxAuthTryMsg((String) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getMaxAuthTry();
      theClient0.getClientData();
      theClient0.getTimeout();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      // Undeclared exception!
      try { 
        QuickServer.load((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(1000);
      theClient0.setTimeout(1);
      theClient0.getClientExtendedEventHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient1.getClientExtendedEventHandler();
      theClient0.setTrusted(true);
      theClient0.getTimeout();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      assertEquals(1, theClient0.getTimeout());
      
      theClient1.setCommunicationLogging(false);
      theClient1.getTimeoutMsg();
      assertEquals(0, theClient1.getTimeout());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.setTimeoutMsg("[non-connected]");
      theClient0.setCommunicationLogging(false);
      theClient0.setTimeout((-1931));
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      theClient0.getClientEvent();
      CommandHandler commandHandler0 = new CommandHandler();
      Data data0 = new Data();
      theClient0.getClientObjectHandler();
      assertEquals((-1931), theClient0.getTimeout());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      // Undeclared exception!
      try { 
        blockingClientHandler0.getSocketChannel();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
