/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 01:56:07 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5688032438074955
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      hashMap0.put((Short) null, (JSONArray) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("c", (Map) hashMap0);
      jSONObject1.optBoolean("c", true);
      jSONObject1.optLong("getadd");
      jSONObject0.put("lyY.#:_hj$$;y<9/Z", 1L);
      // Undeclared exception!
      try { 
        jSONObject1.toString(87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float float0 = new Float(2572.0546856673);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      Double double0 = new Double(254.70685450421);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.179287363924215
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "qz--+77n<r?Cx|xMO:e";
      Float float0 = new Float(0.0);
      hashMap0.put((Double) null, float0);
      JSONObject jSONObject1 = jSONObject0.put("l:Kwz,+l", (Map) hashMap0);
      jSONObject1.put("qz--+77n<r?Cx|xMO:e", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString((-490), (-490));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      jSONObject0.put("%ZvI/I(d53:#:o >", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isreverseBytes", 2313L);
      String string0 = jSONObject1.toString((-2436), (-2436));
      String string1 = jSONObject1.optString("", "");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8764904395512632
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("t&eB&%", (Map) hashMap1);
      JSONObject jSONObject2 = jSONObject1.put("AubAPw6T*T99_+6h;Ak", (Map) hashMap1);
      jSONObject2.toString((-2436), (-3842));
      int int0 = jSONObject0.optInt("getputIfAbsent", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("app", "app");
      JSONObject.getNames((Object) jSONObject1);
      String string0 = jSONObject0.getString("app");
      assertNotNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "c";
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("c", (Map) hashMap0);
      jSONObject1.put("c", true);
      jSONObject1.optBoolean("c");
      long long0 = (-10L);
      try { 
        jSONObject0.getInt("c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"c\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-1459);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-1314), 246);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2811211713557142
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("j@", 3302);
      assertEquals(3302, int0);
      
      JSONObject jSONObject1 = new JSONObject();
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      jSONObject1.put("j@", (Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject1.putOpt("\f", object0);
      long long0 = jSONObject1.optLong("JSON does not allow non-finite numbers.");
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONObject1.isNull("\f");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1000039501699495
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      jSONObject0.put("c", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("9YDIhiU", (-10L));
      jSONObject1.getInt("9YDIhiU");
      jSONObject1.toString((-2436), (-2436));
      JSONObject jSONObject2 = jSONObject0.put("c", (Map) hashMap0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("%4Kw~,xl", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Byte byte0 = new Byte((byte) (-16));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("aij<LvkJI[7>P@oN]", byte0);
      jSONObject1.optDouble("aij<LvkJI[7>P@oN]");
      try { 
        jSONObject0.getBoolean("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1003470033431912
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short short0 = (short)2680;
      Short short1 = new Short((short)2680);
      JSONObject jSONObject0 = new JSONObject(short1);
      String string0 = "2\\8+`_GMaj";
      JSONObject jSONObject1 = jSONObject0.put("28+`_GMaj", (long) (short)2680);
      jSONObject1.put("28+`_GMaj", 1L);
      jSONObject1.optInt("28+`_GMaj");
      jSONObject0.put("28+`_GMaj", (long) (short)2680);
      jSONObject0.optDouble("FhH7s*4G`s");
      JSONObject.numberToString(short1);
      try { 
        jSONObject0.getDouble("FhH7s*4G`s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"FhH7s*4G`s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.592118782174603
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("@n[]", 108.3154211571);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@n[]";
      stringArray0[1] = "@n[]";
      jSONObject1.optDouble("@n[]");
      jSONObject1.getInt("@n[]");
      stringArray0[2] = "isclear";
      stringArray0[3] = "@n[]";
      stringArray0[1] = "@n[]";
      stringArray0[6] = "`]D#-~6M:\"CZd";
      stringArray0[7] = "@n[]";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 13, 13);
      assertNotNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 4117, 4117);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "do";
      String string1 = "Xi@!9<X}X:Y";
      JSONObject jSONObject1 = jSONObject0.put("Xi@!9<X}X:Y", 1.0);
      jSONObject1.getDouble("Xi@!9<X}X:Y");
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("do");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of do
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("do", (-0.3176288812547759));
      double double0 = jSONObject1.getDouble("do");
      assertEquals((-0.3176288812547759), double0, 0.01);
      
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      String string0 = JSONObject.doubleToString((-4400.7935179));
      assertEquals("-4400.7935179", string0);
      
      String string1 = JSONObject.quote("get");
      assertEquals("\"get\"", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.doubleToString(1229.1);
      assertEquals("1229.1", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("W[", 12);
      double double0 = jSONObject1.optDouble("W[", 735.4363948105263);
      assertEquals(12.0, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("c-\"~`D/");
      Long long0 = new Long(0L);
      Long.max(0L, 1L);
      JSONObject jSONObject1 = jSONObject0.putOpt("c-\"~`D/", long0);
      jSONObject0.getInt("c-\"~`D/");
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("do", 0.0);
      jSONObject1.getDouble("do");
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("oNPG9E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of oNPG9E
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("do", (-88L));
      long long0 = jSONObject1.getLong("do");
      assertEquals((-88L), long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("do", 0L);
      long long0 = jSONObject1.getLong("do");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(51);
      Boolean boolean0 = new Boolean("toU");
      Boolean boolean1 = new Boolean("|[;c$C25y!,$Kn%,,x");
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      jSONObject0.put("Rgf`P0znA1S}lHcL_", (Map) hashMap0);
      jSONObject0.accumulate("Rgf`P0znA1S}lHcL_", boolean1);
      jSONObject0.getJSONArray("Rgf`P0znA1S}lHcL_");
      StringWriter stringWriter0 = new StringWriter(51);
      StringWriter stringWriter1 = stringWriter0.append('x');
      // Undeclared exception!
      try { 
        stringWriter1.write("gL:i+4MPfCVZ|", (int) 'x', 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("p%i1+t?uv82W;OXp");
      JSONObject jSONObject1 = jSONObject0.putOpt("M^&]]1=D:/X3q5u .b", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("M^&]]1=D:/X3q5u .b");
      assertFalse(boolean1);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.putOpt("", boolean0);
      jSONObject0.getBoolean("");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.toString();
      jSONObject1.optBoolean((String) null);
      Float float0 = new Float(453.108F);
      assertEquals(453.108F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONArray0);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(jSONArray0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONArray cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("qz--+77n<r?Cx|xMO:e", (Map) hashMap0);
      jSONObject0.getJSONObject("qz--+77n<r?Cx|xMO:e");
      jSONObject1.put("AubAPw6T*T99_+6h;Ak", (Map) hashMap0);
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("AubAPw6T*T99_+6h;Ak");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.toString(745);
      JSONObject jSONObject1 = new JSONObject(string0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(108);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?zr";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.accumulate("?zr", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("?zr");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("\t");
      assertEquals(0L, long0);
      
      Object object1 = JSONObject.NULL;
      Long long1 = new Long(0L);
      JSONObject.valueToString(long1);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put("\t", (Collection) linkedList0);
      jSONObject0.append("java.lang.Long@0000000003", jSONObject1);
      Integer integer0 = new Integer(44);
      Integer.getInteger((String) null, 4666);
      Short short0 = new Short((short)1473);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\t");
      assertNotNull(jSONArray0);
      
      double double0 = jSONObject1.optDouble("^v3 ~X^M;'<e", (double) 4666);
      assertEquals(4666.0, double0, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0", 256.2497901123243);
      long long0 = jSONObject0.optLong("0");
      assertEquals(256L, long0);
      
      boolean boolean0 = jSONObject0.isNull("] is not a JSONObject.");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1213626531432976
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.append("", "\"\"");
      jSONObject1.optJSONArray("");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "h9EIK}>v=+";
      JSONObject jSONObject1 = jSONObject0.putOpt("h9EIK}>v=+", "h9EIK}>v=+");
      try { 
        jSONObject1.getJSONArray("h9EIK}>v=+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"h9EIK}>v=+\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "qz--+77n<r?Cx|xMO:e";
      JSONObject jSONObject1 = jSONObject0.put("qz--+77n<r?Cx|xMO:e", (Map) hashMap0);
      Byte byte0 = new Byte((byte) (-86));
      try { 
        jSONObject1.append("qz--+77n<r?Cx|xMO:e", byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[qz--+77n<r?Cx|xMO:e] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "a2H;Fk;R703/.");
      JSONObject jSONObject0 = new JSONObject("a2H;Fk;R703/.", stringArray0);
      try { 
        jSONObject0.getInt("a2H;Fk;R703/.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a2H;Fk;R703/.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[]";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[]", (-3070.8930984479));
      jSONObject0.optString("[]", "[]");
      String string0 = JSONObject.doubleToString(1);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("paB\"_'WAJnB1*!yK", (-1872.94));
      long long0 = jSONObject0.optLong("paB\"_'WAJnB1*!yK");
      assertEquals((-1872L), long0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean boolean0 = new Boolean("#S4vaeck=");
      JSONObject jSONObject0 = new JSONObject((Object) "#S4vaeck=");
      // Undeclared exception!
      jSONObject0.toString(2147483645);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 26, 81);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.append("getappend", stringWriter0);
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      stringWriter0.write(charArray0);
      stringWriter0.append('\\');
      stringWriter0.flush();
      jSONObject0.write(stringWriter0);
      String string0 = JSONObject.doubleToString(3559.7190667027);
      assertEquals("3559.7190667027", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.putOpt("", boolean0);
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(34);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      Integer integer0 = Integer.valueOf((-1852));
      JSONObject jSONObject1 = jSONObject0.accumulate("", integer0);
      Boolean boolean0 = new Boolean("slngalue");
      int int0 = jSONObject1.optInt("", (-956));
      assertEquals((-1852), int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("null");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((-1307.4789F));
      Float.isFinite((-1307.4789F));
      hashMap0.put("xi*W3cC$K/`E", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("xi*W3cC$K/`E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xi*W3cC$K/`E\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[]", (-3070.8930984479));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 1, 4211);
      jSONObject1.opt("[]");
      Double double0 = new Double((-326.6878375));
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "h9EIK}>v=+";
      jSONObject0.putOpt("h9EIK}>v=+", "h9EIK}>v=+");
      try { 
        jSONObject0.getDouble("h9EIK}>v=+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"h9EIK}>v=+\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("] is notTa number.", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString((Object) null, 32, (-447));
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "null");
      assertEquals("null", stringWriter1.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = new Boolean("U");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString(69);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean.valueOf("{igkn6#q9q");
      JSONObject.valueToString("{igkn6#q9q");
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      JSONTokener jSONTokener0 = new JSONTokener("{igkn6#q9q");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {igkn6#q9q
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject.valueToString(hashMap0, 743, 34);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONObject(65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[65] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(1);
      jSONArray0.put(1, true);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.opt((String) null);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      // Undeclared exception!
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "l9EIK}>v=+";
      jSONObject0.putOpt("l9EIK}>v=+", "l9EIK}>v=+");
      try { 
        jSONObject0.getBoolean("l9EIK}>v=+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"l9EIK}>v=+\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.48717948717948717
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("l9EIK}>v=+", 3502.0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.putOpt("l9EIK}>v=+", "l9EIK}>v=+");
      Byte byte0 = new Byte((byte)119);
      jSONObject2.accumulate("isvalueOf", byte0);
      jSONObject0.getLong("isvalueOf");
      jSONObject2.getLong("isvalueOf");
      Float float0 = new Float(2106.0);
      JSONObject.testValidity(float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Byte byte0 = new Byte((byte)8);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\n";
      jSONObject0.putOpt("\n", "\n");
      try { 
        jSONObject0.getLong("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      Integer.valueOf((-1852));
      int int0 = jSONObject0.optInt("", (-956));
      assertEquals((-956), int0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      Short short0 = new Short((short)312);
      hashMap0.put("getmax", short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      hashMap0.put((Integer) null, (JSONArray) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Integer) null, (JSONArray) null);
      StringWriter stringWriter0 = new StringWriter(128);
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("0", true);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.8917798904003222
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.quote("0;F q gK3;m15w");
      assertEquals("\"0;F q gK3;m15w\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"0;F \\q\\ gK3;m15w\"");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0;F q gK3;m15w";
      stringArray0[1] = "\"0;F \\q\\ gK3;m15w\"";
      stringArray0[2] = "0;F q gK3;m15w";
      stringArray0[3] = "\"0;F \\q\\ gK3;m15w\"";
      stringArray0[4] = "0;F q gK3;m15w";
      stringArray0[5] = "0;F q gK3;m15w";
      stringArray0[6] = "\"0;F \\q\\ gK3;m15w\"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Long long0 = new Long((-97L));
      String[] stringArray1 = JSONObject.getNames((Object) long0);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("java.lang.Long@00000000010");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "l9EIK}>v=+");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("b`vqZ=R9ShhZ_");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("] is notTa number.", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject("{}");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.put("A JSONObject text must begin with '{'", object0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(6.7647866085645125);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Byte byte0 = new Byte((byte)39);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("] is not a JSONArray.", "] is not a JSONArray.");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("] is not a JSONArray.");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put(".", (Collection) linkedList0);
      Integer.getInteger("] is not a JSONArray.", 1992);
      Integer integer0 = new Integer(120);
      Short short0 = Short.valueOf((short)2709);
      JSONObject jSONObject2 = jSONObject1.accumulate(".", short0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer(51);
      Integer integer1 = new Integer(51);
      Boolean boolean0 = new Boolean("Rgf`P0znA1S}lHcL_");
      Double double1 = new Double(0.0);
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Rgf`P0znA1S}lHcL_", integer0);
      Long long0 = new Long(51);
      jSONObject1.accumulate("Rgf`P0znA1S}lHcL_", long0);
      try { 
        jSONObject0.getJSONObject("Rgf`P0znA1S}lHcL_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Rgf`P0znA1S}lHcL_\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      Byte byte0 = new Byte((byte) (-82));
      hashMap0.put(byte0, "null");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 772);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("Substring bounds error", 35);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = Integer.valueOf(8);
      hashMap0.put(integer0, "isset");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject.getNames((Object) null);
      JSONObject.getNames((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gHwD* d4", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("do", 0.0);
      jSONObject1.remove("do");
      JSONObject.getNames((Object) jSONObject1);
      JSONObject.testValidity(jSONObject1);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "app";
      JSONObject jSONObject1 = jSONObject0.putOpt("app", "app");
      jSONObject1.optString("app");
      Short short0 = new Short((short) (-645));
      hashMap0.put("[", short0);
      try { 
        jSONObject1.getInt("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(1494, 92);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.quote("!9;@/AMc4%_soK`yj");
      assertEquals("\"!9;@/AMc4%_soK`yj\"", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float((-1474.75121649257));
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer integer0 = new Integer((-915));
      Integer.getInteger((String) null, 1688);
      Boolean boolean0 = new Boolean("Rgf`P0znA1S}lHcL_");
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("EWt*eKZXg^,/}", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\f", 254.645635221);
      long long0 = jSONObject1.optLong("JSON does not allow non-finite numbers.");
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONObject1.isNull("\f");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.quote("C\" tk 57xd(d?['z1");
      assertEquals("\"C\\\" tk 57xd(d?['z1\"", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Long long0 = new Long(0L);
      try { 
        jSONObject0.append((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("-Dpk}(wl-us/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-Dpk}(wl-us/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[8];
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("fo", "fo");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("\f", 1L);
      assertEquals(1L, long0);
      
      Long long1 = new Long(0L);
      String[] stringArray0 = JSONObject.getNames((Object) long1);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.getNames(jSONObject0);
      jSONObject0.append("\"uPElbf^{BES", "\"uPElbf^{BES");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("getformat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getformat\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1098L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("#H4y<)<OI3u", 0L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(34);
      Long long0 = new Long(301L);
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-581L));
      hashMap0.put((Integer) null, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((-1308.0F));
      hashMap0.put("xi*W3cC$K/XE", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float1 = new Float((-1010.5987));
      hashMap0.put(",:]}/\"[{;=#", float1);
      String string0 = jSONObject0.toString(47, 47);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.putOpt("(zaK:", "(zaK:");
      jSONObject0.toString(1020, (-1825));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Expected a ',' or '}'", "\r");
      assertEquals("\r", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString(101);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("OVfO(r{oM&Tr", "OVfO(r{oM&Tr");
      assertEquals("OVfO(r{oM&Tr", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("getremove", (-1L));
      assertEquals((-1L), long0);
      
      String string0 = JSONObject.quote("l:Kwz,+l");
      assertEquals("\"l:Kwz,+l\"", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("isvalueOf");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("isdoubleToLongBits");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of isdoubleToLongBits
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("l9EIK}>v=+", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = JSONObject.quote("QV='^4@KK]q");
      assertEquals("\"QV='^4@KK]q\"", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = JSONObject.quote("a2H;Fk;R703/.");
      assertEquals("\"a2H;Fk;R703/.\"", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      jSONObject0.optBoolean((String) null, false);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("] not found.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-1491), (-1491));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Long long0 = new Long((-2951L));
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">!^kJ`3i:T9lAk6A";
      stringArray0[2] = "xk&AuY";
      stringArray0[3] = ">!^kJ`3i:T9lAk6A";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      boolean boolean0 = jSONObject0.has(">!^kJ`3i:T9lAk6A");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(34);
      Double double0 = new Double(1.0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("", object0);
      boolean boolean0 = jSONObject1.has("");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("&c~r\\v,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of &c~r\\v,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 3502.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "a2H;Fk;R703/.";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float(216.3421332481);
      jSONObject0.put("a2H;Fk;R703/.", (Object) float0);
      try { 
        jSONObject0.getBoolean("a2H;Fk;R703/.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a2H;Fk;R703/.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) "");
      Object object0 = jSONObject0.get("");
      assertEquals("", object0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}KdM5w@5#.qdJYD3N+*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }KdM5w@5#.qdJYD3N+*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "I;/Yt0+\" {qV");
      // Undeclared exception!
      jSONObject0.toString(2519, 2519);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Integer) null, "Ut2L4Bk!qLD");
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 2821, (-397));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer integer0 = new Integer(1758);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.425407220778828
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject.quote("~");
      JSONObject jSONObject0 = new JSONObject((Object) "\"~\"");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("getlongValue", (Collection) linkedList0);
      jSONObject0.toString(48);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 69, 128);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.valueToString(double0, 1489, 1489);
      assertNotNull(string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = JSONObject.valueToString(boolean0, 1853, 1853);
      assertNotNull(string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.372753638756159
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-1040), 64);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-1002));
      hashMap0.put(integer0, "CSwmT$1D;>");
      hashMap0.put((Integer) null, "Ut2L,Bk!qLD");
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 2821, (-397));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      Short short0 = new Short((short)10);
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(short0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(1, 1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(750, 750);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(44);
      Function<Object, Double> function0 = (Function<Object, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      hashMap0.computeIfAbsent(integer0, function0);
      int int0 = jSONObject0.optInt("4(o:Tp", 356);
      assertEquals(356, int0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.0295993619233261
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject.quote("a8a2H;Fk;R703/.");
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optInt("QN/R9G5h");
      try { 
        jSONObject0.getInt("a8a2H;Fk;R703/.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a8a2H;Fk;R703/.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Float float0 = new Float(1.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.valueOf(false);
      BiFunction<Object, Object, Boolean> biFunction0 = (BiFunction<Object, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(boolean0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("isreplace");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreplace\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte)123);
      try { 
        jSONObject0.accumulate((String) null, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("sum", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.9443424054873726);
      assertEquals(0.9443424054873726, double0, 0.01);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove(" 0nhBr8cX3mjo");
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "=&}2\"\\v4bNs}2WB:YD9";
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      int int0 = 2983;
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "A";
      jSONObject0.opt("A");
      JSONTokener jSONTokener0 = new JSONTokener("=&}2\"v4bNs}2WB:YD9");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of =&}2\"v4bNs}2WB:YD9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("zh%dx7n`K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zh%dx7n`K\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("'=\u0004^L/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'=\\u0004^L/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
