/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 16:43:02 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.061245653757834
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.of((-9223372036854775775L), (-9223372036854775775L));
      Long long0 = new Long((-9223372036854775775L));
      Object object0 = new Object();
      Range.of((-9223372036854775775L), (-1307L));
      Range range0 = Range.of((-7L), 127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-128L), 255L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.137033038117283
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775775L));
      Range range1 = Range.of((-9223372036854775775L), (-9223372036854775775L));
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Long long0 = new Long((-9223372036854775775L));
      Object object0 = new Object();
      Range range2 = Range.of((-9223372036854775775L), (-1307L));
      boolean boolean0 = range0.equals(range2);
      //  // Unstable assertion: assertSame(range0, range1);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775782L));
      Range range1 = Range.of((-9223372036854775782L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(64L, 9223372036854523476L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 64L, 9223372036854523476L);
      Object object0 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.980633145514497
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 37L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = Range.ofLength(2147483647L);
      boolean boolean0 = range2.equals(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.540872802686925
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(9223372036854775247L, 9223372036854775247L);
      Range range1 = Range.ofLength(9223372036854775247L);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.parseRange("9[.n&0-8Qjag:d0NYL}", range_CoordinateSystem0);
      long long0 = range2.getEnd(range_CoordinateSystem0);
      assertEquals(8L, long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5406464687311736
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.parseRange("]3-5Xj^ec:TC?.;VqD");
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2147483647L;
      Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854774526L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.980052280855962
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4552L), 252333L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-3260L), 9223372036854524610L);
      Object object0 = new Object();
      range0.equals(object0);
      range1.equals((Object) null);
      long long0 = (-342L);
      Long long1 = new Long((-342L));
      Long long2 = new Long(252333L);
      range1.getBegin();
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 252333L, (-3260L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 37L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      
      range0.equals(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.440373938516034
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 252333L, 9223372036854524610L);
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long((-2157L));
      long long1 = range0.getBegin();
      assertEquals(252332L, long1);
      
      Range.of((-409L));
      Range range1 = Range.ofLength(9972L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1989L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775247L);
      range0.equals((Object) null);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3862395264912064
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1255L, 9223372036854775757L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(9223372036854775757L);
      Range.of((-1173L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(2147483620L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(9223372036854775247L, 9223372036854775247L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775247L, 9223372036854775247L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 32767L;
      Range.of(range_CoordinateSystem0, 32767L, 32767L);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 37L, 37L);
      Range range1 = Range.of(37L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 37L, 37L);
      Range range1 = Range.of(37L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(428L);
      Range range1 = Range.ofLength(1087L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.49450977966646
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(9223372036854775252L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775252L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(1199L);
      Range range1 = Range.of(65535L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1602L, 1602L);
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.isEmpty());
      
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-162L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0600949885294986
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32896L, 32896L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6750235273176433
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967316L, 9223372036854775807L);
      Range range1 = Range.ofLength(4294967316L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(64L, 9223372036854523475L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3295637090197197
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.ofLength(127L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.of((-609L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1393474254554015
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.split(1L);
      // Undeclared exception!
      try { 
        Range.parseRange("[ 0 .. -1 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ 0 .. -1 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-2147483609L));
      Long long0 = new Long((-2147483609L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(1199L);
      Range range1 = Range.of(1199L, 65535L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = (-348L);
      Range.of((-348L), 32767L);
      // Undeclared exception!
      try { 
        Range.parseRange("7*\"^YNc\"pCDg]_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 7*\"^YNc\"pCDg]_ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.20243222357412
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1255L, 1255L);
      long long0 = range0.getEnd();
      assertEquals(1254L, long0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(1255L, 1254L);
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6877906150720685
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-178L));
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1284L, 9223372036854775757L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775247L, (-1016L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1016 would make range [9223372036854775247 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32896L, 32896L);
      long long0 = new Long(32896L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775260L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775260L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1097 would make range [9223372036854775260 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1650L), (-1650L));
      Range range1 = Range.of((-1650L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.692720072831715
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0598988524110324
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 252333L);
      Range range1 = Range.of(range_CoordinateSystem1, 1518L, (-9223372036854775808L));
      Long long0 = new Long(162L);
      range1.equals(long0);
      range0.equals((Object) null);
      Long long1 = new Long(1518L);
      Long long2 = new Long(252333L);
      range1.getBegin();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 252333L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1341068345657535
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1284L, 9223372036854775757L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(9223372036854775222L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(2924L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2003578934099024
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1183L, 65535L);
      range_Builder0.expandEnd(1183L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(1183L, (-2223L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6934077834430896
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 1196L;
      Range range0 = Range.ofLength(1196L);
      Range range1 = Range.ofLength(1494L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range2 = Range.ofLength(1196L);
      // Undeclared exception!
      try { 
        range2.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(1199L);
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("79)RB4',k*4gZQ-", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 79)RB4',k*4gZQ- into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6929510730627153
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.ofLength(2877L);
      Range range1 = Range.ofLength(2877L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range range2 = Range.ofLength(2877L);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.8275295744903253
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long((-128L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 3117L, 4294967295L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addFirst(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long((-128L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 3117L, 4294967295L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(9223372036854773637L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(9223372036854775247L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775247L, 9223372036854775247L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9780573347195083
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      Long long1 = new Long(0L);
      boolean boolean1 = range0.equals(long1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1602L, 1602L);
      Object object0 = new Object();
      range0.equals(object0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(1199L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1199L, 3306L);
      boolean boolean0 = range1.startsBefore(range0);
      Long long0 = new Long(1199L);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(1215L);
      Range range1 = Range.of(65535L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32896L, 32896L);
      Range.Builder range_Builder0 = new Range.Builder(32896L);
      Range range1 = range_Builder0.build();
      range0.intersects(range1);
      Range.Comparators.values();
      range1.intersection(range0);
      range1.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.134992288964852
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertSame(range0, range2);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(2147483620L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(9223372036854775252L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.206884699936709
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(9223372036854775247L, 9223372036854775247L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775247L, 9223372036854775247L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(2147483647L, long0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.9846889745594423
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(561L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.JillionUtil", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.JillionUtil into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 586L, 4294967294L);
      Long long0 = new Long(4294967294L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3117L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(2147450751L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.3294539455599756
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2302L), (-2302L));
      Range.of(range_CoordinateSystem0, (-3407L), (-2302L));
      Range range1 = Range.of((-2302L), (-2302L));
      range1.intersects(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Long long0 = new Long((-1L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1L));
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.1342029606832194
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32896L, 32896L);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range0.complement(range1);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
      
      Long long0 = new Long(32896L);
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(32896L, long1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(1350L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.split(1350L);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(844L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Long long0 = new Long(1843L);
      long long1 = range1.getBegin();
      assertEquals(844L, long1);
      
      boolean boolean1 = range0.equals(range_CoordinateSystem0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1574L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(2196L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Long long0 = new Long((-1L));
      Range range1 = Range.of((-2579L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(9223372036854775247L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2898L, (-415L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(4294967294L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(9223372036854775247L);
      range0.equals("SB");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2025556956077046
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775775L), 1L);
      Range range1 = Range.of(range_CoordinateSystem0, (-932L), (-932L));
      range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(1651L);
      range0.split(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.0618818727989607
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-2205L));
      Range.of((-579L));
      range0.intersects(range1);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      assertSame(range2, range1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-2474L));
      range0.equals("bitLength must be >=0");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-371L));
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.691342224395043
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Long long0 = new Long((-1L));
      Range range1 = Range.of((-2579L));
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("can not add null range to cache", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse can not add null range to cache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(4294967294L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 2905L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.893133368036466
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder0.expandEnd((-519L));
      Range range0 = Range.of(range_CoordinateSystem0, (-519L), (-519L));
      long long0 = 288L;
      Range range1 = Range.of(range_CoordinateSystem0, (-519L), 0L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$LongRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$LongRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.5404573970730153
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(561L, 561L);
      range_Builder0.build();
      Range.Comparators.values();
      Range range2 = range1.intersection(range0);
      range2.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967294L, 4294967294L);
      range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(4294967294L);
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Long long0 = new Long(1348L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.equals(long0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      linkedList0.addAll((Collection<? extends Range>) list0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.parseRange("D<h", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse D<h into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-371L), (-371L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ -370 .. -371 ]/RB", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1078L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774640L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854774639L, long0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.060817126056579
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(11L);
      Range.Builder range_Builder1 = new Range.Builder(11L);
      range_Builder0.contractEnd(11L);
      range_Builder0.contractBegin((-601L));
      range_Builder0.contractEnd(11L);
      range_Builder0.expandEnd((-1858L));
      Range range0 = Range.of((-1858L));
      Range range1 = Range.of((-519L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1857L), long0);
      
      boolean boolean0 = range0.startsBefore(range1);
      boolean boolean1 = range0.intersects(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.799088589497542
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(2147483620L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of(4294967295L);
      assertSame(range2, range1);
      
      String string0 = range0.toString();
      assertEquals("[ 2147483620 .. 2147483620 ]/0B", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-2147483609L));
      Long long0 = new Long((-2147483609L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range range1 = Range.parseRange("[ 1 .. 0 ]/RB");
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.89156615887432
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.2042908026059695
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(4294967295L);
      range0.equals(range1);
      Range range2 = range1.intersection(range0);
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-140L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.equals((Object) null);
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 456L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 456L, 456L);
      String string0 = ":&e!*F/$-g8r:Y=f";
      // Undeclared exception!
      try { 
        Range.parseRange(":&e!*F/$-g8r:Y=f", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse :&e!*F/$-g8r:Y=f into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.796837966557264
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(1186L);
      Range range1 = Range.of(65504L);
      range1.equals(range0);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("G;V~t^pEn", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse G;V~t^pEn into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Zero Based", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 883L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-2147482803L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.797321935099309
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(1199L);
      Range range1 = Range.of(65535L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(2877L);
      range0.equals("SB");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long0 = (-2727L);
      Range range0 = Range.of((-2727L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      range_Builder0.contractBegin(22L);
      Range range0 = range_Builder0.build();
      long long0 = (-1476L);
      // Undeclared exception!
      try { 
        range0.split((-1476L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.3307743196659723
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = (-2289L);
      Range range0 = Range.of((-2289L), (-2289L));
      range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(1211L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of((-14L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.137723996281925
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(9223372036854775247L, 9223372036854775247L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.1358315231636453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775775L));
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Long long0 = new Long((-9223372036854775775L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(36L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854774622L, 9223372036854774622L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854774622L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2372 would make range [9223372036854774622 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(1350L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1350L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-3351L);
      range_Builder0.expandEnd((-3351L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.797208748908024
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(2147483647L);
      range0.endsBefore(range1);
      Long long0 = new Long((-3692L));
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036852573188L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(21L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(1215L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Long long0 = new Long((-32768L));
      Long.sum((-32768L), 1L);
      range0.equals(long0);
      range0.getLength();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$ByteRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$ByteRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of((-190L));
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals((-190L), long0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      Long.min((-460L), 0L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      long long1 = range0.getLength();
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(58941L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = 561L;
      Range.Builder range_Builder0 = new Range.Builder(561L, 561L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1406L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1602L, 1602L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1000L);
      Range range0 = range_Builder0.build();
      Range.Comparators.values();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.0599988624120327
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long long0 = 9223372036854775247L;
      Range range0 = Range.of(9223372036854775247L);
      Range range1 = Range.of((-2439L));
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2439 would make range [9223372036854775247 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      
      Range range1 = Range.of((-128L));
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      range2.equals(object0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.5683304305687247
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(0L);
      range_Builder0.contractEnd(1L);
      range_Builder1.shift((-2770L));
      range_Builder1.shift(0L);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      range_Builder0.contractBegin(22L);
      Range range0 = range_Builder0.build();
      long long0 = (-1497L);
      range0.complement(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-47L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.ofLength(2147484016L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.contractEnd(0L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(985L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = 22L;
      Range.Builder range_Builder0 = new Range.Builder(22L);
      long long1 = 2147485927L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147485927L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-1785L));
      range_Builder0.expandEnd(1085L);
      long long0 = 1399L;
      range_Builder0.shift(1399L);
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift(1L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775247L, (-6051L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -6052 would make range [9223372036854775246 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-2147483648L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range_Builder0.contractBegin((-601L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, 0L, 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2432L, 561L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      long long0 = (-444L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-444L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
