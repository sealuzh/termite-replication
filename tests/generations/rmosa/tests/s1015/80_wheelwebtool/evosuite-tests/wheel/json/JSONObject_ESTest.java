/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 17:24:54 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(Double.NaN);
      Double double1 = new Double(Double.NaN);
      hashMap0.put(double0, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      hashMap0.put(boolean0, "to");
      JSONObject.valueToString(hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.Boolean@0000000002\":\"java.lang.String@0000000003\"}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"Rqa5J}d59", 0L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject((Object) hashMap0);
      assertEquals(2, jSONObject2.length());
      
      double double0 = jSONObject1.optDouble("\"Rqa5J}d59");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.toString((-1248));
      String string1 = jSONObject0.toString((-1248));
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) null);
      JSONObject jSONObject2 = jSONObject1.put("_',", (Map) null);
      jSONObject2.optDouble("_',");
      JSONObject.getNames((Object) null);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("");
      assertFalse(jSONObject3.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.putOpt("JSONObject[", "JSONObject[");
      boolean boolean0 = jSONObject0.isNull("JSONObject[");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4945054945054945
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("D", jSONArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "D";
      stringArray0[1] = "D";
      stringArray0[2] = "D";
      stringArray0[3] = "D";
      stringArray0[4] = "D";
      stringArray0[5] = "D";
      stringArray0[6] = "D";
      stringArray0[7] = "D";
      stringArray0[8] = "D";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONArray jSONArray1 = jSONObject2.getJSONArray("D");
      assertSame(jSONArray0, jSONArray1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.285265962734548
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getnotify", (-3194.864739283));
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONTokener", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.put("] not found.", (Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      jSONObject1.optInt("getnotify");
      jSONObject0.optJSONArray("Missing value");
      jSONObject0.names();
      jSONObject1.toString(1897, (-3194));
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject3);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      JSONObject.valueToString(hashMap1);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject", hashMap0);
      jSONObject0.names();
      jSONObject1.accumulate("wheel.json.JSONObject", "wheel.json.JSONObject");
      try { 
        jSONObject1.getInt("wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("lj?rE@QUuB>v<XV9@R", object0);
      try { 
        jSONObject0.getBoolean("lj?rE@QUuB>v<XV9@R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lj?rE@QUuB>v<XV9@R\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", true);
      JSONObject jSONObject2 = jSONObject0.put("~odUcN@hXA*RO>X", (Object) "~odUcN@hXA*RO>X");
      Double double0 = new Double(0.0);
      Double.isFinite(1.0);
      JSONObject.numberToString(double0);
      jSONObject1.put("~odUcN@hXA*RO>X", (Object) "~odUcN@hXA*RO>X");
      jSONObject2.optString("~odUcN@hXA*RO>X");
      JSONObject.quote("$&T_|p]Ejzl(nG]},+b");
      // Undeclared exception!
      try { 
        jSONObject2.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("to", (Map) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)1405);
      JSONObject jSONObject1 = jSONObject0.put("t^(Se1R5", (Object) short0);
      StringWriter stringWriter0 = new StringWriter(1520);
      jSONObject1.optInt("t^(Se1R5");
      // Undeclared exception!
      try { 
        stringWriter0.write("com", (int) (short)1405, 1520);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Double double0 = new Double(989.9209664997129);
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer.compare((-1253), 3586);
      String string0 = JSONObject.quote("dou");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) "\"dou\"");
      jSONObject0.optInt("\"dou\"", 3586);
      JSONObject jSONObject1 = jSONObject0.put("\"dou\"", 1717.19062415461);
      Boolean boolean0 = new Boolean("dou");
      jSONObject1.names();
      jSONObject0.optDouble("\"dou\"", (double) 70);
      String string1 = jSONObject1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-105));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.accumulate("d", byte0);
      jSONObject0.optDouble("d");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", (-1163));
      jSONObject1.getInt("' and instead saw '");
      JSONObject.getNames((Object) jSONObject0);
      jSONObject1.getLong("' and instead saw '");
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.append("istoString", "istoString");
      Float float0 = new Float(2509.0F);
      JSONObject jSONObject2 = jSONObject1.append("istoString", float0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.put("null", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("null");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.180594251760703
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject.doubleToString(1202.111);
      JSONObject jSONObject0 = new JSONObject((Object) "1202.111");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'P';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('z');
      jSONObject0.write(stringWriter2);
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.getInt("1202.111");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1202.111\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("iswait", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      Short short0 = new Short((short) (-754));
      Double double0 = new Double((short) (-754));
      hashMap0.put(short0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5875011775569985
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "' and instead saw '";
      stringArray0[1] = "' and instead saw '";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject1);
      Object object0 = new Object();
      jSONObject1.put("' and instead saw '", object0);
      jSONObject0.toString(116, 116);
      jSONObject1.optBoolean("' and instead saw '", false);
      JSONTokener jSONTokener0 = new JSONTokener(",:]}/\"[{;=#");
      jSONObject0.optString("' and instead saw '", (String) null);
      StringWriter stringWriter0 = new StringWriter(10);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 10, 3188);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("sSbH--PE{ym3qy");
      jSONTokener0.back();
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of sSbH--PE{ym3qy
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{dnRmls?74srA?5A,a)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 17 of {dnRmls?74srA?5A,a)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{'uq{ax>iA._");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 12 of {'uq{ax>iA._
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(551);
      jSONObject0.append("Wn+_@*Rb>k#Fr/3$d", integer0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", object0);
      jSONObject1.getString("Expected a ',' or ']'");
      try { 
        jSONObject0.getBoolean("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.718586499994565
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Float float0 = new Float(2366.445F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 2049, 2049);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      String string0 = "istoString";
      BiFunction<Object, Object, JSONObject> biFunction0 = (BiFunction<Object, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      jSONObject0.put("istoString", 30);
      try { 
        jSONObject0.append("istoString", "istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[istoString] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "null";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("null", (Object) "null");
      String string1 = "vyvzYmoDc";
      try { 
        jSONObject1.append("null", "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[null] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer.compare((-1253), (-717));
      Integer.getInteger("issubstring", 22);
      Integer.getInteger("dou", 19);
      Integer.getInteger(",!L?J3c?Mjif\"XDxTXM", 19);
      Integer.getInteger(",!L?J3c?Mjif\"XDxTXM", 19);
      Integer.getInteger((String) null, (-780));
      Integer.getInteger(",!L?J3c?Mjif\"XDxTXM", 57);
      Integer.getInteger("dou", 19);
      Integer.getInteger((String) null, 63);
      JSONObject.quote("dou");
      JSONObject.quote("A,AG,$");
      JSONObject.quote("BYS</gkvIY");
      JSONObject.quote("dou");
      JSONObject.quote("dou");
      JSONObject.quote("dou");
      JSONObject.quote("issubstring");
      JSONObject jSONObject0 = new JSONObject((Object) "A,AG,$");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of dou
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate((String) null, jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      jSONObject0.put("b%(\"z;7-3]7", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("b%(\"z;7-3]7");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(46);
      try { 
        jSONObject0.getBoolean("</^_D/'.Q4.H,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<\\/^_D/'.Q4.H,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.8964366845326991
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = JSONObject.quote("jK`3p23V6(o");
      assertEquals("\"jK`3p23V6(o\"", string0);
      
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(494);
      String string1 = jSONObject0.toString(13);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Byte byte0 = new Byte((byte)8);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("getintern", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("Unclosed comment", hashMap0);
      try { 
        jSONObject0.getJSONArray("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "B<`(v";
      Long long0 = new Long(1537L);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("B<`(v", boolean0);
      JSONObject jSONObject1 = jSONObject0.put("XlZ", 2555.0);
      JSONObject.quote("B<`(v");
      JSONObject jSONObject2 = jSONObject1.put("( -'zD{CxRl^-Y", (Map) null);
      Object object0 = new Object();
      jSONObject0.put("B<`(v", object0);
      JSONObject.quote("XlZ");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject2.getDouble("XlZ");
      // Undeclared exception!
      try { 
        linkedList0.remove((-702));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -702, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("^(Se1R5", object0);
      jSONObject1.put("null", (Object) "null");
      jSONObject1.toString();
      try { 
        jSONObject1.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("3U", true);
      JSONObject jSONObject2 = jSONObject0.accumulate("3U", jSONObject1);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("S8TZ\"xdzu.yxzXxZT!8");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject((Object) "lj?rE@QUuB>v<XV9@R");
      // Undeclared exception!
      jSONObject1.toString(1843, 21);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.isFinite((-1.0));
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("EQqUY&", "EQqUY&");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1.0);
      try { 
        jSONObject0.append((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = "getcopyValueOf";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.append("-1955.0088262214535.", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONTokener jSONTokener0 = new JSONTokener("NX;VjZ#M:>*|<Zny/f");
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("t^(Se1R5");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      Double.max(0.0, 0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "wheel.json.JSONArray");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("wheel.json.JSONArray", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("j|6!5o@50jE<|", (Object) "j|6!5o@50jE<|");
      try { 
        jSONObject0.getJSONObject("j|6!5o@50jE<|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j|6!5o@50jE<|\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.optString("Missing value", "");
      assertEquals("", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("|3U", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.283284892956868
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      jSONObject0.toString((-522), (-522));
      JSONObject jSONObject1 = jSONObject0.put("{\n\"java.lang.String@0000000005\": {},\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}", true);
      jSONObject1.optDouble("{\n\"java.lang.String@0000000005\": {},\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      jSONObject0.length();
      jSONObject1.put("", true);
      jSONObject1.has("");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("H", (Collection) linkedList0);
      jSONObject0.optString("H", "getdoubleToString");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Integer.max(102, 102);
      String string0 = "getcopyValueOf";
      JSONObject jSONObject2 = jSONObject0.put("getcopyValueOf", 0.0);
      jSONObject1.optBoolean("getcopyValueOf", false);
      jSONObject2.getInt("getcopyValueOf");
      String string1 = "Qb ai!*r:E_";
      Long long0 = new Long((-1L));
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("getcopyValueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getcopyValueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("_' ", 0.0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(true);
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      
      Object object0 = jSONObject0.get("_' ");
      assertEquals(0.0, object0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.max(1405.0504, 1405.0504);
      Object object0 = new Object();
      jSONObject0.accumulate("Unlosed comment", object0);
      jSONObject0.opt("Unlosed comment");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      Short short0 = new Short((short)59);
      Float float0 = new Float((double) (short)59);
      HashMap<Short, Float> hashMap1 = new HashMap<Short, Float>();
      hashMap1.put((Short) null, float0);
      Short short1 = new Short((short) (-28887));
      JSONObject.valueToString(short0, (-2883), (-2388));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject0, 501, 501);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-835L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", 3357);
      int int0 = jSONObject1.getInt("' and instead saw '");
      assertEquals(3357, int0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("null", (Object) "null");
      jSONObject1.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.getInt("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "-2481.00";
      jSONObject0.optLong("-2481.00", 3311L);
      Boolean boolean0 = new Boolean("-2481.00");
      try { 
        jSONObject0.get(")3M&E-2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")3M&E-2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("] not found.");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("no");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("] is not a number.", "] is not a number.");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("val", "val");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      boolean boolean0 = new Boolean("spl");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "Hh(\"lL";
      int int0 = 2720;
      jSONObject1.put("Hh(\"lL", 2720);
      jSONObject1.optLong("Hh(\"lL");
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject2.getDouble("q;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Object object1 = JSONObject.NULL;
      JSONObject.getNames((Object) jSONObject0);
      Float float0 = new Float((-821.46606F));
      JSONObject jSONObject1 = jSONObject0.put("pa", (Object) float0);
      jSONObject1.optLong("pa");
      Float.max(265.19855F, 0.0F);
      try { 
        jSONObject1.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gettoUnsignedInt", (Object) jSONArray0);
      try { 
        jSONObject0.getBoolean("gettoUnsignedInt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoUnsignedInt\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
      
      jSONObject0.optDouble("\"\"", Double.NaN);
      JSONObject jSONObject1 = jSONObject0.put("MvV~", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|#A(a:7U8L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |#A(a:7U8L
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("isfloatToRawIntBits", true);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("lo", (Object) "lo");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.575624747786706
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", 19);
      JSONObject jSONObject2 = jSONObject0.put("isvalueOf", true);
      Byte byte0 = new Byte((byte) (-26));
      jSONObject2.putOpt("GV)}nNLUVvq9I@VO6Lk", byte0);
      jSONObject1.optBoolean("isvalueOf");
      jSONObject1.optLong("isvalueOf");
      String string0 = ",'=CvG(+}* S{3QV[+";
      jSONObject0.put(",'=CvG(+}* S{3QV[+", false);
      JSONObject jSONObject3 = jSONObject0.accumulate("gV*DsC%)!^Kdaf", ",'=CvG(+}* S{3QV[+");
      JSONObject.valueToString(jSONObject1, 19, 1302);
      jSONObject3.toString(19, 101);
      try { 
        jSONObject3.getJSONArray("*alU7sgNHFN;WW2:d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*alU7sgNHFN;WW2:d\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("(AoT5.thSlP", object0);
      try { 
        jSONObject0.getLong("(AoT5.thSlP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(AoT5.thSlP\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("2,8bktspm[M", 0L);
      JSONObject.getNames((Object) jSONObject0);
      long long0 = jSONObject0.getLong("2,8bktspm[M");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("Y&'Xj+,Vhxr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y&'Xj+,Vhxr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "lj?:rE@QUuB>v<XV9@R";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("lj?:rE@QUuB>v<XV9@R", object0);
      try { 
        jSONObject1.getDouble("lj?:rE@QUuB>v<XV9@R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lj?:rE@QUuB>v<XV9@R\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-195L));
      jSONObject0.put("v(5_]+ ;ub+b>2I'U3", (Object) long0);
      double double0 = jSONObject0.getDouble("v(5_]+ ;ub+b>2I'U3");
      assertEquals((-195.0), double0, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.put("to", (Object) boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("to");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1735, 1735);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("islngValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islngValue\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[2];
      String string0 = "Gcki_]m>s.J4p\\";
      stringArray0[0] = "Gcki_]m>s.J4p";
      stringArray0[1] = "";
      Float.sum(0.0F, 2032.6326F);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      short short0 = (short) (-3147);
      Short short1 = new Short((short) (-3147));
      Float float0 = new Float(Double.NaN);
      hashMap0.put(short1, float0);
      JSONObject.doubleToString(1.0);
      try { 
        JSONObject.valueToString(hashMap0, 4696, (-1831));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      hashMap0.values();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(hashMap0, 118, 24);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(5);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string0 = JSONObject.valueToString(hashMap0, 5, 5);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float((-2490.873F));
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent("isdescendingIterator", "isdescendingIterator");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-138));
      try { 
        jSONObject0.accumulate((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[6];
      stringArray0[2] = "XV?1/";
      JSONObject jSONObject1 = new JSONObject(boolean0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      Object object0 = new Object();
      jSONObject1.opt(stringArray0[4]);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-0rrcA)n}%xe&", object0);
      jSONObject1.put("is", false);
      JSONObject.quote("QAqR\tp`_");
      int int0 = jSONObject1.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.quote("vou");
      assertEquals("\"vou\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("vou", (-2888));
      assertEquals((-2888), int0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.quote("lsKo<Q1Li/");
      assertEquals("\"lsKo<Q1Li/\"", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("d(a$", (-1808L));
      Boolean boolean0 = new Boolean("] is not a number.");
      try { 
        jSONObject0.get("d(a$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d(a$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getaddFirst");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>(hashMap0);
      hashMap1.put((JSONObject) null, "des");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("d=aou", (Object) "d=aou");
      jSONObject1.remove("d=aou");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "d=aou";
      stringArray0[1] = "d=aou";
      stringArray0[2] = "d=aou";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(0.0F);
      hashMap0.put(float0, "gethighestOneBit");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("isremainderUnsigned");
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, Object> hashMap0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-3155));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble(" of ");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float(2366.445F);
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("] not found.", (double) 2366.445F);
      assertEquals(2366.445068359375, double0, 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("4Zr", (-2420.16));
      assertEquals((-2420.16), double0, 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("S-8v`?ab/2CJ}", true);
      JSONTokener jSONTokener0 = new JSONTokener("S-8v`?ab/2CJ}");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Y&'Xj+,Vhxr", "istoString");
      assertEquals("istoString", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(673.3113F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("BqAEa>v(`:,j;");
      assertEquals("", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Map<Object, String> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (-0.6279126542879798));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("mej");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of mej
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("java.lang.Long@0000000003.");
      assertEquals(0L, long0);
      
      String string0 = JSONObject.quote("Bad value from toJSONString: ");
      assertEquals("\"Bad value from toJSONString: \"", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "-2481.00";
      jSONObject0.optLong("to", 0L);
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean("to");
      String string1 = "max";
      try { 
        jSONObject0.get("max");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"max\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|3@geIL:b6;68", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(false);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("null", (Object) "null");
      jSONObject1.toString(123, 123);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 62, 1);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Double double0 = new Double(1122.99366466939);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-522), (-522));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Object object0 = JSONObject.NULL;
      int int0 = (-46638682);
      JSONObject.valueToString(linkedList0, (-46638682), (-46638682));
      String string0 = "getshortValue";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("getshortValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getshortValue
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float(2366.445F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(91, 8);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      Integer integer0 = new Integer((-1444));
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(integer0, jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(hashMap0, (short)70, (-3322));
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-64089270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = JSONObject.quote("/=?^NL");
      assertEquals("\"/=?^NL\"", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote("eQIe\u0004'_K<");
      assertEquals("\"eQIe\\u0004'_K<\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = JSONObject.quote("BCW^iLj\"THHN[");
      assertEquals("\"BCW^iLj\\\"THHN[\"", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1283), (-1283));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Double double0 = new Double(0.0F);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Short short0 = new Short((short)231);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("h;L)j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of h;L)j
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 43);
      assertEquals(43, int0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(58, 58);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<String, Object> hashMap0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt((String) null, 0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("d", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject();
      Double.max(0.0, 0.0);
      String string0 = "XV?1/";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject("XV?1/", stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.doubleToString(0.0);
      String string1 = null;
      jSONObject0.has((String) null);
      try { 
        jSONObject0.getBoolean("isvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("SdSG%?.-Q+Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SdSG%?.-Q+Q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a number.", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = JSONObject.quote("] not found.");
      assertEquals("\"] not found.\"", string0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.max(1405.0504, 1405.0504);
      Object object0 = new Object();
      Object object1 = jSONObject0.opt("Unclosed comment");
      assertNull(object1);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("getsum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getsum\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 173
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 174
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
