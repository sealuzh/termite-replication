/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 06:33:48 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject.testValidity((Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.putOpt("DNPKQS7G;*m", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Long long0 = new Long(4525L);
      hashMap0.put(long0, long0);
      hashMap0.put((Object) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("|lt;WiLe", (Collection) linkedList0);
      jSONObject1.optDouble("|lt;WiLe", 4052.099705391331);
      Integer integer0 = new Integer(18);
      Integer integer1 = new Integer(18);
      Byte byte0 = new Byte((byte) (-73));
      Byte.toUnsignedLong((byte) (-73));
      JSONObject.numberToString(byte0);
      Byte byte1 = new Byte((byte) (-73));
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("|lt;WiLe", linkedList0);
      try { 
        jSONObject1.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      HashMap<JSONArray, Short> hashMap1 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Boolean, Byte> hashMap2 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      jSONObject0.put("ELX.4Kc", (-2097L));
      Object object0 = JSONObject.NULL;
      jSONObject0.append("getgetChars", object0);
      long long0 = jSONObject0.optLong("ELX.4Kc");
      assertEquals((-2097L), long0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      stringWriter0.write("] not found.");
      jSONObject0.put("] not found.", (Map) hashMap0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5179816404051354
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("null", true);
      boolean boolean0 = jSONObject0.optBoolean("null");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Y=#Qt6+joCjP0`77/cg", (Object) null);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("Y=#Qt6+joCjP0`77/cg");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("Xcy '", jSONArray0);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("Xcy '");
      assertSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.878097639808415
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "getput";
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put("getput", (Collection) linkedList0);
      jSONObject1.toString();
      Float float0 = new Float(0.0);
      jSONObject0.optJSONArray("Ptm!|8*n");
      Long.getLong("{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}");
      JSONObject.testValidity((Object) null);
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject0.append("Ptm!|8*n", boolean0);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.getJSONArray("Ptm!|8*n");
      long long0 = (-3295L);
      JSONObject jSONObject2 = jSONObject1.put("^\"[", (-3295L));
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject2.getJSONArray("j%<?t4IFkS%4RriT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j%<?t4IFkS%4RriT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8149376608997776
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = Integer.valueOf(1);
      JSONObject jSONObject1 = jSONObject0.accumulate(".[OY^9sYeRMKX,>#{OV", integer0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject1.put("false", (Collection) linkedList0);
      jSONObject0.names();
      jSONObject0.getJSONArray("false");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1015014044975926
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "LCf6_n";
      jSONObject0.optLong("LCf6_n");
      jSONObject0.keys();
      jSONObject0.optLong("LCf6_n", 0L);
      Long long0 = new Long(0L);
      Long.getLong("HD.N@vyAy)5");
      hashMap0.put(long0, jSONObject0);
      jSONObject0.optDouble("LCf6_n", 236.4899177);
      jSONObject0.toString();
      jSONObject0.length();
      String string1 = "Substring bounds error";
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", (long) 0);
      JSONObject jSONObject2 = jSONObject1.put("LCf6_n", (long) 0);
      jSONObject1.getInt("LCf6_n");
      try { 
        jSONObject2.getDouble("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-26752530));
      assertEquals("{}", string0);
      
      jSONObject0.optJSONArray("D'ge");
      JSONObject.doubleToString((-26752530));
      Float float0 = new Float((double) (-26752530));
      JSONObject.valueToString(float0);
      String string1 = JSONObject.doubleToString((-4270.04526478991));
      assertEquals("-4270.04526478991", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = JSONObject.quote("fQ4</N");
      assertEquals("\"fQ4<\\/N\"", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      jSONObject0.putOpt("4=\u00069q^aJQJC|9#v", float0);
      jSONObject0.getLong("4=\u00069q^aJQJC|9#v");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("A=>W;M%d#07>&", false);
      jSONObject1.getBoolean("A=>W;M%d#07>&");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[7];
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Integer integer0 = new Integer(0);
      JSONObject.valueToString(linkedList0, 130, 130);
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONArray jSONArray0 = (JSONArray)jSONTokener0.nextValue();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.put("", 34);
      jSONObject0.has("");
      try { 
        jSONObject0.getLong("wai");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wai\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("");
      int int0 = 1963;
      Integer integer0 = new Integer(1963);
      hashMap0.put(boolean0, integer0);
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", true);
      String string0 = "java.lang.Long@0000000001.";
      try { 
        jSONObject1.getInt("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "{4+[_8x<kJ~WZ";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{4+[_8x<kJ~WZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {4+[_8x<kJ~WZ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5719788551126714
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (Map) hashMap0);
      jSONObject1.getJSONObject("wheel.json.JSONObject");
      jSONObject1.optInt("rUFPY");
      jSONObject0.toString(0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.put("va", object0);
      JSONObject jSONObject3 = jSONObject2.put("{\"java.lang.String@0000000003\": {}}", (double) 0);
      JSONObject.doubleToString(0.0);
      Object object1 = JSONObject.NULL;
      jSONObject1.put("-5N*8PqJw<I_", object1);
      try { 
        jSONObject3.put("JSONObject[", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("=ROdK9RZ", 908L);
      JSONObject.valueToString(jSONObject0);
      Integer integer0 = new Integer(1520);
      String string0 = jSONObject0.toString(1520, 1520);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      jSONTokener0.skipTo('(');
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      
      jSONObject0.put("P`C^CC", (-2093064));
      double double0 = jSONObject0.getDouble("P`C^CC");
      assertEquals((-2093064.0), double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(">7M\"3L|", 1L);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      int int0 = jSONObject1.getInt(">7M\"3L|");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst(jSONObject0);
      jSONObject0.toString((-2212), (-2212));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject("{}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "s");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("s", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(130, 130);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      Object object0 = jSONTokener0.nextValue();
      assertFalse(object0.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("=ROdK9RZ", 908L);
      JSONObject.valueToString(jSONObject0);
      Integer integer0 = new Integer(2297);
      String string0 = jSONObject0.toString(2297, 2297);
      // Undeclared exception!
      JSONObject.quote(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject0 = new JSONObject(object1);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      jSONObject0.put("%l#", (Map) hashMap0);
      Object object2 = JSONObject.NULL;
      String[] stringArray0 = new String[8];
      stringArray0[2] = "%l#";
      stringArray0[3] = "%l#";
      stringArray0[4] = "%l#";
      stringArray0[5] = "%l#";
      stringArray0[6] = "EZQ{P^`Sa";
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("3", (-3926L));
      jSONObject1.optInt("3");
      try { 
        jSONObject1.getBoolean("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("jo", true);
      String string0 = JSONObject.quote("int");
      Integer integer0 = new Integer(1051);
      String string1 = JSONObject.valueToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst(jSONObject0);
      jSONObject0.toString((-2212), (-2212));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Integer integer0 = new Integer(0);
      jSONObject0.toString(0, 130);
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                                                                  \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                                                                                                                  }");
      Object object0 = jSONTokener0.nextValue();
      assertFalse(object0.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer((-680));
      JSONObject jSONObject0 = new JSONObject(integer0);
      Integer integer1 = new Integer((-680));
      jSONObject0.toString((-680), (-2430));
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{&C99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {&C99
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", false);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getLong("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = (-1491L);
      JSONObject jSONObject1 = jSONObject0.put("rot", (-1491L));
      jSONObject1.optDouble("rot");
      String string0 = "D0XT%Jz0";
      try { 
        jSONObject0.getBoolean("D0XT%Jz0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D0XT%Jz0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Y=#Qt6+jOoCj/0`77/cg", true);
      Boolean.valueOf(true);
      try { 
        jSONObject0.getJSONArray("Y=#Qt6+jOoCj/0`77/cg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y=#Qt6+jOoCj/0`77/cg\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("\n");
      JSONObject.doubleToString((-1034.5439518973));
      Byte byte0 = new Byte((byte)2);
      JSONObject jSONObject1 = jSONObject0.accumulate("", byte0);
      jSONObject0.getDouble("");
      String string0 = "000";
      String string1 = null;
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("`w~D2j+vw@rUM", 0L);
      Object object0 = new Object();
      jSONObject1.put("Null key.", object0);
      JSONObject.testValidity(jSONObject1);
      double double0 = jSONObject1.getDouble("`w~D2j+vw@rUM");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Float.isFinite(0.0F);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(369L);
      Long.min(369L, 1L);
      JSONObject jSONObject1 = jSONObject0.put("de", 369L);
      Double double0 = new Double(1L);
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("de");
      jSONObject1.optBoolean("Expected a ',' or ']'", false);
      String string0 = jSONObject0.optString("de", (String) null);
      assertNotNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("|t;Wie", (Collection) linkedList0);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      String string0 = jSONObject0.optString("|t;Wie");
      assertNotNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1846726042887588
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Boolean boolean0 = new Boolean("JSONArray initial value should be a string or collection or array.");
      Integer integer0 = new Integer(1963);
      Boolean boolean1 = Boolean.TRUE;
      hashMap1.put(boolean1, integer0);
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", true);
      jSONObject0.accumulate("JSONArray initial value should be a string or collection or array.", jSONObject1);
      int int0 = 589;
      // Undeclared exception!
      jSONObject0.toString(589, 589);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("(C?U!", 4L);
      long long0 = jSONObject1.optLong("(C?U!");
      assertEquals(4L, long0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "true";
      JSONObject jSONObject1 = jSONObject0.put("true", 1L);
      try { 
        jSONObject1.append("true", "true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[true] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst((Object) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)13);
      Long long0 = new Long((short)13);
      Long.getLong(",", long0);
      JSONArray jSONArray1 = new JSONArray();
      Long long1 = new Long((short)13);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject1 = new JSONObject(long1, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("", (Object) "");
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      jSONObject2.put("", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject0.optJSONObject("");
      assertNotNull(jSONObject3);
      
      String string0 = JSONObject.quote("isnotify");
      assertEquals("\"isnotify\"", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", false);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("\"\"", object0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 0L);
      double double0 = jSONObject1.optDouble("ROdK9RZ");
      assertEquals(2, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject((-2868));
      JSONObject.valueToString(jSONArray0, 46, 1507);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONArray0.optInt((-1993));
      String string0 = JSONObject.valueToString(jSONArray0, (-2626), (-2626));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("has", object0);
      jSONObject1.optInt("has", 92);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      Byte byte0 = new Byte((byte) (-3));
      assertEquals((byte) (-3), (byte)byte0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "wzF>ZCu>=>%>HX/";
      JSONObject jSONObject1 = jSONObject0.put("wzF>ZCu>=>%>HX/", (Object) hashMap0);
      try { 
        jSONObject1.getDouble("wzF>ZCu>=>%>HX/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wzF>ZCu>=>%>HX/\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("n.D`GuN-z.|-V,|xKN", (-2934L));
      boolean boolean0 = jSONObject1.isNull("n.D`GuN-z.|-V,|xKN");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8768603988557397
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      int int0 = 1520;
      JSONObject.valueToString(jSONObject0);
      Integer integer0 = new Integer(1520);
      jSONObject0.toString(1520, 1520);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 1520, 1520);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4971751412429378
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(41, (Object) jSONObject0);
      String string0 = JSONObject.valueToString(jSONArray0, (-108916131), (-511));
      assertEquals("[\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\n{}\n]", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.100665982609539
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("Expected '", (-1L));
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (-1L));
      int int0 = new Integer(32);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject2);
      JSONObject.getNames((Object) jSONObject1);
      jSONObject1.opt("] is not a number.");
      jSONObject2.toString();
      jSONObject1.optLong("getintern");
      JSONObject.valueToString("Expected '", 52, 32);
      Double double0 = new Double(702.92398143044);
      jSONObject2.put("\b", (Object) double0);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("wa");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(369L);
      Long.min(369L, 369L);
      JSONObject jSONObject1 = new JSONObject();
      Double double0 = new Double(369L);
      jSONObject0.accumulate("de", long0);
      double double1 = jSONObject0.optDouble("de");
      assertEquals(1, jSONObject0.length());
      assertEquals(369.0, double1, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "true";
      JSONObject jSONObject1 = jSONObject0.put("true", 1L);
      jSONObject0.optDouble("true", (double) 1L);
      try { 
        jSONObject1.put((String) null, (Object) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      Double double0 = new Double(2524.0);
      Byte byte0 = new Byte((byte)31);
      hashMap0.put(double0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("`w~D2j+vw@rUM");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.646075300795112
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject.doubleToString((-2308.7062731));
      JSONObject jSONObject0 = new JSONObject((Object) "-2308.7062731");
      // Undeclared exception!
      jSONObject0.toString(3039);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>(92);
      Byte byte0 = new Byte((byte)39);
      hashMap0.put(byte0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = JSONObject.quote("f|1/_Nw#5!+;[9j");
      assertEquals("\"f|1/_Nw#5!+;[9j\"", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("k.h/gLDh", (-1L));
      try { 
        jSONObject0.getBoolean("k.h/gLDh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"k.h/gLDh\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", true);
      boolean boolean0 = jSONObject1.getBoolean("JSONArray initial value should be a string or collection or array.");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString("D5glM1=I;{ fIOb");
      assertEquals("", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = ":(LxRS!e}uuS#0x)x";
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("] is not a JSONObject.", hashMap0);
      String string0 = jSONObject0.getString("] is not a JSONObject.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote("T&`");
      assertEquals("\"T&`\"", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("re", "re");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer((-1135));
      hashMap0.put(object0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("lEd:J(Bp[,[&+341", 46);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("?YCM7'}~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ?YCM7'}~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("istoLowerCase", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = Long.valueOf((-1L));
      JSONObject jSONObject1 = jSONObject0.put("par", (Object) long0);
      jSONObject1.put("par", (Object) null);
      try { 
        jSONObject1.get("par");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"par\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf("000");
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("getsplit", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      BiConsumer<Short, Object> biConsumer0 = (BiConsumer<Short, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("HeW\"f4hV!xURFxDO5", 497L);
      assertEquals(497L, long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5884082070354566
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(1520, 1520);
      jSONObject0.toString((-3663), (-3663));
      jSONObject0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}";
      stringArray0[1] = "get";
      stringArray0[2] = "{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}";
      stringArray0[4] = "1508.0810560";
      stringArray0[5] = "wheel.json.JSONObject@0000000001";
      stringArray0[7] = "{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}";
      jSONObject0.opt(stringArray0[6]);
      String[] stringArray1 = JSONObject.getNames((Object) "{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("3", (int) (byte)0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.append("", (Object) null);
      jSONObject1.has("ey>JLw+hwb%8B22P");
      Float float0 = new Float(0.0F);
      Float.sum(0.0F, (byte)0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.put("hlz7", float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Consumer<Object> consumer0 = null;
      // Undeclared exception!
      try { 
        linkedList0.forEach((Consumer<? super JSONObject>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-648.2537177));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((Integer) null, double0, biFunction0);
      jSONObject0.optInt("has", 92);
      Byte byte0 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject.doubleToString((-278.5745234753081));
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      hashMap0.put((Double) null, "-278.5745234753081");
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 202, (-2045));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, (-30733247), 2141);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("");
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
      
      String string1 = JSONObject.quote("GNtm Bh@q/G%");
      assertEquals("\"GNtm Bh@q/G%\"", string1);
      
      String string2 = jSONObject0.optString("rHc", "");
      assertEquals("", string2);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short short0 = new Short((short)42);
      Long long0 = new Long(28L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Float float0 = new Float((double) (short)42);
      String[] stringArray1 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray1);
      jSONObject0.optString("", "getvalueOf");
      Object object0 = jSONObject0.opt(",");
      assertNull(object0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("java.lang.Long@0000000005.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@0000000005.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      long long0 = 908L;
      jSONObject0.put("$700A\u0005yufl)X$!gsb", 908L);
      jSONObject0.optInt("$700A\u0005yufl)X$!gsb");
      try { 
        jSONObject0.getJSONArray("$700A\u0005yufl)X$!gsb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$700A\\u0005yufl)X$!gsb\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put((Integer) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.put(",]#'7#", 164.9442149987);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-11), (-11));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Long long0 = new Long(1188L);
      Double double0 = new Double(0.0);
      hashMap0.put(long0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(".I[tR[vQ^)E8", false);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("] is not a JSONArray.", (-3745));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt((String) null);
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("isdoubleToLongBits", (-3679L));
      int int0 = jSONObject0.getInt("isdoubleToLongBits");
      assertEquals((-3679), int0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.quote("gh0<:W/<<`D ?6Kah;");
      assertEquals("\"gh0<:W/<<`D ?6Kah;\"", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.quote("?QFc3s\"B:");
      assertEquals("\"?QFc3s\\\"B:\"", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.put("0", (Float) null);
      hashMap0.put("0", (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Double double0 = Double.valueOf(1.0);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("q#I0S;8");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (-1139L));
      String string0 = JSONObject.quote(";WT|7ew");
      assertEquals("\";WT|7ew\"", string0);
      
      long long0 = jSONObject1.getLong("A JSONObject text must end with '}'");
      assertEquals((-1139L), long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-278.57452347530810", (Object) "-278.57452347530810");
      try { 
        jSONObject1.getJSONObject("-278.57452347530810");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-278.57452347530810\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("getwrite", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get("getwrite");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)102);
      jSONObject0.put("", (Object) byte0);
      jSONObject0.remove("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 3124L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("xZ\"u9:dTV8BIL9~n9A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xZ\\\"u9:dTV8BIL9~n9A\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove(" _#M{VJLwAIE'>rdC(");
      Double double0 = new Double(3784.208235128531);
      String string0 = "gettoString";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of gettoString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      Long.min(0L, 0L);
      Double double0 = new Double(1.0);
      double double1 = jSONObject0.optDouble("E^'M@$4&0+");
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Y=#Qt6+joCjP0`77/cg", "Y=#Qt6+joCjP0`77/cg");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)295);
      try { 
        jSONObject0.append((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("istoString", 1.0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt(": ", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      Double double0 = new Double((-1.0));
      try { 
        jSONObject0.accumulate((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Set<Map.Entry<Integer, Double>> set0 = (Set<Map.Entry<Integer, Double>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Short short0 = new Short((short)606);
      String string0 = JSONObject.valueToString(short0, (short)606, (short)606);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Boolean boolean0 = Boolean.valueOf("[si]uMs#95/");
      String string0 = JSONObject.valueToString(boolean0, 47, (-8));
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-161), (-161));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Short short0 = new Short((short)47);
      Short.toUnsignedInt((short)47);
      hashMap0.put(short0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject1.toString(128, 3197);
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Float float0 = new Float(0.0F);
      hashMap0.put((Object) null, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(1459, 1597);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.1073852711297307
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject.quote("j>N>RS5 fFdX");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"j>N>RS5 fFdX\"";
      stringArray0[1] = "j>N>RS5 fFdX";
      stringArray0[2] = "\"j>N>RS5 fFdX\"";
      stringArray0[3] = "j>N>RS5 fFdX";
      stringArray0[4] = "j>N>RS5 fFdX";
      stringArray0[5] = "j>N>RS5 fFdX";
      stringArray0[6] = "\"j>N>RS5 fFdX\"";
      stringArray0[7] = "\"j>N>RS5 fFdX\"";
      stringArray0[8] = "\"j>N>RS5 fFdX\"";
      JSONObject jSONObject0 = new JSONObject("\"j>N>RS5 fFdX\"", stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("j>N>RS5 fFdX", (Object) null);
      JSONObject jSONObject2 = new JSONObject((Object) "j>N>RS5 fFdX");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject2.write(stringWriter0);
      jSONObject1.write(writer0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject2.toString((-1606), 2210);
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(34);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      BiFunction<Object, Object, Boolean> biFunction0 = (BiFunction<Object, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("{", linkedList0);
      JSONObject.getNames(jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Short short0 = new Short((short) (-26418));
      hashMap0.put(short0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("toU", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong(" of ", 0L);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "NZ#Xy";
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-69));
      jSONObject0.optDouble("oy0", (double) (byte) (-69));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("}U+\"rJK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}U+\\\"rJK\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("[bxYJ#.K{IroJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[bxYJ#.K{IroJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of JSONArray[
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
