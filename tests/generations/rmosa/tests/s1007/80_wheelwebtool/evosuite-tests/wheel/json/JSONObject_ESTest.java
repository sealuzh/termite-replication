/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 08 11:25:31 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.792953480427564
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(47, (-3686));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6569749571794006
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((float) 764);
      hashMap0.put("4675.564683134171.", float0);
      String string0 = JSONObject.valueToString(hashMap0, 764, (-2735));
      assertNotNull(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{e=f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 4 of {e=f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)102);
      jSONObject0.put("", (Object) byte0);
      Object object0 = jSONObject0.remove("");
      assertEquals((byte)102, object0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("KrVs|cTM5gQ8@&Q|MZ_", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("\"ot,@PHP~fH<@fti!{\"", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(",\n", 2230L);
      assertEquals(2230L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0981473891350673
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-447));
      jSONObject0.accumulate("ismin", integer0);
      long long0 = jSONObject0.optLong("ismin");
      assertEquals((-447L), long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("J`x/IR63z{;;xZB", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("J`x/IR63z{;;xZB");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5622590391891036
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.optInt("PGO", 0);
      assertEquals(0, int0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8222900060250078
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\"J`x/IR63z{;;xZB\"", 102);
      assertEquals(102, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float(1172.0F);
      hashMap0.put("for", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("for");
      assertEquals(1172, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7851038147158325
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", (-3064L));
      int int0 = jSONObject1.optInt("ROdK9RZ");
      assertEquals(2, jSONObject0.length());
      assertEquals((-3064), int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("T^I F57<4Z<MR", (-2578.012515286244));
      assertEquals((-2578.012515286244), double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Long@0000000004.", 0L);
      double double0 = jSONObject0.optDouble("java.lang.Long@0000000004.");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(")hy", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-21));
      JSONObject jSONObject1 = jSONObject0.append("toS", byte0);
      boolean boolean0 = jSONObject1.has("toS");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5751765904639274
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("PGO", "PGO");
      jSONObject1.getString("PGO");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("P", 908L);
      long long0 = jSONObject1.getLong("P");
      assertEquals(2, jSONObject0.length());
      assertEquals(908L, long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("`B", 0L);
      int int0 = jSONObject1.getInt("`B");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getkeySet", (-2011L));
      int int0 = jSONObject0.getInt("getkeySet");
      assertEquals((-2011), int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9251211907908186
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      double double0 = jSONObject1.getDouble("");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 58, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.8587409130062867
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(1115, 0.0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 27, 27);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1786549963416462
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(2692.152505539015);
      hashMap0.put((Double) null, double0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-812), 2448);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4860325981639935
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = Double.valueOf((double) 59);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(8192, 3474);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.836226374499039
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      hashMap0.put((Long) null, (Byte) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("getkeySet", hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString((-719), (-719));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9430096637858085
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "toS");
      // Undeclared exception!
      jSONObject0.toString(4168);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((-1.0));
      hashMap0.put((String) null, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Short short0 = new Short((short)13);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("] is not a JSONObject.", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      Short short0 = new Short((short) (-792));
      Byte byte0 = new Byte((byte) (-46));
      hashMap0.put(short0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("wheel.json.JSONException", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("4675.564683134171", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(123, 123);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = JSONObject.quote("NY_qK5G\"d5J} CAJ");
      assertEquals("\"NY_qK5G\\\"d5J} CAJ\"", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1956);
      try { 
        jSONObject0.put((String) null, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("JSON does not allow non-finite numbers.", "toS");
      assertEquals("toS", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("1477.796630859375", "");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("1477.796630859375", "");
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      double double0 = jSONObject1.optDouble("ROdK9RZ", (double) 908L);
      assertEquals(2, jSONObject0.length());
      assertEquals(908.0, double0, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("get");
      assertNull(object0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5733163646283495
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Byte byte0 = new Byte((byte)36);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("rev", 0.0);
      jSONObject0.getLong("rev");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("getequals", "0");
      try { 
        jSONObject1.getDouble("getequals");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getequals\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("O>eU{}", "O>eU{}");
      Object object0 = jSONObject1.get("O>eU{}");
      assertEquals("O>eU{}", object0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{^9qNX\"q");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {^9qNX\"q
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("A JSONObject text must begin with '{'");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of A JSONObject text must begin with '{'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("gettoUpperCase");
      assertNull(object0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      jSONObject0.put("Gp-", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7152863051349312
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.784617558418788
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(92, 92);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 36, 3449);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 912, 25);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 486, 10);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 719, 719);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 58, 58);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.193549604098133
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.put(2162.0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.3309046025659
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.get("zGh/;D2Osg\u0005]5/m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zGh/;D2Osg\\u0005]5/m\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("/AD</`)4bN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/AD<\\/`)4bN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.quote("(YXc!:.i#47 &=:/");
      assertEquals("\"(YXc!:.i#47 &=:/\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("A.2ZV &*2?d8K4./?7g", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "PGO");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("!8.#5|$AXq", "!8.#5|$AXq");
      jSONObject1.optString("!8.#5|$AXq");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      jSONObject0.put("rm*NX'/<<>Ilj", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("rm*NX'/<<>Ilj");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("", "");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Kv34X{lbnb\"e&LY(@:%");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".", (-1614L));
      double double0 = jSONObject0.optDouble(".");
      assertEquals((-1614.0), double0, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.9446237645585087
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((float) 59);
      hashMap0.put("ent", float0);
      Double double0 = new Double(59);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject1.toString(59, 59);
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer((-1652));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float(0.0F);
      hashMap0.put("int", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4921530032950385
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getequals");
      jSONObject0.put("getequals", (long) 47);
      long long0 = jSONObject0.optLong("getequals");
      assertEquals(4, jSONObject0.length());
      assertEquals(47L, long0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.0981473891350673
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("G(-A", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("G(-A");
      assertNotSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.464495904460723
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1562.687);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONException", float0);
      try { 
        jSONObject1.getJSONObject("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-2267));
      jSONObject0.append("wa", integer0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("wa");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("(3/@fjYQ|T<V3i^Hi", 1.0);
      int int0 = jSONObject1.getInt("(3/@fjYQ|T<V3i^Hi");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("sZoP2bD|&vp3", 1.0);
      double double0 = jSONObject1.getDouble("sZoP2bD|&vp3");
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a JSONArray.", true);
      try { 
        jSONObject0.getInt("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("G(-A", true);
      boolean boolean0 = jSONObject0.getBoolean("G(-A");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.8503961409042051
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("PGO", "PGO");
      boolean boolean0 = jSONObject1.optBoolean("PGO");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.581573107414146
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("G(-A", (Map) hashMap0);
      try { 
        jSONObject1.getBoolean("G(-A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G(-A\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("G(-A", false);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.getBoolean("G(-A");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.464495904460723
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.putOpt("OS", float0);
      try { 
        jSONObject1.getJSONArray("OS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"OS\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.doubleToString(4675.564683134171);
      assertEquals("4675.564683134171", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.4681399390162087
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.append("", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6859646722371444
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("no", "no");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float(1172.0F);
      hashMap0.put("for", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append("for", "PSlMH$0c+a#k&N<Ol");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[for] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("vw)}&8L+h", 35);
      JSONObject jSONObject2 = jSONObject1.accumulate("vw)}&8L+h", linkedList0);
      jSONObject1.accumulate("vw)}&8L+h", jSONObject2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("JSONArray[", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("US.j_T#t!KMGA#(DR&", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                                                      \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n                                                                                                                      \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                                           }");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.941089007302117
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double double0 = new Double(0.0F);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString(1476, 1476);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0710178890244566
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{e=7f");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 5 of {e=7f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}P#+(}gvV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }P#+(}gvV
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("q B]yZz&%Yn@xrJZ", object0);
      boolean boolean0 = jSONObject1.isNull("q B]yZz&%Yn@xrJZ");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("iscompare", "iscompare");
      boolean boolean0 = jSONObject1.isNull("iscompare");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(835);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optInt("\"NY_qK5G\"d5J} CAJ\"");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getequals");
      long long0 = jSONObject0.optLong("getequals");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Expected '", (-3326));
      assertEquals((-3326), int0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-3580));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("ZVu3z7X<ROVP", (-3084L));
      assertEquals((-3084L), long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("S2:[S1,_", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(";|uI*[GBlu;9fi!&Cw3");
      assertEquals("", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("{e=f", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("]OMj1~d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]OMj1~d\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has(".");
      assertFalse(boolean0);
  }
}
