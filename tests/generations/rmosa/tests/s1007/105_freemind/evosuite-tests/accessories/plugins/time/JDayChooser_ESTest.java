/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 05:55:45 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.MindIcon;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeListener;
import java.io.PipedReader;
import java.text.ParseException;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.Locale;
import java.util.TimeZone;
import java.util.Vector;
import javax.help.DefaultHelpHistoryModel;
import javax.help.DefaultHelpModel;
import javax.help.HelpSet;
import javax.help.IndexView;
import javax.help.JHelp;
import javax.help.JHelpNavigator;
import javax.swing.DebugGraphics;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.TransferHandler;
import javax.swing.plaf.basic.BasicLabelUI;
import javax.swing.plaf.multi.MultiDesktopIconUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Demo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1222), 6L, 2018, 34, '-');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "freemind.main.FreeMind");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInputMethodListeners();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.firePropertyChange("freemind.main.FreeMind", (byte)20, (byte)11);
      TransferHandler transferHandler0 = new TransferHandler("day");
      transferHandler0.getDragImage();
      transferHandler0.getDragImage();
      jDayChooser0.setTransferHandler(transferHandler0);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.day = (-2147450880);
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.setFocus();
      int int0 = jDayChooser0.getDay();
      assertEquals((-2147450880), int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(6L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.repaint(6L);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 39, 965, 39, ';');
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 0L, 608, 33, '=');
      InputEvent.getModifiersExText(608);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      jDayChooser0.setMonth((-1911));
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      jDayChooser0.addPropertyChangeListener((PropertyChangeListener) basicLabelUI0);
      Color color0 = jDayChooser0.weekdayForeground;
      // Undeclared exception!
      try { 
        jDayChooser0.setForeground(color0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JLabel
         //
         verifyException("javax.swing.plaf.basic.BasicLabelUI", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      SystemColor systemColor0 = SystemColor.controlText;
      Color.getColor("kNZ@LD", (Color) systemColor0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(3);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-207L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1089, (-207L), 1089, 1089, '_');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(3);
      Locale locale0 = Locale.forLanguageTag("day");
      jDayChooser0.setLocale(locale0);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(160);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8969911136663633
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(true);
      JButton jButton0 = new JButton();
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.setYear(84);
      jDayChooser0.getSelectedDay();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setEnabled(false);
      Demo demo0 = null;
      try {
        demo0 = new Demo();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      HelpSet helpSet0 = new HelpSet();
      IndexView indexView0 = new IndexView(helpSet0, "Windows", "", (Hashtable) null);
      JHelpNavigator jHelpNavigator0 = new JHelpNavigator(indexView0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Windows");
      DefaultHelpModel defaultHelpModel0 = new DefaultHelpModel(helpSet0);
      JHelp jHelp0 = new JHelp(defaultHelpModel0);
      DefaultHelpHistoryModel defaultHelpHistoryModel0 = new DefaultHelpHistoryModel(jHelp0);
      helpSet0.getDefaultPresentation();
      JHelp jHelp1 = new JHelp(defaultHelpModel0, defaultHelpHistoryModel0, (HelpSet.Presentation) null);
      helpSet0.addHelpSetListener(jHelp1);
      KeyEvent keyEvent0 = new KeyEvent(jHelpNavigator0, 41, (-3004L), 41, 41, 'L');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputContext();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton jButton0 = new JButton();
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 666, "MULTIPLE");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textHighlightText;
      int int0 = SwingConstants.TRAILING;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initialized = false;
      jDayChooser0.setLocale((Locale) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setFocus();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getBackground();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-559), "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GraphicContext graphicContext0 = new GraphicContext();
      Font font0 = graphicContext0.getFont();
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JEditorPane jEditorPane0 = new JEditorPane("day", "eHx");
      Color color0 = jEditorPane0.getCaretColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getBaseline(32, 24);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color0.getBlue());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      System.setCurrentTimeMillis((-8L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.sql.Date date0 = new java.sql.Date((-8L));
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getBaseline((-3574), (-3574));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width and height must be >= 0
         //
         verifyException("java.awt.Component", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInputMethodListeners();
      MockDate mockDate0 = new MockDate(14, 14, 496, 496, 496, 14);
      MockDate mockDate1 = new MockDate(496, 496, 14, 496, 496);
      jDayChooser0.setMaxSelectableDate(mockDate1);
      MockInstant.now();
      // Undeclared exception!
      try { 
        Date.from((Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(18, 18, 18);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date1.toString());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.windowBorder;
      jDayChooser0.setForeground(systemColor0);
      int int0 = jDayChooser0.day;
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getFont();
      PipedReader pipedReader0 = new PipedReader(14);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      jDayChooser0.setCalendar(calendar0);
      MindIcon.factory("+D{@[{%VtIM:w");
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-1), 0L, 935, 935, '(', (-1396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GapContent gapContent0 = new GapContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      styleContext0.getStyleNames();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument1);
      gapContent0.createPosition(18);
      Style style0 = jTextPane0.getLogicalStyle();
      Color color0 = defaultStyledDocument0.getForeground(style0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-3087));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(12);
      assertEquals(12, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-1259));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1198L, (-221), 0, '0', 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setMaxDayCharacters((-2565));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 12);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setAutoscrolls(true);
      MultiDesktopIconUI multiDesktopIconUI0 = new MultiDesktopIconUI();
      Vector<Calendar> vector0 = new Vector<Calendar>();
      JComboBox<Calendar> jComboBox0 = new JComboBox<Calendar>(vector0);
      // Undeclared exception!
      try { 
        multiDesktopIconUI0.getPreferredSize(jComboBox0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(3909);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addListeners(42);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1620, 1620, 1620, 1620, 'Y');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getSundayForeground();
      int int0 = 450;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 450);
      jDayChooser0.focusLost(focusEvent0);
      long long0 = (-1263L);
      int int1 = 100;
      int int2 = 0;
      char char0 = '~';
      Locale locale0 = Locale.CHINESE;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.lookup(canvasGraphicsNode0, canvasGraphicsNode0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", locale0);
      try { 
        mockSimpleDateFormat0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYearChooser((JYearChooser) null);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1005);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.695518092694581
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.windowBorder;
      jDayChooser0.setForeground(systemColor0);
      int int0 = jDayChooser0.day;
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getFont();
      PipedReader pipedReader0 = new PipedReader(14);
      jDayChooser0.updateUI();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.isWeekOfYearVisible();
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      int int1 = 156;
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "Windows", 156);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5777233286214165
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.695563447768113
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.lightGray;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.initialized = false;
      jDayChooser0.setMonth(131082);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(230);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(39);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getColorModel();
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1198L, (-221), 0, '0', 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getGreatestMinimum(0);
      mockGregorianCalendar0.setLenient(false);
      keyEvent0.paramString();
      KeyEvent.getKeyText(11);
      jDayChooser0.setMaxDayCharacters(11);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      KeyEvent keyEvent1 = new KeyEvent(jPanel0, 0, 1198L, 11, 337, ';');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(false);
      Color color0 = jDayChooser0.weekdayForeground;
      assertEquals((-16754012), color0.getRGB());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.sql.Date date0 = new java.sql.Date(1036L);
      jDayChooser0.defaultMaxSelectableDate = (Date) date0;
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.577812877184722
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setMonth(7);
      jDayChooser0.setMonth(1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.UK;
      locale0.getDisplayVariant(locale1);
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-6029312), color0.getRGB());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
