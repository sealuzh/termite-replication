/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 14:12:19 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Proxy;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0497978423100225
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("m_[#nVe9GyV");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      MockSocket mockSocket0 = new MockSocket();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockSocket0.setKeepAlive(true);
      theClient0.setSocket(mockSocket0);
      theClient0.getClientBinaryHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      QuickServer quickServer0 = new QuickServer("hMaS? #H");
      quickServer0.setMaxAuthTry(0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      int int1 = new Integer(0);
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      theClient0.getSocketChannel();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.toString();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.setMaxConnection(0L);
      quickServer0.setClientWriteHandler("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      quickServer0.setRunningSecure(true);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      int int0 = (-1);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("Server was not stopped even after 10sec.. will terminate now.", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.toString();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.setMaxAuthTry((-5));
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      int int0 = 1;
      String string0 = "_c0OV ";
      try { 
        QuickServer.load("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4286687697449683
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      QuickServer quickServer0 = new QuickServer();
      quickServer0.clearAllPools();
      quickServer0.setRawCommunicationLogging(true);
      theClient0.setServer(quickServer0);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      QuickServer quickServer1 = theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.setServer(quickServer1);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.435348070075531
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      QuickServer quickServer0 = new QuickServer();
      quickServer0.clearAllPools();
      quickServer0.setBindAddr("Server was not stopped even after 10sec.. will terminate now.");
      quickServer0.run();
      theClient0.setServer(quickServer0);
      theClient0.setServer(quickServer0);
      byte[] byteArray0 = new byte[0];
      theClient0.getClientBinaryHandler();
      theClient0.setServer(quickServer0);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      QuickServer quickServer0 = new QuickServer("u0))11xC\"lu37", 3476);
      quickServer0.configQuickServer();
      quickServer0.makeServerSocket();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient1.getSocketChannel();
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[3];
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      byteBufferArray0[0] = byteBuffer0;
      byteBufferArray0[1] = byteBuffer0;
      ByteBuffer byteBuffer1 = ByteBuffer.allocateDirect(3476);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)54;
      ByteBuffer.wrap(byteArray0);
      byteBufferArray0[2] = byteBuffer1;
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(125);
      theClient0.setMaxAuthTryMsg("QMY)>hx8NiVM3");
      theClient0.getMaxAuthTryMsg();
      assertEquals(125, theClient0.getTimeout());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTryMsg("");
      theClient0.getMaxAuthTryMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-1815));
      theClient0.getSocket();
      theClient0.getMaxAuthTry();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("", (-1815));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1815
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientEvent((ClientEvent) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.getClientEvent();
      theClient0.getAuthenticator();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-566));
      Integer integer0 = new Integer((-566));
      theClient0.getTimeout();
      theClient0.toString();
      assertEquals((-566), theClient0.getTimeout());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      QuickServerConfig quickServerConfig0 = quickServer0.getConfig();
      quickServer0.initServer(quickServerConfig0);
      theClient0.setServer(quickServer0);
      QuickServer quickServer1 = theClient0.getServer();
      quickServer1.setStoreObjects((Object[]) null);
      try { 
        quickServer1.startQSAdminServer(1, "{TheClient ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not load class/s : java.lang.ClassNotFoundException: Class '{TheClient .class' should be in target project, but could not be found!
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getClientData();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      // Undeclared exception!
      try { 
        authenticator0.askAuthentication(nonBlockingClientHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.Authenticator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(301);
      theClient0.getMaxAuthTry();
      System.setCurrentTimeMillis(301);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rz2s9VN\"`0{b");
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("g");
      theClient0.getTimeoutMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.setMaxConnectionMsg("*'*lqu5!+py/>EqsKE");
      try { 
        blockingClientHandler0.isConected();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.setTimeout(3063);
      int int0 = theClient0.getTimeout();
      assertEquals(3063, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientAuthenticationHandler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientEvent();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      theClient0.getTrusted();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(100);
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type DIRECT is not compatible with address /192.168.1.42:100
         //
         verifyException("java.net.Proxy", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("ClientData does not implement ClientIdentifiable! Can't find a client with out it.");
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientCommandHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      String string0 = theClient0.toString();
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setSocketChannel((SocketChannel) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      assertEquals("<ClientHandler-Pool#-1-ID:1>", blockingClientHandler0.getName());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      TheClient theClient0 = new TheClient();
      theClient0.setAuthenticator((Authenticator) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }
}
