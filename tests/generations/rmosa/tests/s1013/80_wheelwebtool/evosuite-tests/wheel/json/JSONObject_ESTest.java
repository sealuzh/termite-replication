/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 15:17:15 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.445427374476478
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("{}", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isdoubleToString", (Map) hashMap0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("{}");
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      jSONObject1.put(",", (Collection) linkedList1);
      jSONObject0.toString((-1229), (-161));
      JSONArray jSONArray1 = jSONObject0.names();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Short short0 = new Short((short) (-607));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "50v+|H";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("50v+|H");
      jSONObject0.put("50v+|H", (Object) boolean0);
      jSONObject0.optBoolean("50v+|H", true);
      String string0 = jSONObject0.toString(451, 451);
      assertNotNull(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4337150271040935
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-62353088));
      jSONObject0.put("{}", (long) (-62353088));
      jSONObject0.toString((-62353088));
      long long0 = jSONObject0.optLong("{}");
      assertEquals((-62353088L), long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4258042906916644
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("6", long0);
      jSONObject1.getLong("6");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener(" {7MjR>5 ]=ue^90Fr7");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of  {7MjR>5 ]=ue^90Fr7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Pyk~:E1)", true);
      jSONObject0.getBoolean("Pyk~:E1)");
      jSONObject0.names();
      jSONObject1.putOpt("lLN.)!k", jSONObject0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.put("", 0L);
      jSONObject1.isNull("");
      int int0 = jSONObject1.getInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      Byte byte0 = new Byte((byte)26);
      hashMap0.put((JSONObject) null, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
      
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("WyJ@v#WgxEm<LZn$3wF", "WyJ@v#WgxEm<LZn$3wF");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("WyJ@v#WgxEm<LZn$3wF");
      JSONArray jSONArray1 = jSONObject0.names();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("box10m^qhm>qpQ*");
      JSONObject jSONObject1 = jSONObject0.put("\"box10m^qhm>qpQ*\"", 1L);
      jSONObject1.optLong("\"box10m^qhm>qpQ*\"");
      JSONObject.getNames((Object) "box10m^qhm>qpQ*");
      JSONTokener jSONTokener0 = new JSONTokener("\"box10m^qhm>qpQ*\"");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"box10m^qhm>qpQ*\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("<veb9/4L", true);
      StringWriter stringWriter0 = new StringWriter(69);
      jSONObject1.write(stringWriter0);
      boolean boolean0 = jSONObject1.optBoolean("<veb9/4L");
      boolean boolean1 = jSONObject0.isNull("<veb9/4L");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toString();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("{}", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double1, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(8, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put((String) null, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.toString((-40749215));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte)32);
      jSONObject0.toString(0, 0);
      jSONObject0.put("{}", 1874);
      jSONObject0.optDouble("{}");
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.append("getput", long0);
      jSONObject1.optJSONArray("getput");
      jSONObject1.put("s0~n*pTB0c(vPs>Pz", (double) 0L);
      Short short0 = new Short((short) (-3367));
      JSONObject.getNames((Object) short0);
      try { 
        jSONObject0.getJSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      Integer integer0 = new Integer(2862);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(integer0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("get", (Collection) linkedList0);
      jSONObject1.optDouble(" ");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("get");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Short short0 = new Short((short)57);
      JSONObject.valueToString(short0);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Short@0000000001");
      // Undeclared exception!
      jSONObject0.toString(8448);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote(",\n");
      JSONObject.quote("Z5iNaQ</");
      JSONObject jSONObject1 = jSONObject0.put("is", 0L);
      JSONObject.getNames((Object) ",\n");
      try { 
        jSONObject1.getBoolean("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("#%lG;yBdx", (-1L));
      boolean boolean0 = jSONObject1.has("#%lG;yBdx");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.append("$6Y)}8ko7\"0l<UK@", (Object) null);
      jSONObject1.put("$6Y)}8ko7\"0l<UK@", (-1337.0));
      double double0 = jSONObject1.optDouble("$6Y)}8ko7\"0l<UK@");
      assertEquals((-1337.0), double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      HashMap<Float, Double> hashMap1 = new HashMap<Float, Double>(hashMap0);
      Float float0 = new Float(1.0);
      Double double0 = new Double(Double.NaN);
      hashMap1.put(float0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.toString((-2264), (-2264));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float0 = new Float(3607.9983F);
      Double double0 = new Double(3607.9983F);
      hashMap0.put(float0, double0);
      Float float1 = new Float((-944.0447258910405));
      Double double1 = new Double((-944.0447258910405));
      JSONObject jSONObject0 = new JSONObject(float1);
      JSONObject jSONObject1 = jSONObject0.put("isdescendingIterator", (-703));
      int int0 = jSONObject1.optInt("isdescendingIterator");
      assertEquals(4, jSONObject0.length());
      assertEquals((-703), int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("~08!5CJ(@EPWo3T", 0);
      assertEquals(0, int0);
      
      jSONObject0.optJSONArray("zt2M3");
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Float float0 = new Float(94.853F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Integer integer0 = new Integer((-1700));
      jSONObject0.append("^!8l <P}rc0gQ^", integer0);
      JSONObject jSONObject1 = jSONObject0.accumulate("issubList", float0);
      jSONObject1.optDouble("issubList", (double) 94.853F);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Double double0 = new Double((-959.2514954291));
      hashMap0.put((Float) null, double0);
      Float float0 = new Float(0.0);
      Double double1 = new Double(0.0);
      hashMap0.put(float0, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-2481);
      // Undeclared exception!
      jSONObject0.toString((-2481), 2147483645);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject.getNames((Object) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(913, false);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 21, 1626);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5901377123969231
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("6qQ&;!ufx/d7Gm");
      Integer integer0 = new Integer(50);
      hashMap0.put(jSONObject0, integer0);
      jSONObject0.toJSONArray((JSONArray) null);
      Integer integer1 = new Integer(50);
      JSONObject jSONObject1 = jSONObject0.append("6qQ&;!ufx/d7Gm", hashMap0);
      jSONObject1.optBoolean("u<v.9Nvd\".x");
      String string0 = "wheel.json.JSONException";
      Integer.getInteger("wheel.json.JSONException");
      jSONObject0.append("6qQ&;!ufx/d7Gm", integer1);
      String string1 = "false";
      jSONObject0.optBoolean("false");
      String string2 = "fH}8w)dXI:$F`at9";
      Double double0 = new Double(Double.NaN);
      JSONObject.valueToString((Object) null, 50, 47);
      try { 
        jSONObject0.accumulate("fH}8w)dXI:$F`at9", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("h;}", (Object) "h;}");
      jSONObject1.getString("h;}");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = Double.valueOf(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-656), (-656));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{*VXL\"<au{=4-M1s/h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {*VXL\"<au{=4-M1s/h
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.accumulate("", "");
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("bHpCl:fS\"~[vL", false);
      JSONObject jSONObject2 = jSONObject0.accumulate("bHpCl:fS\"~[vL", jSONObject1);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a JSONArray.", false);
      try { 
        jSONObject0.getJSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      Float.max((-241.19F), (-241.19F));
      JSONObject jSONObject1 = jSONObject0.put("E],.'P68", false);
      Object object0 = jSONObject1.remove("E],.'P68");
      assertEquals(false, object0);
      
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject0.append("E],.'P68", object1);
      jSONObject0.optString("E],.'P68", "has");
      jSONObject0.put("E],.'P68", false);
      boolean boolean0 = jSONObject2.isNull("E],.'P68");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("get", "get");
      jSONObject1.put("Expected a ',' or ']'", false);
      jSONObject1.optString("get");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("getcompareTo", object0);
      jSONObject1.opt("getcompareTo");
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject.getNames((Object) "Substring bounds error");
      Float float0 = new Float(Double.NaN);
      Float.min(0.0F, 0.0F);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1338);
      hashMap0.put(integer0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("sjJ;?", (Object) "sjJ;?");
      try { 
        jSONObject0.getJSONObject("sjJ;?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sjJ;?\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.opt(" *=e2F#3");
      jSONObject0.opt((String) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (-220L));
      JSONObject.getNames((Object) jSONObject1);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Double double0 = new Double(0.0);
      jSONObject0.append("p!&1J", double0);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append(',');
      Writer writer0 = jSONObject0.write(stringWriter1);
      assertSame(writer0, stringWriter1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float0 = new Float(3599.8618F);
      Double double0 = new Double(3599.8618F);
      hashMap0.put(float0, double0);
      Float float1 = new Float((-944.0447258910405));
      hashMap0.put(float1, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      Writer writer0 = jSONObject0.write(stringWriter1);
      assertSame(writer0, stringWriter1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("sh", 0.0);
      double double0 = jSONObject1.getDouble("sh");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("toH", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("toH");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(4903.143);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.put("{}", true);
      try { 
        jSONObject0.getJSONArray("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "Az&j`J?An%h3~^";
      String[] stringArray0 = JSONObject.getNames((Object) "Az&j`J?An%h3~^");
      JSONObject jSONObject0 = new JSONObject("Az&j`J?An%h3~^", stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Az&j`J?An%h3~^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Az&j`J?An%h3~^
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("bHpCl:fS\"~[vL", false);
      boolean boolean0 = jSONObject1.isNull("bHpCl:fS\"~[vL");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject.valueToString(hashMap0, 467, (-544));
      JSONObject jSONObject1 = jSONObject0.append("E],.'P68", "{}");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.2795643472768354
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject.quote("??tYv1-");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"??tYv1-\"";
      stringArray0[1] = ";*z-.B";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = JSONObject.quote(";*z-.B");
      assertEquals("\";*z-.B\"", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("??tYv1-", (long) 1928);
      jSONObject1.optInt("??tYv1-", 59);
      jSONObject1.length();
      boolean boolean0 = jSONObject1.isNull(";*z-.B");
      assertTrue(boolean0);
      
      int int0 = jSONObject1.optInt("??tYv1-");
      assertEquals(1928, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("JSONArray initial value should be a string or collection or array.");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 2712.72403731;
      Byte byte0 = new Byte((byte) (-25));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.keys();
      String string0 = null;
      jSONObject0.optString((String) null, (String) null);
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put(",\n", 32);
      long long0 = jSONObject1.getLong(",\n");
      assertEquals(32L, long0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("eq", 34);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.put("8}c(1`]-&@HSQ", 2850);
      int int0 = jSONObject0.getInt("8}c(1`]-&@HSQ");
      assertEquals(2850, int0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      Float.max((-241.19F), (-241.19F));
      String string0 = "E],.'P68";
      JSONObject jSONObject1 = jSONObject0.put("E],.'P68", false);
      try { 
        jSONObject1.getInt("E],.'P68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E],.'P68\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "sjJ\\;?";
      JSONObject jSONObject1 = jSONObject0.put("sjJ;?", (Object) "sjJ;?");
      try { 
        jSONObject1.append("sjJ;?", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[sjJ;?] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("sjJ;?", (Object) "sjJ;?");
      JSONObject jSONObject1 = new JSONObject((Object) "XIsbX");
      // Undeclared exception!
      jSONObject1.toString(4344, 4344);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Float float1 = new Float((-3484.5342F));
      String string0 = "in";
      Float float2 = new Float((-3484.5342F));
      jSONObject0.accumulate("in", float2);
      JSONObject.numberToString(float0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "sjJ\\;?";
      jSONObject0.put("sjJ;?", (Object) "sjJ;?");
      try { 
        jSONObject0.getLong("sjJ;?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sjJ;?\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      hashMap0.put("toS", (JSONArray) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("getformat", 10L);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = "vC";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("vC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of vC
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "null";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float0 = new Float((double) 3599.8618F);
      Double double0 = new Double(3599.8618F);
      hashMap0.put(float0, double0);
      hashMap0.put(float0, (Double) null);
      Float float1 = new Float((-944.0447258910405));
      Float.sum(0.0F, 3599.8618F);
      hashMap0.put(float1, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("&t-DGL", (-2143L));
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float0 = new Float((double) 3599.8618F);
      Double double0 = new Double(3599.8618F);
      hashMap0.put(float0, double0);
      hashMap0.put(float0, (Double) null);
      Float float1 = new Float((-944.0447258910405));
      hashMap0.put(float1, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(3054, 51);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float((-1162.7F));
      Double double0 = new Double(1.0);
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      hashMap0.put(float0, double0);
      Float float1 = new Float(0.0);
      hashMap0.put((Float) null, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-2481), (-2481));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float0 = new Float((double) 3599.8618F);
      Double double0 = new Double(3599.8618F);
      hashMap0.put(float0, double0);
      hashMap0.put(float0, (Double) null);
      Float float1 = new Float((-944.0447258910405));
      hashMap0.put(float1, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-2506), (-2506));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(1565.7);
      Double double0 = new Double(1565.7);
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float1 = new Float(1565.7);
      hashMap0.put(float1, double0);
      Float float2 = new Float(1565.7);
      hashMap0.put((Float) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(60, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.quote("wzE.rC");
      Boolean boolean0 = Boolean.valueOf(true);
      String string1 = JSONObject.valueToString(boolean0, 61, 61);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "U2Z";
      stringArray0[2] = "#i(h6_ kY;O.:Y";
      JSONObject jSONObject0 = new JSONObject("#i(h6_ kY;O.:Y", stringArray0);
      Object object0 = jSONObject0.opt("U2Z");
      assertNull(object0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("isfloatToRawIntBits", (double) 467);
      assertEquals(467.0, double0, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("isiterator", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "jidBts}*[Pr";
      jSONObject0.accumulate("jidBts}*[Pr", (Object) null);
      int int0 = (-22654515);
      String string1 = "] not found.";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ] not found.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("h;}", (Object) hashMap0);
      boolean boolean0 = jSONObject1.optBoolean("h;}", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("iswait", true);
      boolean boolean0 = jSONObject1.optBoolean("iswait", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("sjJ;?", (Object) "sjJ;?");
      try { 
        jSONObject0.getBoolean("sjJ;?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sjJ;?\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.append((String) null, hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      Byte byte0 = new Byte((byte)48);
      hashMap0.put((Object) null, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.valueToString(jSONObject0, 1214, 1116);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      JSONArray jSONArray1 = new JSONArray();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Double double0 = new Double((-1.0F));
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float1 = new Float((-2362.396583454235));
      hashMap0.put(float1, double0);
      hashMap0.put((Float) null, (Double) null);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      int int0 = jSONObject0.optInt("sE#0", (-1));
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("int");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "] is not a JSONArray.";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-5157), (-5157));
      JSONTokener jSONTokener0 = new JSONTokener("qz:,QqC8HCx=?L-QT");
      try { 
        jSONTokener0.next('J');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'J' and instead saw 'q' at character 1 of qz:,QqC8HCx=?L-QT
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("B,XXj", "4hm`4.Ppk5+zz\"Xv");
      assertEquals("4hm`4.Ppk5+zz\"Xv", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("*VXL\"<au{S=4-M1s/h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of *VXL\"<au{S=4-M1s/h
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("{\u0005uV85", "{\u0005uV85");
      assertEquals("{\u0005uV85", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("zs1i&.piyhCS");
      assertEquals("", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.8510944537717136
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.quote("<veb9/4L");
      assertEquals("\"<veb9/4L\"", string0);
      
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("\"<veb9/4L\"");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      int int0 = 70;
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("wheel.json.JSONArray@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONArray@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      hashMap1.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("b\rIR=m$z8", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.quote("#a3Anb-x8fo_6FV");
      assertEquals("\"#a3Anb-x8fo_6FV\"", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.quote("u~-EOe/$:I");
      assertEquals("\"u~-EOe/$:I\"", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("getformat", 0L);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = "vC";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("vC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of vC
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0256552612979881
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = JSONObject.quote("<kveb9/4a");
      assertEquals("\"<kveb9/4a\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "~/`QVu5* ,");
      jSONObject0.toString();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("ite");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ite\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(57);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (double) 1108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.isNull("] is not a number.");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((-2121.056271655813));
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float0 = new Float((-1.0));
      hashMap0.put(float0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(461, (-2482));
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 7, 7);
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = JSONObject.valueToString("Xf");
      assertNotNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put((Integer) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(66, 1324);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString((-1), (-1));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Double double0 = new Double((-39.35297307058));
      hashMap0.put(double0, "6_ok%");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = JSONObject.quote("#6y\"6E");
      assertEquals("\"#6y\\\"6E\"", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "get";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("get", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Long> hashMap1 = new HashMap<String, Long>();
      hashMap1.keySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONTokener jSONTokener0 = new JSONTokener("<veb9/4L");
      JSONTokener jSONTokener1 = new JSONTokener("<veb9/4L");
      jSONTokener1.toString();
      JSONObject jSONObject1 = jSONObject0.put("<veb9/4L", 0L);
      Object object0 = jSONObject1.get("<veb9/4L");
      assertEquals(0L, object0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean(":", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("toU");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1165);
      UnaryOperator.identity();
      JSONObject.doubleToString((-1.0));
      boolean boolean0 = jSONObject0.has("-1");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("not");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"not\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("ishashCode", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("l]k^!FvxCp", "\f");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Integer integer0 = new Integer(1182);
      String string0 = JSONObject.valueToString(integer0, (-598), (-598));
      assertNotNull(string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Byte byte0 = new Byte((byte)52);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, 118, (-657));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, 48, (-1544));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(",", (double) (-4111));
      assertEquals((-4111.0), double0, 0.01);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("\"+kFy:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"+kFy:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(",C");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,C
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      HashMap<Object, Long> hashMap1 = new HashMap<Object, Long>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.remove("[)|3os*@0CD0K[H*");
      jSONObject0.put("P", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("istoString", true);
      jSONObject1.remove("istoString");
      try { 
        jSONObject0.get("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("h;}", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("M,(bi72umU!9>H!f", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("getmin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getmin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = JSONObject.quote(">(}PnEHP``g");
      assertEquals("\">(}PnEHP``g\"", string0);
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of true
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 173
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(2531);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 174
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }
}
