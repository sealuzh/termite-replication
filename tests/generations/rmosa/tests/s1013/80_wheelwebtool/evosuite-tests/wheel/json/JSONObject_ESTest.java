/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 08 21:29:51 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("to", (Object) "to");
      jSONObject0.put("to", false);
      Short short0 = new Short((short)65);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("iscompare", object0);
      jSONObject1.isNull("iscompare");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("to", (Object) "to");
      String string0 = "nulF";
      JSONObject jSONObject1 = jSONObject0.putOpt("nulF", "nulF");
      String string1 = jSONObject1.toString(2208, 2208);
      short short0 = (short)65;
      // Undeclared exception!
      jSONObject1.getLong(string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2598, (Object) null);
      jSONArray0.optDouble((-759));
      jSONArray0.optDouble(12);
      jSONArray0.put((-1));
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2598] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.compare(true, true);
      Short short0 = new Short((short)19);
      JSONObject.valueToString(short0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("] is not a JSONArray.", (Collection) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.put("getsum", (Collection) null);
      Boolean boolean0 = new Boolean(true);
      JSONObject.valueToString(boolean0, (-2459), (-3056));
      int int0 = 4219;
      String string0 = jSONObject2.toString(567, 4219);
      JSONObject.testValidity(jSONObject0);
      // Undeclared exception!
      jSONObject1.getDouble(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(13, true);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.put("wa", (Object) jSONArray0);
      jSONObject0.optJSONArray("wa");
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("to", (Object) "to");
      JSONObject jSONObject1 = jSONObject0.putOpt("nulF", "nulF");
      String string0 = jSONObject1.toString(2208, 2208);
      jSONObject1.optInt("");
      jSONObject1.optInt("CE${i<kA=");
      Boolean boolean0 = new Boolean("nulF");
      // Undeclared exception!
      jSONObject0.getBoolean(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("to", (Object) "to");
      String string0 = "nulF";
      JSONObject jSONObject1 = jSONObject0.putOpt("nulF", "nulF");
      String string1 = jSONObject1.toString(2208, 2208);
      jSONObject1.optInt("");
      Boolean boolean0 = new Boolean("nulF");
      // Undeclared exception!
      jSONObject0.getJSONObject(string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("dec", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("N;.e.p$bZ@", 0.0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      long long0 = jSONObject1.getLong("N;.e.p$bZ@");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, false);
      jSONArray0.optDouble((-755));
      jSONArray0.optDouble(12);
      jSONArray0.put((-1));
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.put(".to\"eb`7zk=+(o~", 1.0);
      int int0 = jSONObject0.getInt(".to\"eb`7zk=+(o~");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString(45, 2604);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("cop", (long) (-1));
      jSONObject2.getDouble("cop");
      jSONObject2.optJSONObject("50QaWJO L!*|m\"3e");
      try { 
        jSONObject1.getInt("jo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{<QG)He");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {<QG)He
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject.doubleToString(2842.238);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("2842.238", 22L);
      jSONObject1.optBoolean("2842.238");
      jSONObject0.optString("Q^q$X");
      jSONObject0.optDouble("Q^q$X", 2842.238);
      JSONObject.getNames(jSONObject0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.append("]&>B~}F", object0);
      jSONObject1.getJSONArray("]&>B~}F");
      JSONObject jSONObject3 = jSONObject1.putOpt("bTj1q/|96u$[", (Object) null);
      jSONObject2.optString("su");
      jSONObject1.toString();
      JSONObject.valueToString((Object) null);
      // Undeclared exception!
      jSONObject3.toString(8192);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("na", (-38758282));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      String string0 = JSONObject.doubleToString((-38758282));
      assertEquals("-3.8758282E7", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.put("get", (-650));
      long long0 = jSONObject0.optLong("get");
      assertEquals((-650L), long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, (-2231L));
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.getBoolean("</Ve6BEE4qvEW>S@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<\\/Ve6BEE4qvEW>S@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3933121229745242
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Expected a ',' or '}'", true);
      assertTrue(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", true);
      boolean boolean1 = jSONObject0.isNull("JSONArray initial value should be a string or collection or array.");
      boolean boolean2 = jSONObject1.optBoolean("JSONArray initial value should be a string or collection or array.");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{^U3*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {^U3*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("H[3sr]83~zIW*!=|", (Map) null);
      jSONObject1.getJSONObject("H[3sr]83~zIW*!=|");
      JSONObject jSONObject2 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "H[3sr]83~zIW*!=|";
      stringArray0[1] = "H[3sr]83~zIW*!=|";
      stringArray0[2] = "H[3sr]83~zIW*!=|";
      stringArray0[3] = "H[3sr]83~zIW*!=|";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      assertFalse(jSONObject3.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      jSONObject0.put("flo", (Map) hashMap0);
      jSONObject0.put("qgP]#KQAL_", 0L);
      int int0 = jSONObject0.getInt("qgP]#KQAL_");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optDouble((-755));
      jSONArray0.optDouble(12);
      jSONArray0.put((-1));
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@00000000050", (Object) long0);
      jSONObject1.optDouble("java.lang.Short@00000000050");
      String string0 = JSONObject.doubleToString(Double.NaN);
      Float float0 = new Float(36.74095);
      String string1 = JSONObject.valueToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("to", (Object) "to");
      try { 
        jSONObject1.getJSONObject("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5228146795137598
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1649L));
      jSONArray0.optBoolean(1124);
      linkedList0.add(long0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.numberToString(long0);
      double double0 = jSONObject0.optDouble("flo");
      assertEquals(4, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject.quote("({he.aSMb\"kO#4H>VqI");
      JSONObject.quote("\"({he.aSMb\"kO#4H>VqI\"");
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "acc";
      jSONObject0.optInt("acc", 0);
      try { 
        jSONObject0.getString("acc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"acc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7480673485460891
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "nul");
      JSONObject jSONObject0 = new JSONObject("nul", stringArray0);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("nul", object0);
      jSONObject0.append("nul", (Object) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject.quote("N P%%+b");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "N P%%+b";
      stringArray0[1] = "\"N P%%+b\"";
      stringArray0[2] = "N P%%+b";
      JSONObject jSONObject0 = new JSONObject("\"N P%%+b\"", stringArray0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("N P%%+b", (Collection) linkedList0);
      jSONObject0.optString((String) null, (String) null);
      jSONObject0.optDouble("in", (double) 3861);
      JSONObject jSONObject1 = new JSONObject("N P%%+b", stringArray0);
      JSONObject.getNames((Object) jSONObject1);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", false);
      JSONObject jSONObject1 = jSONObject0.put("put", false);
      boolean boolean0 = jSONObject1.getBoolean("put");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.NULL;
      Float float0 = new Float((double) 69);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      Boolean boolean0 = new Boolean("isaddFirst");
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean.valueOf("Bad value from toJSONString: ");
      Boolean.compare(true, true);
      JSONObject.valueToString("Bad value from toJSONString: ");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getsum", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5538483415669473
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "SzKB$;fl";
      jSONObject0.putOpt("SzKB$;fl", "SzKB$;fl");
      try { 
        jSONObject0.getBoolean("SzKB$;fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SzKB$;fl\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("}!", (Map) hashMap0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "({he.aSMb\"kO#4H>VqI");
      Writer writer0 = jSONObject0.write(stringWriter1);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 3253;
      Float.min((-996.0F), (-3161));
      JSONObject.valueToString(hashMap0, 1073, 116);
      JSONTokener jSONTokener0 = new JSONTokener("k(3}zZ!=I2XT");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of k(3}zZ!=I2XT
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getsum", (long) 13);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optDouble("getsum", (-2680.7382228097413));
      JSONObject jSONObject2 = jSONObject1.optJSONObject("getsum");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3502202142205
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.quote("7/^XJ}ZhM=`';)bTeze");
      String string0 = JSONObject.quote("\"7/^XJ}ZhM=`';)bTeze\"");
      assertEquals("\"\\\"7/^XJ}ZhM=`';)bTeze\\\"\"", string0);
      
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("7/^XJ}ZhM=`';)bTeze", 1L);
      jSONObject0.optJSONObject("50QaWJO L!*|m\"3e");
      double double0 = jSONObject0.optDouble("7/^XJ}ZhM=`';)bTeze");
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 1441.28F);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("te", true);
      boolean boolean0 = jSONObject0.getBoolean("te");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Xre]dJs}0FG", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, "JctT|F'|9Smk)@ZP:a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.opt((String) null);
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "wa";
      String string1 = "gettoString";
      JSONObject jSONObject2 = jSONObject1.put("gettoString", 3173L);
      JSONObject jSONObject3 = jSONObject0.put("wa", 545L);
      String string2 = "ishashCode";
      String string3 = "ishashCode";
      jSONObject2.opt("gettoString");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double double1 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Long long0 = new Long(2029);
      linkedList0.add("$0:RxSMj%");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      jSONObject0.put("$0:RxSMj%", (Collection) linkedList1);
      jSONObject0.accumulate("$0:RxSMj%", (Object) null);
      String string0 = JSONObject.quote("$0:RxSMj%");
      assertEquals("\"$0:RxSMj%\"", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.0449311748495913
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 799.7802F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<JSONObject, Float> hashMap1 = new HashMap<JSONObject, Float>();
      Float float0 = new Float(0.0);
      hashMap1.put(jSONObject0, float0);
      JSONObject jSONObject1 = jSONObject0.append("J(jaF4NaZP]Jr?5", (Object) null);
      jSONObject1.getJSONArray("J(jaF4NaZP]Jr?5");
      Byte byte0 = new Byte((byte) (-53));
      JSONObject jSONObject2 = jSONObject0.putOpt("wheel.json.JSONTokener", byte0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float float0 = new Float(1054.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = 2925;
      String string0 = jSONObject0.toString(123, 2925);
      // Undeclared exception!
      JSONObject.quote(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$Null", true);
      Short short0 = new Short((short)65);
      jSONObject1.put("iscompare", (Object) short0);
      JSONObject jSONObject2 = jSONObject1.accumulate("wheel.json.JSONObject$Null", "wheel.json.JSONObject$Null");
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("getnotify", 1L);
      jSONObject0.getDouble("getnotify");
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Float float0 = new Float((-55.90876513135023));
      JSONObject.testValidity(float0);
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'M';
      charArray0[2] = ']';
      charArray0[3] = 'E';
      charArray0[4] = 'r';
      charArray0[5] = 'a';
      charArray0[6] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.append((CharSequence) charBuffer0, 4, 4);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.accumulate("5kNIS+kl_k!1A\"+", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("0Ff8BWn}", (-809));
      assertEquals((-809), int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(10);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("26CQ\"$o[Wh)J|ogn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 26CQ\"$o[Wh)J|ogn
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 582L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.2852930241200995
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 65;
      jSONObject0.toString((-3161), 65);
      jSONObject0.toString(4, 3253);
      Float.min((-1395.607F), 1606.4265F);
      JSONObject.valueToString(hashMap0, 65, 65);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6354502583387052
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1649L));
      linkedList0.add(long0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter(46);
      StringWriter stringWriter1 = stringWriter0.append('t');
      jSONObject0.write(stringWriter1);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "to";
      JSONObject jSONObject1 = jSONObject0.put("to", (Object) "to");
      try { 
        jSONObject1.getInt("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)67);
      jSONObject0.put("[htSt3!,b", (Object) short0);
      jSONObject0.optJSONArray("getvalueOf");
      String string0 = jSONObject0.optString("[htSt3!,b");
      assertNotNull(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("vu2}b5/hjM", true);
      jSONObject1.optString("vu2}b5/hjM", "nv4y$8");
      Byte byte0 = new Byte((byte)113);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) byte0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$Null", true);
      Short short0 = new Short((short)65);
      jSONObject1.put("iscompare", (Object) short0);
      boolean boolean0 = jSONObject0.isNull("wheel.json.JSONObject$Null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(2207, 13);
      jSONArray0.put(2207, (double) 13);
      jSONArray0.optBoolean(13, true);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("kp~g\"\"4mQ myGK", 8);
      assertEquals(8, int0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString((-282), (-282));
      String string0 = JSONObject.quote("LAx9xTS^]N,");
      assertEquals("\"LAx9xTS^]N,\"", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      Long long0 = new Long(55);
      jSONObject1.optString("", "");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.quote("A JSONArray text must start with '['");
      assertEquals("\"A JSONArray text must start with '['\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("A JSONArray text must start with '['", (-1640L));
      assertEquals((-1640L), long0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("ha", 1819L);
      jSONObject1.optInt("ZnGDEY(m$[2Q`<\"");
      Long long0 = new Long(2780L);
      jSONObject0.has("ZnGDEY(m$[2Q`<\"");
      jSONObject0.keys();
      JSONObject jSONObject2 = new JSONObject(long0);
      jSONObject0.optLong("ha");
      try { 
        jSONObject1.getJSONArray("fRrO.x!Vg:ZR[w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fRrO.x!Vg:ZR[w\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.iterator();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Byte byte0 = new Byte((byte)84);
      JSONObject jSONObject1 = jSONObject0.accumulate("put", byte0);
      long long0 = jSONObject1.getLong("put");
      assertEquals(84L, long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject.valueToString(hashMap0);
      boolean boolean0 = true;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of gettoString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(1825, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", (-2911L));
      int int0 = jSONObject1.optInt("' and instead saw '");
      assertEquals((-2911), int0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1649L));
      Long.getLong("3364.7771197310", 0L);
      linkedList0.add(long0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('}');
      JSONObject.valueToString(object0, (-439), 1982);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "null", 1982, 1982);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "] is not a Boolean.";
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 1819L);
      int int0 = new Integer(2029);
      Long long0 = new Long(2029);
      jSONObject0.has("] is not a Boolean.");
      jSONObject1.keys();
      try { 
        jSONObject1.getJSONArray("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wa", 3173L);
      int int0 = jSONObject1.optInt("wa");
      assertEquals(3173, int0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1649L));
      linkedList0.add(long0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.iterator();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      Object object1 = JSONObject.NULL;
      Float float0 = new Float((double) (-1649L));
      jSONObject0.put("toS", (Object) float0);
      jSONObject0.getInt("toS");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject((Object) "Rt}30w}w6y!@R.r");
      jSONObject0.toString(45, 45);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("vKc{CE~*R$!*1^X]d\"`");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(45, 3838);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      String string1 = JSONObject.quote("=[89X<2");
      assertEquals("\"=[89X<2\"", string1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("\n", "\n");
      Object object0 = new Object();
      jSONObject0.putOpt("ha", object0);
      Object object1 = JSONObject.NULL;
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.getString("ha");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getadd", 0.0);
      jSONObject0.getDouble("getadd");
      Float float0 = new Float(4020.1F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("W>;SnM ;7g=ygA5/R9");
      assertEquals("", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.9365837568143216
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(123, 1115.4951F);
      jSONObject0.toString(45, 45);
      String string0 = JSONObject.quote("di");
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                          \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                          \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                          \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                             }");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      String string1 = jSONObject1.toString(65, (-5105));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "{<Q;)e";
      JSONTokener jSONTokener0 = new JSONTokener("{<Q;)e");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {<Q;)e
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.067165376582768
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      jSONObject0.put("flo", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("qgP]#KQAL_", 0L);
      jSONObject1.toString();
      jSONObject1.put("flo", true);
      try { 
        jSONObject0.getBoolean("qgP]#KQAL_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qgP]#KQAL_\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "=k6P+d";
      JSONObject jSONObject1 = jSONObject0.put("=k6P+d", true);
      jSONObject1.get("=k6P+d");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("=k6P+d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of =k6P+d
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Boolean boolean0 = Boolean.TRUE;
      linkedList0.removeFirstOccurrence(boolean0);
      Long long0 = new Long((-1649L));
      linkedList0.add(long0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.putOpt("va", "va");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 3247, 2017);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 3364.777119731;
      JSONObject.doubleToString(3364.777119731);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("v$kGgGiCb", "in");
      assertEquals("in", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean boolean0 = new Boolean("wheel.json.JSONObject$1");
      int int0 = (-2562);
      JSONObject.valueToString(boolean0, 87, 87);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject$1");
      jSONTokener0.skipTo('W');
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONObject$1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("l=q{[tz\"fO", (double) (-1113));
      assertEquals((-1113.0), double0, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Boolean.valueOf("({he.aSMb\"kO#4H>VqI");
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5390294797027222
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.quote("7/^XJ}ZhM=`';)bTeze");
      JSONObject.quote("\"7/^XJ}ZhM=`';)bTeze\"");
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("7/^XJ}ZhM=`';)bTeze", 1L);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      jSONObject0.optJSONObject("50QaWJO L!*|m\"3e");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7835547417063715
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 1819L);
      jSONObject1.optInt("q G0/I");
      Long long0 = new Long(2029);
      jSONObject0.has("q G0/I");
      jSONObject1.keys();
      try { 
        jSONObject1.getJSONArray("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0735428464085233
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float((-55.90876513135023));
      Float.max(0.0F, 0.0F);
      JSONObject.testValidity(float0);
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'M';
      charArray0[2] = ']';
      charArray0[3] = 'E';
      charArray0[4] = 'r';
      charArray0[5] = 'a';
      charArray0[6] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 4, 4);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      StringWriter stringWriter3 = stringWriter2.append('X');
      jSONObject0.write(stringWriter3);
      assertEquals("qM]EraTX{}", stringWriter2.toString());
      assertEquals("qM]EraTX{}", stringWriter3.toString());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.put("%D<~0'__b Owu87-T", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, 559);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>();
      Long long0 = new Long(1496L);
      hashMap0.put((Short) null, long0);
      Short short0 = new Short((short)5);
      Long long1 = new Long((short)5);
      BiFunction<Object, Long, Long> biFunction0 = (BiFunction<Object, Long, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(short0, long1, biFunction0);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.2852930241200993
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      jSONObject0.put("*m{crD.", false);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Double double0 = new Double((-2.0261163892153005));
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((-1.0));
      hashMap0.put("Expected '", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("}eMme=m7=/ZxD0Ak", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>();
      Short short0 = new Short((short)44);
      Long long0 = new Long((short)44);
      Long.getLong("/0!$#5G~9f", (long) (short)44);
      hashMap0.put(short0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0488126818826367
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject.quote("\"FS@fz=/VVbbP <gj?*");
      JSONObject.quote("\"\"FS@fz=/VVbbP <gj?*\"");
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getLong("\"\"FS@fz=/VVbbP <gj?*\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"FS@fz=/VVbbP <gj?*\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = new Double(209.7928);
      Double.sum(209.7928, (-1.0));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.quote("7/^XJ}ZhM=`';)bTeze");
      String string0 = JSONObject.quote("\"7/^XJ}ZhM=`';)bTeze\"");
      Integer integer0 = new Integer(321);
      String string1 = JSONObject.valueToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("Bad value from toJSONString: ");
      Boolean.compare(false, false);
      JSONObject.valueToString(boolean0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(15);
      String string0 = jSONObject0.toString(0, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.putOpt("=W`- +6C}^kP#9q2&", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.1595888143086257
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject.doubleToString(3364.777119731);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("3364.777119731", 0.0);
      Integer integer0 = new Integer((-2556));
      try { 
        Integer.parseUnsignedInt("3364.777119731", 1725);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1725 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (double) 3173L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("JSONArray initial value should be a string or collection or array.");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("q 5G0?/I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q 5G0?/I\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.6264553276101599
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.quote("7/^XJ}ZhM=`';)bTeze");
      JSONObject.quote("\"7/^XJ}ZhM=`';)bTeze\"");
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("7/^XJ}ZhM=`';)bTeze", 1L);
      jSONObject0.optJSONObject("50QaWJO L!*|m\"3e");
      String string1 = jSONObject0.toString(11, 11);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("_=.TSJ", false);
      try { 
        jSONObject0.getBoolean("paKIP>]IA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"paKIP>]IA\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Long long0 = new Long(2029);
      boolean boolean0 = jSONObject0.optBoolean("=pv<", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.quote("7/^XJ}ZhM=`';)bTeze");
      JSONObject.quote("\"7/^XJ}ZhM=`';)bTeze\"");
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float((-2979.2456F));
      hashMap0.put(float0, "_[#~i0");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(117);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.8388353838849918
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1649L));
      linkedList0.add(long0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-1787));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-4129), (-4129));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = JSONObject.valueToString("F8jJDpXx9ipM[zR{D", 2295, 2295);
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "?tYv1-";
      JSONObject.quote("?tYv1-");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString("\"?tYv1-\"");
      boolean boolean0 = true;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.5990147122062977
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 65;
      jSONObject0.toString((-3161), 65);
      hashMap0.put("7\"?DXTl}-_UM@", jSONObject0);
      jSONObject0.toString(4, 3253);
      Float.min((-1395.607F), 1606.4265F);
      JSONObject.valueToString(hashMap0, 65, 65);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("to", (Object) "to");
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote("2?{_RFv");
      assertEquals("\"2?{_RFv\"", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", true);
      try { 
        jSONObject1.getDouble("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.9998704205025659
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject.quote("");
      JSONObject.quote("\"\"");
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"\"\"");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.7405117043237692
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1649L));
      linkedList0.add(long0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.iterator();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", jSONArray1);
      try { 
        jSONObject1.getLong("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.3502202142205
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.quote("7/^XJ}ZhM=`';)bTeze");
      JSONObject.quote("\"7/^XJ}ZhM=`';)bTeze\"");
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("7/^XJ}ZhM=`';)bTeze", 1L);
      jSONObject0.optJSONObject("50QaWJO L!*|m\"3e");
      try { 
        jSONObject0.getDouble("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.3502202142205
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.quote("7/^XJ}ZhM=`';)bTeze");
      JSONObject.quote("\"7/^XJ}ZhM=`';)bTeze\"");
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("7/^XJ}ZhM=`';)bTeze", 1L);
      jSONObject0.optJSONObject("50QaWJO L!*|m\"3e");
      try { 
        jSONObject0.getBoolean("7/^XJ}ZhM=`';)bTeze");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7/^XJ}ZhM=`';)bTeze\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.6173328283632542
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wa", 3173L);
      jSONObject0.opt("kJYhZvA[)&|]}?L/");
      jSONObject1.optBoolean("kJYhZvA[)&|]}?L/");
      Short short0 = new Short((short)669);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject1.append("wa", jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wa] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.349792396172401
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject.doubleToString(3364.777119731);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.46341355882643
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject.quote("");
      JSONObject.quote("\"\"");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"\"";
      stringArray0[1] = "\"\"\"\"";
      stringArray0[2] = "\"\"\"\"";
      stringArray0[3] = "no";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.0986122886681098
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Double double0 = new Double((-2128.0839506));
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("false", double0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer integer0 = new Integer((-2177));
      String string0 = JSONObject.valueToString(integer0, (-2177), (-2177));
      assertNotNull(string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject.quote("\"xS@fz=/VVbbP <gj?*");
      JSONObject.quote("\"\"xS@fz=/VVbbP <gj?*\"");
      Short short0 = new Short((short) (-918));
      JSONObject.numberToString(short0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "java.lang.Short@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 4317, 12);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble(",\n", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optDouble((-755));
      double double0 = jSONObject0.optDouble("[PQC$- N");
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONArray0.optDouble(12);
      JSONArray jSONArray1 = jSONArray0.put((-1));
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.285150884646584
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject.quote("");
      JSONObject.quote("\"\"");
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      try { 
        jSONObject0.getString("o-fJ*4hD}}8<QFqYO0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o-fJ*4hD}}8<QFqYO0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("ha", object0);
      assertEquals(1, jSONObject1.length());
      
      jSONObject1.remove("ha");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("[");
      assertNull(object0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.9404479886553264
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject.doubleToString(3364.777119731);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", (Object) "] is not a Boolean.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt((-190), 498);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1649L));
      linkedList0.add(long0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      jSONObject0.put("aI@", (Map) hashMap0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.1063911301690834
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("}eMme=m7=/ZxD0Ak", 1L);
      jSONObject1.toJSONArray((JSONArray) null);
      try { 
        jSONObject1.getBoolean("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.8222900060250078
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.quote("7/^XJ}ZhM=`';)bTeze");
      JSONObject.quote("\"7/^XJ}ZhM=`';)bTeze\"");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      try { 
        jSONObject0.getJSONObject("iWU_f'9oN'q?$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iWU_f'9oN'q?$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject.doubleToString(3364.777119731);
      Short short0 = new Short((short) (-1809));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "3364.777119731";
      stringArray0[1] = "3364.777119731";
      stringArray0[2] = "3364.777119731";
      stringArray0[3] = "Substring bounds error";
      stringArray0[4] = "3364.777119731";
      stringArray0[5] = "3364.777119731";
      stringArray0[6] = "3364.777119731";
      stringArray0[7] = "3364.777119731";
      stringArray0[8] = "3364.777119731";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "3364.777119731");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "3364.777119731", 1417, (int) (short) (-1809));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject.quote("({he.aSMb\"kO#4H>VqI");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"({he.aSMb\"kO#4H>VqI\"";
      String string0 = "6p\"a";
      stringArray0[1] = "6p\"a";
      stringArray0[2] = "({he.aSMb\"kO#4H>VqI";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = JSONObject.quote(">(}PnEHP``g");
      assertEquals("\">(}PnEHP``g\"", string0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject.quote("({he.aSMb\"kO#4H>VqI");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"({he.aSMb\"kO#4H>VqI\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"({he.aSMb\"kO#4H>VqI\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject.quote("({he.aSMb\"kO#4H>VqI");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("({he.aSMb\"kO#4H>VqI");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ({he.aSMb\"kO#4H>VqI
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject.quote("\"FS@fz=/VVbbP <gj?*");
      JSONObject.quote("\"\"FS@fz=/VVbbP <gj?*\"");
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }
}
