/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 15:12:30 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 4294967294 ]/0B", string0);
      
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      range0.equals(range1);
      range0.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6565407713474296
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      long long0 = 9223372036854775807L;
      Range range1 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32769 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1588L);
      Long long0 = new Long((-1210L));
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.388499098720135
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775791L), (-9223372036854775791L));
      List<Range> list0 = range0.complement(range0);
      range0.equals(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-9223372036854775791L), (-9223372036854775791L));
      Range range1 = range_Builder0.build();
      range1.complementFrom(list0);
      range1.toString();
      long long0 = new Long((-9223372036854775791L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.268163943478719
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-956L), (-956L));
      range_Builder0.contractBegin((-124L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.complement(range1);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -957 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.386371757896165
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1257L), (-1257L));
      List<Range> list0 = range1.split(255L);
      // Undeclared exception!
      try { 
        range0.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1257 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.272582200529006
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = (-9223372036853061065L);
      Range range0 = Range.of((-9223372036853061065L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.iterator();
      Range range1 = Range.of((-9223372036853061065L), 0L);
      Long long1 = new Long((-9223372036853061065L));
      range0.startsBefore(range1);
      Object object0 = new Object();
      Range range2 = Range.of(range_CoordinateSystem0, (long) long1, 0L);
      range1.intersects(range0);
      // Undeclared exception!
      range2.split(1724L);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.equals(range1);
      Long long0 = new Long(98L);
      assertEquals(98L, (long)long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5887800099194003
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(32767L, 32767L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.split(32767L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range.Comparators.values();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(767L, 9223372036854775807L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      boolean boolean0 = range0.equals(spliterator0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4411L, 9223372036854775807L);
      Long long0 = new Long((-1210L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long((-9223372036854775338L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967295L, 9223372036854775807L);
      Long long0 = new Long(3260L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      boolean boolean1 = range0.equals("Lv2{T5Js,0pm h`'c7(");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1357893557590493
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-9223372036853061065L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.iterator();
      Range range1 = Range.of((-9223372036853061065L), 0L);
      Long long0 = new Long((-9223372036853061065L));
      range0.startsBefore(range1);
      Object object0 = new Object();
      Range range2 = Range.of(range_CoordinateSystem0, (long) long0, 0L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(range2.isEmpty());
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775789L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775789L), (-3134L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775789L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775789L), (-9223372036854775789L));
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.split((-1972L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775020L);
      range0.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.of(4294967324L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of((-128L), (-2749L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.spliterator();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775769L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      Long long0 = new Long(3260L);
      boolean boolean0 = range0.equals((Object) null);
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4420466346688325
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      List<Range> list0 = range0.split(4294967294L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-105L), 126L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2046944964042234
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-956L), (-956L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = range_Builder0.build();
      boolean boolean0 = range0.intersects(range1);
      range0.getBegin(range_CoordinateSystem1);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-956L), long0);
      
      Range.of((-491L));
      boolean boolean1 = range2.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertSame(range2, range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.of((-951L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(0L, 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4957257135099074
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-2739L), (-344L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-344L), 1L);
      range0.equals(range1);
      List<Range> list0 = range1.split(1L);
      // Undeclared exception!
      range1.complementFrom(list0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-105L), 1941L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.expandBegin(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.892012919857194
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65479L, 65479L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 65479 .. 65479 ]/SB", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775803L));
      range0.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1375996036677365
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036853061080L), (-9223372036853061080L));
      range0.complement(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775789L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -9223372036854775788 .. -9223372036854775788 ]/RB", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.892632114903634
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(255L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.891722433292198
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      List<Range> list0 = range0.split(1246L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Long long1 = new Long(9223372036854775807L);
      Object object0 = new Object();
      range0.toString();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = (-1979L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 9223372036854775806 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 9223372036854775806 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775020L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.796837966557264
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(3564L);
      long long0 = range0.getEnd();
      assertEquals(3564L, long0);
      
      Range range1 = Range.of(3564L);
      boolean boolean0 = range1.equals(range0);
      Object object0 = new Object();
      boolean boolean1 = range1.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6910517378300467
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-957L));
      Range range1 = Range.of((-957L));
      Long long0 = new Long(127L);
      range1.equals(long0);
      range0.equals(range1);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1360270265849555
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 3149L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-9223372036853061066L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2026738570161886
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775805L);
      Range range1 = Range.ofLength(2147483647L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1667L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-956L), (-956L));
      Range range0 = range_Builder0.build();
      range0.isEmpty();
      Long long0 = new Long(3260L);
      assertEquals(3260L, (long)long0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.979024296846825
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-957L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-957L), (-957L));
      Long long0 = new Long(127L);
      boolean boolean0 = range1.equals(long0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-1839L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1839L), 1571L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-1445L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-527L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -528 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(4505L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.059202231024756
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-956L), (-491L));
      range0.getBegin();
      Range range1 = Range.of((-956L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("cd iAyT/_p7Zd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.cd iAyT/_p7Zd
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.ofLength(1L);
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 297L, 297L);
      Long long0 = new Long(297L);
      range0.equals(range_CoordinateSystem0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(2135L);
      range0.getBegin();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8936217685248664
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-956L), (-956L));
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 65535L, 65535L);
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder4.build();
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.9819126378119534
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-9223372036853061065L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of((-9223372036853061065L), 0L);
      range1.getBegin(range_CoordinateSystem0);
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(0L, long0);
      
      boolean boolean0 = range1.endsBefore(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object0 = new Object();
      Range range2 = Range.of(range_CoordinateSystem1, (-9223372036853061064L), 0L);
      boolean boolean1 = range2.isSubRangeOf(range1);
      boolean boolean2 = range0.startsBefore(range2);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.79709058749954
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-227L), 1613L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), 346L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.equals("Lv2{T5Js,0pm h`'c7(");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.058620243537487
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(255L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 255, -9223372036854775555 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9847794556898073
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(336L, 65535L);
      Object object0 = new Object();
      range0.equals(object0);
      List<Range> list0 = range0.split(745L);
      assertEquals(88, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      List<Range> list0 = range0.split(255L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list1.size());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.9807049691157324
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-424L), 9223372036854775020L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775020L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2001 would make range [9223372036854774596 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775020L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775020L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.split(862L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(range0.isEmpty());
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(9223372032559808514L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.893222375602109
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(1L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.startsBefore(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3647L), 4294967324L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.1351813606230103
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(2370L, 2370L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2370L, 2370L);
      Long long0 = new Long(2370L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range1.intersects(range0);
      Long long1 = new Long(2370L);
      range0.equals(range1);
      range1.equals(range_CoordinateSystem0);
      range1.equals(range0);
      Long long2 = new Long(856L);
      Long long3 = new Long(98L);
      // Undeclared exception!
      try { 
        Range.parseRange("length can not be less than 0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse length can not be less than 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.8929447777488657
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-9223372036853061065L), 0L);
      Range range1 = Range.of((-9223372036853061065L), 0L);
      range1.endsBefore(range0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.692876751249263
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      Object object0 = new Object();
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertSame(range0, range1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(583L);
      boolean boolean0 = range0.equals("!epj3].jQh4T{$SG}G");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1581L, 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2370L, 9223372036854774454L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.893133368036466
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(1L);
      String string0 = range0.toString();
      assertEquals("[ 1 .. 1 ]/0B", string0);
      
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2L, long0);
      
      Range range1 = Range.ofLength(1948L);
      range1.isSubRangeOf(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.133562824120753
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-956L), (-956L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-956L), long0);
      
      Range range1 = Range.of((-491L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-1494L));
      List<Range> list0 = range0.split(127L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.9847485720137366
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(774L);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1397L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.equals(range_Builder0);
      range0.equals("td1");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[ 0 .. -1 ]/0B", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ 0 .. -1 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-105L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3730L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-2147483627L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.979024296846825
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32793L), (-32793L));
      Range range1 = Range.of(range_CoordinateSystem0, (-32793L), (-32793L));
      range1.intersection(range0);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range0));
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32768L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
      
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775020L);
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1549L;
      long long1 = 3099L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1549L, 3099L);
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("o", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse o into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(485L);
      range0.equals((Object) null);
      long long0 = (-6313L);
      // Undeclared exception!
      try { 
        Range.of(485L, (-6313L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-2016L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(1955L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1341L, (-770L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.3303562011990735
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.ofLength(0L);
      Range range0 = Range.ofLength(0L);
      Range.ofLength(1174L);
      long long0 = 9223372036854775806L;
      Range range1 = Range.ofLength(9223372036854775806L);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(3746L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range2.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 0L);
      range1.complement(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.7959184263273786
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.toString();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      range0.getEnd();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4821L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.330700781242146
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      range0.equals("");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.0634916315140157
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-9223372036853061080L), (-9223372036853061080L));
      range0.complement(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-158L));
      range0.startsBefore(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(29L);
      long long0 = range0.getLength();
      assertEquals(29L, long0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(1278L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range0.asRange();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4294967295L;
      range_Builder0.contractEnd((-128L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 1L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), (-2523L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("Residue Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Residue Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-811L));
      boolean boolean0 = range0.equals("]Xpu,Q?");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.794892785301738
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.ofLength(1278L);
      long long0 = range0.getEnd();
      assertEquals(1277L, long0);
      
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.8906488959867764
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036853061080L), 1407L);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("[ -9223372036853061080 .. 1406 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.build();
      Long long1 = new Long(4294967295L);
      String string0 = "faqW8f#yWi{1V";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("faqW8f#yWi{1V", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse faqW8f#yWi{1V into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.095924398920587
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder1.contractBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("b7o", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse b7o into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = 949L;
      Range.Builder range_Builder0 = new Range.Builder(949L, 949L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(949L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.386371757896165
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.ofLength(774L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.of((-2077L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 147L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.8943491735075906
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      range0.getLength();
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("&MoN+mcJ/", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse &MoN+mcJ/ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.2688293237435406
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(1803L);
      Range range1 = Range.of(3942L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.7989354579575494
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of((-491L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of((-491L));
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      Long long0 = new Long((-1775L));
      boolean boolean0 = range2.equals(long0);
      assertFalse(boolean0);
      
      long long1 = range2.getEnd();
      assertEquals((-491L), long1);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.795338716182451
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.ofLength(0L);
      range1.complement(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("can not parse ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.can not parse 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.ofLength(1830L);
      long long0 = range0.getEnd();
      assertEquals(1829L, long0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1085L, 1085L);
      Range range0 = range_Builder0.build();
      range0.equals((Object) null);
      Long long0 = new Long(2147483647L);
      assertEquals(2147483647L, (long)long0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(2611L, (-9223372036854775576L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775576 would make range [2611 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.parseRange("[ 0 .. -1 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ 0 .. -1 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.6890278560247443
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.split(544L);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1868L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.327595366528126
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775803L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(329L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-1693L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      range_Builder1.expandEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, 931L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long long0 = 774L;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-9223372036854774310L));
      long long1 = 0L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(156L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775020L);
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 65535L;
      long long1 = (-2128L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-2128L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2129 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854772889L);
      range_Builder0.shift((-34L));
      range_Builder0.expandBegin(9223372036854772889L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 930L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-2197L), (-2197L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(626L, 626L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Q5", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q5 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range range0 = Range.of((-709L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2112L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
